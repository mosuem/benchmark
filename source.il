B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax
v4 <- StaticCall:10( get:_startIndex@9040228<0> v2, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax, rax <- fp[-2]
ParallelMove rcx <- rcx
v5 <- BinaryInt64Op(+ [tr], v4, v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- rcx
Branch if RelationalOp(<, v3, v47 T{_Smi}) T{bool} goto (5, 3)
B3
ParallelMove rdi <- fp[-1]
v9 <- StaticCall:22( get:_endIndex@9040228<0> v2, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax, rsi <- fp[-3]
Branch if RelationalOp(>=, v5, v9) T{bool} goto (6, 7)
B7
ParallelMove rax <- fp[-1]
v11 <- LoadField(v2 . _iterable@9040228 {final}) T{Iterable<X0>}
v48 <- LoadClassId(<non-smi> v11) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- rsi
v12 <- DispatchTableCall( cid=v48 Iterable.elementAt<0>, v11, v5) T{*?}
ParallelMove rax <- rax
DartReturn:58(v12 T{X0?})
B5
ParallelMove rax <- fp[-1]
ParallelMove  goto:38 B4
B6
ParallelMove rax <- fp[-1]
ParallelMove  goto:42 B4
B4
MoveArgument(sp[0] <- v2)
v14 <- StaticCall:46( get:length<0> v2, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v46 <- UnboxInt64([non-speculative], v14 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- rax
v13 <- AllocateObject:44(cls=IndexError, <not-aliased>) T{IndexError}
ParallelMove rcx <- rax, rax <- fp[-3]
StoreField(v13 T{IndexError} . length = v46 T{int} <int64>, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v13 T{IndexError} . name = v25 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v13 T{IndexError} . message = v26 T{_OneByteString}, NoStoreBarrier)
ParallelMove rdx <- fp[-2]
v45 <- BoxInt64(v3 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v13 T{IndexError} . invalidValue = v45 T{int}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v13 T{IndexError} . _hasValue@0150898 = v8 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:50(v13)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v4 <- LoadField(v2 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v6 <- BinarySmiOp:4(- [tr], v4, v5) [-2, 4611686018427387901] T{_Smi}
v7 <- LoadIndexedUnsafe(rbp[v6 + 24]) T{*?}
v8 <- LoadIndexedUnsafe(rbp[v6 + 16]) T{*?}
Branch if RelationalOp:6(<=, v9, v6) T{bool} goto (2, 3)
B2
v15 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 8]) T{String??}
Branch if RelationalOp:20(<=, v5, v6 T{_Smi}) T{bool} goto (5, 6)
B5
v17 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 0]) T{*?}
ParallelMove rax <- rsi, rsi <- rdi goto:36 B8
B6
ParallelMove rcx <- rsi goto:30 B4
B3
ParallelMove rcx <- C goto:18 B4
B4
ParallelMove rax <- rcx, rsi <- C goto:34 B8
B8
ParallelMove rax <- rax
StoreField(v7 . name = v13)
ParallelMove rax <- rsi
StoreField(v7 . message = v14)
ParallelMove rax <- rbx
StoreField(v7 . invalidValue = v8)
StoreField(v7 . _hasValue@0150898 = v11, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:46(v0)
B0
B1
Enter frame
PrologueOffset = 0
v4 <- LoadField(v2 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v6 <- BinarySmiOp:4(- [tr], v4, v5) [-1, 4611686018427387902] T{_Smi}
v7 <- LoadIndexedUnsafe(rbp[v6 + 16]) T{*?}
Branch if RelationalOp:6(<=, v5, v6) T{bool} goto (2, 3)
B2
v14 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 8]) T{*?}
Branch if RelationalOp:20(<=, v15, v6 T{_Smi}) T{bool} goto (5, 6)
B5
v17 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 0]) T{String??}
ParallelMove rax <- rbx, rbx <- rsi goto:36 B8
B6
ParallelMove rcx <- rbx goto:30 B4
B3
ParallelMove rcx <- C goto:18 B4
B4
ParallelMove rax <- rcx, rbx <- C goto:34 B8
B8
ParallelMove rax <- rax
StoreField(v7 . message = v11)
ParallelMove rax <- rbx
StoreField(v7 . name = v12)
StoreField(v7 . _hasValue@0150898 = v13, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:46(v0)
B0
B1
Enter frame
PrologueOffset = 0
v4 <- LoadField(v2 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v6 <- BinarySmiOp:4(- [tr], v4, v5) [-4, 4611686018427387899] T{_Smi}
v7 <- LoadIndexedUnsafe(rbp[v6 + 40]) T{*?}
v8 <- LoadIndexedUnsafe(rbp[v6 + 32]) T{num}
v9 <- LoadIndexedUnsafe(rbp[v6 + 24]) T{int??}
v10 <- LoadIndexedUnsafe(rbp[v6 + 16]) T{int??}
Branch if RelationalOp:6(<=, v11, v6) T{bool} goto (2, 3)
B2
v19 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 8]) T{String??}
Branch if RelationalOp:20(<=, v20, v6 T{_Smi}) T{bool} goto (5, 6)
B5
v22 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 0]) T{String??}
ParallelMove rdi <- rdi, rcx <- r8 goto:36 B8
B6
ParallelMove rcx <- rdi goto:30 B4
B3
ParallelMove rcx <- C goto:18 B4
B4
ParallelMove rdi <- rcx, rcx <- C goto:34 B8
B8
ParallelMove rax <- rax
StoreField(v7 . start = v9)
ParallelMove rax <- rsi
StoreField(v7 . end = v10)
Branch if StrictCompare:44(===, v16, v0) goto (9, 10)
B9
ParallelMove rsi <- C goto:54 B11
B10
ParallelMove rsi <- rcx goto:56 B11
B11
ParallelMove rax <- rdi
StoreField(v7 T{ArgumentError} . name = v15 T{String??})
ParallelMove rax <- rsi
StoreField(v7 T{ArgumentError} . message = v17 T{String?})
ParallelMove rax <- rbx
StoreField(v7 T{ArgumentError} . invalidValue = v8 T{num})
StoreField(v7 T{ArgumentError} . _hasValue@0150898 = v13 T{bool}, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:60(v0)
B0
B1
ParallelMove rcx <- C
ParallelMove rax <- sp[1], rdx <- sp[2]
StoreField(v2 T{RangeError} . message = v3 T{*?})
StoreField(v2 T{RangeError} . _hasValue@0150898 = v10 T{bool}, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:12(v0)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _iterable@9040228 {final}) T{Iterable<X0>}
v22 <- LoadClassId(<non-smi> v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v4 <- DispatchTableCall( cid=v22 Iterable.length<0>, v3) T{int}
ParallelMove rax <- rax, rcx <- fp[-1]
v5 <- LoadField(v2 . _endOrLength@9040228 {final}) T{int??}
Branch if StrictCompare:16(===, v5, v0) goto (5, 3)
B5
B3
ParallelMove rcx <- rax
v15 <- UnboxInt64([non-speculative], v4 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rdx <- rdx
v18 <- UnboxInt64([non-speculative], v5 T{int?}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v18 T{int?}, v15 T{_Smi}) T{bool} goto (6, 7)
B6
B4
ParallelMove rax <- rax
v16 <- UnboxInt64([non-speculative], v4 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rax <- rax
DartReturn:40(v16 T{_Smi})
B7
ParallelMove rax <- rdx
DartReturn:44(v18 T{int?})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _iterable@9040228 {final}) T{Iterable<X0>}
v15 <- LoadClassId(<non-smi> v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v4 <- DispatchTableCall( cid=v15 Iterable.length<0>, v3) T{int}
ParallelMove rax <- rax, rcx <- fp[-1]
v5 <- LoadField(v2 . _start@9040228 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v13 <- UnboxInt64([non-speculative], v4 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
Branch if RelationalOp(>, v5, v13 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- rax
DartReturn:26(v13 T{_Smi})
B4
ParallelMove rax <- rdx
DartReturn:32(v5 T{int})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . _source@9040228 {final}) T{_GrowableList}
v15 <- LoadField(v4 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v19 <- UnboxInt64([non-speculative], v15) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:10(v19 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
v17 <- LoadField(v4 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v21 <- LoadIndexed:10([_List] v17, v3 T{int}) T{*?}
v6 <- LoadField(v2 . _f@9040228 {final}) T{(dynamic, C1X0) => C1X1}
MoveArgument(sp[1] <- v6)
MoveArgument(sp[0] <- v21 T{X0})
ParallelMove rax <- rax
v7 <- ClosureCall:18( closure=v6<0>, v6, v21 T{X0}) T{*?}
ParallelMove rax <- rax
DartReturn:20(v7)
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . _iterable@9040228 {final}) T{Iterable<X0>}
v36 <- LoadClassId(<non-smi> v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rdx
v4 <- DispatchTableCall( cid=v36 Iterable.length<0>, v3) T{int}
ParallelMove rax <- rax, rcx <- fp[2]
v5 <- LoadField(v2 . _start@9040228 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v28 <- UnboxInt64([non-speculative], v4 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
Branch if RelationalOp(>=, v5, v28 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:26(v14)
B4
v8 <- LoadField(v2 . _endOrLength@9040228 {final}) T{int??}
Branch if StrictCompare:32(===, v8, v0) goto (7, 5)
B7
B5
ParallelMove rsi <- rsi
v29 <- UnboxInt64([non-speculative], v8 T{int?}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v29 T{int?}, v28 T{_Smi}) T{bool} goto (8, 9)
B8
B6
ParallelMove rcx <- rax
v13 <- BinaryInt64Op(- [tr], v28 T{_Smi}, v5 T{int}) [-9223372036854775808, 9223372036854775807] int64
v31 <- BoxInt64(v13) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
DartReturn:60(v31 T{int})
B9
ParallelMove rsi <- rsi
v11 <- BinaryInt64Op(- [tr], v29 T{int?}, v5 T{int}) [-9223372036854775808, 9223372036854775807] int64
v32 <- BoxInt64(v11) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
DartReturn:68(v32 T{int})
CheckStackOverflowSlowPath
B0
B1
ParallelMove rcx <- sp[1]
v3 <- LoadField(v2 . _source@9040228 {final}) T{_GrowableList}
v9 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
DartReturn:14(v9 T{_Smi})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
v3 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx
v4 <- AllocateObject:10(cls=ListIterator, v3, <not-aliased>) T{ListIterator}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v4 T{ListIterator} . _iterable@9040228 = v2 T{ListBase<X0>}, NoStoreBarrier)
v35 <- LoadClassId(v2) [89, 564] int64
Branch if TestRange:10(v35 in [89-90]) goto (6, 13)
B6
v18 <- LoadField(v2 T{_Array<X0>} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rbx <- rbx
v46 <- UnboxInt64([non-speculative], v18) [0, 576460752303423487] int64
ParallelMove rdx <- rbx goto:10 B15
B13
Branch if EqualityCompare:10(v35 == v36) goto (8, 14)
B8
v25 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v47 <- UnboxInt64([non-speculative], v25) [0, 576460752303423487] int64
ParallelMove rdx <- rdx goto:10 B15
B14
v32 <- LoadField(v2 T{CodeUnits} . _string@9040228 {final}) T{String}
v42 <- LoadField(v32 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v48 <- UnboxInt64([non-speculative], v42 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdx <- rcx goto:14 B15
B15
StoreField(v4 T{ListIterator} . _length@9040228 = v37 <int64>, NoStoreBarrier)
StoreField(v4 T{ListIterator} . _index@9040228 = v49 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v4)
B0
B6
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[3]
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- fp[2], rdx <- rdx, rcx <- C
t0 <- AssertAssignable:10(v3, v4, 'value', instantiator_type_args(v5), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[3]
v20 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v25 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v26 <- LoadField(v25 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v34 <- UnboxInt64([non-speculative], v20 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-1] <- rcx
ParallelMove rbx <- rbx
v35 <- UnboxInt64([non-speculative], v26 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v34 T{_Smi} == v35 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v2, using unchecked entrypoint)
ParallelMove  goto:32 B5
B4
B5
ParallelMove rax <- rsi
v12 <- BinaryInt64Op(+ [tr], v34 T{_Smi}, v39 T{_Smi}) [1, 576460752303423488] int64
v36 <- BoxInt64(v12) [1, 576460752303423488] T{_Smi}
StoreField(v2 . GrowableObjectArray.length = v36, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v12 T{_Smi}, v34 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v15 <- LoadField(v2 . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[2]
StoreIndexed:40([_List] v15, v34 T{_Smi}, v3 T{X0?})
ParallelMove rax <- C
DartReturn:42(v0)
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v9 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v10 <- LoadField(v9 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v27 <- UnboxInt64([non-speculative], v10 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rcx <- rcx
v22 <- ShiftInt64Op(<< [tr], v27 T{_Smi}, v25) [0, 1152921504606846974] int64
ParallelMove rcx <- rcx
v20 <- BinaryInt64Op(| [tr], v22 T{int}, v28 T{_Smi}) [0, 1152921504606846975] int64
ParallelMove rdi <- rdi, rsi <- rcx
StaticCall:14( _grow@0150898<0> v2, v20 T{int}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi
v4 <- StaticCall:10( _allocateData@0150898<0> v3, result_type = T{_List}) T{_List}
ParallelMove rsi <- rax, rcx <- fp[-1]
v31 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rdi <- rdi
v43 <- UnboxInt64([non-speculative], v31 T{_Smi}) [0, 576460752303423487] int64
Branch if RelationalOp(>, v43 T{_Smi}, v51 T{_Smi}) T{bool} goto (3, 7)
B3
v18 <- LoadField:46(v2 . GrowableObjectArray.data) T{_List}
v20 <- LoadField:46(v4 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove r9 <- r9
v47 <- UnboxInt64:46([non-speculative], v20) [0, 576460752303423487] int64
ParallelMove r10 <- C goto:46 B6
B6
  Loop 0
CheckStackOverflow:50(stack=0, loop=1)
Branch if RelationalOp(<, v10, v43 T{_Smi}) T{bool} goto (4, 5)
B4
  Loop 0
v52 <- LoadIndexed:40([_List] v18, v10 T{int}) T{X0?}
ParallelMove rax <- r9, rbx <- r10
GenericCheckBound:42(v47 T{_Smi}, v10 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rsi, rax <- rdx
StoreIndexed:42([_List] v4, v10 T{int}, v52 T{X0?})
ParallelMove r10 <- r10
v15 <- BinaryInt64Op(+ [tr], v10 T{int}, v53 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- r10 goto:48 B6
B5
B7
B8
ParallelMove rax <- rsi
StoreField(v2 . GrowableObjectArray.data = v4)
ParallelMove rax <- C
DartReturn:62(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
Branch if EqualityCompare(v2 == v32 T{_Smi}) T{bool} goto (3, 4)
B3
v24 <- LoadStaticField:4(_emptyList@0150898, CallsInitializer) T{_List}
ParallelMove rax <- rax
DartReturn:22(v24 T{_List})
B4
ParallelMove rdi <- rdi
v14 <- BinaryInt64Op(| [tr], v2 T{int}, v33 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v31 <- BoxInt64(v14 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rbx <- C, r10 <- rax
v21 <- CreateArray:10(v0 T{Null?}, v31 T{int}) T{_List}
ParallelMove rax <- rax
DartReturn:30(v21 T{_List})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- C, r10 <- C
v4 <- CreateArray:6(v0, v2) T{_List}
ParallelMove rax <- rax
DartReturn:8(v4)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx
v4 <- AllocateObject:10(cls=ListIterator, v3, <not-aliased>) T{ListIterator}
ParallelMove rdx <- rax, rax <- fp[-1]
ParallelMove fp[-2] <- rdx
StoreField(v4 T{ListIterator} . _iterable@9040228 = v2 T{ListIterable<X0>}, NoStoreBarrier)
v52 <- LoadClassId(v2) [552, 553] int64
Branch if EqualityCompare:10(v52 == v53) goto (6, 18)
B6
v19 <- LoadField(v2 T{MappedListIterable} . _source@9040228 {final}) T{_GrowableList}
v59 <- LoadField(v19 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v74 <- UnboxInt64([non-speculative], v59 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rdx <- rax, rax <- rdx goto:14 B19
B18
v27 <- LoadField(v2 T{SubListIterable} . _iterable@9040228 {final}) T{Iterable<X0>}
v86 <- LoadClassId(<non-smi> v27) int64
MoveArgument(sp[0] <- v27)
ParallelMove rcx <- rbx
v28 <- DispatchTableCall( cid=v86 Iterable.length<0>, v27) T{int}
ParallelMove rax <- rax, rcx <- fp[-1]
v29 <- LoadField(v2 T{SubListIterable} . _start@9040228 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v77 <- UnboxInt64([non-speculative], v28 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
Branch if RelationalOp(>=, v29, v77 T{_Smi}) T{bool} goto (10, 11)
B10
ParallelMove rdx <- C, rax <- fp[-2] goto:26 B19
B11
v32 <- LoadField(v2 T{SubListIterable} . _endOrLength@9040228 {final}) T{int??}
Branch if StrictCompare:32(===, v32, v0 T{Null?}) goto (14, 12)
B14
B12
ParallelMove rbx <- rbx
v78 <- UnboxInt64([non-speculative], v32 T{int?}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v78 T{int?}, v77 T{_Smi}) T{bool} goto (15, 16)
B15
B13
ParallelMove rax <- rax
v37 <- BinaryInt64Op(- [tr], v77 T{_Smi}, v29 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rax <- fp[-2] goto:60 B19
B16
ParallelMove rbx <- rbx
v35 <- BinaryInt64Op(- [tr], v78 T{int?}, v29 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rbx, rax <- fp[-2] goto:68 B19
B19
StoreField(v4 T{ListIterator} . _length@9040228 = v54 T{int} <int64>)
StoreField(v4 T{ListIterator} . _index@9040228 = v80 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . _re@0150898 {final}) T{_RegExp}
ParallelMove fp[-2] <- rax
v4 <- LoadField(v2 . _str@0150898 {final}) T{String}
ParallelMove fp[-1] <- rcx
v6 <- AllocateObject:16(cls=_AllMatchesIterator, <not-aliased>) T{_AllMatchesIterator}
ParallelMove rax <- rax, rcx <- fp[-2]
StoreField(v6 T{_AllMatchesIterator} . _re@0150898 = v3 T{_RegExp}, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreField(v6 T{_AllMatchesIterator} . _str@0150898 = v4 T{String}, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v6 T{_AllMatchesIterator} . _nextIndex@0150898 = v17 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:20(v6)
Checking for concrete finalized classes:
 * 534 (_StringMatch)
 * 559 (_RegExpMatch)
Checking for cid 559 (_RegExpMatch)
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . _input@0150898 {final}) T{String}
ParallelMove fp[-2] <- rax
v4 <- LoadField(v2 . _pattern@0150898 {final}) T{String}
ParallelMove fp[-1] <- rcx
v6 <- AllocateObject:16(cls=_StringAllMatchesIterator, <not-aliased>) T{_StringAllMatchesIterator}
ParallelMove rax <- rax, rcx <- fp[-2]
StoreField(v6 T{_StringAllMatchesIterator} . _input@0150898 = v3 T{String}, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreField(v6 T{_StringAllMatchesIterator} . _pattern@0150898 = v4 T{String}, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v6 T{_StringAllMatchesIterator} . _index@0150898 = v17 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:20(v6)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx
v4 <- AllocateObject:10(cls=_SyncStarIterator, v3) T{_SyncStarIterator}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-3] <- rcx
v5 <- LoadField(v2 . _stateAtStart@4048458) T{_SuspendState?}
ParallelMove fp[-2] <- rdx
CheckNull:14(v5, CastError) T{_SuspendState}
ParallelMove rax <- rdx
v12 <- Call1ArgStub:10(CloneSuspendState(v5 T{_SuspendState})) T{*?}
ParallelMove rax <- rax, rdx <- rax, rcx <- fp[-3]
StoreField(v4 T{_SyncStarIterator} . _state@4048458 = v12 T{_SuspendState})
ParallelMove rax <- rcx
StoreField(v12 T{_SuspendState} . SuspendState.function_data = v4 T{_SyncStarIterator})
ParallelMove rax <- rcx
DartReturn:20(v4)
CheckStackOverflowSlowPath
slow path check null (cast) operation
EnterCallRuntimeFrame
PrologueOffset = 174
CloneSuspendState slow case
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
v5 <- LoadField(v2 . _table@3220832 {final}) T{_Map}
ParallelMove fp[-4] <- rsi
v16 <- LoadField(v5 T{_Map} . LinkedHashBase.data) T{_List}
ParallelMove fp[-3] <- rax
v21 <- LoadField(v5 T{_Map} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
v10 <- LoadField(v2 . _offset@3220832 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-2] <- r8
ParallelMove rcx <- rcx
v23 <- UnboxInt64([non-speculative], v21 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdx <- rdx, fp[-1] <- rcx
v4 <- AllocateObject:10(cls=_CompactIterator, v3) T{_CompactIterator}
ParallelMove rdi <- rax, rsi <- fp[-4], rdx <- fp[-3], rbx <- fp[-1], r8 <- fp[-2], r9 <- C, rax <- rax
ParallelMove fp[-3] <- rax
StaticCall:26( _CompactIterator@3220832.<0> v4, v5, v16 T{_List}, v23 T{_Smi}, v10, v24 T{_Smi})
ParallelMove rax <- fp[-3]
DartReturn:28(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rsi <- rdi, rdx <- rsi, rcx <- rdx, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- rdx
StoreField(v2 . _table@3220832 = v3)
ParallelMove rax <- rcx
StoreField(v2 . _data@3220832 = v4)
StoreField(v2 . _len@3220832 = v5 <int64>)
StoreField(v2 . _offset@3220832 = v6 <int64>)
StoreField(v2 . _step@3220832 = v7 <int64>)
v9 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rdx
v8 <- DispatchTableCall( cid=v9 _HashBase._checkSum<0>, v3) int64
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v2 . _checkSum@3220832 = v8 T{int} <int64>)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v4 <- LoadField(v2 . _data@3220832 {final}) T{_ImmutableList}
ParallelMove fp[-3] <- rax
v5 <- LoadField(v2 . _len@3220832 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-2] <- rcx
v6 <- LoadField(v2 . _offset@3220832 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-1] <- rbx
v8 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx
v9 <- AllocateObject:20(cls=_CompactIteratorImmutable, v8, <not-aliased>) T{_CompactIteratorImmutable}
ParallelMove rax <- rax, rcx <- fp[-3]
StoreField(v9 T{_CompactIteratorImmutable} . _data@3220832 = v4 T{_ImmutableList}, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreField(v9 T{_CompactIteratorImmutable} . _len@3220832 = v5 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreField(v9 T{_CompactIteratorImmutable} . _offset@3220832 = v6 T{int} <int64>, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v9 T{_CompactIteratorImmutable} . _step@3220832 = v23 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:24(v9)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v14 <- LoadField(v2 T{__Float64x2ArrayView&_TypedListView&_Float64x2ListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v191 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v192 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v198 T{_Smi}, v191 T{int}, v192 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove fp[-4] <- rcx
v196 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdx <- rax
ParallelMove fp[-3] <- rdx
v40 <- AllocateTypedData:10(v196 T{int}) T{_Float64x2List}
ParallelMove rcx <- rax, rax <- fp[-4]
ParallelMove fp[-5] <- rcx
Branch if RelationalOp(>, v198 T{_Smi}, v7 T{int}) T{bool} goto (20, 17)
B20
B17
Branch if RelationalOp(>, v7 T{int}, v7 T{_Smi}) T{bool} goto (21, 22)
B21
B18
ParallelMove rdi <- C, rsi <- fp[-3], rdx <- rax
StaticCall:56( checkValidRange<0> v198 T{_Smi}, v196 T{int}, v7 T{_Smi}) int64
ParallelMove  goto:62 B27
B22
B27
Branch if RelationalOp(<, v192 T{_Smi}, v7 T{int}) T{bool} goto (28, 29)
B29
Branch if EqualityCompare(v7 T{int} == v198 T{_Smi}) T{bool} goto (30, 31)
B30
ParallelMove r12 <- fp[-5] goto:140 B35
B31
ParallelMove rcx <- fp[-3]
Branch if RelationalOp:10(<, v196 T{int}, v169 T{_Smi}) T{bool} goto (51, 52)
B51
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
v203 <- LoadField(v2 T{__Float64x2ArrayView&_TypedListView&_Float64x2ListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
MemoryCopy(v203 T{__Float64x2ArrayView&_TypedListView&_Float64x2ListMixin}, v40 T{_Float64x2List}, v5 T{_Smi}, v5 T{_Smi}, v196 T{int}, dest_cid=_Int32x4List (159), src_cid=_Int32x4List (159) [untagged], element_size=16, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B50
B52
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
ParallelMove rax <- rax
v164 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v170) [-9223372036854775808, 9223372036854775807] int64
v154 <- LoadField(v40 T{_Float64x2List} . PointerBase.data, MayLoadInnerPointer) untagged
v157 <- LoadField(v2 T{__Float64x2ArrayView&_TypedListView&_Float64x2ListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v160 <- LoadThread() untagged
v161 <- LoadUntagged(v160, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rax, rax <- rdx
CCall(target_address=v161, v154 T{Object}, v157 T{Object}, v164 T{int}) untagged
ParallelMove  goto:10 B50
B50
B35
ParallelMove rax <- r12
DartReturn:20(v40 T{_Float64x2List})
B28
v70 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v70)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[5] <- v2)
MoveArgument(sp[4] <- v3)
MoveArgument(sp[3] <- v4)
MoveArgument(sp[2] <- v5)
MoveArgument(sp[1] <- v6)
MoveArgument(sp[0] <- v0)
v7 <- NativeCall(TypedDataBase_setClampedRange) T{*?}
ParallelMove rax <- rax
DartReturn:8(v7)
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[6]
v7 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[4] <- v7 T{*})
MoveArgument(sp[3] <- v3)
MoveArgument(sp[2] <- v4)
MoveArgument(sp[1] <- v5)
MoveArgument(sp[0] <- v6)
v9 <- StaticCall:10( _setClampedRange@7027147<0> v7 T{*}, v3, v4, v5, v6) T{void?}
ParallelMove rax <- rax
DartReturn:12(v9)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v0)
v5 <- NativeCall(TypedData_SetFloat64x2) T{*?}
ParallelMove rax <- rax
DartReturn:8(v5)
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(TypedData_GetFloat64x2) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{_Float64x2}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{_Float64x2})
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v0)
v5 <- NativeCall(TypedData_SetInt32x4) T{*?}
ParallelMove rax <- rax
DartReturn:8(v5)
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(TypedData_GetInt32x4) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{_Int32x4}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{_Int32x4})
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v0)
v5 <- NativeCall(TypedData_SetFloat32x4) T{*?}
ParallelMove rax <- rax
DartReturn:8(v5)
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(TypedData_GetFloat32x4) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{_Float32x4}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{_Float32x4})
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v0)
v5 <- NativeCall(TypedData_SetFloat64) T{*?}
ParallelMove rax <- rax
DartReturn:8(v5)
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(TypedData_GetFloat64) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{_Double}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{_Double})
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v0)
v5 <- NativeCall(TypedData_SetFloat32) T{*?}
ParallelMove rax <- rax
DartReturn:8(v5)
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(TypedData_GetFloat32) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{_Double}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{_Double})
Checking for concrete finalized classes:
 * 111 (_Int8List)
 * 113 (_ExternalInt8Array)
 * 115 (_Uint8List)
 * 117 (_ExternalUint8Array)
 * 119 (_Uint8ClampedList)
 * 121 (_ExternalUint8ClampedArray)
 * 123 (_Int16List)
 * 125 (_ExternalInt16Array)
 * 127 (_Uint16List)
 * 129 (_ExternalUint16Array)
 * 131 (_Int32List)
 * 133 (_ExternalInt32Array)
 * 135 (_Uint32List)
 * 137 (_ExternalUint32Array)
 * 139 (_Int64List)
 * 141 (_ExternalInt64Array)
 * 143 (_Uint64List)
 * 145 (_ExternalUint64Array)
 * 147 (_Float32List)
 * 149 (_ExternalFloat32Array)
 * 151 (_Float64List)
 * 153 (_ExternalFloat64Array)
 * 155 (_Float32x4List)
 * 157 (_ExternalFloat32x4Array)
 * 159 (_Int32x4List)
 * 161 (_ExternalInt32x4Array)
 * 163 (_Float64x2List)
 * 165 (_ExternalFloat64x2Array)
B0
B1
Enter frame
PrologueOffset = 0
v2 <- AllocateObject:10(cls=StateError) T{StateError}
ParallelMove rax <- rax, rcx <- C
StoreField(v2 T{StateError} . message = v3 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v2)
B0
B1
Enter frame
PrologueOffset = 0
v3 <- AllocateObject:10(cls=StateError) T{StateError}
ParallelMove rcx <- rax, rax <- fp[2]
StoreField(v3 T{StateError} . message = v2 T{String}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:14(v3)
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v3)
v5 <- StaticCall:10( _throwNew@0150898<0> v3) T{*?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- sp[1], rcx <- sp[2]
StoreField(v2 . message = v3)
ParallelMove rax <- C
DartReturn:12(v0)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdx, fp[-1] <- rdi, fp[-2] <- rdx, fp[-4] <- rsi
v7 <- LoadField(v5 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v9 <- BinarySmiOp:4(- [tr], v7, v8) [-3, 4611686018427387900] T{_Smi}
Branch if RelationalOp:6(<=, v10, v9) T{bool} goto (2, 3)
B2
Branch if RelationalOp:20(<=, v23, v9 T{_Smi}) T{bool} goto (5, 6)
B5
B6
B3
B4
B8
Branch if RelationalOp(>, v98 T{_Smi}, v2) T{bool} goto (11, 9)
B9
Branch if RelationalOp(>, v2, v4) T{bool} goto (12, 13)
B13
Branch if StrictCompare:80(!==, v3, v0) goto (14, 20)
B14
ParallelMove rcx <- rsi
v96 <- UnboxInt64([non-speculative], v3 T{int?}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v2, v96 T{int?}) T{bool} goto (17, 15)
B15
Branch if RelationalOp(>, v96 T{int?}, v4) T{bool} goto (18, 19)
B19
ParallelMove rax <- rcx
DartReturn:122(v96 T{int?})
B20
ParallelMove rax <- rax
DartReturn:126(v4)
B11
B12
B10
v21 <- AllocateObject:72(cls=RangeError, <not-aliased>) T{RangeError}
ParallelMove rcx <- rax
StoreField(v21 T{RangeError} . start = v13 T{_Smi}, NoStoreBarrier)
ParallelMove rdx <- fp[-2]
v93 <- BoxInt64(v4 T{_Smi}) [-4611686018427387904, 4611686018427387903] T{_Smi}
StoreField(v21 T{RangeError} . end = v93 T{_Smi}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v21 T{RangeError} . name = v20 T{_OneByteString}, NoStoreBarrier)
ParallelMove rdi <- C
StoreField(v21 T{RangeError} . message = v38 T{_OneByteString}, NoStoreBarrier)
ParallelMove r8 <- fp[-1]
v91 <- BoxInt64(v2 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v21 T{RangeError} . invalidValue = v91 T{int}, NoStoreBarrier)
ParallelMove r9 <- C
StoreField(v21 T{RangeError} . _hasValue@0150898 = v12 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:76(v21)
B17
ParallelMove r8 <- rdi, rdx <- rax, r9 <- C, rdi <- C
ParallelMove  goto:108 B16
B18
ParallelMove r8 <- rdi, rdx <- rax, r9 <- C, rdi <- C
ParallelMove  goto:112 B16
B16
v92 <- BoxInt64(v2 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-3] <- rax
v19 <- AllocateObject:114(cls=RangeError, <not-aliased>) T{RangeError}
ParallelMove rcx <- rax, rax <- fp[-3]
StoreField(v19 T{RangeError} . start = v92 T{int?}, NoStoreBarrier)
ParallelMove rax <- fp[-2]
v94 <- BoxInt64(v4 T{_Smi}) [-4611686018427387904, 4611686018427387903] T{_Smi}
StoreField(v19 T{RangeError} . end = v94 T{_Smi}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v19 T{RangeError} . name = v18 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v19 T{RangeError} . message = v38 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-4]
StoreField(v19 T{RangeError} . invalidValue = v3 T{int?}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v19 T{RangeError} . _hasValue@0150898 = v12 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:118(v19)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v35 <- LoadField(v2 T{__Float64x2List&_TypedList&_Float64x2ListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v230 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v231 <- UnboxInt64([non-speculative], v35 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v241 T{_Smi}, v230 T{int}, v231 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rcx <- fp[-2]
ParallelMove fp[-3] <- rdx
v28 <- LoadClassId(v2) [163, 165] int64
Branch if EqualityCompare:16(v28 == v29) goto (3, 8)
B3
v236 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v54 <- AllocateTypedData:10(v236 T{int}) T{_Float64x2List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B8
ParallelMove rcx <- rdx
v235 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v60 <- AllocateTypedData:10(v235 T{int}) T{_Float64x2List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B9
ParallelMove fp[-4] <- r8
Branch if RelationalOp(>, v241 T{_Smi}, v7 T{int}) T{bool} goto (27, 24)
B27
B24
v165 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v237 <- UnboxInt64([non-speculative], v165 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v7 T{int}, v237 T{_Smi}) T{bool} goto (28, 29)
B28
B25
v160 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v234 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rdx
v238 <- UnboxInt64([non-speculative], v160 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rdx
StaticCall:56( checkValidRange<0> v241 T{_Smi}, v234 T{int}, v238 T{_Smi}) int64
ParallelMove  goto:62 B34
B29
B34
Branch if RelationalOp(<, v231 T{_Smi}, v7 T{int}) T{bool} goto (35, 36)
B36
Branch if EqualityCompare(v7 T{int} == v241 T{_Smi}) T{bool} goto (37, 38)
B37
ParallelMove r12 <- fp[-4] goto:140 B42
B38
v233 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if RelationalOp:10(<, v233 T{int}, v200 T{_Smi}) T{bool} goto (63, 64)
B63
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
v251 <- LoadField(v2 T{__Float64x2List&_TypedList&_Float64x2ListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rax
MemoryCopy(v251 T{__Float64x2List&_TypedList&_Float64x2ListMixin}, v30 T{_Float64x2List}, v5 T{_Smi}, v5 T{_Smi}, v233 T{int}, dest_cid=_Int32x4List (159), src_cid=_Int32x4List (159) [untagged], element_size=16, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B62
B64
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
ParallelMove rcx <- rcx
v195 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v201) [-9223372036854775808, 9223372036854775807] int64
v185 <- LoadField(v30 T{_Float64x2List} . PointerBase.data, MayLoadInnerPointer) untagged
v188 <- LoadField(v2 T{__Float64x2List&_TypedList&_Float64x2ListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v191 <- LoadThread() untagged
v192 <- LoadUntagged(v191, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rcx, rax <- rdx
CCall(target_address=v192, v185 T{Object}, v188 T{Object}, v195 T{int}) untagged
ParallelMove  goto:10 B62
B62
B42
ParallelMove rax <- r12
DartReturn:20(v30)
B35
v90 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v90)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v14 <- LoadField(v2 T{__Int32x4ArrayView&_TypedListView&_Int32x4ListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v191 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v192 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v198 T{_Smi}, v191 T{int}, v192 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove fp[-4] <- rcx
v196 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdx <- rax
ParallelMove fp[-3] <- rdx
v40 <- AllocateTypedData:10(v196 T{int}) T{_Int32x4List}
ParallelMove rcx <- rax, rax <- fp[-4]
ParallelMove fp[-5] <- rcx
Branch if RelationalOp(>, v198 T{_Smi}, v7 T{int}) T{bool} goto (20, 17)
B20
B17
Branch if RelationalOp(>, v7 T{int}, v7 T{_Smi}) T{bool} goto (21, 22)
B21
B18
ParallelMove rdi <- C, rsi <- fp[-3], rdx <- rax
StaticCall:56( checkValidRange<0> v198 T{_Smi}, v196 T{int}, v7 T{_Smi}) int64
ParallelMove  goto:62 B27
B22
B27
Branch if RelationalOp(<, v192 T{_Smi}, v7 T{int}) T{bool} goto (28, 29)
B29
Branch if EqualityCompare(v7 T{int} == v198 T{_Smi}) T{bool} goto (30, 31)
B30
ParallelMove r12 <- fp[-5] goto:140 B35
B31
ParallelMove rcx <- fp[-3]
Branch if RelationalOp:10(<, v196 T{int}, v169 T{_Smi}) T{bool} goto (51, 52)
B51
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
v203 <- LoadField(v2 T{__Int32x4ArrayView&_TypedListView&_Int32x4ListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
MemoryCopy(v203 T{__Int32x4ArrayView&_TypedListView&_Int32x4ListMixin}, v40 T{_Int32x4List}, v5 T{_Smi}, v5 T{_Smi}, v196 T{int}, dest_cid=_Int32x4List (159), src_cid=_Int32x4List (159) [untagged], element_size=16, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B50
B52
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
ParallelMove rax <- rax
v164 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v170) [-9223372036854775808, 9223372036854775807] int64
v154 <- LoadField(v40 T{_Int32x4List} . PointerBase.data, MayLoadInnerPointer) untagged
v157 <- LoadField(v2 T{__Int32x4ArrayView&_TypedListView&_Int32x4ListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v160 <- LoadThread() untagged
v161 <- LoadUntagged(v160, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rax, rax <- rdx
CCall(target_address=v161, v154 T{Object}, v157 T{Object}, v164 T{int}) untagged
ParallelMove  goto:10 B50
B50
B35
ParallelMove rax <- r12
DartReturn:20(v40 T{_Int32x4List})
B28
v70 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v70)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v35 <- LoadField(v2 T{__Int32x4List&_TypedList&_Int32x4ListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v230 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v231 <- UnboxInt64([non-speculative], v35 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v241 T{_Smi}, v230 T{int}, v231 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rcx <- fp[-2]
ParallelMove fp[-3] <- rdx
v28 <- LoadClassId(v2) [159, 161] int64
Branch if EqualityCompare:16(v28 == v29) goto (3, 8)
B3
v236 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v54 <- AllocateTypedData:10(v236 T{int}) T{_Int32x4List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B8
ParallelMove rcx <- rdx
v235 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v60 <- AllocateTypedData:10(v235 T{int}) T{_Int32x4List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B9
ParallelMove fp[-4] <- r8
Branch if RelationalOp(>, v241 T{_Smi}, v7 T{int}) T{bool} goto (27, 24)
B27
B24
v165 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v237 <- UnboxInt64([non-speculative], v165 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v7 T{int}, v237 T{_Smi}) T{bool} goto (28, 29)
B28
B25
v160 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v234 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rdx
v238 <- UnboxInt64([non-speculative], v160 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rdx
StaticCall:56( checkValidRange<0> v241 T{_Smi}, v234 T{int}, v238 T{_Smi}) int64
ParallelMove  goto:62 B34
B29
B34
Branch if RelationalOp(<, v231 T{_Smi}, v7 T{int}) T{bool} goto (35, 36)
B36
Branch if EqualityCompare(v7 T{int} == v241 T{_Smi}) T{bool} goto (37, 38)
B37
ParallelMove r12 <- fp[-4] goto:140 B42
B38
v233 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if RelationalOp:10(<, v233 T{int}, v200 T{_Smi}) T{bool} goto (63, 64)
B63
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
v251 <- LoadField(v2 T{__Int32x4List&_TypedList&_Int32x4ListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rax
MemoryCopy(v251 T{__Int32x4List&_TypedList&_Int32x4ListMixin}, v30 T{_Int32x4List}, v5 T{_Smi}, v5 T{_Smi}, v233 T{int}, dest_cid=_Int32x4List (159), src_cid=_Int32x4List (159) [untagged], element_size=16, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B62
B64
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
ParallelMove rcx <- rcx
v195 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v201) [-9223372036854775808, 9223372036854775807] int64
v185 <- LoadField(v30 T{_Int32x4List} . PointerBase.data, MayLoadInnerPointer) untagged
v188 <- LoadField(v2 T{__Int32x4List&_TypedList&_Int32x4ListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v191 <- LoadThread() untagged
v192 <- LoadUntagged(v191, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rcx, rax <- rdx
CCall(target_address=v192, v185 T{Object}, v188 T{Object}, v195 T{int}) untagged
ParallelMove  goto:10 B62
B62
B42
ParallelMove rax <- r12
DartReturn:20(v30)
B35
v90 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v90)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v14 <- LoadField(v2 T{__Float32x4ArrayView&_TypedListView&_Float32x4ListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v191 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v192 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v198 T{_Smi}, v191 T{int}, v192 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove fp[-4] <- rcx
v196 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdx <- rax
ParallelMove fp[-3] <- rdx
v40 <- AllocateTypedData:10(v196 T{int}) T{_Float32x4List}
ParallelMove rcx <- rax, rax <- fp[-4]
ParallelMove fp[-5] <- rcx
Branch if RelationalOp(>, v198 T{_Smi}, v7 T{int}) T{bool} goto (20, 17)
B20
B17
Branch if RelationalOp(>, v7 T{int}, v7 T{_Smi}) T{bool} goto (21, 22)
B21
B18
ParallelMove rdi <- C, rsi <- fp[-3], rdx <- rax
StaticCall:56( checkValidRange<0> v198 T{_Smi}, v196 T{int}, v7 T{_Smi}) int64
ParallelMove  goto:62 B27
B22
B27
Branch if RelationalOp(<, v192 T{_Smi}, v7 T{int}) T{bool} goto (28, 29)
B29
Branch if EqualityCompare(v7 T{int} == v198 T{_Smi}) T{bool} goto (30, 31)
B30
ParallelMove r12 <- fp[-5] goto:140 B35
B31
ParallelMove rcx <- fp[-3]
Branch if RelationalOp:10(<, v196 T{int}, v169 T{_Smi}) T{bool} goto (51, 52)
B51
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
v203 <- LoadField(v2 T{__Float32x4ArrayView&_TypedListView&_Float32x4ListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
MemoryCopy(v203 T{__Float32x4ArrayView&_TypedListView&_Float32x4ListMixin}, v40 T{_Float32x4List}, v5 T{_Smi}, v5 T{_Smi}, v196 T{int}, dest_cid=_Int32x4List (159), src_cid=_Int32x4List (159) [untagged], element_size=16, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B50
B52
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
ParallelMove rax <- rax
v164 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v170) [-9223372036854775808, 9223372036854775807] int64
v154 <- LoadField(v40 T{_Float32x4List} . PointerBase.data, MayLoadInnerPointer) untagged
v157 <- LoadField(v2 T{__Float32x4ArrayView&_TypedListView&_Float32x4ListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v160 <- LoadThread() untagged
v161 <- LoadUntagged(v160, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rax, rax <- rdx
CCall(target_address=v161, v154 T{Object}, v157 T{Object}, v164 T{int}) untagged
ParallelMove  goto:10 B50
B50
B35
ParallelMove rax <- r12
DartReturn:20(v40 T{_Float32x4List})
B28
v70 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v70)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v35 <- LoadField(v2 T{__Float32x4List&_TypedList&_Float32x4ListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v230 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v231 <- UnboxInt64([non-speculative], v35 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v241 T{_Smi}, v230 T{int}, v231 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rcx <- fp[-2]
ParallelMove fp[-3] <- rdx
v28 <- LoadClassId(v2) [155, 157] int64
Branch if EqualityCompare:16(v28 == v29) goto (3, 8)
B3
v236 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v54 <- AllocateTypedData:10(v236 T{int}) T{_Float32x4List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B8
ParallelMove rcx <- rdx
v235 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v60 <- AllocateTypedData:10(v235 T{int}) T{_Float32x4List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B9
ParallelMove fp[-4] <- r8
Branch if RelationalOp(>, v241 T{_Smi}, v7 T{int}) T{bool} goto (27, 24)
B27
B24
v165 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v237 <- UnboxInt64([non-speculative], v165 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v7 T{int}, v237 T{_Smi}) T{bool} goto (28, 29)
B28
B25
v160 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v234 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rdx
v238 <- UnboxInt64([non-speculative], v160 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rdx
StaticCall:56( checkValidRange<0> v241 T{_Smi}, v234 T{int}, v238 T{_Smi}) int64
ParallelMove  goto:62 B34
B29
B34
Branch if RelationalOp(<, v231 T{_Smi}, v7 T{int}) T{bool} goto (35, 36)
B36
Branch if EqualityCompare(v7 T{int} == v241 T{_Smi}) T{bool} goto (37, 38)
B37
ParallelMove r12 <- fp[-4] goto:140 B42
B38
v233 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if RelationalOp:10(<, v233 T{int}, v200 T{_Smi}) T{bool} goto (63, 64)
B63
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
v251 <- LoadField(v2 T{__Float32x4List&_TypedList&_Float32x4ListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rax
MemoryCopy(v251 T{__Float32x4List&_TypedList&_Float32x4ListMixin}, v30 T{_Float32x4List}, v5 T{_Smi}, v5 T{_Smi}, v233 T{int}, dest_cid=_Int32x4List (159), src_cid=_Int32x4List (159) [untagged], element_size=16, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B62
B64
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
ParallelMove rcx <- rcx
v195 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v201) [-9223372036854775808, 9223372036854775807] int64
v185 <- LoadField(v30 T{_Float32x4List} . PointerBase.data, MayLoadInnerPointer) untagged
v188 <- LoadField(v2 T{__Float32x4List&_TypedList&_Float32x4ListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v191 <- LoadThread() untagged
v192 <- LoadUntagged(v191, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rcx, rax <- rdx
CCall(target_address=v192, v185 T{Object}, v188 T{Object}, v195 T{int}) untagged
ParallelMove  goto:10 B62
B62
B42
ParallelMove rax <- r12
DartReturn:20(v30)
B35
v90 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v90)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v14 <- LoadField(v2 T{__Float64ArrayView&_TypedListView&_DoubleListMixin&_TypedDoubleListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v191 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v192 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v198 T{_Smi}, v191 T{int}, v192 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove fp[-4] <- rcx
v196 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdx <- rax
ParallelMove fp[-3] <- rdx
v40 <- AllocateTypedData:10(v196 T{int}) T{_Float64List}
ParallelMove rcx <- rax, rax <- fp[-4]
ParallelMove fp[-5] <- rcx
Branch if RelationalOp(>, v198 T{_Smi}, v7 T{int}) T{bool} goto (20, 17)
B20
B17
Branch if RelationalOp(>, v7 T{int}, v7 T{_Smi}) T{bool} goto (21, 22)
B21
B18
ParallelMove rdi <- C, rsi <- fp[-3], rdx <- rax
StaticCall:56( checkValidRange<0> v198 T{_Smi}, v196 T{int}, v7 T{_Smi}) int64
ParallelMove  goto:62 B27
B22
B27
Branch if RelationalOp(<, v192 T{_Smi}, v7 T{int}) T{bool} goto (28, 29)
B29
Branch if EqualityCompare(v7 T{int} == v198 T{_Smi}) T{bool} goto (30, 31)
B30
ParallelMove r12 <- fp[-5] goto:140 B35
B31
ParallelMove rcx <- fp[-3]
Branch if RelationalOp:10(<, v196 T{int}, v169 T{_Smi}) T{bool} goto (51, 52)
B51
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
v203 <- LoadField(v2 T{__Float64ArrayView&_TypedListView&_DoubleListMixin&_TypedDoubleListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
MemoryCopy(v203 T{__Float64ArrayView&_TypedListView&_DoubleListMixin&_TypedDoubleListMixin}, v40 T{_Float64List}, v5 T{_Smi}, v5 T{_Smi}, v196 T{int}, dest_cid=_Int64List (139), src_cid=_Int64List (139) [untagged], element_size=8, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B50
B52
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
ParallelMove rax <- rax
v164 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v170) [-9223372036854775808, 9223372036854775807] int64
v154 <- LoadField(v40 T{_Float64List} . PointerBase.data, MayLoadInnerPointer) untagged
v157 <- LoadField(v2 T{__Float64ArrayView&_TypedListView&_DoubleListMixin&_TypedDoubleListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v160 <- LoadThread() untagged
v161 <- LoadUntagged(v160, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rax, rax <- rdx
CCall(target_address=v161, v154 T{Object}, v157 T{Object}, v164 T{int}) untagged
ParallelMove  goto:10 B50
B50
B35
ParallelMove rax <- r12
DartReturn:20(v40 T{_Float64List})
B28
v70 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v70)
CheckStackOverflowSlowPath
Checking for concrete finalized classes:
 * 151 (_Float64List)
 * 152 (_Float64ArrayView)
 * 153 (_ExternalFloat64Array)
 * 154 (_UnmodifiableFloat64ArrayView)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v35 <- LoadField(v2 T{__Float64List&_TypedList&_DoubleListMixin&_TypedDoubleListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v230 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v231 <- UnboxInt64([non-speculative], v35 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v241 T{_Smi}, v230 T{int}, v231 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rcx <- fp[-2]
ParallelMove fp[-3] <- rdx
v28 <- LoadClassId(v2) [151, 153] int64
Branch if EqualityCompare:16(v28 == v29) goto (3, 8)
B3
v236 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v54 <- AllocateTypedData:10(v236 T{int}) T{_Float64List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B8
ParallelMove rcx <- rdx
v235 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v60 <- AllocateTypedData:10(v235 T{int}) T{_Float64List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B9
ParallelMove fp[-4] <- r8
Branch if RelationalOp(>, v241 T{_Smi}, v7 T{int}) T{bool} goto (27, 24)
B27
B24
v165 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v237 <- UnboxInt64([non-speculative], v165 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v7 T{int}, v237 T{_Smi}) T{bool} goto (28, 29)
B28
B25
v160 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v234 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rdx
v238 <- UnboxInt64([non-speculative], v160 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rdx
StaticCall:56( checkValidRange<0> v241 T{_Smi}, v234 T{int}, v238 T{_Smi}) int64
ParallelMove  goto:62 B34
B29
B34
Branch if RelationalOp(<, v231 T{_Smi}, v7 T{int}) T{bool} goto (35, 36)
B36
Branch if EqualityCompare(v7 T{int} == v241 T{_Smi}) T{bool} goto (37, 38)
B37
ParallelMove r12 <- fp[-4] goto:140 B42
B38
v233 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if RelationalOp:10(<, v233 T{int}, v200 T{_Smi}) T{bool} goto (63, 64)
B63
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
v251 <- LoadField(v2 T{__Float64List&_TypedList&_DoubleListMixin&_TypedDoubleListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rax
MemoryCopy(v251 T{__Float64List&_TypedList&_DoubleListMixin&_TypedDoubleListMixin}, v30, v5 T{_Smi}, v5 T{_Smi}, v233 T{int}, dest_cid=_Int64List (139), src_cid=_Int64List (139) [untagged], element_size=8, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B62
B64
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
ParallelMove rcx <- rcx
v195 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v201) [-9223372036854775808, 9223372036854775807] int64
v185 <- LoadField(v30 . PointerBase.data, MayLoadInnerPointer) untagged
v188 <- LoadField(v2 T{__Float64List&_TypedList&_DoubleListMixin&_TypedDoubleListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v191 <- LoadThread() untagged
v192 <- LoadUntagged(v191, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rcx, rax <- rdx
CCall(target_address=v192, v185 T{Object}, v188 T{Object}, v195 T{int}) untagged
ParallelMove  goto:10 B62
B62
B42
ParallelMove rax <- r12
DartReturn:20(v30)
B35
v90 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v90)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v14 <- LoadField(v2 T{__Float32ArrayView&_TypedListView&_DoubleListMixin&_TypedDoubleListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v191 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v192 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v198 T{_Smi}, v191 T{int}, v192 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove fp[-4] <- rcx
v196 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdx <- rax
ParallelMove fp[-3] <- rdx
v40 <- AllocateTypedData:10(v196 T{int}) T{_Float32List}
ParallelMove rcx <- rax, rax <- fp[-4]
ParallelMove fp[-5] <- rcx
Branch if RelationalOp(>, v198 T{_Smi}, v7 T{int}) T{bool} goto (20, 17)
B20
B17
Branch if RelationalOp(>, v7 T{int}, v7 T{_Smi}) T{bool} goto (21, 22)
B21
B18
ParallelMove rdi <- C, rsi <- fp[-3], rdx <- rax
StaticCall:56( checkValidRange<0> v198 T{_Smi}, v196 T{int}, v7 T{_Smi}) int64
ParallelMove  goto:62 B27
B22
B27
Branch if RelationalOp(<, v192 T{_Smi}, v7 T{int}) T{bool} goto (28, 29)
B29
Branch if EqualityCompare(v7 T{int} == v198 T{_Smi}) T{bool} goto (30, 31)
B30
ParallelMove r12 <- fp[-5] goto:140 B35
B31
ParallelMove rcx <- fp[-3]
Branch if RelationalOp:10(<, v196 T{int}, v169 T{_Smi}) T{bool} goto (51, 52)
B51
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
v203 <- LoadField(v2 T{__Float32ArrayView&_TypedListView&_DoubleListMixin&_TypedDoubleListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
MemoryCopy(v203 T{__Float32ArrayView&_TypedListView&_DoubleListMixin&_TypedDoubleListMixin}, v40 T{_Float32List}, v5 T{_Smi}, v5 T{_Smi}, v196 T{int}, dest_cid=_Int32List (131), src_cid=_Int32List (131) [untagged], element_size=4, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B50
B52
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
ParallelMove rax <- rax
v164 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v170) [-9223372036854775808, 9223372036854775807] int64
v154 <- LoadField(v40 T{_Float32List} . PointerBase.data, MayLoadInnerPointer) untagged
v157 <- LoadField(v2 T{__Float32ArrayView&_TypedListView&_DoubleListMixin&_TypedDoubleListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v160 <- LoadThread() untagged
v161 <- LoadUntagged(v160, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rax, rax <- rdx
CCall(target_address=v161, v154 T{Object}, v157 T{Object}, v164 T{int}) untagged
ParallelMove  goto:10 B50
B50
B35
ParallelMove rax <- r12
DartReturn:20(v40 T{_Float32List})
B28
v70 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v70)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v35 <- LoadField(v2 T{__Float32List&_TypedList&_DoubleListMixin&_TypedDoubleListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v230 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v231 <- UnboxInt64([non-speculative], v35 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v241 T{_Smi}, v230 T{int}, v231 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rcx <- fp[-2]
ParallelMove fp[-3] <- rdx
v28 <- LoadClassId(v2) [147, 149] int64
Branch if EqualityCompare:16(v28 == v29) goto (3, 8)
B3
v236 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v54 <- AllocateTypedData:10(v236 T{int}) T{_Float32List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B8
ParallelMove rcx <- rdx
v235 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v60 <- AllocateTypedData:10(v235 T{int}) T{_Float32List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B9
ParallelMove fp[-4] <- r8
Branch if RelationalOp(>, v241 T{_Smi}, v7 T{int}) T{bool} goto (27, 24)
B27
B24
v165 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v237 <- UnboxInt64([non-speculative], v165 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v7 T{int}, v237 T{_Smi}) T{bool} goto (28, 29)
B28
B25
v160 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v234 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rdx
v238 <- UnboxInt64([non-speculative], v160 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rdx
StaticCall:56( checkValidRange<0> v241 T{_Smi}, v234 T{int}, v238 T{_Smi}) int64
ParallelMove  goto:62 B34
B29
B34
Branch if RelationalOp(<, v231 T{_Smi}, v7 T{int}) T{bool} goto (35, 36)
B36
Branch if EqualityCompare(v7 T{int} == v241 T{_Smi}) T{bool} goto (37, 38)
B37
ParallelMove r12 <- fp[-4] goto:140 B42
B38
v233 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if RelationalOp:10(<, v233 T{int}, v200 T{_Smi}) T{bool} goto (63, 64)
B63
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
v251 <- LoadField(v2 T{__Float32List&_TypedList&_DoubleListMixin&_TypedDoubleListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rax
MemoryCopy(v251 T{__Float32List&_TypedList&_DoubleListMixin&_TypedDoubleListMixin}, v30, v5 T{_Smi}, v5 T{_Smi}, v233 T{int}, dest_cid=_Int32List (131), src_cid=_Int32List (131) [untagged], element_size=4, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B62
B64
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
ParallelMove rcx <- rcx
v195 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v201) [-9223372036854775808, 9223372036854775807] int64
v185 <- LoadField(v30 . PointerBase.data, MayLoadInnerPointer) untagged
v188 <- LoadField(v2 T{__Float32List&_TypedList&_DoubleListMixin&_TypedDoubleListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v191 <- LoadThread() untagged
v192 <- LoadUntagged(v191, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rcx, rax <- rdx
CCall(target_address=v192, v185 T{Object}, v188 T{Object}, v195 T{int}) untagged
ParallelMove  goto:10 B62
B62
B42
ParallelMove rax <- r12
DartReturn:20(v30)
B35
v90 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v90)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v14 <- LoadField(v2 T{__Uint64ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v191 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v192 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v198 T{_Smi}, v191 T{int}, v192 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove fp[-4] <- rcx
v196 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdx <- rax
ParallelMove fp[-3] <- rdx
v40 <- AllocateTypedData:10(v196 T{int}) T{_Uint64List}
ParallelMove rcx <- rax, rax <- fp[-4]
ParallelMove fp[-5] <- rcx
Branch if RelationalOp(>, v198 T{_Smi}, v7 T{int}) T{bool} goto (20, 17)
B20
B17
Branch if RelationalOp(>, v7 T{int}, v7 T{_Smi}) T{bool} goto (21, 22)
B21
B18
ParallelMove rdi <- C, rsi <- fp[-3], rdx <- rax
StaticCall:56( checkValidRange<0> v198 T{_Smi}, v196 T{int}, v7 T{_Smi}) int64
ParallelMove  goto:62 B27
B22
B27
Branch if RelationalOp(<, v192 T{_Smi}, v7 T{int}) T{bool} goto (28, 29)
B29
Branch if EqualityCompare(v7 T{int} == v198 T{_Smi}) T{bool} goto (30, 31)
B30
ParallelMove r12 <- fp[-5] goto:140 B35
B31
ParallelMove rcx <- fp[-3]
Branch if RelationalOp:10(<, v196 T{int}, v169 T{_Smi}) T{bool} goto (51, 52)
B51
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
v203 <- LoadField(v2 T{__Uint64ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
MemoryCopy(v203 T{__Uint64ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin}, v40 T{_Uint64List}, v5 T{_Smi}, v5 T{_Smi}, v196 T{int}, dest_cid=_Int64List (139), src_cid=_Int64List (139) [untagged], element_size=8, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B50
B52
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
ParallelMove rax <- rax
v164 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v170) [-9223372036854775808, 9223372036854775807] int64
v154 <- LoadField(v40 T{_Uint64List} . PointerBase.data, MayLoadInnerPointer) untagged
v157 <- LoadField(v2 T{__Uint64ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v160 <- LoadThread() untagged
v161 <- LoadUntagged(v160, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rax, rax <- rdx
CCall(target_address=v161, v154 T{Object}, v157 T{Object}, v164 T{int}) untagged
ParallelMove  goto:10 B50
B50
B35
ParallelMove rax <- r12
DartReturn:20(v40 T{_Uint64List})
B28
v70 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v70)
CheckStackOverflowSlowPath
Checking for concrete finalized classes:
 * 111 (_Int8List)
 * 112 (_Int8ArrayView)
 * 113 (_ExternalInt8Array)
 * 114 (_UnmodifiableInt8ArrayView)
 * 115 (_Uint8List)
 * 116 (_Uint8ArrayView)
 * 117 (_ExternalUint8Array)
 * 118 (_UnmodifiableUint8ArrayView)
 * 119 (_Uint8ClampedList)
 * 120 (_Uint8ClampedArrayView)
 * 121 (_ExternalUint8ClampedArray)
 * 122 (_UnmodifiableUint8ClampedArrayView)
 * 123 (_Int16List)
 * 124 (_Int16ArrayView)
 * 125 (_ExternalInt16Array)
 * 126 (_UnmodifiableInt16ArrayView)
 * 127 (_Uint16List)
 * 128 (_Uint16ArrayView)
 * 129 (_ExternalUint16Array)
 * 130 (_UnmodifiableUint16ArrayView)
 * 131 (_Int32List)
 * 132 (_Int32ArrayView)
 * 133 (_ExternalInt32Array)
 * 134 (_UnmodifiableInt32ArrayView)
 * 135 (_Uint32List)
 * 136 (_Uint32ArrayView)
 * 137 (_ExternalUint32Array)
 * 138 (_UnmodifiableUint32ArrayView)
 * 139 (_Int64List)
 * 140 (_Int64ArrayView)
 * 141 (_ExternalInt64Array)
 * 142 (_UnmodifiableInt64ArrayView)
 * 143 (_Uint64List)
 * 144 (_Uint64ArrayView)
 * 145 (_ExternalUint64Array)
 * 146 (_UnmodifiableUint64ArrayView)
 * 564 (CodeUnits)
Checking for concrete finalized classes:
 * 89 (_List)
 * 90 (_ImmutableList)
 * 91 (_GrowableList)
Not checking the following concrete implementors of List:
 * 147(_Float32List): List<double> is not a subtype of List<int>
 * 148(_Float32ArrayView): List<double> is not a subtype of List<int>
 * 149(_ExternalFloat32Array): List<double> is not a subtype of List<int>
 * 150(_UnmodifiableFloat32ArrayView): List<double> is not a subtype of List<int>
 * 151(_Float64List): List<double> is not a subtype of List<int>
 * 152(_Float64ArrayView): List<double> is not a subtype of List<int>
 * 153(_ExternalFloat64Array): List<double> is not a subtype of List<int>
 * 154(_UnmodifiableFloat64ArrayView): List<double> is not a subtype of List<int>
 * 155(_Float32x4List): List<Float32x4> is not a subtype of List<int>
 * 156(_Float32x4ArrayView): List<Float32x4> is not a subtype of List<int>
 * 157(_ExternalFloat32x4Array): List<Float32x4> is not a subtype of List<int>
 * 158(_UnmodifiableFloat32x4ArrayView): List<Float32x4> is not a subtype of List<int>
 * 159(_Int32x4List): List<Int32x4> is not a subtype of List<int>
 * 160(_Int32x4ArrayView): List<Int32x4> is not a subtype of List<int>
 * 161(_ExternalInt32x4Array): List<Int32x4> is not a subtype of List<int>
 * 162(_UnmodifiableInt32x4ArrayView): List<Int32x4> is not a subtype of List<int>
 * 163(_Float64x2List): List<Float64x2> is not a subtype of List<int>
 * 164(_Float64x2ArrayView): List<Float64x2> is not a subtype of List<int>
 * 165(_ExternalFloat64x2Array): List<Float64x2> is not a subtype of List<int>
 * 166(_UnmodifiableFloat64x2ArrayView): List<Float64x2> is not a subtype of List<int>
Generating check for type argument 0: int
Checks for Type
Checking for concrete finalized classes:
 * 59 (_Smi)
 * 60 (_Mint)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v35 <- LoadField(v2 T{__Uint64List&_TypedList&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v230 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v231 <- UnboxInt64([non-speculative], v35 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v241 T{_Smi}, v230 T{int}, v231 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rcx <- fp[-2]
ParallelMove fp[-3] <- rdx
v28 <- LoadClassId(v2) [143, 145] int64
Branch if EqualityCompare:16(v28 == v29) goto (3, 8)
B3
v236 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v54 <- AllocateTypedData:10(v236 T{int}) T{_Uint64List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B8
ParallelMove rcx <- rdx
v235 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v60 <- AllocateTypedData:10(v235 T{int}) T{_Uint64List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B9
ParallelMove fp[-4] <- r8
Branch if RelationalOp(>, v241 T{_Smi}, v7 T{int}) T{bool} goto (27, 24)
B27
B24
v165 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v237 <- UnboxInt64([non-speculative], v165 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v7 T{int}, v237 T{_Smi}) T{bool} goto (28, 29)
B28
B25
v160 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v234 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rdx
v238 <- UnboxInt64([non-speculative], v160 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rdx
StaticCall:56( checkValidRange<0> v241 T{_Smi}, v234 T{int}, v238 T{_Smi}) int64
ParallelMove  goto:62 B34
B29
B34
Branch if RelationalOp(<, v231 T{_Smi}, v7 T{int}) T{bool} goto (35, 36)
B36
Branch if EqualityCompare(v7 T{int} == v241 T{_Smi}) T{bool} goto (37, 38)
B37
ParallelMove r12 <- fp[-4] goto:140 B42
B38
v233 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if RelationalOp:10(<, v233 T{int}, v200 T{_Smi}) T{bool} goto (63, 64)
B63
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
v251 <- LoadField(v2 T{__Uint64List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rax
MemoryCopy(v251 T{__Uint64List&_TypedList&_IntListMixin&_TypedIntListMixin}, v30, v5 T{_Smi}, v5 T{_Smi}, v233 T{int}, dest_cid=_Int64List (139), src_cid=_Int64List (139) [untagged], element_size=8, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B62
B64
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
ParallelMove rcx <- rcx
v195 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v201) [-9223372036854775808, 9223372036854775807] int64
v185 <- LoadField(v30 . PointerBase.data, MayLoadInnerPointer) untagged
v188 <- LoadField(v2 T{__Uint64List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v191 <- LoadThread() untagged
v192 <- LoadUntagged(v191, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rcx, rax <- rdx
CCall(target_address=v192, v185 T{Object}, v188 T{Object}, v195 T{int}) untagged
ParallelMove  goto:10 B62
B62
B42
ParallelMove rax <- r12
DartReturn:20(v30)
B35
v90 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v90)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v14 <- LoadField(v2 T{__Int64ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v191 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v192 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v198 T{_Smi}, v191 T{int}, v192 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove fp[-4] <- rcx
v196 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdx <- rax
ParallelMove fp[-3] <- rdx
v40 <- AllocateTypedData:10(v196 T{int}) T{_Int64List}
ParallelMove rcx <- rax, rax <- fp[-4]
ParallelMove fp[-5] <- rcx
Branch if RelationalOp(>, v198 T{_Smi}, v7 T{int}) T{bool} goto (20, 17)
B20
B17
Branch if RelationalOp(>, v7 T{int}, v7 T{_Smi}) T{bool} goto (21, 22)
B21
B18
ParallelMove rdi <- C, rsi <- fp[-3], rdx <- rax
StaticCall:56( checkValidRange<0> v198 T{_Smi}, v196 T{int}, v7 T{_Smi}) int64
ParallelMove  goto:62 B27
B22
B27
Branch if RelationalOp(<, v192 T{_Smi}, v7 T{int}) T{bool} goto (28, 29)
B29
Branch if EqualityCompare(v7 T{int} == v198 T{_Smi}) T{bool} goto (30, 31)
B30
ParallelMove r12 <- fp[-5] goto:140 B35
B31
ParallelMove rcx <- fp[-3]
Branch if RelationalOp:10(<, v196 T{int}, v169 T{_Smi}) T{bool} goto (51, 52)
B51
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
v203 <- LoadField(v2 T{__Int64ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
MemoryCopy(v203 T{__Int64ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin}, v40 T{_Int64List}, v5 T{_Smi}, v5 T{_Smi}, v196 T{int}, dest_cid=_Int64List (139), src_cid=_Int64List (139) [untagged], element_size=8, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B50
B52
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
ParallelMove rax <- rax
v164 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v170) [-9223372036854775808, 9223372036854775807] int64
v154 <- LoadField(v40 T{_Int64List} . PointerBase.data, MayLoadInnerPointer) untagged
v157 <- LoadField(v2 T{__Int64ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v160 <- LoadThread() untagged
v161 <- LoadUntagged(v160, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rax, rax <- rdx
CCall(target_address=v161, v154 T{Object}, v157 T{Object}, v164 T{int}) untagged
ParallelMove  goto:10 B50
B50
B35
ParallelMove rax <- r12
DartReturn:20(v40 T{_Int64List})
B28
v70 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v70)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v35 <- LoadField(v2 T{__Int64List&_TypedList&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v230 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v231 <- UnboxInt64([non-speculative], v35 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v241 T{_Smi}, v230 T{int}, v231 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rcx <- fp[-2]
ParallelMove fp[-3] <- rdx
v28 <- LoadClassId(v2) [139, 141] int64
Branch if EqualityCompare:16(v28 == v29) goto (3, 8)
B3
v236 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v54 <- AllocateTypedData:10(v236 T{int}) T{_Int64List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B8
ParallelMove rcx <- rdx
v235 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v60 <- AllocateTypedData:10(v235 T{int}) T{_Int64List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B9
ParallelMove fp[-4] <- r8
Branch if RelationalOp(>, v241 T{_Smi}, v7 T{int}) T{bool} goto (27, 24)
B27
B24
v165 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v237 <- UnboxInt64([non-speculative], v165 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v7 T{int}, v237 T{_Smi}) T{bool} goto (28, 29)
B28
B25
v160 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v234 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rdx
v238 <- UnboxInt64([non-speculative], v160 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rdx
StaticCall:56( checkValidRange<0> v241 T{_Smi}, v234 T{int}, v238 T{_Smi}) int64
ParallelMove  goto:62 B34
B29
B34
Branch if RelationalOp(<, v231 T{_Smi}, v7 T{int}) T{bool} goto (35, 36)
B36
Branch if EqualityCompare(v7 T{int} == v241 T{_Smi}) T{bool} goto (37, 38)
B37
ParallelMove r12 <- fp[-4] goto:140 B42
B38
v233 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if RelationalOp:10(<, v233 T{int}, v200 T{_Smi}) T{bool} goto (63, 64)
B63
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
v251 <- LoadField(v2 T{__Int64List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rax
MemoryCopy(v251 T{__Int64List&_TypedList&_IntListMixin&_TypedIntListMixin}, v30, v5 T{_Smi}, v5 T{_Smi}, v233 T{int}, dest_cid=_Int64List (139), src_cid=_Int64List (139) [untagged], element_size=8, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B62
B64
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
ParallelMove rcx <- rcx
v195 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v201) [-9223372036854775808, 9223372036854775807] int64
v185 <- LoadField(v30 . PointerBase.data, MayLoadInnerPointer) untagged
v188 <- LoadField(v2 T{__Int64List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v191 <- LoadThread() untagged
v192 <- LoadUntagged(v191, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rcx, rax <- rdx
CCall(target_address=v192, v185 T{Object}, v188 T{Object}, v195 T{int}) untagged
ParallelMove  goto:10 B62
B62
B42
ParallelMove rax <- r12
DartReturn:20(v30)
B35
v90 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v90)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v14 <- LoadField(v2 T{__Uint32ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v191 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v192 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v198 T{_Smi}, v191 T{int}, v192 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove fp[-4] <- rcx
v196 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdx <- rax
ParallelMove fp[-3] <- rdx
v40 <- AllocateTypedData:10(v196 T{int}) T{_Uint32List}
ParallelMove rcx <- rax, rax <- fp[-4]
ParallelMove fp[-5] <- rcx
Branch if RelationalOp(>, v198 T{_Smi}, v7 T{int}) T{bool} goto (20, 17)
B20
B17
Branch if RelationalOp(>, v7 T{int}, v7 T{_Smi}) T{bool} goto (21, 22)
B21
B18
ParallelMove rdi <- C, rsi <- fp[-3], rdx <- rax
StaticCall:56( checkValidRange<0> v198 T{_Smi}, v196 T{int}, v7 T{_Smi}) int64
ParallelMove  goto:62 B27
B22
B27
Branch if RelationalOp(<, v192 T{_Smi}, v7 T{int}) T{bool} goto (28, 29)
B29
Branch if EqualityCompare(v7 T{int} == v198 T{_Smi}) T{bool} goto (30, 31)
B30
ParallelMove r12 <- fp[-5] goto:140 B35
B31
ParallelMove rcx <- fp[-3]
Branch if RelationalOp:10(<, v196 T{int}, v169 T{_Smi}) T{bool} goto (51, 52)
B51
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
v203 <- LoadField(v2 T{__Uint32ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
MemoryCopy(v203 T{__Uint32ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin}, v40 T{_Uint32List}, v5 T{_Smi}, v5 T{_Smi}, v196 T{int}, dest_cid=_Int32List (131), src_cid=_Int32List (131) [untagged], element_size=4, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B50
B52
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
ParallelMove rax <- rax
v164 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v170) [-9223372036854775808, 9223372036854775807] int64
v154 <- LoadField(v40 T{_Uint32List} . PointerBase.data, MayLoadInnerPointer) untagged
v157 <- LoadField(v2 T{__Uint32ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v160 <- LoadThread() untagged
v161 <- LoadUntagged(v160, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rax, rax <- rdx
CCall(target_address=v161, v154 T{Object}, v157 T{Object}, v164 T{int}) untagged
ParallelMove  goto:10 B50
B50
B35
ParallelMove rax <- r12
DartReturn:20(v40 T{_Uint32List})
B28
v70 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v70)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v35 <- LoadField(v2 T{__Uint32List&_TypedList&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v230 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v231 <- UnboxInt64([non-speculative], v35 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v241 T{_Smi}, v230 T{int}, v231 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rcx <- fp[-2]
ParallelMove fp[-3] <- rdx
v28 <- LoadClassId(v2) [135, 137] int64
Branch if EqualityCompare:16(v28 == v29) goto (3, 8)
B3
v236 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v54 <- AllocateTypedData:10(v236 T{int}) T{_Uint32List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B8
ParallelMove rcx <- rdx
v235 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v60 <- AllocateTypedData:10(v235 T{int}) T{_Uint32List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B9
ParallelMove fp[-4] <- r8
Branch if RelationalOp(>, v241 T{_Smi}, v7 T{int}) T{bool} goto (27, 24)
B27
B24
v165 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v237 <- UnboxInt64([non-speculative], v165 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v7 T{int}, v237 T{_Smi}) T{bool} goto (28, 29)
B28
B25
v160 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v234 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rdx
v238 <- UnboxInt64([non-speculative], v160 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rdx
StaticCall:56( checkValidRange<0> v241 T{_Smi}, v234 T{int}, v238 T{_Smi}) int64
ParallelMove  goto:62 B34
B29
B34
Branch if RelationalOp(<, v231 T{_Smi}, v7 T{int}) T{bool} goto (35, 36)
B36
Branch if EqualityCompare(v7 T{int} == v241 T{_Smi}) T{bool} goto (37, 38)
B37
ParallelMove r12 <- fp[-4] goto:140 B42
B38
v233 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if RelationalOp:10(<, v233 T{int}, v200 T{_Smi}) T{bool} goto (63, 64)
B63
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
v251 <- LoadField(v2 T{__Uint32List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rax
MemoryCopy(v251 T{__Uint32List&_TypedList&_IntListMixin&_TypedIntListMixin}, v30, v5 T{_Smi}, v5 T{_Smi}, v233 T{int}, dest_cid=_Int32List (131), src_cid=_Int32List (131) [untagged], element_size=4, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B62
B64
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
ParallelMove rcx <- rcx
v195 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v201) [-9223372036854775808, 9223372036854775807] int64
v185 <- LoadField(v30 . PointerBase.data, MayLoadInnerPointer) untagged
v188 <- LoadField(v2 T{__Uint32List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v191 <- LoadThread() untagged
v192 <- LoadUntagged(v191, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rcx, rax <- rdx
CCall(target_address=v192, v185 T{Object}, v188 T{Object}, v195 T{int}) untagged
ParallelMove  goto:10 B62
B62
B42
ParallelMove rax <- r12
DartReturn:20(v30)
B35
v90 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v90)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v14 <- LoadField(v2 T{__Int32ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v191 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v192 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v198 T{_Smi}, v191 T{int}, v192 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove fp[-4] <- rcx
v196 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdx <- rax
ParallelMove fp[-3] <- rdx
v40 <- AllocateTypedData:10(v196 T{int}) T{_Int32List}
ParallelMove rcx <- rax, rax <- fp[-4]
ParallelMove fp[-5] <- rcx
Branch if RelationalOp(>, v198 T{_Smi}, v7 T{int}) T{bool} goto (20, 17)
B20
B17
Branch if RelationalOp(>, v7 T{int}, v7 T{_Smi}) T{bool} goto (21, 22)
B21
B18
ParallelMove rdi <- C, rsi <- fp[-3], rdx <- rax
StaticCall:56( checkValidRange<0> v198 T{_Smi}, v196 T{int}, v7 T{_Smi}) int64
ParallelMove  goto:62 B27
B22
B27
Branch if RelationalOp(<, v192 T{_Smi}, v7 T{int}) T{bool} goto (28, 29)
B29
Branch if EqualityCompare(v7 T{int} == v198 T{_Smi}) T{bool} goto (30, 31)
B30
ParallelMove r12 <- fp[-5] goto:140 B35
B31
ParallelMove rcx <- fp[-3]
Branch if RelationalOp:10(<, v196 T{int}, v169 T{_Smi}) T{bool} goto (51, 52)
B51
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
v203 <- LoadField(v2 T{__Int32ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
MemoryCopy(v203 T{__Int32ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin}, v40 T{_Int32List}, v5 T{_Smi}, v5 T{_Smi}, v196 T{int}, dest_cid=_Int32List (131), src_cid=_Int32List (131) [untagged], element_size=4, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B50
B52
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
ParallelMove rax <- rax
v164 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v170) [-9223372036854775808, 9223372036854775807] int64
v154 <- LoadField(v40 T{_Int32List} . PointerBase.data, MayLoadInnerPointer) untagged
v157 <- LoadField(v2 T{__Int32ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v160 <- LoadThread() untagged
v161 <- LoadUntagged(v160, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rax, rax <- rdx
CCall(target_address=v161, v154 T{Object}, v157 T{Object}, v164 T{int}) untagged
ParallelMove  goto:10 B50
B50
B35
ParallelMove rax <- r12
DartReturn:20(v40 T{_Int32List})
B28
v70 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v70)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v35 <- LoadField(v2 T{__Int32List&_TypedList&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v230 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v231 <- UnboxInt64([non-speculative], v35 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v241 T{_Smi}, v230 T{int}, v231 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rcx <- fp[-2]
ParallelMove fp[-3] <- rdx
v28 <- LoadClassId(v2) [131, 133] int64
Branch if EqualityCompare:16(v28 == v29) goto (3, 8)
B3
v236 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v54 <- AllocateTypedData:10(v236 T{int}) T{_Int32List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B8
ParallelMove rcx <- rdx
v235 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v60 <- AllocateTypedData:10(v235 T{int}) T{_Int32List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B9
ParallelMove fp[-4] <- r8
Branch if RelationalOp(>, v241 T{_Smi}, v7 T{int}) T{bool} goto (27, 24)
B27
B24
v165 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v237 <- UnboxInt64([non-speculative], v165 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v7 T{int}, v237 T{_Smi}) T{bool} goto (28, 29)
B28
B25
v160 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v234 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rdx
v238 <- UnboxInt64([non-speculative], v160 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rdx
StaticCall:56( checkValidRange<0> v241 T{_Smi}, v234 T{int}, v238 T{_Smi}) int64
ParallelMove  goto:62 B34
B29
B34
Branch if RelationalOp(<, v231 T{_Smi}, v7 T{int}) T{bool} goto (35, 36)
B36
Branch if EqualityCompare(v7 T{int} == v241 T{_Smi}) T{bool} goto (37, 38)
B37
ParallelMove r12 <- fp[-4] goto:140 B42
B38
v233 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if RelationalOp:10(<, v233 T{int}, v200 T{_Smi}) T{bool} goto (63, 64)
B63
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
v251 <- LoadField(v2 T{__Int32List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rax
MemoryCopy(v251 T{__Int32List&_TypedList&_IntListMixin&_TypedIntListMixin}, v30, v5 T{_Smi}, v5 T{_Smi}, v233 T{int}, dest_cid=_Int32List (131), src_cid=_Int32List (131) [untagged], element_size=4, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B62
B64
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
ParallelMove rcx <- rcx
v195 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v201) [-9223372036854775808, 9223372036854775807] int64
v185 <- LoadField(v30 . PointerBase.data, MayLoadInnerPointer) untagged
v188 <- LoadField(v2 T{__Int32List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v191 <- LoadThread() untagged
v192 <- LoadUntagged(v191, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rcx, rax <- rdx
CCall(target_address=v192, v185 T{Object}, v188 T{Object}, v195 T{int}) untagged
ParallelMove  goto:10 B62
B62
B42
ParallelMove rax <- r12
DartReturn:20(v30)
B35
v90 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v90)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v14 <- LoadField(v2 T{__Uint16ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v202 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v203 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v209 T{_Smi}, v202 T{int}, v203 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove fp[-4] <- rcx
v207 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdx <- rax
ParallelMove fp[-3] <- rdx
v39 <- AllocateTypedData:10(v207 T{int}) T{_Uint16List}
ParallelMove rcx <- rax, rax <- fp[-4]
ParallelMove fp[-5] <- rcx
Branch if RelationalOp(>, v209 T{_Smi}, v7 T{int}) T{bool} goto (25, 22)
B25
B22
Branch if RelationalOp(>, v7 T{int}, v7 T{_Smi}) T{bool} goto (26, 27)
B26
B23
ParallelMove rdi <- C, rsi <- fp[-3], rdx <- rax
StaticCall:56( checkValidRange<0> v209 T{_Smi}, v207 T{int}, v7 T{_Smi}) int64
ParallelMove  goto:62 B32
B27
B32
Branch if RelationalOp(<, v203 T{_Smi}, v7 T{int}) T{bool} goto (33, 34)
B34
Branch if EqualityCompare(v7 T{int} == v209 T{_Smi}) T{bool} goto (35, 36)
B35
ParallelMove r12 <- fp[-5] goto:140 B40
B36
ParallelMove rcx <- fp[-3]
Branch if RelationalOp:10(<, v207 T{int}, v180 T{_Smi}) T{bool} goto (56, 57)
B56
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
v214 <- LoadField(v2 T{__Uint16ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
MemoryCopy(v214 T{__Uint16ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin}, v39 T{_Uint16List}, v5 T{_Smi}, v5 T{_Smi}, v207 T{int}, dest_cid=_Int16List (123), src_cid=_Int16List (123) [untagged], element_size=2, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B55
B57
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
ParallelMove rax <- rax
v175 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v181) [-9223372036854775808, 9223372036854775807] int64
v165 <- LoadField(v39 T{_Uint16List} . PointerBase.data, MayLoadInnerPointer) untagged
v168 <- LoadField(v2 T{__Uint16ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v171 <- LoadThread() untagged
v172 <- LoadUntagged(v171, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rax, rax <- rdx
CCall(target_address=v172, v165 T{Object}, v168 T{Object}, v175 T{int}) untagged
ParallelMove  goto:10 B55
B55
B40
ParallelMove rax <- r12
DartReturn:20(v39 T{_Uint16List})
B33
v81 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v81)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v35 <- LoadField(v2 T{__Uint16List&_TypedList&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v241 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v242 <- UnboxInt64([non-speculative], v35 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v252 T{_Smi}, v241 T{int}, v242 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rcx <- fp[-2]
ParallelMove fp[-3] <- rdx
v28 <- LoadClassId(v2) [127, 129] int64
Branch if EqualityCompare:16(v28 == v29) goto (3, 8)
B3
v247 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v53 <- AllocateTypedData:10(v247 T{int}) T{_Uint16List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B8
ParallelMove rcx <- rdx
v246 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v59 <- AllocateTypedData:10(v246 T{int}) T{_Uint16List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B9
ParallelMove fp[-4] <- r8
Branch if RelationalOp(>, v252 T{_Smi}, v7 T{int}) T{bool} goto (32, 29)
B32
B29
v176 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v248 <- UnboxInt64([non-speculative], v176 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v7 T{int}, v248 T{_Smi}) T{bool} goto (33, 34)
B33
B30
v171 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v245 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rdx
v249 <- UnboxInt64([non-speculative], v171 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rdx
StaticCall:56( checkValidRange<0> v252 T{_Smi}, v245 T{int}, v249 T{_Smi}) int64
ParallelMove  goto:62 B39
B34
B39
Branch if RelationalOp(<, v242 T{_Smi}, v7 T{int}) T{bool} goto (40, 41)
B41
Branch if EqualityCompare(v7 T{int} == v252 T{_Smi}) T{bool} goto (42, 43)
B42
ParallelMove r12 <- fp[-4] goto:140 B47
B43
v244 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if RelationalOp:10(<, v244 T{int}, v211 T{_Smi}) T{bool} goto (68, 69)
B68
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
v262 <- LoadField(v2 T{__Uint16List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rax
MemoryCopy(v262 T{__Uint16List&_TypedList&_IntListMixin&_TypedIntListMixin}, v30, v5 T{_Smi}, v5 T{_Smi}, v244 T{int}, dest_cid=_Int16List (123), src_cid=_Int16List (123) [untagged], element_size=2, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B67
B69
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
ParallelMove rcx <- rcx
v206 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v212) [-9223372036854775808, 9223372036854775807] int64
v196 <- LoadField(v30 . PointerBase.data, MayLoadInnerPointer) untagged
v199 <- LoadField(v2 T{__Uint16List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v202 <- LoadThread() untagged
v203 <- LoadUntagged(v202, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rcx, rax <- rdx
CCall(target_address=v203, v196 T{Object}, v199 T{Object}, v206 T{int}) untagged
ParallelMove  goto:10 B67
B67
B47
ParallelMove rax <- r12
DartReturn:20(v30)
B40
v101 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v101)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v14 <- LoadField(v2 T{__Int16ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v202 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v203 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v209 T{_Smi}, v202 T{int}, v203 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove fp[-4] <- rcx
v207 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdx <- rax
ParallelMove fp[-3] <- rdx
v39 <- AllocateTypedData:10(v207 T{int}) T{_Int16List}
ParallelMove rcx <- rax, rax <- fp[-4]
ParallelMove fp[-5] <- rcx
Branch if RelationalOp(>, v209 T{_Smi}, v7 T{int}) T{bool} goto (25, 22)
B25
B22
Branch if RelationalOp(>, v7 T{int}, v7 T{_Smi}) T{bool} goto (26, 27)
B26
B23
ParallelMove rdi <- C, rsi <- fp[-3], rdx <- rax
StaticCall:56( checkValidRange<0> v209 T{_Smi}, v207 T{int}, v7 T{_Smi}) int64
ParallelMove  goto:62 B32
B27
B32
Branch if RelationalOp(<, v203 T{_Smi}, v7 T{int}) T{bool} goto (33, 34)
B34
Branch if EqualityCompare(v7 T{int} == v209 T{_Smi}) T{bool} goto (35, 36)
B35
ParallelMove r12 <- fp[-5] goto:140 B40
B36
ParallelMove rcx <- fp[-3]
Branch if RelationalOp:10(<, v207 T{int}, v180 T{_Smi}) T{bool} goto (56, 57)
B56
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
v214 <- LoadField(v2 T{__Int16ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
MemoryCopy(v214 T{__Int16ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin}, v39 T{_Int16List}, v5 T{_Smi}, v5 T{_Smi}, v207 T{int}, dest_cid=_Int16List (123), src_cid=_Int16List (123) [untagged], element_size=2, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B55
B57
ParallelMove rdx <- fp[-2], r12 <- fp[-5]
ParallelMove rax <- rax
v175 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v181) [-9223372036854775808, 9223372036854775807] int64
v165 <- LoadField(v39 T{_Int16List} . PointerBase.data, MayLoadInnerPointer) untagged
v168 <- LoadField(v2 T{__Int16ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v171 <- LoadThread() untagged
v172 <- LoadUntagged(v171, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rax, rax <- rdx
CCall(target_address=v172, v165 T{Object}, v168 T{Object}, v175 T{int}) untagged
ParallelMove  goto:10 B55
B55
B40
ParallelMove rax <- r12
DartReturn:20(v39 T{_Int16List})
B33
v81 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v81)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v35 <- LoadField(v2 T{__Int16List&_TypedList&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v241 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v242 <- UnboxInt64([non-speculative], v35 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v252 T{_Smi}, v241 T{int}, v242 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rcx <- fp[-2]
ParallelMove fp[-3] <- rdx
v28 <- LoadClassId(v2) [123, 125] int64
Branch if EqualityCompare:16(v28 == v29) goto (3, 8)
B3
v247 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v53 <- AllocateTypedData:10(v247 T{int}) T{_Int16List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B8
ParallelMove rcx <- rdx
v246 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v59 <- AllocateTypedData:10(v246 T{int}) T{_Int16List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B9
ParallelMove fp[-4] <- r8
Branch if RelationalOp(>, v252 T{_Smi}, v7 T{int}) T{bool} goto (32, 29)
B32
B29
v176 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v248 <- UnboxInt64([non-speculative], v176 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v7 T{int}, v248 T{_Smi}) T{bool} goto (33, 34)
B33
B30
v171 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v245 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rdx
v249 <- UnboxInt64([non-speculative], v171 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rdx
StaticCall:56( checkValidRange<0> v252 T{_Smi}, v245 T{int}, v249 T{_Smi}) int64
ParallelMove  goto:62 B39
B34
B39
Branch if RelationalOp(<, v242 T{_Smi}, v7 T{int}) T{bool} goto (40, 41)
B41
Branch if EqualityCompare(v7 T{int} == v252 T{_Smi}) T{bool} goto (42, 43)
B42
ParallelMove r12 <- fp[-4] goto:140 B47
B43
v244 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if RelationalOp:10(<, v244 T{int}, v211 T{_Smi}) T{bool} goto (68, 69)
B68
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
v262 <- LoadField(v2 T{__Int16List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rax
MemoryCopy(v262 T{__Int16List&_TypedList&_IntListMixin&_TypedIntListMixin}, v30, v5 T{_Smi}, v5 T{_Smi}, v244 T{int}, dest_cid=_Int16List (123), src_cid=_Int16List (123) [untagged], element_size=2, can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B67
B69
ParallelMove rdx <- fp[-2], r12 <- fp[-4]
ParallelMove rcx <- rcx
v206 <- SpeculativeShiftInt64Op:24(<< [tr], v7 T{int}, v212) [-9223372036854775808, 9223372036854775807] int64
v196 <- LoadField(v30 . PointerBase.data, MayLoadInnerPointer) untagged
v199 <- LoadField(v2 T{__Int16List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v202 <- LoadThread() untagged
v203 <- LoadUntagged(v202, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rcx, rax <- rdx
CCall(target_address=v203, v196 T{Object}, v199 T{Object}, v206 T{int}) untagged
ParallelMove  goto:10 B67
B67
B47
ParallelMove rax <- r12
DartReturn:20(v30)
B40
v101 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v101)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v14 <- LoadField(v2 T{__Uint8ClampedArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v195 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v196 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v202 T{_Smi}, v195 T{int}, v196 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove fp[-4] <- rcx
v200 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdx <- rax
ParallelMove fp[-3] <- rdx
v40 <- AllocateTypedData:10(v200 T{int}) T{_Uint8ClampedList}
ParallelMove rcx <- rax, rax <- fp[-4]
ParallelMove fp[-5] <- rcx
Branch if RelationalOp(>, v202 T{_Smi}, v7 T{int}) T{bool} goto (20, 17)
B20
B17
Branch if RelationalOp(>, v7 T{int}, v7 T{_Smi}) T{bool} goto (21, 22)
B21
B18
ParallelMove rdi <- C, rsi <- fp[-3], rdx <- rax
StaticCall:56( checkValidRange<0> v202 T{_Smi}, v200 T{int}, v7 T{_Smi}) int64
ParallelMove  goto:62 B27
B22
B27
Branch if RelationalOp(<, v196 T{_Smi}, v7 T{int}) T{bool} goto (28, 29)
B29
Branch if EqualityCompare(v7 T{int} == v202 T{_Smi}) T{bool} goto (30, 31)
B30
ParallelMove r12 <- fp[-5] goto:140 B35
B31
ParallelMove rcx <- fp[-3]
Branch if RelationalOp:20(<, v200 T{int}, v174 T{_Smi}) T{bool} goto (56, 57)
B56
ParallelMove rax <- fp[-2], r12 <- fp[-5]
v207 <- LoadField(v2 T{__Uint8ClampedArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
MemoryCopy(v207 T{__Uint8ClampedArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin}, v40 T{_Uint8ClampedList}, v5 T{_Smi}, v5 T{_Smi}, v200 T{int}, dest_cid=_Int8List (111), src_cid=_Int8List (111) [untagged], can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:20 B55
B57
ParallelMove rax <- fp[-2], r12 <- fp[-5]
v161 <- LoadField(v40 T{_Uint8ClampedList} . PointerBase.data, MayLoadInnerPointer) untagged
v164 <- LoadField(v2 T{__Uint8ClampedArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v167 <- LoadThread() untagged
v168 <- LoadUntagged(v167, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx, rax <- rcx
CCall(target_address=v168, v161 T{Object}, v164 T{Object}, v7 T{int}) untagged
ParallelMove  goto:20 B55
B55
B35
ParallelMove rax <- r12
DartReturn:20(v40 T{_Uint8ClampedList})
B28
v70 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v70)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v35 <- LoadField(v2 T{__Uint8ClampedList&_TypedList&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v246 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v247 <- UnboxInt64([non-speculative], v35 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v257 T{_Smi}, v246 T{int}, v247 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rcx <- fp[-2]
ParallelMove fp[-3] <- rdx
v28 <- LoadClassId(v2) [119, 121] int64
Branch if EqualityCompare:16(v28 == v29) goto (3, 8)
B3
v252 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v54 <- AllocateTypedData:10(v252 T{int}) T{_Uint8ClampedList}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B8
v251 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v60 <- AllocateTypedData:10(v251 T{int}) T{_Uint8ClampedList}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B9
ParallelMove fp[-4] <- r8
Branch if RelationalOp(>, v257 T{_Smi}, v7 T{int}) T{bool} goto (27, 24)
B27
B24
v167 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v253 <- UnboxInt64([non-speculative], v167 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v7 T{int}, v253 T{_Smi}) T{bool} goto (28, 29)
B28
B25
v162 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v250 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rdx
v254 <- UnboxInt64([non-speculative], v162 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rdx
StaticCall:56( checkValidRange<0> v257 T{_Smi}, v250 T{int}, v254 T{_Smi}) int64
ParallelMove  goto:62 B34
B29
B34
Branch if RelationalOp(<, v247 T{_Smi}, v7 T{int}) T{bool} goto (35, 36)
B36
Branch if EqualityCompare(v7 T{int} == v257 T{_Smi}) T{bool} goto (37, 69)
B37
ParallelMove r12 <- fp[-4] goto:140 B42
B69
v249 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if RelationalOp:20(<, v249 T{int}, v215 T{_Smi}) T{bool} goto (73, 74)
B73
ParallelMove rcx <- fp[-2], r12 <- fp[-4]
v268 <- LoadField(v2 T{__Uint8ClampedList&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rax
MemoryCopy(v268 T{__Uint8ClampedList&_TypedList&_IntListMixin&_TypedIntListMixin}, v30, v5 T{_Smi}, v5 T{_Smi}, v249 T{int}, dest_cid=_Int8List (111), src_cid=_Int8List (111) [untagged], can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:20 B72
B74
ParallelMove rcx <- fp[-2], r12 <- fp[-4]
v202 <- LoadField(v30 . PointerBase.data, MayLoadInnerPointer) untagged
v205 <- LoadField(v2 T{__Uint8ClampedList&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v208 <- LoadThread() untagged
v209 <- LoadUntagged(v208, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx, rax <- rcx
CCall(target_address=v209, v202 T{Object}, v205 T{Object}, v7 T{int}) untagged
ParallelMove  goto:20 B72
B72
B42
ParallelMove rax <- r12
DartReturn:20(v30)
B35
v90 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v90)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v14 <- LoadField(v2 T{__Uint8ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v188 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v189 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v195 T{_Smi}, v188 T{int}, v189 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove fp[-4] <- rcx
v193 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdx <- rax
ParallelMove fp[-3] <- rdx
v40 <- AllocateTypedData:10(v193 T{int}) T{_Uint8List}
ParallelMove rcx <- rax, rax <- fp[-4]
ParallelMove fp[-5] <- rcx
Branch if RelationalOp(>, v195 T{_Smi}, v7 T{int}) T{bool} goto (20, 17)
B20
B17
Branch if RelationalOp(>, v7 T{int}, v7 T{_Smi}) T{bool} goto (21, 22)
B21
B18
ParallelMove rdi <- C, rsi <- fp[-3], rdx <- rax
StaticCall:56( checkValidRange<0> v195 T{_Smi}, v193 T{int}, v7 T{_Smi}) int64
ParallelMove  goto:62 B27
B22
B27
Branch if RelationalOp(<, v189 T{_Smi}, v7 T{int}) T{bool} goto (28, 29)
B29
Branch if EqualityCompare(v7 T{int} == v195 T{_Smi}) T{bool} goto (30, 31)
B30
ParallelMove r12 <- fp[-5] goto:140 B35
B31
ParallelMove rcx <- fp[-3]
Branch if RelationalOp:10(<, v193 T{int}, v167 T{_Smi}) T{bool} goto (51, 52)
B51
ParallelMove rax <- fp[-2], r12 <- fp[-5]
v200 <- LoadField(v2 T{__Uint8ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
MemoryCopy(v200 T{__Uint8ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin}, v40 T{_Uint8List}, v5 T{_Smi}, v5 T{_Smi}, v193 T{int}, dest_cid=_Int8List (111), src_cid=_Int8List (111) [untagged], can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B50
B52
ParallelMove rax <- fp[-2], r12 <- fp[-5]
v154 <- LoadField(v40 T{_Uint8List} . PointerBase.data, MayLoadInnerPointer) untagged
v157 <- LoadField(v2 T{__Uint8ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v160 <- LoadThread() untagged
v161 <- LoadUntagged(v160, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx, rax <- rcx
CCall(target_address=v161, v154 T{Object}, v157 T{Object}, v7 T{int}) untagged
ParallelMove  goto:10 B50
B50
B35
ParallelMove rax <- r12
DartReturn:20(v40 T{_Uint8List})
B28
v70 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v70)
CheckStackOverflowSlowPath
Checking for concrete finalized classes:
 * 115 (_Uint8List)
 * 116 (_Uint8ArrayView)
 * 117 (_ExternalUint8Array)
 * 118 (_UnmodifiableUint8ArrayView)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v35 <- LoadField(v2 T{__Uint8List&_TypedList&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v227 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v228 <- UnboxInt64([non-speculative], v35 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v238 T{_Smi}, v227 T{int}, v228 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rcx <- fp[-2]
ParallelMove fp[-3] <- rdx
v28 <- LoadClassId(v2) [115, 117] int64
Branch if EqualityCompare:16(v28 == v29) goto (3, 8)
B3
v233 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v54 <- AllocateTypedData:10(v233 T{int}) T{_Uint8List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B8
v232 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v60 <- AllocateTypedData:10(v232 T{int}) T{_Uint8List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B9
ParallelMove fp[-4] <- r8
Branch if RelationalOp(>, v238 T{_Smi}, v7 T{int}) T{bool} goto (27, 24)
B27
B24
v165 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v234 <- UnboxInt64([non-speculative], v165 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v7 T{int}, v234 T{_Smi}) T{bool} goto (28, 29)
B28
B25
v160 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v231 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rdx
v235 <- UnboxInt64([non-speculative], v160 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rdx
StaticCall:56( checkValidRange<0> v238 T{_Smi}, v231 T{int}, v235 T{_Smi}) int64
ParallelMove  goto:62 B34
B29
B34
Branch if RelationalOp(<, v228 T{_Smi}, v7 T{int}) T{bool} goto (35, 36)
B36
Branch if EqualityCompare(v7 T{int} == v238 T{_Smi}) T{bool} goto (37, 38)
B37
ParallelMove r12 <- fp[-4] goto:140 B42
B38
v230 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if RelationalOp:10(<, v230 T{int}, v198 T{_Smi}) T{bool} goto (63, 64)
B63
ParallelMove rcx <- fp[-2], r12 <- fp[-4]
v248 <- LoadField(v2 T{__Uint8List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rax
MemoryCopy(v248 T{__Uint8List&_TypedList&_IntListMixin&_TypedIntListMixin}, v30, v5 T{_Smi}, v5 T{_Smi}, v230 T{int}, dest_cid=_Int8List (111), src_cid=_Int8List (111) [untagged], can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B62
B64
ParallelMove rcx <- fp[-2], r12 <- fp[-4]
v185 <- LoadField(v30 . PointerBase.data, MayLoadInnerPointer) untagged
v188 <- LoadField(v2 T{__Uint8List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v191 <- LoadThread() untagged
v192 <- LoadUntagged(v191, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx, rax <- rcx
CCall(target_address=v192, v185 T{Object}, v188 T{Object}, v7 T{int}) untagged
ParallelMove  goto:10 B62
B62
B42
ParallelMove rax <- r12
DartReturn:20(v30)
B35
v90 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v90)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v14 <- LoadField(v2 T{__Int8ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v188 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v189 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v195 T{_Smi}, v188 T{int}, v189 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove fp[-4] <- rcx
v193 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdx <- rax
ParallelMove fp[-3] <- rdx
v40 <- AllocateTypedData:10(v193 T{int}) T{_Int8List}
ParallelMove rcx <- rax, rax <- fp[-4]
ParallelMove fp[-5] <- rcx
Branch if RelationalOp(>, v195 T{_Smi}, v7 T{int}) T{bool} goto (20, 17)
B20
B17
Branch if RelationalOp(>, v7 T{int}, v7 T{_Smi}) T{bool} goto (21, 22)
B21
B18
ParallelMove rdi <- C, rsi <- fp[-3], rdx <- rax
StaticCall:56( checkValidRange<0> v195 T{_Smi}, v193 T{int}, v7 T{_Smi}) int64
ParallelMove  goto:62 B27
B22
B27
Branch if RelationalOp(<, v189 T{_Smi}, v7 T{int}) T{bool} goto (28, 29)
B29
Branch if EqualityCompare(v7 T{int} == v195 T{_Smi}) T{bool} goto (30, 31)
B30
ParallelMove r12 <- fp[-5] goto:140 B35
B31
ParallelMove rcx <- fp[-3]
Branch if RelationalOp:10(<, v193 T{int}, v167 T{_Smi}) T{bool} goto (51, 52)
B51
ParallelMove rax <- fp[-2], r12 <- fp[-5]
v200 <- LoadField(v2 T{__Int8ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
MemoryCopy(v200 T{__Int8ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin}, v40 T{_Int8List}, v5 T{_Smi}, v5 T{_Smi}, v193 T{int}, dest_cid=_Int8List (111), src_cid=_Int8List (111) [untagged], can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B50
B52
ParallelMove rax <- fp[-2], r12 <- fp[-5]
v154 <- LoadField(v40 T{_Int8List} . PointerBase.data, MayLoadInnerPointer) untagged
v157 <- LoadField(v2 T{__Int8ArrayView&_TypedListView&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v160 <- LoadThread() untagged
v161 <- LoadUntagged(v160, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx, rax <- rcx
CCall(target_address=v161, v154 T{Object}, v157 T{Object}, v7 T{int}) untagged
ParallelMove  goto:10 B50
B50
B35
ParallelMove rax <- r12
DartReturn:20(v40 T{_Int8List})
B28
v70 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v70)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v35 <- LoadField(v2 T{__Int8List&_TypedList&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v227 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v228 <- UnboxInt64([non-speculative], v35 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v238 T{_Smi}, v227 T{int}, v228 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rcx <- fp[-2]
ParallelMove fp[-3] <- rdx
v28 <- LoadClassId(v2) [111, 113] int64
Branch if EqualityCompare:16(v28 == v29) goto (3, 8)
B3
v233 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v54 <- AllocateTypedData:10(v233 T{int}) T{_Int8List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B8
v232 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v60 <- AllocateTypedData:10(v232 T{int}) T{_Int8List}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:12 B9
B9
ParallelMove fp[-4] <- r8
Branch if RelationalOp(>, v238 T{_Smi}, v7 T{int}) T{bool} goto (27, 24)
B27
B24
v165 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v234 <- UnboxInt64([non-speculative], v165 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v7 T{int}, v234 T{_Smi}) T{bool} goto (28, 29)
B28
B25
v160 <- LoadField(v30 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v231 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rdx
v235 <- UnboxInt64([non-speculative], v160 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rdx
StaticCall:56( checkValidRange<0> v238 T{_Smi}, v231 T{int}, v235 T{_Smi}) int64
ParallelMove  goto:62 B34
B29
B34
Branch if RelationalOp(<, v228 T{_Smi}, v7 T{int}) T{bool} goto (35, 36)
B36
Branch if EqualityCompare(v7 T{int} == v238 T{_Smi}) T{bool} goto (37, 38)
B37
ParallelMove r12 <- fp[-4] goto:140 B42
B38
v230 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if RelationalOp:10(<, v230 T{int}, v198 T{_Smi}) T{bool} goto (63, 64)
B63
ParallelMove rcx <- fp[-2], r12 <- fp[-4]
v248 <- LoadField(v2 T{__Int8List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rax
MemoryCopy(v248 T{__Int8List&_TypedList&_IntListMixin&_TypedIntListMixin}, v30, v5 T{_Smi}, v5 T{_Smi}, v230 T{int}, dest_cid=_Int8List (111), src_cid=_Int8List (111) [untagged], can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B62
B64
ParallelMove rcx <- fp[-2], r12 <- fp[-4]
v185 <- LoadField(v30 . PointerBase.data, MayLoadInnerPointer) untagged
v188 <- LoadField(v2 T{__Int8List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v191 <- LoadThread() untagged
v192 <- LoadUntagged(v191, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx, rax <- rcx
CCall(target_address=v192, v185 T{Object}, v188 T{Object}, v7 T{int}) untagged
ParallelMove  goto:10 B62
B62
B42
ParallelMove rax <- r12
DartReturn:20(v30)
B35
v90 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v90)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v46 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v60 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rsi <- rsi
v61 <- UnboxInt64([non-speculative], v46 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rsi
v7 <- StaticCall:12( checkValidRange<0> v67 T{_Smi}, v60 T{int}, v61 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove fp[-3] <- rcx
Branch if EqualityCompare(v7 T{int} == v67 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rdx <- fp[-1]
v20 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdi <- rdi, rsi <- C
v21 <- StaticCall:26( _GrowableList@0150898.<0> v20, v67 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
DartReturn:28(v21)
B4
ParallelMove rdx <- fp[-1]
v62 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rbx <- C, r10 <- rax, rax <- rax
ParallelMove fp[-2] <- rax
v41 <- CreateArray:10(v0 T{Null?}, v62 T{int}, <not-aliased>) T{_List}
ParallelMove rsi <- rax, rcx <- fp[-1]
ParallelMove fp[-4] <- rsi
v22 <- LoadField:56(v2 . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rdi <- rax
v64 <- UnboxInt64:56([non-speculative], v22) [0, 576460752303423487] int64
v24 <- LoadField:56(v2 . GrowableObjectArray.data) T{_List}
ParallelMove r10 <- C, r9 <- fp[-3] goto:56 B7
B7
  Loop 0
CheckStackOverflow:60(stack=0, loop=1)
Branch if RelationalOp(<, v12, v7 T{int}) T{bool} goto (5, 6)
B5
  Loop 0
ParallelMove rax <- rdi, rbx <- r10
GenericCheckBound:50(v64 T{_Smi}, v12 T{int}) [-9223372036854775808, 9223372036854775807] int64
v68 <- LoadIndexed:50([_List] v24, v12 T{int}) T{X0?}
ParallelMove rdx <- rsi, rax <- rax
StoreIndexed:52([_List] v41 T{_List}, v12 T{int}, v68 T{X0?})
ParallelMove r10 <- r10
v19 <- BinaryInt64Op(+ [tr], v12 T{int}, v69 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- r10 goto:58 B7
B6
ParallelMove rax <- fp[-2]
v14 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx
v34 <- AllocateObject:10(cls=_GrowableList, v14 T{TypeArguments}, <not-aliased>) T{_GrowableList}
ParallelMove rax <- rax, rcx <- fp[-4]
StoreField(v34 . GrowableObjectArray.data = v41 T{_List}, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreField(v34 T{_GrowableList} . GrowableObjectArray.length = v62 T{int}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:66(v34 T{_GrowableList})
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax
v4 <- StaticCall:10( _allocateData@0150898<0> v3, result_type = T{_List}) T{_List}
ParallelMove rdx <- fp[-1], rax <- rax
ParallelMove fp[-1] <- rax
v15 <- AllocateObject:10(cls=_GrowableList, v2 T{*?}, <not-aliased>) T{_GrowableList}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v15 . GrowableObjectArray.data = v4 T{_List}, NoStoreBarrier)
StoreField(v15 . GrowableObjectArray.length = v6 T{_Smi}, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
Branch if RelationalOp(>, v3, v23 T{_Smi}) T{bool} goto (3, 4)
B3
v22 <- BoxInt64(v3) [-4611686018427387904, 4611686018427387903] T{_Smi}
StoreField(v15 T{_GrowableList} . GrowableObjectArray.length = v22 T{_Smi}, NoStoreBarrier)
ParallelMove  goto:30 B5
B4
B5
ParallelMove rax <- rax
DartReturn:34(v15 T{_GrowableList})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove r8 <- rdi, rcx <- rdx, fp[-1] <- rdi, fp[-2] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v31 <- LoadClassId(v2) [89, 564] int64
Branch if TestRange:10(v31 in [89-90]) goto (3, 10)
B3
v14 <- LoadField(v2 T{_Array<X0>} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v43 <- UnboxInt64([non-speculative], v14) [0, 576460752303423487] int64
ParallelMove rdx <- rax goto:10 B12
B10
Branch if EqualityCompare:10(v31 == v32) goto (5, 11)
B5
v21 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v44 <- UnboxInt64([non-speculative], v21) [0, 576460752303423487] int64
ParallelMove rdx <- rax goto:10 B12
B11
v28 <- LoadField(v2 T{CodeUnits} . _string@9040228 {final}) T{String}
v38 <- LoadField(v28 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v45 <- UnboxInt64([non-speculative], v38 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdx <- rdx goto:14 B12
B12
v42 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- C, rsi <- rax, rdx <- rdx
StaticCall:12( checkValidRange<0> v46 T{_Smi}, v42 T{int}, v33 T{_Smi}) int64
ParallelMove rdi <- fp[-1]
v7 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdi <- rdi, rsi <- fp[-2], fp[-3] <- rax
v8 <- StaticCall:14( getRange<0> v2, v4, using unchecked entrypoint, result_type = T{SubListIterable}) T{SubListIterable}
ParallelMove rdi <- fp[-3], rsi <- rax
v9 <- StaticCall:16( List.from<0> v7, v8, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
DartReturn:18(v9)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rsi <- rdi, rbx <- rsi, fp[-2] <- rdi, fp[-3] <- rsi
v6 <- LoadField(v4 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
v13 <- LoadIndexed([_List] v4, v11 T{_Smi}) T{*?}
Branch if StrictCompare:16(===, v13, v14) goto (2, 3)
B2
v29 <- LoadIndexed([_List] v4, v27 T{_Smi}) T{*?}
ParallelMove rax <- rax
v30 <- BinarySmiOp:10(- [tr], v6, v29) [-4611686018427387903, 4611686018427387903] T{_Smi}
v31 <- LoadIndexedUnsafe(rbp[v30 + 8]) T{bool}
ParallelMove rdi <- rcx goto:26 B5
B3
ParallelMove rdi <- C goto:28 B5
B5
ParallelMove fp[-1] <- rdi
CheckStackOverflow:34(stack=0, loop=0)
ParallelMove rax <- rbx, rdx <- rsi, rcx <- C
v18 <- InstanceOf:36(v3 IS Iterable<X0>, instantiator_type_args(v2), function_type_args(v0)) T{bool}
InlineInstanceof
UninstantiatedTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:40(===, v18 T{bool}, v15) goto (6, 7)
BoolTest
B6
ParallelMove rax <- fp[-1]
Branch if StrictCompare:12(===, v16 T{bool}, v15 T{bool}) goto (36, 37)
BoolTest
B36
ParallelMove rdi <- fp[-2], rsi <- fp[-3]
v111 <- StaticCall:18( _GrowableList@0150898.of<0> v2 T{*?}, v3 T{Iterable<X0>}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:26 B38
B37
ParallelMove rdi <- fp[-2], rsi <- fp[-3]
v109 <- StaticCall:22( _List@0150898.of<0> v2 T{*?}, v3 T{Iterable<X0>}, result_type = T{_List}) T{_List}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:28 B38
B38
ParallelMove rax <- rax
DartReturn:48(v110 T{List<X0>})
B7
ParallelMove rcx <- fp[-3], rax <- fp[-1]
ParallelMove rdi <- fp[-2], rsi <- C
v19 <- StaticCall:52( _GrowableList@0150898.<0> v2, v196 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax, rdi <- fp[-3]
ParallelMove fp[-4] <- rax
v226 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rdi
v20 <- DispatchTableCall( cid=v226 Iterable.iterator<0>, v3) T{*?}
ParallelMove rax <- rax
ParallelMove fp[-7] <- rax
v74 <- LoadField:76(v20 T{ListIterator} . _iterable@9040228 {final}) T{Iterable<X0>}
ParallelMove fp[-6] <- rdi
v76 <- LoadField:76(v20 T{ListIterator} . _length@9040228 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-5] <- rdx
v42 <- LoadField:76(v20 T{ListIterator} . :type_arguments {final}) T{TypeArguments}
ParallelMove fp[-3] <- rbx
ParallelMove rsi <- fp[-4] goto:76 B10
B10
  Loop 0
CheckStackOverflow:80(stack=0, loop=1)
v227 <- LoadClassId(<non-smi> v74) int64
MoveArgument(sp[0] <- v74)
ParallelMove rcx <- rcx
v75 <- DispatchTableCall( cid=v227 Iterable.length<0>, v74) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v186 <- UnboxInt64([non-speculative], v75 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-5]
Branch if EqualityCompare(v76 != v186 T{int}) T{bool} goto (29, 30)
B30
  Loop 0
ParallelMove rbx <- fp[-7]
v79 <- LoadField(v20 T{ListIterator} . _index@9040228) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v79, v186 T{int}) T{bool} goto (9, 8)
B8
  Loop 0
ParallelMove rax <- fp[-6]
v228 <- LoadClassId(<non-smi> v74 T{Iterable<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- rsi
v83 <- DispatchTableCall( cid=v228 Iterable.elementAt<0>, v74 T{Iterable<X0>}, v79 T{int}) T{*?}
ParallelMove rax <- rax, rsi <- rax, rbx <- fp[-7]
ParallelMove fp[-8] <- rsi
StoreField(v20 T{ListIterator} . _current@9040228 = v83 T{X0?})
v84 <- LoadField(v20 T{ListIterator} . _index@9040228) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v86 <- BinaryInt64Op(+ [tr], v84, v197 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v20 T{ListIterator} . _index@9040228 = v86 T{int} <int64>)
Branch if StrictCompare:12(===, v83 T{X0?}, v0 T{Null?}) goto (15, 16)
B15
  Loop 0
ParallelMove rax <- rsi, rdx <- fp[-3], rcx <- C
t0 <- AssertAssignable:18(v83 T{X0?}, v24 T{_TypeParameter}, ' in type cast', instantiator_type_args(v42), function_type_args(v0 T{Null?})) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove  goto:24 B17
B16
B17
  Loop 0
ParallelMove rax <- fp[-8], rdx <- fp[-2], rcx <- C
t0 <- AssertAssignable:70(v83 T{X0?}, v24, '', instantiator_type_args(v2), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-4]
v120 <- LoadField(v19 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v125 <- LoadField(v19 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v126 <- LoadField(v125 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v189 <- UnboxInt64([non-speculative], v120 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-9] <- rcx
ParallelMove rbx <- rbx
v190 <- UnboxInt64([non-speculative], v126 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v189 T{_Smi} == v190 T{_Smi}) T{bool} goto (20, 21)
B20
  Loop 0
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v19 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B22
B21
B22
  Loop 0
ParallelMove rax <- rsi
v62 <- BinaryInt64Op(+ [tr], v189 T{_Smi}, v197 T{_Smi}) [1, 576460752303423488] int64
v191 <- BoxInt64(v62) [1, 576460752303423488] T{_Smi}
StoreField(v19 T{_GrowableList} . GrowableObjectArray.length = v191, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v62 T{_Smi}, v189 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v65 <- LoadField(v19 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-8]
StoreIndexed:40([_List] v65, v189 T{_Smi}, v83 T{X0?})
ParallelMove rsi <- rcx, rax <- fp[-7], rbx <- fp[-3], rdi <- fp[-6], rdx <- fp[-5] goto:78 B10
B9
ParallelMove rbx <- C, rdx <- fp[-1], rcx <- fp[-4], rax <- rbx
StoreField(v20 T{ListIterator} . _current@9040228 = v0 T{Null?})
Branch if StrictCompare:84(===, v16 T{bool}, v15) goto (11, 12)
BoolTest
B11
ParallelMove rax <- rcx
DartReturn:90(v19)
B12
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v19)
v22 <- StaticCall:94( makeListFixedLength<1> v2, v19, result_type = T{_List}) T{_List}
ParallelMove rax <- rax
DartReturn:96(v22)
B29
ParallelMove rax <- fp[-6]
v88 <- AllocateObject:26(cls=ConcurrentModificationError, <not-aliased>) T{ConcurrentModificationError}
ParallelMove rcx <- rax, rax <- fp[-6]
StoreField(v88 T{ConcurrentModificationError} . modifiedObject = v74 T{Iterable<X0>}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:32(v88)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
v4 <- LoadField(v3 . ArgumentsDescriptor.type_args_len {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare:4(===, v4, v5) goto (2, 3)
B2
ParallelMove rcx <- C goto:14 B5
B3
v6 <- LoadField(v3 . ArgumentsDescriptor.size {final}) [0, 4611686018427387903] T{_Smi}
v7 <- LoadIndexedUnsafe(rbp[v6 + 16]) T{TypeArguments?}
ParallelMove rcx <- rcx goto:16 B5
B5
ParallelMove fp[-1] <- rcx
MoveArgument(sp[2] <- v8)
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v9 <- NativeCall(Internal_makeListFixedLength) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- fp[-1], rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:22(v9, v10, 'function result', instantiator_type_args(v0), function_type_args(v8)) T{List<Y0>}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:24(v9 T{List<Y0>})
B0
B1
ParallelMove rax <- C
DartReturn:6(v2)
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v5 <- StaticCall:10( _unsupportedPrint@9040228<0> v3) T{void?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v3 <- AllocateObject:10(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v3 T{UnsupportedError} . message = v4 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:14(v3)
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(Internal_boundsCheckForPartialInstantiation) T{*?}
ParallelMove rax <- rax
DartReturn:8(v4)
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[4] <- v2)
MoveArgument(sp[3] <- v3)
MoveArgument(sp[2] <- v4)
MoveArgument(sp[1] <- v5)
MoveArgument(sp[0] <- v0)
v6 <- NativeCall(Internal_prependTypeArguments) T{*?}
ParallelMove rax <- rax
DartReturn:8(v6)
B0
B1
Enter frame
PrologueOffset = 0
v2 <- LoadStaticField:4(_printClosure@9040228, CallsInitializer) T{_Closure}
ParallelMove rax <- rax
DartReturn:6(v2)
Checking for concrete finalized classes:
 * 89 (_List)
 * 90 (_ImmutableList)
 * 91 (_GrowableList)
Not checking the following concrete implementors of List:
 * 111(_Int8List): cannot check that List<int> is a subtype of List<Y0>
 * 112(_Int8ArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 113(_ExternalInt8Array): cannot check that List<int> is a subtype of List<Y0>
 * 114(_UnmodifiableInt8ArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 115(_Uint8List): cannot check that List<int> is a subtype of List<Y0>
 * 116(_Uint8ArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 117(_ExternalUint8Array): cannot check that List<int> is a subtype of List<Y0>
 * 118(_UnmodifiableUint8ArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 119(_Uint8ClampedList): cannot check that List<int> is a subtype of List<Y0>
 * 120(_Uint8ClampedArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 121(_ExternalUint8ClampedArray): cannot check that List<int> is a subtype of List<Y0>
 * 122(_UnmodifiableUint8ClampedArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 123(_Int16List): cannot check that List<int> is a subtype of List<Y0>
 * 124(_Int16ArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 125(_ExternalInt16Array): cannot check that List<int> is a subtype of List<Y0>
 * 126(_UnmodifiableInt16ArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 127(_Uint16List): cannot check that List<int> is a subtype of List<Y0>
 * 128(_Uint16ArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 129(_ExternalUint16Array): cannot check that List<int> is a subtype of List<Y0>
 * 130(_UnmodifiableUint16ArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 131(_Int32List): cannot check that List<int> is a subtype of List<Y0>
 * 132(_Int32ArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 133(_ExternalInt32Array): cannot check that List<int> is a subtype of List<Y0>
 * 134(_UnmodifiableInt32ArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 135(_Uint32List): cannot check that List<int> is a subtype of List<Y0>
 * 136(_Uint32ArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 137(_ExternalUint32Array): cannot check that List<int> is a subtype of List<Y0>
 * 138(_UnmodifiableUint32ArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 139(_Int64List): cannot check that List<int> is a subtype of List<Y0>
 * 140(_Int64ArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 141(_ExternalInt64Array): cannot check that List<int> is a subtype of List<Y0>
 * 142(_UnmodifiableInt64ArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 143(_Uint64List): cannot check that List<int> is a subtype of List<Y0>
 * 144(_Uint64ArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 145(_ExternalUint64Array): cannot check that List<int> is a subtype of List<Y0>
 * 146(_UnmodifiableUint64ArrayView): cannot check that List<int> is a subtype of List<Y0>
 * 147(_Float32List): cannot check that List<double> is a subtype of List<Y0>
 * 148(_Float32ArrayView): cannot check that List<double> is a subtype of List<Y0>
 * 149(_ExternalFloat32Array): cannot check that List<double> is a subtype of List<Y0>
 * 150(_UnmodifiableFloat32ArrayView): cannot check that List<double> is a subtype of List<Y0>
 * 151(_Float64List): cannot check that List<double> is a subtype of List<Y0>
 * 152(_Float64ArrayView): cannot check that List<double> is a subtype of List<Y0>
 * 153(_ExternalFloat64Array): cannot check that List<double> is a subtype of List<Y0>
 * 154(_UnmodifiableFloat64ArrayView): cannot check that List<double> is a subtype of List<Y0>
 * 155(_Float32x4List): cannot check that List<Float32x4> is a subtype of List<Y0>
 * 156(_Float32x4ArrayView): cannot check that List<Float32x4> is a subtype of List<Y0>
 * 157(_ExternalFloat32x4Array): cannot check that List<Float32x4> is a subtype of List<Y0>
 * 158(_UnmodifiableFloat32x4ArrayView): cannot check that List<Float32x4> is a subtype of List<Y0>
 * 159(_Int32x4List): cannot check that List<Int32x4> is a subtype of List<Y0>
 * 160(_Int32x4ArrayView): cannot check that List<Int32x4> is a subtype of List<Y0>
 * 161(_ExternalInt32x4Array): cannot check that List<Int32x4> is a subtype of List<Y0>
 * 162(_UnmodifiableInt32x4ArrayView): cannot check that List<Int32x4> is a subtype of List<Y0>
 * 163(_Float64x2List): cannot check that List<Float64x2> is a subtype of List<Y0>
 * 164(_Float64x2ArrayView): cannot check that List<Float64x2> is a subtype of List<Y0>
 * 165(_ExternalFloat64x2Array): cannot check that List<Float64x2> is a subtype of List<Y0>
 * 166(_UnmodifiableFloat64x2ArrayView): cannot check that List<Float64x2> is a subtype of List<Y0>
 * 564(CodeUnits): cannot check that List<int> is a subtype of List<Y0>
Generating check for type argument 0: Y0
Checking instantiated type parameter for possible top types
Checking for legacy or non-nullable instance type argument
Checking instance type argument for possible bottom types
Checking for legacy or nullable instantiated type parameter
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rdi, rax <- rsi, fp[-2] <- rsi, fp[-3] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v14 <- LoadClassId(v3) [87, 564] int64
Branch if EqualityCompare(v14 == v15) T{bool} goto (3, 4)
B3
v53 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rbx <- rbx, r10 <- rcx, fp[-1] <- rcx
v60 <- CreateArray:10(v2 T{*?}, v53 T{_Smi}, <not-aliased>) T{_List}
ParallelMove rcx <- rax
ParallelMove rbx <- fp[-1]
v80 <- UnboxInt64([non-speculative], v53 T{_Smi}) [0, 576460752303423487] int64
Branch if RelationalOp(>, v80 T{_Smi}, v86 T{_Smi}) T{bool} goto (9, 13)
B9
ParallelMove rsi <- fp[-2]
v35 <- LoadField:44(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rsi <- C goto:44 B12
B12
  Loop 0
CheckStackOverflow:48(stack=0, loop=1)
Branch if RelationalOp(<, v28, v80 T{_Smi}) T{bool} goto (10, 11)
B10
  Loop 0
v87 <- LoadIndexed:38([_List] v35, v28 T{int}) T{X0?}
ParallelMove rdx <- rcx, rax <- rax
StoreIndexed:40([_List] v60 T{_List}, v28 T{int}, v87 T{X0?})
ParallelMove rsi <- rsi
v32 <- BinaryInt64Op(+ [tr], v28 T{int}, v88 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:46 B12
B11
B13
B14
ParallelMove rax <- rcx
DartReturn:22(v60 T{_List})
B4
ParallelMove rsi <- rax
ParallelMove rax <- rsi, rdx <- C, rcx <- C
v8 <- InstanceOf:26(v3 IS EfficientLengthIterable<dynamic>, instantiator_type_args(v0), function_type_args(v0)) T{bool}
InlineInstanceof
InstantiatedTypeWithArgumentsTest
Subtype1TestCacheLookup
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:30(===, v8 T{bool}, v6) goto (5, 6)
BoolTest
B5
ParallelMove rdi <- fp[-3], rsi <- fp[-2]
v10 <- StaticCall:36( _List@0150898._ofEfficientLengthIterable@0150898<0> v2, v3, result_type = T{_List}) T{_List}
ParallelMove rax <- rax
DartReturn:38(v10)
B6
ParallelMove rdi <- fp[-3], rsi <- fp[-2]
v9 <- StaticCall:42( _List@0150898._ofOther@0150898<0> v2, v3, result_type = T{_List}) T{_List}
ParallelMove rax <- rax
DartReturn:44(v9)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax, rsi <- rsi
v4 <- StaticCall:10( _GrowableList@0150898._ofOther@0150898<0> v2, v3, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v4)
v5 <- StaticCall:12( makeListFixedLength<1> v2, v4, result_type = T{_List}) T{_List}
ParallelMove rax <- rax
DartReturn:14(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rcx, rsi <- C
v5 <- StaticCall:10( _GrowableList@0150898.<0> v2, v62 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax, rdi <- fp[-2]
ParallelMove fp[-3] <- rax
v70 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rdi
v6 <- DispatchTableCall( cid=v70 Iterable.iterator<0>, v3) T{*?}
ParallelMove rax <- rax
ParallelMove fp[-2] <- rax
ParallelMove rdx <- fp[-3] goto:32 B5
B5
  Loop 0
CheckStackOverflow:36(stack=0, loop=1)
v71 <- LoadClassId(<non-smi> v6 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax
v7 <- DispatchTableCall( cid=v71 Iterator.moveNext<0>, v6 T{Iterator<X0>}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:18(===, v7 T{bool}, v8) goto (3, 4)
BoolTest
B3
  Loop 0
ParallelMove rdx <- fp[-3], rax <- fp[-2]
v72 <- LoadClassId(<non-smi> v6 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax
v9 <- DispatchTableCall( cid=v72 Iterator.current<0>, v6 T{Iterator<X0>}) T{*?}
ParallelMove rax <- rax, rdx <- fp[-1], rcx <- C, rbx <- rax
ParallelMove fp[-4] <- rbx
t0 <- AssertAssignable:10(v9 T{X0?}, v32 T{_TypeParameter}, 'value', instantiator_type_args(v2 T{TypeArguments}), function_type_args(v0 T{Null?})) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-3]
v38 <- LoadField(v5 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v43 <- LoadField(v5 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v44 <- LoadField(v43 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v57 <- UnboxInt64([non-speculative], v38 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-5] <- rcx
ParallelMove rbx <- rbx
v58 <- UnboxInt64([non-speculative], v44 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v57 T{_Smi} == v58 T{_Smi}) T{bool} goto (8, 9)
B8
  Loop 0
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v5 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B10
B9
B10
  Loop 0
ParallelMove rax <- rsi
v24 <- BinaryInt64Op(+ [tr], v57 T{_Smi}, v63 T{_Smi}) [1, 576460752303423488] int64
v59 <- BoxInt64(v24) [1, 576460752303423488] T{_Smi}
StoreField(v5 T{_GrowableList} . GrowableObjectArray.length = v59, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v24 T{_Smi}, v57 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v27 <- LoadField(v5 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-4]
StoreIndexed:40([_List] v27, v57 T{_Smi}, v9 T{X0?})
ParallelMove rdx <- rcx, rax <- fp[-2] goto:34 B5
B4
ParallelMove rcx <- fp[-3]
ParallelMove rax <- rcx
DartReturn:38(v5)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rdi, rdi <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v153 <- LoadClassId(<non-smi> v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v4 <- DispatchTableCall( cid=v153 EfficientLengthIterable.length<0>, v3) T{int}
ParallelMove rbx <- fp[-1], r10 <- rax, rax <- rax
ParallelMove fp[-3] <- rax
v79 <- CreateArray:10(v2 T{*?}, v4 T{_Smi}, <not-aliased>) T{_List}
ParallelMove rax <- rax
ParallelMove rdx <- fp[-3], fp[-5] <- rax
v135 <- UnboxInt64([non-speculative], v4 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove fp[-4] <- rdx
Branch if RelationalOp(>, v135 T{_Smi}, v141 T{_Smi}) T{bool} goto (3, 9)
B3
ParallelMove rbx <- fp[-2]
v154 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rbx
v11 <- DispatchTableCall( cid=v154 Iterable.iterator<0>, v3) T{*?}
ParallelMove rax <- rax
ParallelMove fp[-9] <- rax
v47 <- LoadField:46(v11 T{ListIterator} . _iterable@9040228 {final}) T{Iterable<X0>}
ParallelMove fp[-8] <- rdi
v49 <- LoadField:46(v11 T{ListIterator} . _length@9040228 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-7] <- rdx
v37 <- LoadField:46(v11 T{ListIterator} . :type_arguments {final}) T{TypeArguments}
ParallelMove fp[-3] <- rbx
ParallelMove rsi <- C goto:46 B6
B6
  Loop 0
ParallelMove fp[-6] <- rsi
CheckStackOverflow:50(stack=0, loop=1)
v155 <- LoadClassId(<non-smi> v47) int64
MoveArgument(sp[0] <- v47)
ParallelMove rcx <- rcx
v48 <- DispatchTableCall( cid=v155 Iterable.length<0>, v47) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v137 <- UnboxInt64([non-speculative], v48 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-7]
Branch if EqualityCompare(v49 != v137 T{int}) T{bool} goto (21, 22)
B22
  Loop 0
ParallelMove rbx <- fp[-9]
v52 <- LoadField(v11 T{ListIterator} . _index@9040228) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v52, v137 T{int}) T{bool} goto (5, 4)
B4
  Loop 0
ParallelMove rax <- fp[-8]
v156 <- LoadClassId(<non-smi> v47 T{Iterable<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- rsi
v56 <- DispatchTableCall( cid=v156 Iterable.elementAt<0>, v47 T{Iterable<X0>}, v52 T{int}) T{*?}
ParallelMove rax <- rax, rsi <- rax, rbx <- fp[-9]
ParallelMove fp[-10] <- rsi
StoreField(v11 T{ListIterator} . _current@9040228 = v56 T{X0?})
v57 <- LoadField(v11 T{ListIterator} . _index@9040228) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v59 <- BinaryInt64Op(+ [tr], v57, v142 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v11 T{ListIterator} . _index@9040228 = v59 T{int} <int64>)
Branch if StrictCompare:12(===, v56 T{X0?}, v0 T{Null?}) goto (16, 17)
B16
  Loop 0
ParallelMove rax <- rsi, rdx <- fp[-3], rcx <- C
t0 <- AssertAssignable:18(v56 T{X0?}, v20 T{_TypeParameter}, ' in type cast', instantiator_type_args(v37), function_type_args(v0 T{Null?})) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove  goto:24 B18
B17
B18
  Loop 0
ParallelMove rsi <- rbx
v18 <- BinaryInt64Op(+ [tr], v12, v142 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-10], rdx <- fp[-1], rcx <- C, fp[-11] <- rsi
AssertAssignable:42(v56 T{X0?}, v20, 'value', instantiator_type_args(v2 T{TypeArguments?}), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-4], rbx <- fp[-6]
GenericCheckBound:42(v135 T{_Smi}, v12) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-5], rax <- fp[-10], rcx <- fp[-6]
StoreIndexed:42([_List] v79 T{_List}, v12 T{int}, v56 T{X0?})
ParallelMove rsi <- fp[-11], rax <- fp[-9], rbx <- fp[-3], rdi <- fp[-8], rdx <- fp[-7] goto:48 B6
B5
ParallelMove rbx <- C, rax <- rbx, rcx <- fp[-6], rdx <- fp[-4]
StoreField(v11 T{ListIterator} . _current@9040228 = v0 T{Null?})
Branch if EqualityCompare(v12 != v135 T{_Smi}) T{bool} goto (7, 8)
B8
B9
B10
ParallelMove rax <- fp[-5]
DartReturn:78(v79 T{_List})
B7
ParallelMove rax <- fp[-2]
v15 <- AllocateObject:62(cls=ConcurrentModificationError, <not-aliased>) T{ConcurrentModificationError}
ParallelMove rcx <- rax, rax <- fp[-2]
StoreField(v15 T{ConcurrentModificationError} . modifiedObject = v3 T{EfficientLengthIterable<X0>}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:66(v15)
B21
ParallelMove rax <- fp[-8]
v61 <- AllocateObject:26(cls=ConcurrentModificationError, <not-aliased>) T{ConcurrentModificationError}
ParallelMove rcx <- rax, rax <- fp[-8]
StoreField(v61 T{ConcurrentModificationError} . modifiedObject = v47 T{Iterable<X0>}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:32(v61)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- rbx, rdx <- C, rcx <- C
v5 <- InstanceOf:10(v3 IS EfficientLengthIterable<dynamic>, instantiator_type_args(v0), function_type_args(v0)) T{bool}
InlineInstanceof
InstantiatedTypeWithArgumentsTest
Subtype1TestCacheLookup
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v5 T{bool}, v6) goto (3, 4)
BoolTest
B3
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
v8 <- StaticCall:20( _GrowableList@0150898._ofEfficientLengthIterable@0150898<0> v2, v3, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
DartReturn:22(v8)
B4
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
v7 <- StaticCall:26( _GrowableList@0150898._ofOther@0150898<0> v2, v3, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
DartReturn:28(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, rdi <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v98 <- LoadClassId(<non-smi> v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v4 <- DispatchTableCall( cid=v98 EfficientLengthIterable.length<0>, v3) T{int}
ParallelMove rcx <- rax
ParallelMove rdx <- rcx, fp[-5] <- rcx
v87 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-4] <- rdx
Branch if RelationalOp(>, v87 T{int}, v90 T{_Smi}) T{bool} goto (3, 9)
B3
ParallelMove rdi <- fp[-2]
ParallelMove rsi <- rdx
v47 <- BinaryInt64Op(| [tr], v87 T{int}, v91 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- rsi
v88 <- BoxInt64(v47 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rbx <- C, r10 <- rax
v53 <- CreateArray:10(v0 T{Null?}, v88 T{int}, <not-aliased>) T{_List}
ParallelMove rdx <- rax, rax <- fp[-2]
ParallelMove fp[-6] <- rdx
v99 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v11 <- DispatchTableCall( cid=v99 Iterable.iterator<0>, v3) T{*?}
ParallelMove rax <- rax
ParallelMove fp[-8] <- rax
ParallelMove rbx <- C goto:48 B6
B6
  Loop 0
ParallelMove fp[-7] <- rbx
CheckStackOverflow:52(stack=0, loop=1)
v100 <- LoadClassId(<non-smi> v11 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax
v13 <- DispatchTableCall( cid=v100 Iterator.moveNext<0>, v11 T{Iterator<X0>}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:32(===, v13 T{bool}, v7) goto (4, 5)
BoolTest
B4
  Loop 0
ParallelMove rax <- fp[-8], rbx <- fp[-7]
v101 <- LoadClassId(<non-smi> v11 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax
v17 <- DispatchTableCall( cid=v101 Iterator.current<0>, v11 T{Iterator<X0>}) T{*?}
ParallelMove rcx <- rax
ParallelMove rsi <- fp[-7]
v19 <- BinaryInt64Op(+ [tr], v12, v91 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-3], rbx <- fp[-7]
GenericCheckBound:44(v47 T{_Smi}, v12) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-6], rax <- rcx, rcx <- fp[-7]
StoreIndexed:44([_List] v53 T{_List}, v12 T{int}, v17 T{X0?})
ParallelMove rbx <- rsi, rax <- fp[-8] goto:50 B6
B5
ParallelMove rcx <- fp[-7], rax <- fp[-4]
Branch if EqualityCompare(v12 != v87 T{int}) T{bool} goto (7, 8)
B8
ParallelMove rcx <- fp[-5], rax <- fp[-6]
ParallelMove rdx <- fp[-1]
v34 <- AllocateObject:10(cls=_GrowableList, v2 T{*?}, <not-aliased>) T{_GrowableList}
ParallelMove rcx <- rax, rax <- fp[-6]
StoreField(v34 . GrowableObjectArray.data = v53 T{_List}, NoStoreBarrier)
ParallelMove rax <- fp[-5]
StoreField(v34 T{_GrowableList} . GrowableObjectArray.length = v4 T{int}, NoStoreBarrier)
ParallelMove rax <- rcx
DartReturn:76(v34 T{_GrowableList})
B9
v56 <- LoadStaticField:4(_emptyList@0150898, CallsInitializer) T{_List}
ParallelMove rdx <- fp[-1], rax <- rax
ParallelMove fp[-1] <- rax
v63 <- AllocateObject:10(cls=_GrowableList, v2 T{*?}, <not-aliased>) T{_GrowableList}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v63 . GrowableObjectArray.data = v56 T{_List}, NoStoreBarrier)
StoreField(v63 . GrowableObjectArray.length = v5 T{_Smi}, NoStoreBarrier)
ParallelMove rax <- rcx
DartReturn:82(v63 T{_GrowableList})
B7
ParallelMove rax <- fp[-2]
v16 <- AllocateObject:64(cls=ConcurrentModificationError, <not-aliased>) T{ConcurrentModificationError}
ParallelMove rcx <- rax, rax <- fp[-2]
StoreField(v16 T{ConcurrentModificationError} . modifiedObject = v3 T{EfficientLengthIterable<X0>}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:68(v16)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v29 <- LoadClassId(v2) [89, 564] int64
Branch if TestRange:10(v29 in [89-90]) goto (3, 10)
B3
v12 <- LoadField(v2 T{_Array<X0>} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v43 <- UnboxInt64([non-speculative], v12) [0, 576460752303423487] int64
ParallelMove rdx <- rax goto:10 B12
B10
Branch if EqualityCompare:10(v29 == v30) goto (5, 11)
B5
v19 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v44 <- UnboxInt64([non-speculative], v19) [0, 576460752303423487] int64
ParallelMove rdx <- rax goto:10 B12
B11
v26 <- LoadField(v2 T{CodeUnits} . _string@9040228 {final}) T{String}
v36 <- LoadField(v26 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v45 <- UnboxInt64([non-speculative], v36 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdx <- rdx goto:14 B12
B12
v42 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- C, rsi <- rax, rdx <- rdx, rax <- rax
ParallelMove fp[-1] <- rax
StaticCall:12( checkValidRange<0> v46 T{_Smi}, v42 T{int}, v31 T{_Smi}) int64
ParallelMove rsi <- fp[-2]
v6 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx
v7 <- AllocateObject:14(cls=SubListIterable, v6) T{SubListIterable}
ParallelMove rdi <- rax, rsi <- fp[-2], rdx <- C, rbx <- fp[-1], rax <- rax
ParallelMove fp[-1] <- rax
StaticCall:16( SubListIterable.<0> v7, v2, v46 T{_Smi}, v42 T{int})
ParallelMove rax <- fp[-1]
DartReturn:18(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rsi, rcx <- rbx, fp[-1] <- rdx, fp[-2] <- rbx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- rax
StoreField(v2 . _iterable@9040228 = v3)
StoreField(v2 . _start@9040228 = v4 <int64>)
ParallelMove rax <- rcx
StoreField(v2 . _endOrLength@9040228 = v5)
ParallelMove rdi <- rdx, rsi <- C
StaticCall:14( checkNotNegative<0> v4 T{int}, v7) int64
ParallelMove rax <- fp[-2]
Branch if StrictCompare:18(!==, v5 T{int??}, v0) goto (3, 6)
B3
ParallelMove rcx <- fp[-1]
ParallelMove rdx <- rax
v35 <- UnboxInt64([non-speculative], v5 T{int?}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdx, rsi <- C, fp[-3] <- rdx
StaticCall:24( checkNotNegative<0> v35 T{int?}, v9) int64
ParallelMove rcx <- fp[-1], rax <- fp[-3]
Branch if RelationalOp(>, v4 T{int}, v35 T{int?}) T{bool} goto (4, 5)
B5
B6
B7
ParallelMove rax <- C
DartReturn:56(v0)
B4
v37 <- BoxInt64(v4 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-4] <- rax
v13 <- AllocateObject:38(cls=RangeError) T{RangeError}
ParallelMove rax <- rax
ParallelMove fp[-5] <- rax
MoveArgument(sp[4] <- v13)
MoveArgument(sp[3] <- v37 T{int})
MoveArgument(sp[2] <- v15)
MoveArgument(sp[1] <- v5 T{int?})
MoveArgument(sp[0] <- v7)
StaticCall:42( RangeError.range<0> v13, v37 T{int}, v15, v5 T{int?}, v7)
ParallelMove rax <- fp[-5]
Throw:44(v13)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi, fp[-2] <- rsi
Branch if RelationalOp(<, v2, v39 T{_Smi}) T{bool} goto (3, 4)
B4
ParallelMove rax <- rax
DartReturn:28(v2)
B3
v7 <- AllocateObject:20(cls=RangeError) T{RangeError}
ParallelMove rcx <- rax
StoreField(v7 T{RangeError} . start = v4 T{_Smi}, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreField(v7 T{RangeError} . name = v3 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v7 T{RangeError} . message = v18 T{_OneByteString}, NoStoreBarrier)
ParallelMove rdx <- fp[-1]
v38 <- BoxInt64(v2 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v7 T{RangeError} . invalidValue = v38 T{int}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v7 T{RangeError} . _hasValue@0150898 = v6 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:24(v7)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v66 <- LoadField(v2 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
v96 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rbx <- rsi
v97 <- UnboxInt64([non-speculative], v66 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v108 T{_Smi}, v96 T{int}, v97 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove fp[-4] <- rcx
Branch if EqualityCompare(v7 T{int} == v108 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rdx <- fp[-2]
v14 <- LoadField(v2 . Array.type_arguments {final}) T{TypeArguments?}
ParallelMove rdi <- rdi, rsi <- C
v15 <- StaticCall:26( _GrowableList@0150898.<0> v14, v108 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
DartReturn:28(v15)
B4
ParallelMove rdx <- fp[-2]
v11 <- LoadField(v2 . Array.type_arguments {final}) T{TypeArguments?}
ParallelMove fp[-3] <- rsi
Branch if RelationalOp(<=, v7 T{int}, v109 T{_Smi}) T{bool} goto (11, 15)
B11
v98 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rbx <- C, r10 <- rax
v77 <- CreateArray:10(v0 T{Null?}, v98 T{int}) T{_List}
ParallelMove rcx <- rax
ParallelMove r8 <- C, rdi <- fp[-2], rsi <- fp[-4] goto:64 B14
B14
  Loop 0
CheckStackOverflow:68(stack=0, loop=1)
Branch if RelationalOp(<, v29, v7 T{_Smi}) T{bool} goto (12, 13)
B12
  Loop 0
ParallelMove rax <- fp[-1], rbx <- r8
GenericCheckBound:58(v97 T{_Smi}, v29 T{int}) [-9223372036854775808, 9223372036854775807] int64
v110 <- LoadIndexed:58([_List] v2 T{_List}, v29 T{int}) T{X0?}
ParallelMove rdx <- rcx, rax <- rax
StoreIndexed:60([_List] v77 T{_List}, v29 T{int}, v110 T{X0?})
ParallelMove r8 <- r8
v35 <- BinaryInt64Op(+ [tr], v29 T{int}, v111 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- r8 goto:66 B14
B13
ParallelMove rcx <- rcx, rax <- rsi goto:70 B18
B15
ParallelMove rdi <- rdx, rsi <- rcx
v99 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[3] <- v2 T{_List})
MoveArgument(sp[2] <- v5 T{_Smi})
MoveArgument(sp[1] <- v99 T{int})
MoveArgument(sp[0] <- v51 T{bool})
v27 <- StaticCall:74( _sliceInternal@0150898<0> v2 T{_List}, v5 T{_Smi}, v99 T{int}, v51 T{bool}, using unchecked entrypoint, result_type = T{_List}) T{_List}
ParallelMove rax <- rax
ParallelMove rcx <- rax, rax <- fp[-4] goto:76 B18
B18
ParallelMove rdx <- fp[-3], fp[-2] <- rcx
v60 <- AllocateObject:10(cls=_GrowableList, v11 T{*?}, <not-aliased>) T{_GrowableList}
ParallelMove rdx <- rax, rcx <- fp[-2]
StoreField(v60 . GrowableObjectArray.data = v53 T{_List}, NoStoreBarrier)
ParallelMove rcx <- fp[-4]
v100 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v60 T{_GrowableList} . GrowableObjectArray.length = v100 T{int}, NoStoreBarrier)
ParallelMove rax <- rdx
DartReturn:38(v60 T{_GrowableList})
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[4] <- v2)
MoveArgument(sp[3] <- v6)
MoveArgument(sp[2] <- v4)
MoveArgument(sp[1] <- v7)
MoveArgument(sp[0] <- v0)
v8 <- NativeCall(List_slice) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v8, v9, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{_List}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v8 T{_List})
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Float64x2}
AssertAssignable for compile-time type
TTSCall
v7 <- AllocateObject:12(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v7 T{UnsupportedError} . message = v8 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v7)
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Float64x2}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_ExternalFloat64x2Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v30 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v31 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v31 T{_Smi}, v30 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v30 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- Unbox(v4 T{_Float64x2}) float64x2
v29 <- LoadField(v2 T{_ExternalFloat64x2Array} . PointerBase.data {final}) untagged
StoreIndexed([_Float64x2List] v29 T{_ExternalFloat64x2Array}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Float64x2}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v19 <- LoadField(v2 T{_Float64x2ArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v42 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v43 <- UnboxInt64([non-speculative], v19 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v43 T{_Smi}, v42 T{int}) [-9223372036854775808, 9223372036854775807] int64
v24 <- LoadField(v2 T{_Float64x2ArrayView} . TypedDataView.typed_data {final}) T{*}
v29 <- LoadField(v2 T{_Float64x2ArrayView} . TypedDataView.offset_in_bytes {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rsi
v41 <- ShiftInt64Op(<< [tr], v42 T{int}, v40) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v44 <- UnboxInt64([non-speculative], v29 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v13 <- BinaryInt64Op(+ [tr], v44 T{_Smi}, v41 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[2]
v39 <- Unbox(v4 T{_Float64x2}) float64x2
v48 <- LoadField(v24 T{_TypedList} . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Float64x2List] v48 T{_TypedList}, v13 T{int}, v39, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:26(v0)
slow path check bound operation
B0
B3
Graph intrinsic begin
ParallelMove rcx <- sp[3]
v3 <- LoadField(v0 . TypedDataBase.length {final})
ParallelMove rbx <- sp[2]
CheckArrayBound(v3, v1)
ParallelMove rdx <- sp[1]
CheckClass(v2 Cids[1: _Float64x2@7027147 etc.  cid 65])
v5 <- Unbox(v2 T{_Float64x2}) float64x2
StoreIndexed([_Float64x2List] v0, v1, v5, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:36(v6)
Graph intrinsic end
Enter frame
PrologueOffset = 75
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Float64x2}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_Float64x2List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v29 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v30 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v30 T{_Smi}, v29 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v29 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- Unbox(v4 T{_Float64x2}) float64x2
StoreIndexed([_Float64x2List] v2 T{_Float64x2List}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Int32x4}
AssertAssignable for compile-time type
TTSCall
v7 <- AllocateObject:12(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v7 T{UnsupportedError} . message = v8 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v7)
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Int32x4}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_ExternalInt32x4Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v30 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v31 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v31 T{_Smi}, v30 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v30 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- Unbox(v4 T{_Int32x4}) int32x4
v29 <- LoadField(v2 T{_ExternalInt32x4Array} . PointerBase.data {final}) untagged
StoreIndexed([_Int32x4List] v29 T{_ExternalInt32x4Array}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Int32x4}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v19 <- LoadField(v2 T{_Int32x4ArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v42 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v43 <- UnboxInt64([non-speculative], v19 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v43 T{_Smi}, v42 T{int}) [-9223372036854775808, 9223372036854775807] int64
v24 <- LoadField(v2 T{_Int32x4ArrayView} . TypedDataView.typed_data {final}) T{*}
v29 <- LoadField(v2 T{_Int32x4ArrayView} . TypedDataView.offset_in_bytes {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rsi
v41 <- ShiftInt64Op(<< [tr], v42 T{int}, v40) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v44 <- UnboxInt64([non-speculative], v29 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v13 <- BinaryInt64Op(+ [tr], v44 T{_Smi}, v41 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[2]
v39 <- Unbox(v4 T{_Int32x4}) int32x4
v48 <- LoadField(v24 T{_TypedList} . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Int32x4List] v48 T{_TypedList}, v13 T{int}, v39, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:26(v0)
slow path check bound operation
B0
B3
Graph intrinsic begin
ParallelMove rcx <- sp[3]
v3 <- LoadField(v0 . TypedDataBase.length {final})
ParallelMove rbx <- sp[2]
CheckArrayBound(v3, v1)
ParallelMove rdx <- sp[1]
CheckClass(v2 Cids[1: _Int32x4@7027147 etc.  cid 64])
v5 <- Unbox(v2 T{_Int32x4}) int32x4
StoreIndexed([_Int32x4List] v0, v1, v5, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:36(v6)
Graph intrinsic end
Enter frame
PrologueOffset = 75
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Int32x4}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_Int32x4List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v29 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v30 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v30 T{_Smi}, v29 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v29 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- Unbox(v4 T{_Int32x4}) int32x4
StoreIndexed([_Int32x4List] v2 T{_Int32x4List}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Float32x4}
AssertAssignable for compile-time type
TTSCall
v7 <- AllocateObject:12(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v7 T{UnsupportedError} . message = v8 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v7)
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Float32x4}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_ExternalFloat32x4Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v30 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v31 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v31 T{_Smi}, v30 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v30 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- Unbox(v4 T{_Float32x4}) float32x4
v29 <- LoadField(v2 T{_ExternalFloat32x4Array} . PointerBase.data {final}) untagged
StoreIndexed([_Float32x4List] v29 T{_ExternalFloat32x4Array}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Float32x4}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v19 <- LoadField(v2 T{_Float32x4ArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v42 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v43 <- UnboxInt64([non-speculative], v19 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v43 T{_Smi}, v42 T{int}) [-9223372036854775808, 9223372036854775807] int64
v24 <- LoadField(v2 T{_Float32x4ArrayView} . TypedDataView.typed_data {final}) T{*}
v29 <- LoadField(v2 T{_Float32x4ArrayView} . TypedDataView.offset_in_bytes {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rsi
v41 <- ShiftInt64Op(<< [tr], v42 T{int}, v40) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v44 <- UnboxInt64([non-speculative], v29 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v13 <- BinaryInt64Op(+ [tr], v44 T{_Smi}, v41 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[2]
v39 <- Unbox(v4 T{_Float32x4}) float32x4
v48 <- LoadField(v24 T{_TypedList} . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Float32x4List] v48 T{_TypedList}, v13 T{int}, v39, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:26(v0)
slow path check bound operation
B0
B3
Graph intrinsic begin
ParallelMove rcx <- sp[3]
v3 <- LoadField(v0 . TypedDataBase.length {final})
ParallelMove rbx <- sp[2]
CheckArrayBound(v3, v1)
ParallelMove rdx <- sp[1]
CheckClass(v2 Cids[1: _Float32x4@7027147 etc.  cid 63])
v5 <- Unbox(v2 T{_Float32x4}) float32x4
StoreIndexed([_Float32x4List] v0, v1, v5, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:36(v6)
Graph intrinsic end
Enter frame
PrologueOffset = 75
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Float32x4}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_Float32x4List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v29 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v30 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v30 T{_Smi}, v29 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v29 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- Unbox(v4 T{_Float32x4}) float32x4
StoreIndexed([_Float32x4List] v2 T{_Float32x4List}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Double}
AssertAssignable for compile-time type
TTSCall
v7 <- AllocateObject:12(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v7 T{UnsupportedError} . message = v8 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v7)
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Double}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_ExternalFloat64Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v30 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v31 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v31 T{_Smi}, v30 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v30 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- Unbox(v4 T{_Double}) double
v29 <- LoadField(v2 T{_ExternalFloat64Array} . PointerBase.data {final}) untagged
StoreIndexed([_Float64List] v29 T{_ExternalFloat64Array}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Double}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v19 <- LoadField(v2 T{_Float64ArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v42 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v43 <- UnboxInt64([non-speculative], v19 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v43 T{_Smi}, v42 T{int}) [-9223372036854775808, 9223372036854775807] int64
v24 <- LoadField(v2 T{_Float64ArrayView} . TypedDataView.typed_data {final}) T{*}
v29 <- LoadField(v2 T{_Float64ArrayView} . TypedDataView.offset_in_bytes {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rsi
v41 <- ShiftInt64Op(<< [tr], v42 T{int}, v40) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v44 <- UnboxInt64([non-speculative], v29 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v13 <- BinaryInt64Op(+ [tr], v44 T{_Smi}, v41 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[2]
v39 <- Unbox(v4 T{_Double}) double
v48 <- LoadField(v24 T{_TypedList} . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Float64List] v48 T{_TypedList}, v13 T{int}, v39, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:26(v0)
slow path check bound operation
B0
B3
Graph intrinsic begin
ParallelMove rcx <- sp[3]
v3 <- LoadField(v0 . TypedDataBase.length {final})
ParallelMove rbx <- sp[2]
CheckArrayBound(v3, v1)
ParallelMove rdx <- sp[1]
CheckClass(v2 Cids[1: _Double@0150898 etc.  cid 61])
v5 <- Unbox(v2 T{_Double}) double
StoreIndexed([_Float64List] v0, v1, v5, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:36(v6)
Graph intrinsic end
Enter frame
PrologueOffset = 77
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Double}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_Float64List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v29 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v30 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v30 T{_Smi}, v29 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v29 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- Unbox(v4 T{_Double}) double
StoreIndexed([_Float64List] v2 T{_Float64List}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Double}
AssertAssignable for compile-time type
TTSCall
v7 <- AllocateObject:12(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v7 T{UnsupportedError} . message = v8 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v7)
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Double}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_ExternalFloat32Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v31 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v32 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v32 T{_Smi}, v31 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v29 <- ShiftInt64Op(<< [tr], v31 T{int}, v28) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- Unbox(v4 T{_Double}) double
ParallelMove xmm0 <- xmm0
v27 <- DoubleToFloat(v26) float
v30 <- LoadField(v2 T{_ExternalFloat32Array} . PointerBase.data {final}) untagged
StoreIndexed([_Float32List] v30 T{_ExternalFloat32Array}, v29 T{int}, v27, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Double}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v19 <- LoadField(v2 T{_Float32ArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v43 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v44 <- UnboxInt64([non-speculative], v19 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v44 T{_Smi}, v43 T{int}) [-9223372036854775808, 9223372036854775807] int64
v24 <- LoadField(v2 T{_Float32ArrayView} . TypedDataView.typed_data {final}) T{*}
v29 <- LoadField(v2 T{_Float32ArrayView} . TypedDataView.offset_in_bytes {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rsi
v42 <- ShiftInt64Op(<< [tr], v43 T{int}, v41) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v45 <- UnboxInt64([non-speculative], v29 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v13 <- BinaryInt64Op(+ [tr], v45 T{_Smi}, v42 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[2]
v39 <- Unbox(v4 T{_Double}) double
ParallelMove xmm0 <- xmm0
v40 <- DoubleToFloat(v39) float
v49 <- LoadField(v24 T{_TypedList} . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Float32List] v49 T{_TypedList}, v13 T{int}, v40, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:26(v0)
slow path check bound operation
B0
B3
Graph intrinsic begin
ParallelMove rcx <- sp[3]
v3 <- LoadField(v0 . TypedDataBase.length {final})
ParallelMove rbx <- sp[2]
CheckArrayBound(v3, v1)
ParallelMove rdx <- sp[1]
CheckClass(v2 Cids[1: _Double@0150898 etc.  cid 61])
v5 <- Unbox(v2 T{_Double}) double
ParallelMove xmm0 <- xmm0
v6 <- DoubleToFloat(v5) float
StoreIndexed([_Float32List] v0, v1, v6, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:36(v7)
Graph intrinsic end
Enter frame
PrologueOffset = 81
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) T{_Double}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_Float32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v30 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v31 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v31 T{_Smi}, v30 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v29 <- ShiftInt64Op(<< [tr], v30 T{int}, v28) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- Unbox(v4 T{_Double}) double
ParallelMove xmm0 <- xmm0
v27 <- DoubleToFloat(v26) float
StoreIndexed([_Float32List] v2 T{_Float32List}, v29 T{int}, v27, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
v7 <- AllocateObject:12(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v7 T{UnsupportedError} . message = v8 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v7)
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_ExternalUint64Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v30 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v31 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v31 T{_Smi}, v30 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v30 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
v29 <- LoadField(v2 T{_ExternalUint64Array} . PointerBase.data {final}) untagged
StoreIndexed([_Uint64List] v29 T{_ExternalUint64Array}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v19 <- LoadField(v2 T{_Uint64ArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v42 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v43 <- UnboxInt64([non-speculative], v19 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v43 T{_Smi}, v42 T{int}) [-9223372036854775808, 9223372036854775807] int64
v24 <- LoadField(v2 T{_Uint64ArrayView} . TypedDataView.typed_data {final}) T{*}
v29 <- LoadField(v2 T{_Uint64ArrayView} . TypedDataView.offset_in_bytes {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rsi
v41 <- ShiftInt64Op(<< [tr], v42 T{int}, v40) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v44 <- UnboxInt64([non-speculative], v29 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v13 <- BinaryInt64Op(+ [tr], v44 T{_Smi}, v41 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[2]
v39 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
v48 <- LoadField(v24 T{_TypedList} . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint64List] v48 T{_TypedList}, v13 T{int}, v39, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:26(v0)
slow path check bound operation
B0
B3
Graph intrinsic begin
ParallelMove rcx <- sp[3]
v3 <- LoadField(v0 . TypedDataBase.length {final})
ParallelMove rbx <- sp[2]
CheckArrayBound(v3, v1)
ParallelMove rdx <- sp[1]
v5 <- UnboxInt64([guard-inputs], v2) int64
StoreIndexed([_Uint64List] v0, v1, v5, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:36(v6)
Graph intrinsic end
Enter frame
PrologueOffset = 83
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_Uint64List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v29 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v30 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v30 T{_Smi}, v29 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v29 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed([_Uint64List] v2 T{_Uint64List}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
v7 <- AllocateObject:12(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v7 T{UnsupportedError} . message = v8 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v7)
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_ExternalInt64Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v30 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v31 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v31 T{_Smi}, v30 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v30 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
v29 <- LoadField(v2 T{_ExternalInt64Array} . PointerBase.data {final}) untagged
StoreIndexed([_Int64List] v29 T{_ExternalInt64Array}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v19 <- LoadField(v2 T{_Int64ArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v42 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v43 <- UnboxInt64([non-speculative], v19 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v43 T{_Smi}, v42 T{int}) [-9223372036854775808, 9223372036854775807] int64
v24 <- LoadField(v2 T{_Int64ArrayView} . TypedDataView.typed_data {final}) T{*}
v29 <- LoadField(v2 T{_Int64ArrayView} . TypedDataView.offset_in_bytes {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rsi
v41 <- ShiftInt64Op(<< [tr], v42 T{int}, v40) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v44 <- UnboxInt64([non-speculative], v29 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v13 <- BinaryInt64Op(+ [tr], v44 T{_Smi}, v41 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[2]
v39 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
v48 <- LoadField(v24 T{_TypedList} . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Int64List] v48 T{_TypedList}, v13 T{int}, v39, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:26(v0)
slow path check bound operation
B0
B3
Graph intrinsic begin
ParallelMove rcx <- sp[3]
v3 <- LoadField(v0 . TypedDataBase.length {final})
ParallelMove rbx <- sp[2]
CheckArrayBound(v3, v1)
ParallelMove rdx <- sp[1]
v5 <- UnboxInt64([guard-inputs], v2) int64
StoreIndexed([_Int64List] v0, v1, v5, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:36(v6)
Graph intrinsic end
Enter frame
PrologueOffset = 83
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_Int64List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v29 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v30 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v30 T{_Smi}, v29 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v29 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed([_Int64List] v2 T{_Int64List}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
v7 <- AllocateObject:12(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v7 T{UnsupportedError} . message = v8 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v7)
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_ExternalUint32Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v30 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v31 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v31 T{_Smi}, v30 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v30 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- UnboxUint32([tr], [non-speculative], v4 T{int}) [0, 4294967295] uint32
v29 <- LoadField(v2 T{_ExternalUint32Array} . PointerBase.data {final}) untagged
StoreIndexed([_Uint32List] v29 T{_ExternalUint32Array}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v19 <- LoadField(v2 T{_Uint32ArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v42 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v43 <- UnboxInt64([non-speculative], v19 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v43 T{_Smi}, v42 T{int}) [-9223372036854775808, 9223372036854775807] int64
v24 <- LoadField(v2 T{_Uint32ArrayView} . TypedDataView.typed_data {final}) T{*}
v29 <- LoadField(v2 T{_Uint32ArrayView} . TypedDataView.offset_in_bytes {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rsi
v41 <- ShiftInt64Op(<< [tr], v42 T{int}, v40) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v44 <- UnboxInt64([non-speculative], v29 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v13 <- BinaryInt64Op(+ [tr], v44 T{_Smi}, v41 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[2]
v39 <- UnboxUint32([tr], [non-speculative], v4 T{int}) [0, 4294967295] uint32
v48 <- LoadField(v24 T{_TypedList} . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint32List] v48 T{_TypedList}, v13 T{int}, v39, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:26(v0)
slow path check bound operation
B0
B3
Graph intrinsic begin
ParallelMove rcx <- sp[3]
v3 <- LoadField(v0 . TypedDataBase.length {final})
ParallelMove rbx <- sp[2]
CheckArrayBound(v3, v1)
ParallelMove rdx <- sp[1]
v5 <- UnboxUint32([tr], [guard-inputs], v2) uint32
StoreIndexed([_Uint32List] v0, v1, v5, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:36(v6)
Graph intrinsic end
Enter frame
PrologueOffset = 78
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v29 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v30 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v30 T{_Smi}, v29 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v29 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- UnboxUint32([tr], [non-speculative], v4 T{int}) [0, 4294967295] uint32
StoreIndexed([_Uint32List] v2 T{_Uint32List}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
v7 <- AllocateObject:12(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v7 T{UnsupportedError} . message = v8 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v7)
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_ExternalInt32Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v30 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v31 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v31 T{_Smi}, v30 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v30 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- UnboxInt32([tr], [non-speculative], v4 T{int}) [-2147483648, 2147483647] int32
v29 <- LoadField(v2 T{_ExternalInt32Array} . PointerBase.data {final}) untagged
StoreIndexed([_Int32List] v29 T{_ExternalInt32Array}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v19 <- LoadField(v2 T{_Int32ArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v42 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v43 <- UnboxInt64([non-speculative], v19 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v43 T{_Smi}, v42 T{int}) [-9223372036854775808, 9223372036854775807] int64
v24 <- LoadField(v2 T{_Int32ArrayView} . TypedDataView.typed_data {final}) T{*}
v29 <- LoadField(v2 T{_Int32ArrayView} . TypedDataView.offset_in_bytes {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rsi
v41 <- ShiftInt64Op(<< [tr], v42 T{int}, v40) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v44 <- UnboxInt64([non-speculative], v29 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v13 <- BinaryInt64Op(+ [tr], v44 T{_Smi}, v41 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[2]
v39 <- UnboxInt32([tr], [non-speculative], v4 T{int}) [-2147483648, 2147483647] int32
v48 <- LoadField(v24 T{_TypedList} . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Int32List] v48 T{_TypedList}, v13 T{int}, v39, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:26(v0)
slow path check bound operation
B0
B3
Graph intrinsic begin
ParallelMove rcx <- sp[3]
v3 <- LoadField(v0 . TypedDataBase.length {final})
ParallelMove rbx <- sp[2]
CheckArrayBound(v3, v1)
ParallelMove rdx <- sp[1]
v5 <- UnboxUint32([tr], [guard-inputs], v2) uint32
StoreIndexed([_Int32List] v0, v1, v5, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:36(v6)
Graph intrinsic end
Enter frame
PrologueOffset = 78
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_Int32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v29 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v30 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v30 T{_Smi}, v29 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v29 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- UnboxInt32([tr], [non-speculative], v4 T{int}) [-2147483648, 2147483647] int32
StoreIndexed([_Int32List] v2 T{_Int32List}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
v7 <- AllocateObject:12(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v7 T{UnsupportedError} . message = v8 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v7)
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_ExternalUint16Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v30 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v31 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v31 T{_Smi}, v30 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v30 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
v29 <- LoadField(v2 T{_ExternalUint16Array} . PointerBase.data {final}) untagged
StoreIndexed([_Uint16List] v29 T{_ExternalUint16Array}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v19 <- LoadField(v2 T{_Uint16ArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v42 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v43 <- UnboxInt64([non-speculative], v19 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v43 T{_Smi}, v42 T{int}) [-9223372036854775808, 9223372036854775807] int64
v24 <- LoadField(v2 T{_Uint16ArrayView} . TypedDataView.typed_data {final}) T{*}
v29 <- LoadField(v2 T{_Uint16ArrayView} . TypedDataView.offset_in_bytes {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rsi
v41 <- ShiftInt64Op(<< [tr], v42 T{int}, v40) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v44 <- UnboxInt64([non-speculative], v29 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v13 <- BinaryInt64Op(+ [tr], v44 T{_Smi}, v41 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[2]
v39 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
v48 <- LoadField(v24 T{_TypedList} . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint16List] v48 T{_TypedList}, v13 T{int}, v39, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:26(v0)
slow path check bound operation
B0
B3
Graph intrinsic begin
ParallelMove rcx <- sp[3]
v3 <- LoadField(v0 . TypedDataBase.length {final})
ParallelMove rbx <- sp[2]
CheckArrayBound(v3, v1)
ParallelMove rdx <- sp[1]
v5 <- UnboxInt64([tr], [guard-inputs], v2) int64
StoreIndexed([_Uint16List] v0, v1, v5, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:36(v6)
Graph intrinsic end
Enter frame
PrologueOffset = 83
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_Uint16List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v29 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v30 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v30 T{_Smi}, v29 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v29 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed([_Uint16List] v2 T{_Uint16List}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
v7 <- AllocateObject:12(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v7 T{UnsupportedError} . message = v8 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v7)
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_ExternalInt16Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v30 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v31 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v31 T{_Smi}, v30 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v30 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
v29 <- LoadField(v2 T{_ExternalInt16Array} . PointerBase.data {final}) untagged
StoreIndexed([_Int16List] v29 T{_ExternalInt16Array}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v19 <- LoadField(v2 T{_Int16ArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v42 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v43 <- UnboxInt64([non-speculative], v19 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v43 T{_Smi}, v42 T{int}) [-9223372036854775808, 9223372036854775807] int64
v24 <- LoadField(v2 T{_Int16ArrayView} . TypedDataView.typed_data {final}) T{*}
v29 <- LoadField(v2 T{_Int16ArrayView} . TypedDataView.offset_in_bytes {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rsi
v41 <- ShiftInt64Op(<< [tr], v42 T{int}, v40) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v44 <- UnboxInt64([non-speculative], v29 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v13 <- BinaryInt64Op(+ [tr], v44 T{_Smi}, v41 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[2]
v39 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
v48 <- LoadField(v24 T{_TypedList} . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Int16List] v48 T{_TypedList}, v13 T{int}, v39, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:26(v0)
slow path check bound operation
B0
B3
Graph intrinsic begin
ParallelMove rcx <- sp[3]
v3 <- LoadField(v0 . TypedDataBase.length {final})
ParallelMove rbx <- sp[2]
CheckArrayBound(v3, v1)
ParallelMove rdx <- sp[1]
v5 <- UnboxInt64([tr], [guard-inputs], v2) int64
StoreIndexed([_Int16List] v0, v1, v5, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:36(v6)
Graph intrinsic end
Enter frame
PrologueOffset = 83
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v16 <- LoadField(v2 T{_Int16List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v29 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v30 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v30 T{_Smi}, v29 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v28 <- ShiftInt64Op(<< [tr], v29 T{int}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v26 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed([_Int16List] v2 T{_Int16List}, v28 T{int}, v26, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
v7 <- AllocateObject:12(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v7 T{UnsupportedError} . message = v8 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v7)
B0
B3
Graph intrinsic begin
ParallelMove rcx <- sp[3]
v3 <- LoadField(v0 . TypedDataBase.length {final})
ParallelMove rbx <- sp[2]
CheckArrayBound(v3, v1)
ParallelMove rdx <- sp[1]
v5 <- UnboxInt64([tr], [guard-inputs], v2) int64
v6 <- LoadField(v0 . PointerBase.data {final}) untagged
ParallelMove rax <- rdx
ParallelMove rbx <- rbx
StoreIndexed([_ExternalUint8ClampedArray] v6, v1, v5, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:44(v7)
Graph intrinsic end
Enter frame
PrologueOffset = 115
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v15 <- LoadField(v2 T{_ExternalUint8ClampedArray} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v60 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v64 <- UnboxInt64([non-speculative], v15 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v64 T{_Smi}, v60 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v62 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v62 T{int}, v67 T{_Smi}) T{bool} goto (10, 11)
B10
ParallelMove rax <- C goto:20 B14
B11
Branch if RelationalOp(>, v62 T{int}, v68 T{_Smi}) T{bool} goto (12, 13)
B12
ParallelMove rax <- C goto:34 B14
B13
ParallelMove rax <- rdx goto:38 B14
B14
v47 <- LoadField(v2 T{_ExternalUint8ClampedArray} . PointerBase.data {final}) untagged
ParallelMove rax <- rax
StoreIndexed([_Uint8List] v47 T{_ExternalUint8ClampedArray}, v60 T{int}, v36 T{int}, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v20 <- LoadField(v2 T{_Uint8ClampedArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v74 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v78 <- UnboxInt64([non-speculative], v20 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v78 T{_Smi}, v74 T{int}) [-9223372036854775808, 9223372036854775807] int64
v25 <- LoadField(v2 T{_Uint8ClampedArrayView} . TypedDataView.typed_data {final}) T{*}
v30 <- LoadField(v2 T{_Uint8ClampedArrayView} . TypedDataView.offset_in_bytes {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rbx <- rbx
v79 <- UnboxInt64([non-speculative], v30 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v13 <- BinaryInt64Op(+ [tr], v79 T{_Smi}, v74 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[2]
v76 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v76 T{int}, v82 T{_Smi}) T{bool} goto (14, 15)
B14
ParallelMove rax <- C goto:20 B18
B15
Branch if RelationalOp(>, v76 T{int}, v83 T{_Smi}) T{bool} goto (16, 17)
B16
ParallelMove rax <- C goto:34 B18
B17
ParallelMove rax <- rcx goto:38 B18
B18
v86 <- LoadField(v25 T{_TypedList} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rax <- rax
StoreIndexed([_Uint8List] v86 T{_TypedList}, v13 T{int}, v51 T{int}, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:28(v0)
slow path check bound operation
B0
B3
Graph intrinsic begin
ParallelMove rcx <- sp[3]
v3 <- LoadField(v0 . TypedDataBase.length {final})
ParallelMove rbx <- sp[2]
CheckArrayBound(v3, v1)
ParallelMove rdx <- sp[1]
v5 <- UnboxInt64([tr], [guard-inputs], v2) int64
ParallelMove rax <- rdx
ParallelMove rbx <- rbx
StoreIndexed([_Uint8ClampedList] v0, v1, v5, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:44(v6)
Graph intrinsic end
Enter frame
PrologueOffset = 112
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v15 <- LoadField(v2 T{_Uint8ClampedList} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v59 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v63 <- UnboxInt64([non-speculative], v15 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v63 T{_Smi}, v59 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v61 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v61 T{int}, v66 T{_Smi}) T{bool} goto (10, 11)
B10
ParallelMove rax <- C goto:20 B14
B11
Branch if RelationalOp(>, v61 T{int}, v67 T{_Smi}) T{bool} goto (12, 13)
B12
ParallelMove rax <- C goto:34 B14
B13
ParallelMove rax <- rdx goto:38 B14
B14
ParallelMove rax <- rax
StoreIndexed([_Uint8List] v2 T{_Uint8ClampedList}, v59 T{int}, v36 T{int}, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:20(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
v7 <- AllocateObject:12(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v7 T{UnsupportedError} . message = v8 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v7)
B0
B3
Graph intrinsic begin
ParallelMove rcx <- sp[3]
v3 <- LoadField(v0 . TypedDataBase.length {final})
ParallelMove rbx <- sp[2]
CheckArrayBound(v3, v1)
ParallelMove rdx <- sp[1]
v5 <- UnboxInt64([tr], [guard-inputs], v2) int64
v6 <- LoadField(v0 . PointerBase.data {final}) untagged
ParallelMove rax <- rdx
ParallelMove rbx <- rbx
StoreIndexed([_ExternalUint8Array] v6, v1, v5, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:34(v7)
Graph intrinsic end
Enter frame
PrologueOffset = 91
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v14 <- LoadField(v2 T{_ExternalUint8Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v26 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v27 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v27 T{_Smi}, v26 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v24 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
v25 <- LoadField(v2 T{_ExternalUint8Array} . PointerBase.data {final}) untagged
ParallelMove rax <- rdx
StoreIndexed([_Uint8List] v25 T{_ExternalUint8Array}, v26 T{int}, v24, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:18(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v19 <- LoadField(v2 T{_Uint8ArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v40 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v41 <- UnboxInt64([non-speculative], v19 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v41 T{_Smi}, v40 T{int}) [-9223372036854775808, 9223372036854775807] int64
v24 <- LoadField(v2 T{_Uint8ArrayView} . TypedDataView.typed_data {final}) T{*}
v29 <- LoadField(v2 T{_Uint8ArrayView} . TypedDataView.offset_in_bytes {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rbx <- rbx
v42 <- UnboxInt64([non-speculative], v29 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v13 <- BinaryInt64Op(+ [tr], v42 T{_Smi}, v40 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[2]
v39 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
v46 <- LoadField(v24 T{_TypedList} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rax <- rcx
StoreIndexed([_Uint8List] v46 T{_TypedList}, v13 T{int}, v39, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:26(v0)
slow path check bound operation
B0
B3
Graph intrinsic begin
ParallelMove rcx <- sp[3]
v3 <- LoadField(v0 . TypedDataBase.length {final})
ParallelMove rbx <- sp[2]
CheckArrayBound(v3, v1)
ParallelMove rdx <- sp[1]
v5 <- UnboxInt64([tr], [guard-inputs], v2) int64
ParallelMove rax <- rdx
ParallelMove rbx <- rbx
StoreIndexed([_Uint8List] v0, v1, v5, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:34(v6)
Graph intrinsic end
Enter frame
PrologueOffset = 88
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v14 <- LoadField(v2 T{_Uint8List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v25 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v26 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v26 T{_Smi}, v25 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v24 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rdx
StoreIndexed([_Uint8List] v2 T{_Uint8List}, v25 T{int}, v24, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:18(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
v7 <- AllocateObject:12(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v7 T{UnsupportedError} . message = v8 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v7)
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v14 <- LoadField(v2 T{_ExternalInt8Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v26 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v27 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v27 T{_Smi}, v26 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v24 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
v25 <- LoadField(v2 T{_ExternalInt8Array} . PointerBase.data {final}) untagged
ParallelMove rax <- rdx
StoreIndexed([_Int8List] v25 T{_ExternalInt8Array}, v26 T{int}, v24, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:18(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v19 <- LoadField(v2 T{_Int8ArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v40 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v41 <- UnboxInt64([non-speculative], v19 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v41 T{_Smi}, v40 T{int}) [-9223372036854775808, 9223372036854775807] int64
v24 <- LoadField(v2 T{_Int8ArrayView} . TypedDataView.typed_data {final}) T{*}
v29 <- LoadField(v2 T{_Int8ArrayView} . TypedDataView.offset_in_bytes {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rbx <- rbx
v42 <- UnboxInt64([non-speculative], v29 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v13 <- BinaryInt64Op(+ [tr], v42 T{_Smi}, v40 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[2]
v39 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
v46 <- LoadField(v24 T{_TypedList} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rax <- rcx
StoreIndexed([_Int8List] v46 T{_TypedList}, v13 T{int}, v39, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:26(v0)
slow path check bound operation
B0
B3
Graph intrinsic begin
ParallelMove rcx <- sp[3]
v3 <- LoadField(v0 . TypedDataBase.length {final})
ParallelMove rbx <- sp[2]
CheckArrayBound(v3, v1)
ParallelMove rdx <- sp[1]
v5 <- UnboxInt64([tr], [guard-inputs], v2) int64
ParallelMove rax <- rdx
ParallelMove rbx <- rbx
StoreIndexed([_Int8List] v0, v1, v5, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:34(v6)
Graph intrinsic end
Enter frame
PrologueOffset = 88
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v14 <- LoadField(v2 T{_Int8List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[3]
v25 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v26 <- UnboxInt64([non-speculative], v14 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
GenericCheckBound:14(v26 T{_Smi}, v25 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v24 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rdx
StoreIndexed([_Int8List] v2 T{_Int8List}, v25 T{int}, v24, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:18(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rbx <- fp[4]
v6 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- fp[2], rdx <- rdx, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v6), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[4]
v8 <- LoadField(v2 . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rdi <- fp[3]
v11 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v12 <- UnboxInt64([non-speculative], v8) [0, 576460752303423487] int64
ParallelMove rax <- rsi, rbx <- rdi
GenericCheckBound:12(v12 T{_Smi}, v11 T{int}) [-9223372036854775808, 9223372036854775807] int64
v10 <- LoadField(v2 . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[2]
StoreIndexed:12([_List] v10, v11 T{int}, v4 T{X0?})
ParallelMove rax <- C
DartReturn:14(v0)
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[4]
v6 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- fp[2], rdx <- rdx, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v6), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
v8 <- AllocateObject:12(cls=UnsupportedError, <not-aliased>) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v8 T{UnsupportedError} . message = v9 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v8)
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rbx <- fp[4]
v6 <- LoadField(v2 . Array.type_arguments {final}) T{TypeArguments?}
ParallelMove rax <- fp[2], rdx <- rdx, rcx <- C
t0 <- AssertAssignable:10(v4, v5, 'value', instantiator_type_args(v6), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdx <- fp[4]
v8 <- LoadField(v2 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rsi <- fp[3]
v10 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v11 <- UnboxInt64([non-speculative], v8) [0, 576460752303423487] int64
ParallelMove rax <- rcx, rbx <- rsi
GenericCheckBound:12(v11 T{_Smi}, v10 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx, rax <- fp[2]
StoreIndexed:12([_List] v2, v10 T{int}, v4 T{X0?})
ParallelMove rax <- C
DartReturn:14(v0)
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rsi
v11 <- LoadField(v2 T{_Float64x2ArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v14 <- UnboxInt64([non-speculative], v11) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rcx
t0 <- GenericCheckBound:10(v14 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
v18 <- LoadField(v2 T{_Float64x2ArrayView} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
v13 <- LoadIndexed([_Float64x2ArrayView] v18 T{_Float64x2ArrayView}, v3 T{int}) float64x2
v15 <- Box(v13 T{_Float64x2}) T{_Float64x2}
ParallelMove rax <- rax
DartReturn:12(v15 T{_Float64x2})
slow path check bound operation
Box slow path allocation of _Float64x2
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rsi
v21 <- LoadClassId(v2) [163, 165] int64
Branch if EqualityCompare:10(v21 == v22) goto (3, 7)
B3
v6 <- LoadField(v2 T{__Float64x2List&_TypedList&_Float64x2ListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v26 <- UnboxInt64([non-speculative], v6) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rcx
GenericCheckBound:10(v26 T{_Smi}, v3) [-9223372036854775808, 9223372036854775807] int64
v39 <- LoadField(v2 T{__Float64x2List&_TypedList&_Float64x2ListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rsi <- rcx
v31 <- LoadIndexed:10([_Float64x2List] v39 T{__Float64x2List&_TypedList&_Float64x2ListMixin}, v3 T{int}) float64x2
ParallelMove xmm0 <- xmm0 goto: B8
B7
v16 <- LoadField(v2 T{_ExternalFloat64x2Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v28 <- UnboxInt64([non-speculative], v16) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rcx
t0 <- GenericCheckBound:10(v28 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
v18 <- LoadField(v2 T{_ExternalFloat64x2Array} . PointerBase.data {final}) untagged
ParallelMove rcx <- rcx
v19 <- LoadIndexed([_ExternalFloat64x2Array] v18, v3 T{int}) float64x2
ParallelMove xmm0 <- xmm0 goto:12 B8
B8
v29 <- Box(v23) T{_Float64x2}
ParallelMove rax <- rax
DartReturn:12(v29 T{_Float64x2})
slow path check bound operation
slow path check bound operation
Box slow path allocation of _Float64x2
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rsi
v11 <- LoadField(v2 T{_Int32x4ArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v14 <- UnboxInt64([non-speculative], v11) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rcx
t0 <- GenericCheckBound:10(v14 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
v18 <- LoadField(v2 T{_Int32x4ArrayView} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
v13 <- LoadIndexed([_Int32x4ArrayView] v18 T{_Int32x4ArrayView}, v3 T{int}) int32x4
v15 <- Box(v13 T{_Int32x4}) T{_Int32x4}
ParallelMove rax <- rax
DartReturn:12(v15 T{_Int32x4})
slow path check bound operation
Box slow path allocation of _Int32x4
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rsi
v28 <- LoadClassId(v2) [159, 161] int64
Branch if EqualityCompare:10(v28 == v29) goto (3, 8)
B3
v12 <- LoadField(v2 T{_Int32x4List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v33 <- UnboxInt64([non-speculative], v12) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rcx
t0 <- GenericCheckBound:10(v33 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rcx
v14 <- LoadIndexed([_Int32x4List] v2 T{_Int32x4List}, v3 T{int}) int32x4
ParallelMove xmm0 <- xmm0 goto:12 B9
B8
v23 <- LoadField(v2 T{_ExternalInt32x4Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v34 <- UnboxInt64([non-speculative], v23) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rcx
t0 <- GenericCheckBound:10(v34 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
v25 <- LoadField(v2 T{_ExternalInt32x4Array} . PointerBase.data {final}) untagged
ParallelMove rcx <- rcx
v26 <- LoadIndexed([_ExternalInt32x4Array] v25, v3 T{int}) int32x4
ParallelMove xmm0 <- xmm0 goto:12 B9
B9
v35 <- Box(v30) T{_Int32x4}
ParallelMove rax <- rax
DartReturn:12(v35 T{_Int32x4})
slow path check bound operation
slow path check bound operation
Box slow path allocation of _Int32x4
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rsi
v11 <- LoadField(v2 T{_Float32x4ArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v14 <- UnboxInt64([non-speculative], v11) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rcx
t0 <- GenericCheckBound:10(v14 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
v18 <- LoadField(v2 T{_Float32x4ArrayView} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
v13 <- LoadIndexed([_Float32x4ArrayView] v18 T{_Float32x4ArrayView}, v3 T{int}) float32x4
v15 <- Box(v13 T{_Float32x4}) T{_Float32x4}
ParallelMove rax <- rax
DartReturn:12(v15 T{_Float32x4})
slow path check bound operation
Box slow path allocation of _Float32x4
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rsi
v21 <- LoadClassId(v2) [155, 157] int64
Branch if EqualityCompare:10(v21 == v22) goto (3, 7)
B3
v6 <- LoadField(v2 T{__Float32x4List&_TypedList&_Float32x4ListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v26 <- UnboxInt64([non-speculative], v6) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rcx
GenericCheckBound:10(v26 T{_Smi}, v3) [-9223372036854775808, 9223372036854775807] int64
v39 <- LoadField(v2 T{__Float32x4List&_TypedList&_Float32x4ListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rsi <- rcx
v31 <- LoadIndexed:10([_Float32x4List] v39 T{__Float32x4List&_TypedList&_Float32x4ListMixin}, v3 T{int}) float32x4
ParallelMove xmm0 <- xmm0 goto: B8
B7
v16 <- LoadField(v2 T{_ExternalFloat32x4Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v28 <- UnboxInt64([non-speculative], v16) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rcx
t0 <- GenericCheckBound:10(v28 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
v18 <- LoadField(v2 T{_ExternalFloat32x4Array} . PointerBase.data {final}) untagged
ParallelMove rcx <- rcx
v19 <- LoadIndexed([_ExternalFloat32x4Array] v18, v3 T{int}) float32x4
ParallelMove xmm0 <- xmm0 goto:12 B8
B8
v29 <- Box(v23) T{_Float32x4}
ParallelMove rax <- rax
DartReturn:12(v29 T{_Float32x4})
slow path check bound operation
slow path check bound operation
Box slow path allocation of _Float32x4
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rsi
v28 <- LoadClassId(v2) [148, 154] int64
Branch if EqualityCompare:10(v28 == v29) goto (5, 10)
B5
B10
Branch if EqualityCompare:10(v28 == v30) goto (11, 6)
B11
B3
v12 <- LoadField(v2 T{__Float32ArrayView&_TypedListView&_DoubleListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v39 <- UnboxInt64([non-speculative], v12) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rcx
t0 <- GenericCheckBound:10(v39 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
v53 <- LoadField(v2 T{__Float32ArrayView&_TypedListView&_DoubleListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v14 <- LoadIndexed([_Float32ArrayView] v53 T{__Float32ArrayView&_TypedListView&_DoubleListMixin}, v3 T{int}) float
ParallelMove xmm0 <- xmm0
v15 <- FloatToDouble(v14) double
ParallelMove xmm0 <- xmm0 goto:12 B14
B6
v24 <- LoadField(v2 T{__Float32ArrayView&_TypedListView&_DoubleListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v40 <- UnboxInt64([non-speculative], v24) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rcx
t0 <- GenericCheckBound:10(v40 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
v54 <- LoadField(v2 T{__Float32ArrayView&_TypedListView&_DoubleListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v26 <- LoadIndexed([_Float64ArrayView] v54 T{__Float32ArrayView&_TypedListView&_DoubleListMixin}, v3 T{int}) double
ParallelMove xmm0 <- xmm0 goto:12 B14
B14
v41 <- Box(v32) T{_Double}
ParallelMove rax <- rax
DartReturn:12(v41 T{_Double})
slow path check bound operation
slow path check bound operation
Box slow path allocation of _Double
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rsi
v39 <- LoadClassId(v2) [147, 153] int64
Branch if EqualityCompare:10(v39 == v40) goto (3, 10)
B3
v6 <- LoadField(v2 T{__Float32List&_TypedList&_DoubleListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rsi
v50 <- UnboxInt64([non-speculative], v6) [0, 4611686018427387903] int64
ParallelMove rax <- rsi, rbx <- rcx
GenericCheckBound:10(v50 T{_Smi}, v3) [-9223372036854775808, 9223372036854775807] int64
v75 <- LoadField(v2 T{__Float32List&_TypedList&_DoubleListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v58 <- LoadIndexed:10([_Float32List] v75 T{__Float32List&_TypedList&_DoubleListMixin}, v3 T{int}) float
ParallelMove xmm0 <- xmm0
v9 <- FloatToDouble:10(v58 T{_Double}) double
ParallelMove xmm0 <- xmm0 goto: B13
B10
Branch if EqualityCompare:10(v39 == v41) goto (4, 11)
B4
v17 <- LoadField(v2 T{_ExternalFloat32Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rsi
v52 <- UnboxInt64([non-speculative], v17) [0, 4611686018427387903] int64
ParallelMove rax <- rsi, rbx <- rcx
t0 <- GenericCheckBound:10(v52 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
v19 <- LoadField(v2 T{_ExternalFloat32Array} . PointerBase.data {final}) untagged
v20 <- LoadIndexed([_ExternalFloat32Array] v19, v3 T{int}) float
ParallelMove xmm0 <- xmm0
v21 <- FloatToDouble(v20) double
ParallelMove xmm0 <- xmm0 goto:12 B13
B11
Branch if EqualityCompare:10(v39 == v42) goto (6, 12)
B6
v24 <- LoadField(v2 T{__Float32List&_TypedList&_DoubleListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v53 <- UnboxInt64([non-speculative], v24) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rcx
GenericCheckBound:10(v53 T{_Smi}, v3) [-9223372036854775808, 9223372036854775807] int64
v76 <- LoadField(v2 T{__Float32List&_TypedList&_DoubleListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
v59 <- LoadIndexed:10([_Float64List] v76 T{__Float32List&_TypedList&_DoubleListMixin}, v3 T{int}) double
ParallelMove xmm0 <- xmm0 goto: B13
B12
v34 <- LoadField(v2 T{_ExternalFloat64Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v55 <- UnboxInt64([non-speculative], v34) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rcx
t0 <- GenericCheckBound:10(v55 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
v36 <- LoadField(v2 T{_ExternalFloat64Array} . PointerBase.data {final}) untagged
v37 <- LoadIndexed([_ExternalFloat64Array] v36, v3 T{int}) double
ParallelMove xmm0 <- xmm0 goto:12 B13
B13
v56 <- Box(v43) T{_Double}
ParallelMove rax <- rax
DartReturn:12(v56 T{_Double})
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
Box slow path allocation of _Double
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v5 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v6 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v5 T{int})
ParallelMove rcx <- rcx
v4 <- DispatchTableCall( cid=v6 List.[]<0>, v2, v5 T{int}) T{*?}
ParallelMove rax <- rax
DartReturn:12(v4 T{int})
CheckStackOverflowSlowPath
B0
B1
ParallelMove rcx <- rsi
v5 <- LoadField(v2 . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v9 <- UnboxInt64([non-speculative], v5) [0, 576460752303423487] int64
ParallelMove rax <- rdx, rbx <- rcx
GenericCheckBound:10(v9 T{_Smi}, v3) [-9223372036854775808, 9223372036854775807] int64
v7 <- LoadField(v2 . GrowableObjectArray.data) T{_List}
v11 <- LoadIndexed:10([_List] v7, v3 T{int}) T{X0?}
ParallelMove rax <- rax
DartReturn:12(v11 T{X0?})
slow path check bound operation
PrologueOffset = 35
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rsi
v30 <- LoadClassId(v2) [89, 564] int64
Branch if TestRange:10(v30 in [89-90]) goto (3, 9)
B3
v11 <- LoadField(v2 T{_Array<X0>} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rsi <- rsi
v54 <- UnboxInt64([non-speculative], v11) [0, 576460752303423487] int64
ParallelMove rax <- rsi, rbx <- rcx
t0 <- GenericCheckBound:10(v54 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
v13 <- LoadIndexed([_List] v2 T{_Array<X0>}, v3 T{int}) T{*?}
ParallelMove rax <- rsi goto:12 B11
B9
Branch if EqualityCompare:10(v30 == v31) goto (5, 10)
B5
v16 <- LoadField(v2 T{ListBase<X0>} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v55 <- UnboxInt64([non-speculative], v16) [0, 576460752303423487] int64
ParallelMove rax <- rdx, rbx <- rcx
GenericCheckBound:10(v55 T{_Smi}, v3) [-9223372036854775808, 9223372036854775807] int64
v18 <- LoadField(v2 T{ListBase<X0>} . GrowableObjectArray.data) T{_List}
v59 <- LoadIndexed:10([_List] v18, v3 T{int}) T{*?}
ParallelMove rax <- rsi goto: B11
B10
v27 <- LoadField(v2 T{CodeUnits} . _string@9040228 {final}) T{String}
v39 <- LoadField(v27 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rsi <- rsi
v57 <- UnboxInt64([non-speculative], v39) [0, 2305843009213693951] int64
ParallelMove rax <- rsi, rbx <- rcx
t0 <- GenericCheckBound:12(v57 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
v41 <- LoadClassId(v27 T{_StringBase}) [93, 94] T{_Smi}
Branch if StrictCompare:12(===, v41, v49 T{_Smi}) goto (15, 16)
B15
v45 <- LoadIndexed([_OneByteString] v27 T{_OneByteString}, v3 T{int}) [0, 255] int64
ParallelMove rcx <- rbx goto:12 B14
B16
v43 <- LoadIndexed([_TwoByteString] v27 T{_StringBase}, v3 T{int}) [0, 65535] int64
ParallelMove rcx <- rbx goto:12 B14
B14
v58 <- BoxInt64(v44 T{_Smi}) [0, 65535] T{_Smi}
ParallelMove rax <- rdx goto:14 B11
B11
ParallelMove rax <- rax
DartReturn:12(v32 T{X0?})
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi
v3 <- StaticCall:10( get:isEmpty<0> v2, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax
v4 <- BooleanNegate(v3 T{bool}) T{bool}
ParallelMove rax <- rax
DartReturn:14(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v6 <- LoadClassId(<non-smi> v2) int64
ParallelMove rcx <- rcx, rdi <- rdi
v3 <- DispatchTableCall( cid=v6 Iterable.iterator<0>, v2) T{*?}
ParallelMove rax <- rax
v7 <- LoadClassId(<non-smi> v3 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax
v4 <- DispatchTableCall( cid=v7 Iterator.moveNext<0>, v3 T{Iterator<X0>}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax
v5 <- BooleanNegate(v4 T{bool}) T{bool}
ParallelMove rax <- rax
DartReturn:16(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- C, fp[-1] <- rdi
v4 <- AllocateObject:10(cls=_TypedListIterator, v3, <not-aliased>) T{_TypedListIterator}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v4 T{_TypedListIterator} . _array@7027147 = v2 T{__Float64x2List&_TypedList&_Float64x2ListMixin}, NoStoreBarrier)
v20 <- LoadField(v2 T{__Float64x2List&_TypedList&_Float64x2ListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v21 <- UnboxInt64([non-speculative], v20 T{_Smi}) [0, 4611686018427387903] int64
StoreField(v4 T{_TypedListIterator} . _length@7027147 = v21 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v4 T{_TypedListIterator} . _position@7027147 = v15 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v4)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- C, fp[-1] <- rdi
v4 <- AllocateObject:10(cls=_TypedListIterator, v3, <not-aliased>) T{_TypedListIterator}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v4 T{_TypedListIterator} . _array@7027147 = v2 T{__Int32x4List&_TypedList&_Int32x4ListMixin}, NoStoreBarrier)
v20 <- LoadField(v2 T{__Int32x4List&_TypedList&_Int32x4ListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v21 <- UnboxInt64([non-speculative], v20 T{_Smi}) [0, 4611686018427387903] int64
StoreField(v4 T{_TypedListIterator} . _length@7027147 = v21 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v4 T{_TypedListIterator} . _position@7027147 = v15 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v4)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- C, fp[-1] <- rdi
v4 <- AllocateObject:10(cls=_TypedListIterator, v3, <not-aliased>) T{_TypedListIterator}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v4 T{_TypedListIterator} . _array@7027147 = v2 T{__Float32x4List&_TypedList&_Float32x4ListMixin}, NoStoreBarrier)
v20 <- LoadField(v2 T{__Float32x4List&_TypedList&_Float32x4ListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v21 <- UnboxInt64([non-speculative], v20 T{_Smi}) [0, 4611686018427387903] int64
StoreField(v4 T{_TypedListIterator} . _length@7027147 = v21 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v4 T{_TypedListIterator} . _position@7027147 = v15 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v4)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- C, fp[-1] <- rdi
v4 <- AllocateObject:10(cls=_TypedListIterator, v3, <not-aliased>) T{_TypedListIterator}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v4 T{_TypedListIterator} . _array@7027147 = v2 T{__Float32List&_TypedList&_DoubleListMixin}, NoStoreBarrier)
v20 <- LoadField(v2 T{__Float32List&_TypedList&_DoubleListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v21 <- UnboxInt64([non-speculative], v20 T{_Smi}) [0, 4611686018427387903] int64
StoreField(v4 T{_TypedListIterator} . _length@7027147 = v21 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v4 T{_TypedListIterator} . _position@7027147 = v15 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v4)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- C, fp[-1] <- rdi
v4 <- AllocateObject:10(cls=_TypedListIterator, v3, <not-aliased>) T{_TypedListIterator}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v4 T{_TypedListIterator} . _array@7027147 = v2 T{__Int8List&_TypedList&_IntListMixin}, NoStoreBarrier)
v20 <- LoadField(v2 T{__Int8List&_TypedList&_IntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v21 <- UnboxInt64([non-speculative], v20 T{_Smi}) [0, 4611686018427387903] int64
StoreField(v4 T{_TypedListIterator} . _length@7027147 = v21 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v4 T{_TypedListIterator} . _position@7027147 = v15 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v4)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
v3 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx
v4 <- AllocateObject:10(cls=ListIterator, v3, <not-aliased>) T{ListIterator}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v4 T{ListIterator} . _iterable@9040228 = v2 T{_GrowableList}, NoStoreBarrier)
v18 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v20 <- UnboxInt64([non-speculative], v18) [0, 576460752303423487] int64
StoreField(v4 T{ListIterator} . _length@9040228 = v20 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v4 T{ListIterator} . _index@9040228 = v21 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v4)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
v3 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx
v4 <- AllocateObject:10(cls=_ArrayIterator, v3, <not-aliased>) T{_ArrayIterator}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v4 T{_ArrayIterator} . _array@0150898 = v2 T{_Array<X0>}, NoStoreBarrier)
v18 <- LoadField(v2 T{_Array<X0>} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v20 <- UnboxInt64([non-speculative], v18 T{_Smi}) [0, 576460752303423487] int64
StoreField(v4 T{_ArrayIterator} . _length@0150898 = v20 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v4 T{_ArrayIterator} . _index@0150898 = v21 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v4)
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
v13 <- LoadField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin&_UnmodifiableSetMixin&_ImmutableLinkedHashSetMixin<X0>} . ImmutableLinkedHashBase.data {final}) T{_ImmutableList}
ParallelMove fp[-2] <- rax
v18 <- LoadField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin&_UnmodifiableSetMixin&_ImmutableLinkedHashSetMixin<X0>} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx, fp[-1] <- rcx
v4 <- AllocateObject:10(cls=_CompactIteratorImmutable, v3, <not-aliased>) T{_CompactIteratorImmutable}
ParallelMove rax <- rax, rcx <- fp[-2]
StoreField(v4 T{_CompactIteratorImmutable} . _data@3220832 = v13 T{_ImmutableList}, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
v33 <- UnboxInt64([non-speculative], v18 T{_Smi}) [0, 4611686018427387903] int64
StoreField(v4 T{_CompactIteratorImmutable} . _len@3220832 = v33 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v4 T{_CompactIteratorImmutable} . _offset@3220832 = v31 <int64>, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v4 T{_CompactIteratorImmutable} . _step@3220832 = v34 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:20(v4)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rsi <- rdi, fp[-3] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
v13 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.data) T{_List}
ParallelMove fp[-2] <- rax
v18 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v21 <- UnboxInt64([non-speculative], v18 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdx <- rdx, fp[-1] <- rcx
v4 <- AllocateObject:10(cls=_CompactIterator, v3) T{_CompactIterator}
ParallelMove rdi <- rax, rsi <- fp[-3], rdx <- fp[-2], rbx <- fp[-1], r8 <- C, r9 <- C, rax <- rax
ParallelMove fp[-2] <- rax
StaticCall:18( _CompactIterator@3220832.<0> v4, v2, v13 T{_List}, v21 T{_Smi}, v19, v22 T{_Smi})
ParallelMove rax <- fp[-2]
DartReturn:20(v4)
CheckStackOverflowSlowPath
B0
B1
v17 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v21 <- StrictCompare(!==, v17 T{_Smi}, v12 T{_Smi}) T{bool}
ParallelMove rax <- rax
DartReturn:14(v21 T{bool})
B0
B1
v34 <- LoadClassId(v2) [89, 564] int64
Branch if TestRange:10(v34 in [89-90]) goto (5, 12)
B5
v17 <- LoadField(v2 T{_Array<X0>} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v45 <- UnboxInt64([non-speculative], v17) [0, 576460752303423487] int64
ParallelMove rcx <- rdx goto:10 B14
B12
Branch if EqualityCompare:10(v34 == v35) goto (7, 13)
B7
v24 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v46 <- UnboxInt64([non-speculative], v24) [0, 576460752303423487] int64
ParallelMove rcx <- rcx goto:10 B14
B13
v31 <- LoadField(v2 T{CodeUnits} . _string@9040228 {final}) T{String}
v41 <- LoadField(v31 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v47 <- UnboxInt64([non-speculative], v41 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rcx <- rdx goto:14 B14
B14
v11 <- EqualityCompare(v36 T{_Smi} != v48 T{_Smi}) T{bool}
ParallelMove rax <- rax
DartReturn:14(v11 T{bool})
B0
B1
Enter frame
PrologueOffset = 0
v4 <- AllocateObject:10(cls=NoSuchMethodError) T{NoSuchMethodError}
ParallelMove rcx <- rax, rax <- fp[3]
StoreField(v4 T{NoSuchMethodError} . _receiver@0150898 = v2 T{Object}, NoStoreBarrier)
ParallelMove rax <- fp[2]
StoreField(v4 T{NoSuchMethodError} . _invocation@0150898 = v3 T{_InvocationMirror}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:14(v4)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v9 <- AllocateObject:10(cls=NoSuchMethodError) T{NoSuchMethodError}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
MoveArgument(sp[7] <- v9)
MoveArgument(sp[6] <- v2)
MoveArgument(sp[5] <- v3)
MoveArgument(sp[4] <- v4)
MoveArgument(sp[3] <- v5)
MoveArgument(sp[2] <- v6)
MoveArgument(sp[1] <- v7)
MoveArgument(sp[0] <- v8)
StaticCall:12( NoSuchMethodError._withType@0150898<0> v9, v2, v3, v4, v5, v6, v7, v8)
ParallelMove rax <- fp[-1]
Throw:14(v9)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[8], rcx <- fp[9]
StoreField(v2 . _receiver@0150898 = v3)
v11 <- AllocateObject:12(cls=Symbol) T{Symbol}
ParallelMove rcx <- rax, rax <- fp[7]
ParallelMove fp[-1] <- rcx
StoreField(v11 T{Symbol} . _name@9040228 = v4 T{String}, NoStoreBarrier)
MoveArgument(sp[1] <- v7)
MoveArgument(sp[0] <- v6)
v12 <- StaticCall:16( _unpackTypeArguments@0150898<0> v7, v6, result_type = T{!null}) T{List<Type>}
ParallelMove rax <- rax, rsi <- fp[2]
ParallelMove fp[-2] <- rax
Branch if StrictCompare:18(!==, v9, v0) goto (3, 4)
B3
ParallelMove rdi <- fp[3]
CheckNull:24(v8, CastError) T{List<dynamic>?}
v50 <- LoadClassId(<non-smi> v8 T{List<dynamic>?}) int64
MoveArgument(sp[0] <- v8 T{List<dynamic>?})
ParallelMove rcx <- rcx
v17 <- DispatchTableCall( cid=v50 List.length<0>, v8 T{List<dynamic>?}) T{int}
ParallelMove rax <- rax, rsi <- fp[2]
ParallelMove fp[-3] <- rax
v51 <- LoadClassId(<non-smi> v9 T{List<dynamic>?}) int64
MoveArgument(sp[0] <- v9 T{List<dynamic>?})
ParallelMove rcx <- rcx
v18 <- DispatchTableCall( cid=v51 List.length<0>, v9 T{List<dynamic>?}) T{int}
ParallelMove rax <- rax
ParallelMove rcx <- fp[-3]
v41 <- UnboxInt64([non-speculative], v17 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rax <- rax
v42 <- UnboxInt64([non-speculative], v18 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rcx <- rcx
v19 <- BinaryInt64Op(- [tr], v41 T{_Smi}, v42 T{_Smi}) [-9223372036854775807, 9223372036854775807] int64
ParallelMove rax <- fp[3]
v52 <- LoadClassId(<non-smi> v8 T{List<dynamic>?}) int64
ParallelMove rcx <- rdx, rdi <- rax, rsi <- C, rdx <- rcx
v20 <- DispatchTableCall( cid=v52 List.sublist<0>, v8 T{List<dynamic>?}, v43 T{_Smi}, v19) T{*?}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:38 B5
B4
ParallelMove r8 <- fp[3] goto:40 B5
B5
ParallelMove fp[-3] <- r8
Branch if StrictCompare:42(!==, v9, v0) goto (6, 7)
B6
ParallelMove rdi <- fp[3]
CheckNull:48(v8, CastError) T{List<dynamic>?}
ParallelMove rdi <- rdi, rsi <- rsi
v15 <- StaticCall:50( _NamedArgumentsMap@0150898<0> v8 T{List<dynamic>?}, v9 T{List<dynamic>?}, result_type = T{_Map}) T{_Map}
ParallelMove rax <- rax
ParallelMove r9 <- rax goto:56 B8
B7
ParallelMove r9 <- C goto:58 B8
B8
ParallelMove fp[-5] <- r9
ParallelMove rcx <- fp[6]
v40 <- UnboxInt64([non-speculative], v5) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-4] <- rcx
v10 <- AllocateObject:10(cls=_InvocationMirror) T{_InvocationMirror}
ParallelMove rdi <- rax, rsi <- fp[-1], rdx <- fp[-4], rbx <- fp[-2], r8 <- fp[-3], r9 <- fp[-5], rax <- rax
ParallelMove fp[-1] <- rax
StaticCall:60( _InvocationMirror@0150898._withType@0150898<0> v10, v11, v40 T{int}, v12, v13, v14)
ParallelMove rax <- fp[-1], rcx <- fp[9]
StoreField(v2 . _invocation@0150898 = v10)
ParallelMove rax <- C
DartReturn:64(v0)
CheckStackOverflowSlowPath
slow path check null (cast) operation
slow path check null (cast) operation
B0
B5
ParallelMove r10 <- C, rcx <- C
ParallelMove r8 <- rdi, rax <- rsi, rdi <- rdx, rsi <- rbx, rbx <- r8, rdx <- r9
StoreField(v2 . _isSuperInvocation@0150898 = v8, NoStoreBarrier)
StoreField(v2 . _delayedTypeArgumentsLen@0150898 = v62 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
StoreField(v2 . _memberName@0150898 = v3)
ParallelMove rax <- rsi
StoreField(v2 . _typeArguments@0150898 = v5)
ParallelMove rax <- rbx
StoreField(v2 . _positionalArguments@0150898 = v6)
ParallelMove rax <- rdx
StoreField(v2 . _namedArguments@0150898 = v7)
StoreField(v2 . _type@0150898 = v4 <int64>)
Branch if StrictCompare:32(===, v6 T{List<Object?>??}, v0) goto (6, 7)
B6
ParallelMove rcx <- C
StoreField(v2 T{_InvocationMirror} . _positionalArguments@0150898 = v17 T{_ImmutableList})
ParallelMove  goto:44 B8
B7
B8
Branch if StrictCompare:50(===, v7 T{Map<Symbol, Object?>??}, v0) goto (9, 10)
B9
ParallelMove rcx <- C
StoreField(v2 T{_InvocationMirror} . _namedArguments@0150898 = v16 T{_ConstMap})
ParallelMove  goto:62 B11
B10
B11
ParallelMove rax <- C
DartReturn:66(v0)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[3]
Branch if StrictCompare:12(===, v5, v0) goto (3, 4)
B3
ParallelMove rbx <- C goto:22 B5
B4
ParallelMove rax <- rax
v33 <- UnboxInt64([non-speculative], v5 T{int?}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rax goto:24 B5
B5
ParallelMove fp[-1] <- rbx
v7 <- AllocateObject:10(cls=_InvocationMirror, <not-aliased>) T{_InvocationMirror}
ParallelMove rax <- rax, rcx <- fp[6]
StoreField(v7 T{_InvocationMirror} . _functionName@0150898 = v2 T{String}, NoStoreBarrier)
ParallelMove rcx <- fp[5]
StoreField(v7 T{_InvocationMirror} . _argumentsDescriptor@0150898 = v3 T{List<dynamic>}, NoStoreBarrier)
ParallelMove rcx <- fp[4]
StoreField(v7 T{_InvocationMirror} . _arguments@0150898 = v4 T{List<dynamic>}, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v7 T{_InvocationMirror} . _isSuperInvocation@0150898 = v8 T{bool}, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreField(v7 T{_InvocationMirror} . _type@0150898 = v9 T{int} <int64>, NoStoreBarrier)
ParallelMove rcx <- fp[2]
v32 <- UnboxInt64([non-speculative], v6 T{int}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v7 T{_InvocationMirror} . _delayedTypeArgumentsLen@0150898 = v32 T{int} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:28(v7)
B0
B1
Enter frame
PrologueOffset = 0
v4 <- LoadField(v2 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6 <- BinarySmiOp:4(- [tr], v4, v5) [-4, 4611686018427387899] T{_Smi}
v7 <- LoadIndexedUnsafe(rbp[v6 + 40]) T{String}
ParallelMove fp[-5] <- rcx
v8 <- LoadIndexedUnsafe(rbp[v6 + 32]) T{List<dynamic>}
ParallelMove fp[-4] <- rdx
v9 <- LoadIndexedUnsafe(rbp[v6 + 24]) T{List<dynamic>}
ParallelMove fp[-3] <- rbx
v10 <- LoadIndexedUnsafe(rbp[v6 + 16]) T{bool}
ParallelMove fp[-2] <- rsi
Branch if RelationalOp:6(<=, v11, v6) T{bool} goto (2, 3)
B2
v17 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 8]) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- rdi
v38 <- UnboxInt64([non-speculative], v17) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rdi goto:20 B5
B3
ParallelMove rax <- C goto:18 B5
B5
ParallelMove fp[-1] <- rax
v16 <- AllocateObject:28(cls=_InvocationMirror, <not-aliased>) T{_InvocationMirror}
ParallelMove rax <- rax, rcx <- fp[-5]
StoreField(v16 T{_InvocationMirror} . _functionName@0150898 = v7 T{String}, NoStoreBarrier)
ParallelMove rcx <- fp[-4]
StoreField(v16 T{_InvocationMirror} . _argumentsDescriptor@0150898 = v8 T{List<dynamic>}, NoStoreBarrier)
ParallelMove rcx <- fp[-3]
StoreField(v16 T{_InvocationMirror} . _arguments@0150898 = v9 T{List<dynamic>}, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreField(v16 T{_InvocationMirror} . _isSuperInvocation@0150898 = v10 T{bool}, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreField(v16 T{_InvocationMirror} . _type@0150898 = v15 T{int} <int64>, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v16 T{_InvocationMirror} . _delayedTypeArgumentsLen@0150898 = v40 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:32(v16)
Checking for cid 313 (Symbol)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- C
v5 <- StaticCall:10( Map.<0> v4, result_type = T{_Map}) T{_Map}
ParallelMove rdx <- rax, rax <- fp[-1]
ParallelMove fp[-3] <- rdx
v58 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[0] <- v2)
ParallelMove rcx <- rcx
v6 <- DispatchTableCall( cid=v58 List.length<0>, v2) T{int}
ParallelMove rdx <- rax, rax <- fp[-2]
ParallelMove fp[-4] <- rdx
v59 <- LoadClassId(<non-smi> v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v7 <- DispatchTableCall( cid=v59 List.length<0>, v3) T{int}
ParallelMove rax <- rax
ParallelMove rcx <- fp[-4]
v50 <- UnboxInt64([non-speculative], v6 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rax <- rax
v51 <- UnboxInt64([non-speculative], v7 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rdx <- rcx
v8 <- BinaryInt64Op(- [tr], v50 T{_Smi}, v51 T{_Smi}) [-9223372036854775807, 9223372036854775807] int64
ParallelMove fp[-6] <- rdx
ParallelMove rsi <- C goto:50 B5
B5
  Loop 0
ParallelMove fp[-5] <- rsi
CheckStackOverflow:54(stack=0, loop=1)
v60 <- LoadClassId(<non-smi> v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v11 <- DispatchTableCall( cid=v60 List.length<0>, v3) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v53 <- UnboxInt64([non-speculative], v11 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rdx <- fp[-5]
Branch if RelationalOp(<, v10, v53 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
ParallelMove rcx <- fp[-6]
v14 <- BinaryInt64Op(+ [tr], v8, v10) [-9223372036854775808, 9223372036854775807] int64
v54 <- BoxInt64(v14) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v61 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v54 T{int})
ParallelMove rcx <- rcx
v15 <- DispatchTableCall( cid=v61 List.[]<0>, v2, v54 T{int}) T{*?}
ParallelMove rsi <- rax, rdx <- fp[-5]
ParallelMove fp[-4] <- rsi
v52 <- BoxInt64(v10) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- rax, rax <- fp[-2]
v62 <- LoadClassId(<non-smi> v3) int64
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v52 T{int})
ParallelMove rcx <- rbx
v17 <- DispatchTableCall( cid=v62 List.[]<0>, v3, v52 T{int}) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-7] <- rbx
t3 <- AssertAssignable:42(v17 T{X0?}, v18, '', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
v16 <- AllocateObject:38(cls=Symbol) T{Symbol}
ParallelMove rcx <- rax, rax <- fp[-7]
ParallelMove fp[-8] <- rcx
StoreField(v16 T{Symbol} . _name@9040228 = v17 T{String}, NoStoreBarrier)
MoveArgument(sp[0] <- v16 T{Symbol})
v43 <- StaticCall:10( get:hashCode<0> v16 T{Symbol}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v55 <- UnboxInt64([non-speculative], v43 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-3], rsi <- fp[-8], rdx <- fp[-4], rbx <- rax
StaticCall:16( _set@3220832<0> v5 T{_Map}, v16 T{Symbol}, v15 T{X0?}, v55 T{int}, using unchecked entrypoint)
ParallelMove rcx <- fp[-5]
v21 <- BinaryInt64Op(+ [tr], v10, v57 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rcx, rdx <- fp[-6] goto:52 B5
B4
ParallelMove rax <- fp[-3]
DartReturn:56(v5)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v6 <- LoadClassId(v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v4 <- DispatchTableCall( cid=v6 Object.hashCode<0>, v3) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v5 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
DartReturn:12(v5 T{int})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove r12 <- rdi, r10 <- rsi, rcx <- rdx, rax <- rbx, fp[-2] <- rdi, fp[-3] <- rsi, fp[-4] <- rdx, fp[-5] <- rbx
CheckStackOverflow:8(stack=0, loop=0)
v31 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.index) T{_Uint32List}
v36 <- LoadField(v31 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v41 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.hash_mask) [0, 4611686018427387903] T{_Smi}
ParallelMove rbx <- rbx
v84 <- UnboxInt64([non-speculative], v41 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rsi <- rax
v50 <- BinaryInt64Op(& [tr], v5 T{int}, v84 T{_Smi}) [0, 4611686018427387903] int64
Branch if EqualityCompare(v50 == v87 T{_Smi}) T{bool} goto (17, 18)
B17
ParallelMove rbx <- rdx
v82 <- UnboxInt64([non-speculative], v36 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v58 <- ShiftInt64Op(>> [tr], v82 T{_Smi}, v88 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove r13 <- rbx goto:32 B19
B18
ParallelMove rbx <- rdx
v81 <- UnboxInt64([non-speculative], v36 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v55 <- ShiftInt64Op(>> [tr], v81 T{_Smi}, v88 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rsi <- rsi
v56 <- BinaryInt64Op(* [tr], v50, v55) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r13 <- rsi goto:34 B19
B19
ParallelMove fp[-1] <- r13
ParallelMove rdx <- rdx
v83 <- UnboxInt64([non-speculative], v36 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- r12, rsi <- r10, rdx <- rax, rbx <- r13, r8 <- rdx, r9 <- r9
v11 <- StaticCall:20( _findValueOrInsertPoint@3220832<0> v2, v3, v5, v57 T{int}, v83 T{_Smi}, v31 T{_Uint32List}, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rax
ParallelMove fp[-7] <- rbx
Branch if RelationalOp(>, v11, v87 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rdi <- fp[-2]
v26 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.data) T{_List}
ParallelMove fp[-6] <- rsi
v17 <- LoadField(v26 T{_List} . Array.type_arguments {final}) T{TypeArguments?}
ParallelMove rax <- fp[-4], rdx <- rdx, rcx <- C
AssertAssignable:34(v4, v18, 'value', instantiator_type_args(v17), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdx <- fp[-6]
v20 <- LoadField(v26 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v85 <- UnboxInt64([non-speculative], v20) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- fp[-7]
GenericCheckBound:34(v85 T{_Smi}, v11) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx, rax <- fp[-4], rcx <- fp[-7]
StoreIndexed:34([_List] v26 T{_List}, v11 T{int}, v4)
ParallelMove  goto:44 B5
B4
ParallelMove rdi <- fp[-2], rcx <- rbx
ParallelMove rcx <- rcx
v15 <- UnaryInt64Op(unary-, v11) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi, rsi <- fp[-3], rdx <- fp[-4], rbx <- fp[-5], r8 <- fp[-1], r9 <- rcx
StaticCall:40( _insert@3220832<0> v2, v3, v4, v5, v57 T{int}, v15, using unchecked entrypoint)
ParallelMove  goto:46 B5
B5
ParallelMove rax <- C
DartReturn:48(v0)
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rcx <- r9, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx, fp[-4] <- rbx
CheckStackOverflow:8(stack=0, loop=0)
v82 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
v87 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.data) T{_List}
ParallelMove fp[-8] <- r9
v92 <- LoadField(v87 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdi <- rdi
v100 <- UnboxInt64([non-speculative], v82 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove fp[-7] <- rdi
ParallelMove r10 <- r10
v101 <- UnboxInt64([non-speculative], v92 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-6] <- r10
Branch if EqualityCompare(v100 T{_Smi} == v101 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rdi <- rax
StaticCall:26( _rehash@3220832<0> v2, using unchecked entrypoint)
ParallelMove rdi <- fp[-1], rsi <- fp[-2], rdx <- fp[-3], rbx <- fp[-4]
StaticCall:28( _set@3220832<0> v2, v3, v4, v5, using unchecked entrypoint)
ParallelMove  goto:64 B5
B4
ParallelMove rsi <- rax
ParallelMove rax <- rdi
v15 <- ShiftInt64Op(>> [tr], v100 T{_Smi}, v116 T{_Smi}) [0, 2305843009213693951] int64
v45 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.index) T{_Uint32List}
ParallelMove r8 <- r8
v17 <- BinaryInt64Op(| [tr], v6, v15) [-9223372036854775808, 9223372036854775807] int64
v24 <- LoadField(v45 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v104 <- UnboxInt64([non-speculative], v24) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:40(v104 T{_Smi}, v7) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- r8
v117 <- IntConverter(int64->uint32[tr], v17) [0, 4294967295] uint32
StoreIndexed:40([_Uint32List] v45 T{_Uint32List}, v7 T{int}, v117 T{_Smi}, NoStoreBarrier)
ParallelMove r8 <- rdi
v20 <- BinaryInt64Op(+ [tr], v100 T{_Smi}, v116 T{_Smi}) [1, 4611686018427387904] int64
ParallelMove fp[-4] <- r8
v108 <- BoxInt64(v20 T{int}) [1, 4611686018427387904] T{int}
ParallelMove rax <- rax
StoreField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.used_data = v108 T{int}, NoStoreBarrier)
v27 <- LoadField(v87 T{_List} . Array.type_arguments {final}) T{TypeArguments?}
ParallelMove rax <- fp[-2], rdx <- rbx, rcx <- C, fp[-5] <- rbx
AssertAssignable:50(v3, v28, 'value', instantiator_type_args(v27), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-6], rbx <- fp[-7]
GenericCheckBound:50(v101 T{_Smi}, v100 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rdx <- fp[-8], rax <- fp[-2], rcx <- fp[-7]
StoreIndexed:50([_List] v87 T{_List}, v100 T{_Smi}, v3 T{X0?})
ParallelMove rcx <- fp[-4]
v23 <- BinaryInt64Op(+ [tr], v20 T{_Smi}, v116 T{_Smi}) [2, 4611686018427387905] int64
v113 <- BoxInt64(v23 T{int}) [2, 4611686018427387905] T{int}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.used_data = v113 T{int}, NoStoreBarrier)
ParallelMove rax <- fp[-3], rdx <- fp[-5], rcx <- C
AssertAssignable:60(v4, v28, 'value', instantiator_type_args(v27 T{TypeArguments?}), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-6], rbx <- fp[-4]
GenericCheckBound:60(v101 T{_Smi}, v20 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rdx <- fp[-8], rax <- fp[-3], rcx <- fp[-4]
StoreIndexed:60([_List] v87 T{_List}, v20 T{_Smi}, v4)
ParallelMove  goto:66 B5
B5
ParallelMove rax <- C
DartReturn:68(v0)
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v76 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.deleted_keys) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v89 <- UnboxInt64([non-speculative], v76 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax
v5 <- ShiftInt64Op(<< [tr], v89 T{_Smi}, v97 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v81 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v90 <- UnboxInt64([non-speculative], v81 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v5, v90 T{_Smi}) T{bool} goto (3, 4)
B3
v51 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.index) T{_Uint32List}
v56 <- LoadField(v51 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v61 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.hash_mask) [0, 4611686018427387903] T{_Smi}
v66 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.data) T{_List}
ParallelMove rdx <- rdx
v91 <- UnboxInt64([non-speculative], v56 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax
v92 <- UnboxInt64([non-speculative], v61 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- rdi, rsi <- rdx, rdx <- rax, rbx <- rbx, r8 <- rcx
StaticCall:36( _init@3220832<0> v2, v91 T{_Smi}, v92 T{_Smi}, v66 T{_List}, v90 T{_Smi}, using unchecked entrypoint)
ParallelMove  goto:58 B5
B4
v26 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.index) T{_Uint32List}
v31 <- LoadField(v26 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v94 <- UnboxInt64([non-speculative], v31 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdx <- rdx
v12 <- ShiftInt64Op(<< [tr], v94 T{_Smi}, v98 T{_Smi}) [0, 9223372036854775806] int64
v36 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.hash_mask) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v95 <- UnboxInt64([non-speculative], v36 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax
v14 <- ShiftInt64Op(>> [tr], v95 T{_Smi}, v98 T{_Smi}) [0, 2305843009213693951] int64
v41 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.data) T{_List}
ParallelMove rdi <- rdi, rsi <- rdx, rdx <- rax, rbx <- rbx, r8 <- rcx
StaticCall:54( _init@3220832<0> v2, v12, v14, v41 T{_List}, v90 T{_Smi}, using unchecked entrypoint)
ParallelMove  goto:60 B5
B5
ParallelMove rax <- C
DartReturn:62(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rbx, fp[-3] <- rdi, fp[-4] <- rbx, fp[-5] <- r8
CheckStackOverflow:8(stack=0, loop=0)
Branch if RelationalOp(<, v3, v162 T{_Smi}) T{bool} goto (40, 4)
B40
ParallelMove rsi <- C, rdx <- C goto:26 B5
B4
B5
ParallelMove fp[-2] <- rdx
v155 <- BoxInt64(v10 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rbx <- rax
ParallelMove fp[-1] <- rbx
v60 <- AllocateTypedData:10(v155 T{int}) T{_Uint32List}
ParallelMove rax <- rax, rdi <- fp[-3]
StoreField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.index = v60 T{_Uint32List})
ParallelMove rcx <- fp[-2]
v156 <- BoxInt64(v11 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.hash_mask = v156 T{int}, NoStoreBarrier)
ParallelMove rbx <- C, r10 <- fp[-1]
v79 <- CreateArray:10(v13 T{TypeArguments}, v155 T{int}) T{_List}
ParallelMove rax <- rax, rdi <- fp[-3]
StoreField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.data = v79 T{_List})
StoreField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.used_data = v15 T{_Smi}, NoStoreBarrier)
StoreField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.deleted_keys = v15 T{_Smi}, NoStoreBarrier)
ParallelMove rsi <- fp[-4]
v33 <- LoadField:90(v5 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove r8 <- rax
v157 <- UnboxInt64:90([non-speculative], v33) [0, 576460752303423487] int64
ParallelMove fp[-7] <- r8
v24 <- LoadField:90(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove fp[-6] <- r9
ParallelMove r12 <- C goto:90 B11
B11
  Loop 0
ParallelMove fp[-2] <- r12
CheckStackOverflow:94(stack=0, loop=1)
Branch if RelationalOp(<, v16, v6) T{bool} goto (6, 7)
B6
  Loop 0
ParallelMove rax <- r8, rbx <- r12
GenericCheckBound:58(v157 T{_Smi}, v16) [-9223372036854775808, 9223372036854775807] int64
v164 <- LoadIndexed:58([_List] v5, v16 T{int}) T{*?}
ParallelMove fp[-1] <- rbx
Branch if StrictCompare:10(!==, v164 T{Object??}, v5 T{_List}) T{bool} goto (8, 9)
B8
  Loop 0
ParallelMove rax <- rbx, rdx <- r9, rcx <- C
t1 <- AssertAssignable:70(v164 T{*?}, v23, '', instantiator_type_args(v24), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[-2]
v27 <- BinaryInt64Op(+ [tr], v16 T{int}, v165 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-7], rbx <- rcx
GenericCheckBound:74(v157 T{_Smi}, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- fp[-4]
v166 <- LoadIndexed:74([_List] v5, v27 T{int}) T{*?}
ParallelMove rax <- rsi, rdx <- fp[-6], rcx <- C, fp[-8] <- rsi
t2 <- AssertAssignable:76(v166 T{*?}, v29, '', instantiator_type_args(v24 T{TypeArguments}), function_type_args(v0)) T{X1?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-3], rsi <- fp[-1]
v47 <- StaticCall:14( _hashCode@3220832<0> v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>}, v164 T{X0?}, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-3], rsi <- fp[-1], rdx <- fp[-8], rbx <- rax
StaticCall:16( _set@3220832<0> v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>}, v164 T{X0?}, v166 T{X1?}, v47, using unchecked entrypoint)
ParallelMove  goto:84 B10
B9
B10
  Loop 0
ParallelMove rcx <- fp[-2]
v22 <- BinaryInt64Op(+ [tr], v16 T{int}, v132 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- rcx, rdi <- fp[-3], rsi <- fp[-4], r9 <- fp[-6], r8 <- fp[-7] goto:92 B11
B7
ParallelMove rax <- C
DartReturn:96(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdx, rdx <- rbx, fp[-1] <- rbx, fp[-2] <- rdi, fp[-9] <- rsi, fp[-10] <- r9
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove r10 <- r8
v9 <- BinaryInt64Op(- [tr], v6, v126 T{_Smi}) [-4611686018427387905, 4611686018427387902] int64
ParallelMove fp[-8] <- r10
ParallelMove r8 <- r8
v10 <- ShiftInt64Op(>> [tr], v6, v126 T{_Smi}) [-2305843009213693952, 2305843009213693951] int64
ParallelMove fp[-7] <- r8
ParallelMove rax <- rax
v80 <- BinaryInt64Op(& [tr], v4 T{int}, v9 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
v82 <- ShiftInt64Op(<< [tr], v80, v126 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v83 <- BinaryInt64Op(+ [tr], v82, v80) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v84 <- BinaryInt64Op(& [tr], v83, v9 T{int}) [-9223372036854775808, 9223372036854775807] int64
v42 <- LoadField(v7 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r12 <- rax
v116 <- UnboxInt64([non-speculative], v42) [0, 4611686018427387903] int64
ParallelMove rax <- r12, rbx <- rcx, fp[-6] <- r12
GenericCheckBound:18(v116 T{_Smi}, v84 T{int}) [-9223372036854775808, 9223372036854775807] int64
v127 <- LoadIndexed:18([_Uint32List] v7, v84 T{int}) [0, 4294967295] uint32
ParallelMove rcx <- rcx, r13 <- C, rax <- rax goto:118 B15
B15
  Loop 0
ParallelMove fp[-3] <- rcx, fp[-5] <- r13
CheckStackOverflow:116(stack=0, loop=1)
ParallelMove rax <- rax
v120 <- IntConverter(uint32->int64, v16) [0, 4294967295] int64
Branch if EqualityCompare(v120 T{_Smi} != v128 T{_Smi}) T{bool} goto (14, 16)
B14
  Loop 0
Branch if EqualityCompare(v120 T{_Smi} == v126 T{_Smi}) T{bool} goto (3, 7)
B3
  Loop 0
Branch if RelationalOp(<, v15, v128 T{_Smi}) T{bool} goto (4, 5)
B4
  Loop 0
ParallelMove rbx <- rcx goto:52 B6
B5
  Loop 0
ParallelMove rbx <- r13 goto:54 B6
B6
  Loop 0
ParallelMove r13 <- rbx, rdx <- r9, rsi <- r10 goto:102 B13
B7
  Loop 0
ParallelMove rbx <- fp[-1]
v27 <- BinaryInt64Op(^ [tr], v5, v120 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v27, v10) T{bool} goto (8, 11)
B8
  Loop 0
ParallelMove rbx <- rbx
v30 <- ShiftInt64Op(<< [tr], v27, v126 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-4] <- rbx
v64 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.data) T{_List}
v45 <- LoadField(v64 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v121 <- UnboxInt64([non-speculative], v45) [0, 576460752303423487] int64
ParallelMove rax <- rdx, rbx <- rbx, rdi <- rbx, rdx <- rax
GenericCheckBound:74(v121 T{_Smi}, v30) [-9223372036854775808, 9223372036854775807] int64
v129 <- LoadIndexed:74([_List] v64 T{_List}, v30 T{int}) T{*?}
v147 <- LoadClassId(v3 T{X0?}) int64
MoveArgument(sp[1] <- v3 T{X0?})
MoveArgument(sp[0] <- v129 T{Object??})
ParallelMove rcx <- rdx, rdx <- rcx, rax <- rdi
v73 <- DispatchTableCall( cid=v147 Object.==<0>, v3 T{X0?}, v129 T{Object??}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:80(===, v73 T{bool}, v21) goto (9, 10)
BoolTest
B10
B9
ParallelMove rcx <- fp[-4]
v34 <- BinaryInt64Op(+ [tr], v30 T{int}, v126 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx
DartReturn:88(v34)
B11
B12
  Loop 0
ParallelMove r13 <- fp[-5], rdx <- fp[-10], rsi <- fp[-8] goto:104 B13
B13
  Loop 0
ParallelMove rbx <- fp[-3]
v58 <- BinaryInt64Op(+ [tr], v14 T{int}, v126 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rbx
v59 <- BinaryInt64Op(& [tr], v58, v9 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-6], rbx <- rcx
GenericCheckBound:108(v116 T{_Smi}, v59 T{int}) [-9223372036854775808, 9223372036854775807] int64
v130 <- LoadIndexed:108([_Uint32List] v7, v59 T{int}) [0, 4294967295] uint32
ParallelMove rcx <- rcx, r13 <- r13, rax <- rax, rdi <- fp[-2], rsi <- fp[-9], r9 <- rdx, r10 <- rsi, r8 <- fp[-7], r12 <- fp[-6] goto:114 B15
B16
ParallelMove rcx <- r13
Branch if RelationalOp(>=, v15, v128 T{_Smi}) T{bool} goto (17, 18)
B17
ParallelMove rcx <- rcx
v25 <- UnaryInt64Op(unary-, v15) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx goto:140 B19
B18
ParallelMove rcx <- fp[-3]
v23 <- UnaryInt64Op(unary-, v14) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx goto:142 B19
B19
ParallelMove rax <- rax
DartReturn:144(v24)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v18 <- LoadStaticField:4(_uninitializedIndex@3220832, CallsInitializer) T{_Uint32List}
ParallelMove rdx <- fp[-1], rax <- rax
ParallelMove fp[-1] <- rax
v3 <- AllocateObject:10(cls=_Map, v2, <not-aliased>) T{_Map}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-2] <- rcx
StoreField(v3 T{_Map} . LinkedHashBase.index = v18 T{_Uint32List}, NoStoreBarrier)
StoreField(v3 T{_Map} . LinkedHashBase.hash_mask = v11 T{_Smi}, NoStoreBarrier)
v33 <- LoadStaticField:4(_uninitializedData@3220832, CallsInitializer) T{_List}
ParallelMove rcx <- rax, rax <- fp[-2]
StoreField(v3 T{_Map} . LinkedHashBase.data = v33 T{_List}, NoStoreBarrier)
StoreField(v3 T{_Map} . LinkedHashBase.used_data = v11 T{_Smi}, NoStoreBarrier)
StoreField(v3 T{_Map} . LinkedHashBase.deleted_keys = v11 T{_Smi}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v3)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- C, r10 <- C
v5 <- CreateArray:6(v2, v3) T{_List}
ParallelMove rax <- rax
DartReturn:8(v5)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v29 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[0] <- v2)
ParallelMove rcx <- rcx
v3 <- DispatchTableCall( cid=v29 List.length<0>, v2) T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rax
v22 <- UnboxInt64:32([non-speculative], v3 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove fp[-2] <- rdx
ParallelMove rdi <- C goto:32 B5
B5
  Loop 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:36(stack=0, loop=1)
Branch if RelationalOp(<, v5, v22 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
v23 <- BoxInt64(v5) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v30 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v23 T{int})
ParallelMove rcx <- rcx
v8 <- DispatchTableCall( cid=v30 List.[]<0>, v2, v23 T{int}) T{*?}
ParallelMove rax <- rax
v31 <- LoadClassId(<non-smi> v8 T{X0?}) int64
ParallelMove rcx <- rcx, rdi <- rax
DispatchTableCall( cid=v31 _HashBase._regenerateIndex<0>, v8 T{X0?})
ParallelMove rcx <- fp[-1]
v10 <- BinaryInt64Op(+ [tr], v5, v25 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rcx, rdx <- fp[-2] goto:34 B5
B4
ParallelMove rax <- C
DartReturn:38(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
v9 <- AllocateTypedData:10(v2 T{_Smi}) T{_Uint32List}
ParallelMove rax <- rax
DartReturn:8(v9 T{_Uint32List})
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(InvocationMirror_unpackTypeArguments) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{List<Type>}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{List<Type>})
Checking for concrete finalized classes:
 * 89 (_List)
 * 90 (_ImmutableList)
 * 91 (_GrowableList)
Not checking the following concrete implementors of List:
 * 111(_Int8List): List<int> is not a subtype of List<Type>
 * 112(_Int8ArrayView): List<int> is not a subtype of List<Type>
 * 113(_ExternalInt8Array): List<int> is not a subtype of List<Type>
 * 114(_UnmodifiableInt8ArrayView): List<int> is not a subtype of List<Type>
 * 115(_Uint8List): List<int> is not a subtype of List<Type>
 * 116(_Uint8ArrayView): List<int> is not a subtype of List<Type>
 * 117(_ExternalUint8Array): List<int> is not a subtype of List<Type>
 * 118(_UnmodifiableUint8ArrayView): List<int> is not a subtype of List<Type>
 * 119(_Uint8ClampedList): List<int> is not a subtype of List<Type>
 * 120(_Uint8ClampedArrayView): List<int> is not a subtype of List<Type>
 * 121(_ExternalUint8ClampedArray): List<int> is not a subtype of List<Type>
 * 122(_UnmodifiableUint8ClampedArrayView): List<int> is not a subtype of List<Type>
 * 123(_Int16List): List<int> is not a subtype of List<Type>
 * 124(_Int16ArrayView): List<int> is not a subtype of List<Type>
 * 125(_ExternalInt16Array): List<int> is not a subtype of List<Type>
 * 126(_UnmodifiableInt16ArrayView): List<int> is not a subtype of List<Type>
 * 127(_Uint16List): List<int> is not a subtype of List<Type>
 * 128(_Uint16ArrayView): List<int> is not a subtype of List<Type>
 * 129(_ExternalUint16Array): List<int> is not a subtype of List<Type>
 * 130(_UnmodifiableUint16ArrayView): List<int> is not a subtype of List<Type>
 * 131(_Int32List): List<int> is not a subtype of List<Type>
 * 132(_Int32ArrayView): List<int> is not a subtype of List<Type>
 * 133(_ExternalInt32Array): List<int> is not a subtype of List<Type>
 * 134(_UnmodifiableInt32ArrayView): List<int> is not a subtype of List<Type>
 * 135(_Uint32List): List<int> is not a subtype of List<Type>
 * 136(_Uint32ArrayView): List<int> is not a subtype of List<Type>
 * 137(_ExternalUint32Array): List<int> is not a subtype of List<Type>
 * 138(_UnmodifiableUint32ArrayView): List<int> is not a subtype of List<Type>
 * 139(_Int64List): List<int> is not a subtype of List<Type>
 * 140(_Int64ArrayView): List<int> is not a subtype of List<Type>
 * 141(_ExternalInt64Array): List<int> is not a subtype of List<Type>
 * 142(_UnmodifiableInt64ArrayView): List<int> is not a subtype of List<Type>
 * 143(_Uint64List): List<int> is not a subtype of List<Type>
 * 144(_Uint64ArrayView): List<int> is not a subtype of List<Type>
 * 145(_ExternalUint64Array): List<int> is not a subtype of List<Type>
 * 146(_UnmodifiableUint64ArrayView): List<int> is not a subtype of List<Type>
 * 147(_Float32List): List<double> is not a subtype of List<Type>
 * 148(_Float32ArrayView): List<double> is not a subtype of List<Type>
 * 149(_ExternalFloat32Array): List<double> is not a subtype of List<Type>
 * 150(_UnmodifiableFloat32ArrayView): List<double> is not a subtype of List<Type>
 * 151(_Float64List): List<double> is not a subtype of List<Type>
 * 152(_Float64ArrayView): List<double> is not a subtype of List<Type>
 * 153(_ExternalFloat64Array): List<double> is not a subtype of List<Type>
 * 154(_UnmodifiableFloat64ArrayView): List<double> is not a subtype of List<Type>
 * 155(_Float32x4List): List<Float32x4> is not a subtype of List<Type>
 * 156(_Float32x4ArrayView): List<Float32x4> is not a subtype of List<Type>
 * 157(_ExternalFloat32x4Array): List<Float32x4> is not a subtype of List<Type>
 * 158(_UnmodifiableFloat32x4ArrayView): List<Float32x4> is not a subtype of List<Type>
 * 159(_Int32x4List): List<Int32x4> is not a subtype of List<Type>
 * 160(_Int32x4ArrayView): List<Int32x4> is not a subtype of List<Type>
 * 161(_ExternalInt32x4Array): List<Int32x4> is not a subtype of List<Type>
 * 162(_UnmodifiableInt32x4ArrayView): List<Int32x4> is not a subtype of List<Type>
 * 163(_Float64x2List): List<Float64x2> is not a subtype of List<Type>
 * 164(_Float64x2ArrayView): List<Float64x2> is not a subtype of List<Type>
 * 165(_ExternalFloat64x2Array): List<Float64x2> is not a subtype of List<Type>
 * 166(_UnmodifiableFloat64x2ArrayView): List<Float64x2> is not a subtype of List<Type>
 * 564(CodeUnits): List<int> is not a subtype of List<Type>
Generating check for type argument 0: Type
Checks for Type
Checking for concrete finalized classes:
 * 48 (_Type)
 * 49 (_FunctionType)
 * 50 (_RecordType)
 * 51 (_TypeParameter)
 * 531 (_TypeRef)
B0
B1
Intrinsic
Enter frame
PrologueOffset = 224
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(Object_runtimeType) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{Type}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{Type})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rdi, rax <- rbx, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx, fp[-4] <- rbx, fp[-5] <- r8
CheckStackOverflow:8(stack=0, loop=0)
v49 <- LoadClassId(v5) [87, 564] int64
Branch if TestRange(v49 in [111-166]) T{bool} goto (3, 16)
B3
v274 <- LoadClassId(<non-smi> v5) int64
ParallelMove rcx <- rcx, rdi <- rax
v18 <- DispatchTableCall( cid=v274 _TypedListBase.buffer<0>, v5) T{_ByteBuffer}
ParallelMove rax <- rax
v124 <- LoadField(v18 T{_ByteBuffer} . _data@7027147 {final}) T{_TypedList}
ParallelMove rdx <- fp[-1]
Branch if StrictCompare:36(===, v124, v2) T{bool} goto (4, 15)
B4
ParallelMove rdi <- fp[-2], rsi <- fp[-4], rcx <- fp[-5]
ParallelMove r8 <- fp[-3]
v21 <- BinaryInt64Op(- [tr], v4, v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-6] <- r8
v107 <- LoadField(v5 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v207 <- UnboxInt64([non-speculative], v107 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax
v23 <- BinaryInt64Op(- [tr], v207 T{_Smi}, v6) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v23, v21) T{bool} goto (5, 6)
B6
Branch if EqualityCompare(v21 == v232 T{_Smi}) T{bool} goto (7, 8)
B7
ParallelMove rax <- C
DartReturn:66(v0)
B8
v206 <- BoxInt64(v21 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v160 <- AllocateTypedData:10(v206 T{int}, <not-aliased>) T{_Uint8List}
ParallelMove rdx <- rax
ParallelMove fp[-8] <- rdx
ParallelMove r8 <- C goto:94 B11
B11
  Loop 3
ParallelMove fp[-7] <- r8
CheckStackOverflow:98(stack=0, loop=1)
Branch if RelationalOp(<, v27, v21) T{bool} goto (9, 10)
B9
  Loop 3
ParallelMove rcx <- fp[-5]
v35 <- BinaryInt64Op(+ [tr], v6, v27) [-9223372036854775808, 9223372036854775807] int64
v208 <- BoxInt64(v35) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v275 <- LoadClassId(<non-smi> v5) int64
MoveArgument(sp[1] <- v5)
MoveArgument(sp[0] <- v208 T{int})
ParallelMove rcx <- rcx
v36 <- DispatchTableCall( cid=v275 List.[]<0>, v5, v208 T{int}) T{*?}
ParallelMove rax <- rax
ParallelMove rax <- rax
v41 <- UnboxInt64:90([non-speculative], v36 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rax <- rax, rdx <- fp[-7], rcx <- fp[-8]
StoreIndexed:90([_Uint8List] v160 T{_Uint8List}, v27 T{int}, v41, NoStoreBarrier)
ParallelMove rdx <- rdx
v37 <- BinaryInt64Op(+ [tr], v27 T{int}, v233 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rdx, rdx <- rcx goto:96 B11
B10
ParallelMove rdx <- fp[-1], rcx <- rdx
v45 <- LoadField:122(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rax
v211 <- UnboxInt64:122([non-speculative], v45) [0, 4611686018427387903] int64
ParallelMove r9 <- fp[-2], rdi <- fp[-2], r8 <- fp[-3] goto:122 B14
B14
  Loop 2
CheckStackOverflow:126(stack=0, loop=1)
Branch if RelationalOp(<, v29, v4) T{bool} goto (12, 13)
B12
  Loop 2
ParallelMove r10 <- r9
v31 <- BinaryInt64Op(- [tr], v29, v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-6], rbx <- r10
GenericCheckBound:116(v21 T{_Smi}, v31) [-9223372036854775808, 9223372036854775807] int64
v234 <- LoadIndexed:116([_Uint8List] v160 T{_Uint8List}, v31 T{int}) [0, 255] int64
ParallelMove rax <- rsi, rbx <- r9
GenericCheckBound:118(v211 T{_Smi}, v29) [-9223372036854775808, 9223372036854775807] int64
v279 <- LoadField(v2 . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rax <- r12
StoreIndexed:118([_Uint8List] v279 T{__Uint8List&_TypedList&_IntListMixin&_TypedIntListMixin}, v29 T{int}, v234 T{_Smi}, NoStoreBarrier)
ParallelMove r9 <- r9
v34 <- BinaryInt64Op(+ [tr], v29 T{int}, v233 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- r9 goto:124 B14
B13
ParallelMove rax <- C
DartReturn:128(v0)
B15
ParallelMove rdi <- fp[-2], r8 <- fp[-3]
ParallelMove  goto:136 B17
B16
ParallelMove rdx <- rbx, rdi <- rsi, r8 <- rdx
ParallelMove  goto:138 B17
B17
ParallelMove r8 <- r8
v11 <- BinaryInt64Op(- [tr], v4, v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- r8
v276 <- LoadClassId(<non-smi> v5) int64
MoveArgument(sp[0] <- v5)
ParallelMove rcx <- rcx
v12 <- DispatchTableCall( cid=v276 List.length<0>, v5) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v213 <- UnboxInt64([non-speculative], v12 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rdx <- fp[-5]
ParallelMove rax <- rax
v13 <- BinaryInt64Op(- [tr], v213 T{_Smi}, v6) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[-3]
Branch if RelationalOp(<, v13, v11) T{bool} goto (18, 19)
B19
Branch if EqualityCompare(v11 == v232 T{_Smi}) T{bool} goto (20, 21)
B20
ParallelMove rax <- C
DartReturn:172(v0)
B21
ParallelMove rax <- fp[-2]
Branch if RelationalOp(<, v6 T{int}, v3 T{int}) T{bool} goto (27, 31)
B27
ParallelMove rsi <- fp[-1]
ParallelMove rbx <- rdx
v74 <- BinaryInt64Op(+ [tr], v6 T{int}, v11 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v75 <- BinaryInt64Op(- [tr], v74, v233 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v76 <- BinaryInt64Op(+ [tr], v3 T{int}, v11 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v77 <- BinaryInt64Op(- [tr], v76, v233 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v154 <- LoadClassId:50(v2) [115, 117] int64
ParallelMove fp[-9] <- rdi
ParallelMove r10 <- rbx, r9 <- rax goto:50 B30
B30
  Loop 1
ParallelMove fp[-6] <- r10, fp[-7] <- r9
CheckStackOverflow:54(stack=0, loop=1)
Branch if RelationalOp(>=, v78, v6 T{int}) T{bool} goto (28, 29)
B28
  Loop 1
v214 <- BoxInt64(v78) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v277 <- LoadClassId(<non-smi> v5 T{List<dynamic>}) int64
MoveArgument(sp[1] <- v5 T{List<dynamic>})
MoveArgument(sp[0] <- v214 T{int})
ParallelMove rcx <- rcx
v81 <- DispatchTableCall( cid=v277 List.[]<0>, v5 T{List<dynamic>}, v214 T{int}) T{*?}
ParallelMove rsi <- rax, rbx <- fp[-9]
ParallelMove fp[-8] <- rsi
Branch if EqualityCompare:46(v154 == v142) goto (54, 57)
B54
  Loop 1
ParallelMove rdi <- fp[-1], r8 <- fp[-7]
ParallelMove rax <- rsi, rdx <- C, rcx <- C
AssertAssignable:46(v81 T{X0?}, v130, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rsi <- fp[-1]
v145 <- LoadField(v2 T{__Uint8List&_TypedList&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v215 <- UnboxInt64([non-speculative], v145) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- fp[-7]
GenericCheckBound:46(v215 T{_Smi}, v79) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-8]
v147 <- UnboxInt64:46([non-speculative], v81 T{int}) [-9223372036854775808, 9223372036854775807] int64
v280 <- LoadField(v2 T{__Uint8List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rax <- rax, rbx <- fp[-7]
StoreIndexed:46([_Uint8List] v280 T{__Uint8List&_TypedList&_IntListMixin&_TypedIntListMixin}, v79 T{int}, v147, NoStoreBarrier)
ParallelMove rdx <- rsi goto: B58
B57
  Loop 1
ParallelMove rsi <- fp[-1], rbx <- fp[-7]
ParallelMove rax <- fp[-8], rdx <- C, rcx <- C
AssertAssignable:46(v81 T{X0?}, v130, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdx <- fp[-1]
v150 <- LoadField(v2 T{__Uint8List&_TypedList&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v217 <- UnboxInt64([non-speculative], v150) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- fp[-7]
GenericCheckBound:46(v217 T{_Smi}, v79) [-9223372036854775808, 9223372036854775807] int64
v152 <- LoadField(v2 T{__Uint8List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data {final}) untagged
ParallelMove rax <- fp[-8]
v153 <- UnboxInt64:46([non-speculative], v81 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax, rbx <- fp[-7]
StoreIndexed:46([_ExternalUint8Array] v152, v79 T{int}, v153, NoStoreBarrier)
ParallelMove  goto: B58
B58
  Loop 1
ParallelMove rax <- fp[-6]
v82 <- BinaryInt64Op(- [tr], v78, v233 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v83 <- BinaryInt64Op(- [tr], v79, v233 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- rax, r9 <- rbx, rsi <- rdx, rdx <- fp[-5], rdi <- fp[-9] goto:52 B30
B29
B31
ParallelMove rdx <- fp[-1]
ParallelMove rsi <- fp[-5]
v66 <- BinaryInt64Op:82(+ [tr], v6 T{int}, v11 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-7] <- rsi
v141 <- LoadClassId:82(v2) [115, 117] int64
ParallelMove fp[-6] <- rdi
ParallelMove r10 <- fp[-5], r9 <- rax goto:82 B34
B34
  Loop 0
ParallelMove fp[-2] <- r10, fp[-3] <- r9
CheckStackOverflow:86(stack=0, loop=1)
Branch if RelationalOp(<, v64, v66) T{bool} goto (32, 33)
B32
  Loop 0
v219 <- BoxInt64(v64) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v278 <- LoadClassId(<non-smi> v5 T{List<dynamic>}) int64
MoveArgument(sp[1] <- v5 T{List<dynamic>})
MoveArgument(sp[0] <- v219 T{int})
ParallelMove rcx <- rcx
v68 <- DispatchTableCall( cid=v278 List.[]<0>, v5 T{List<dynamic>}, v219 T{int}) T{*?}
ParallelMove rsi <- rax, rbx <- fp[-6]
ParallelMove fp[-8] <- rsi
Branch if EqualityCompare:78(v141 == v142) goto (49, 52)
B49
  Loop 0
ParallelMove rdi <- fp[-1], r8 <- fp[-3]
ParallelMove rax <- rsi, rdx <- C, rcx <- C
AssertAssignable:78(v68 T{X0?}, v130, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rsi <- fp[-1]
v132 <- LoadField(v2 T{__Uint8List&_TypedList&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v220 <- UnboxInt64([non-speculative], v132) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- fp[-3]
GenericCheckBound:78(v220 T{_Smi}, v65) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-8]
v134 <- UnboxInt64:78([non-speculative], v68 T{int}) [-9223372036854775808, 9223372036854775807] int64
v281 <- LoadField(v2 T{__Uint8List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rax <- rax, rbx <- fp[-3]
StoreIndexed:78([_Uint8List] v281 T{__Uint8List&_TypedList&_IntListMixin&_TypedIntListMixin}, v65 T{int}, v134, NoStoreBarrier)
ParallelMove rcx <- rsi goto: B53
B52
  Loop 0
ParallelMove rsi <- fp[-1], rbx <- fp[-3]
ParallelMove rax <- fp[-8], rdx <- C, rcx <- C
AssertAssignable:78(v68 T{X0?}, v130, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[-1]
v137 <- LoadField(v2 T{__Uint8List&_TypedList&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v222 <- UnboxInt64([non-speculative], v137) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- fp[-3]
GenericCheckBound:78(v222 T{_Smi}, v65) [-9223372036854775808, 9223372036854775807] int64
v139 <- LoadField(v2 T{__Uint8List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data {final}) untagged
ParallelMove rax <- fp[-8]
v140 <- UnboxInt64:78([non-speculative], v68 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax, rbx <- fp[-3]
StoreIndexed:78([_ExternalUint8Array] v139, v65 T{int}, v140, NoStoreBarrier)
ParallelMove  goto: B53
B53
  Loop 0
ParallelMove rax <- fp[-2]
v70 <- BinaryInt64Op(+ [tr], v64, v233 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v71 <- BinaryInt64Op(+ [tr], v65, v233 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- rax, r9 <- rbx, rdx <- rcx, rsi <- fp[-7], rdi <- fp[-6] goto:84 B34
B33
B35
ParallelMove rax <- C
DartReturn:178(v0)
B5
v38 <- StaticCall:50( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:52(v38)
B18
v17 <- StaticCall:156( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:158(v17)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rdi, rax <- rbx, fp[-1] <- rdi, fp[-2] <- rdx, fp[-3] <- rbx
CheckStackOverflow:8(stack=0, loop=0)
v49 <- LoadClassId(v5) [87, 564] int64
Branch if TestRange(v49 in [111-166]) T{bool} goto (3, 16)
B3
v259 <- LoadClassId(<non-smi> v5) int64
ParallelMove rcx <- rcx, rdi <- rax
v18 <- DispatchTableCall( cid=v259 _TypedListBase.buffer<0>, v5) T{_ByteBuffer}
ParallelMove rdi <- fp[-1], rax <- rax
ParallelMove fp[-4] <- rax
v19 <- StaticCall:22( get:buffer<0> v2, result_type = T{_ByteBuffer}) T{_ByteBuffer}
ParallelMove rcx <- rax, rax <- fp[-4]
v115 <- LoadField(v18 T{_ByteBuffer} . _data@7027147 {final}) T{_TypedList}
v116 <- LoadField(v19 T{_ByteBuffer} . _data@7027147 {final}) T{_TypedList}
Branch if StrictCompare:36(===, v115, v116) T{bool} goto (4, 15)
B4
ParallelMove rdx <- fp[-2], rcx <- fp[-3]
v103 <- LoadField(v5 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v206 <- UnboxInt64([non-speculative], v103) [0, 4611686018427387903] int64
Branch if RelationalOp(<, v206 T{_Smi}, v4 T{int}) T{bool} goto (5, 6)
B6
Branch if EqualityCompare(v4 T{int} == v225 T{_Smi}) T{bool} goto (7, 8)
B7
ParallelMove rax <- C
DartReturn:66(v0)
B8
v205 <- BoxInt64(v4 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v148 <- AllocateTypedData:10(v205 T{int}, <not-aliased>) T{_Int8List}
ParallelMove rdx <- rax
ParallelMove fp[-4] <- rdx
ParallelMove r8 <- C goto:94 B11
B11
  Loop 2
ParallelMove fp[-5] <- r8
CheckStackOverflow:98(stack=0, loop=1)
Branch if RelationalOp(<, v27, v4 T{int}) T{bool} goto (9, 10)
B9
  Loop 2
v207 <- BoxInt64(v27 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v260 <- LoadClassId(<non-smi> v5) int64
MoveArgument(sp[1] <- v5)
MoveArgument(sp[0] <- v207 T{int})
ParallelMove rcx <- rcx
v36 <- DispatchTableCall( cid=v260 List.[]<0>, v5, v207 T{int}) T{*?}
ParallelMove rax <- rax
ParallelMove rax <- rax
v41 <- UnboxInt64:90([non-speculative], v36 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rax <- rax, rdx <- fp[-5], rcx <- fp[-4]
StoreIndexed:90([_Int8List] v148 T{_Int8List}, v27 T{int}, v41, NoStoreBarrier)
ParallelMove rdx <- rdx
v37 <- BinaryInt64Op(+ [tr], v27 T{int}, v226 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rdx, rdx <- rcx goto:96 B11
B10
ParallelMove rdx <- fp[-1], rcx <- rdx
v45 <- LoadField:122(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rax
v210 <- UnboxInt64:122([non-speculative], v45) [0, 4611686018427387903] int64
ParallelMove r8 <- C, rdi <- fp[-2] goto:122 B14
B14
  Loop 1
CheckStackOverflow:126(stack=0, loop=1)
Branch if RelationalOp(<, v29, v4) T{bool} goto (12, 13)
B12
  Loop 1
v227 <- LoadIndexed:116([_Int8List] v148 T{_Int8List}, v29 T{int}) [-128, 127] int64
ParallelMove rax <- rsi, rbx <- r8
GenericCheckBound:118(v210 T{_Smi}, v29 T{int}) [-9223372036854775808, 9223372036854775807] int64
v263 <- LoadField(v2 . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rax <- r9
StoreIndexed:118([_Int8List] v263 T{__Int8List&_TypedList&_IntListMixin&_TypedIntListMixin}, v29 T{int}, v227 T{_Smi}, NoStoreBarrier)
ParallelMove r8 <- r8
v34 <- BinaryInt64Op(+ [tr], v29 T{int}, v226 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- r8 goto:124 B14
B13
ParallelMove rax <- C
DartReturn:128(v0)
B15
ParallelMove rdx <- fp[-1], rdi <- fp[-2]
ParallelMove  goto:136 B17
B16
ParallelMove rdx <- rbx, rdi <- rdx
ParallelMove  goto:138 B17
B17
v261 <- LoadClassId(<non-smi> v5) int64
MoveArgument(sp[0] <- v5)
ParallelMove rcx <- rcx
v13 <- DispatchTableCall( cid=v261 List.length<0>, v5) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v212 <- UnboxInt64([non-speculative], v13 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rdx <- fp[-2]
Branch if RelationalOp(<, v212 T{_Smi}, v4 T{int}) T{bool} goto (18, 19)
B19
Branch if EqualityCompare(v4 T{int} == v225 T{_Smi}) T{bool} goto (20, 21)
B20
ParallelMove rax <- C
DartReturn:172(v0)
B21
ParallelMove rsi <- fp[-1]
v141 <- LoadClassId:82(v2) [111, 113] int64
ParallelMove fp[-7] <- rdi
ParallelMove r10 <- C, r9 <- C goto:82 B34
B34
  Loop 0
ParallelMove fp[-5] <- r10, fp[-6] <- r9
CheckStackOverflow:86(stack=0, loop=1)
Branch if RelationalOp(<, v63, v4 T{int}) T{bool} goto (32, 35)
B32
  Loop 0
v213 <- BoxInt64(v63) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v262 <- LoadClassId(<non-smi> v5 T{List<dynamic>}) int64
MoveArgument(sp[1] <- v5 T{List<dynamic>})
MoveArgument(sp[0] <- v213 T{int})
ParallelMove rcx <- rcx
v67 <- DispatchTableCall( cid=v262 List.[]<0>, v5 T{List<dynamic>}, v213 T{int}) T{*?}
ParallelMove rsi <- rax, rbx <- fp[-7]
ParallelMove fp[-4] <- rsi
Branch if EqualityCompare:78(v141 == v142) goto (47, 54)
B47
  Loop 0
ParallelMove rdi <- fp[-1], r8 <- fp[-6]
ParallelMove rax <- rsi, rdx <- C, rcx <- C
AssertAssignable:78(v67 T{X0?}, v121, 'value', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rsi <- fp[-1]
v123 <- LoadField(v2 T{__Int8List&_TypedList&_IntListMixin&_TypedIntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v214 <- UnboxInt64([non-speculative], v123) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- fp[-6]
GenericCheckBound:78(v214 T{_Smi}, v64) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-4]
v125 <- UnboxInt64:78([non-speculative], v67 T{int}) [-9223372036854775808, 9223372036854775807] int64
v264 <- LoadField(v2 T{__Int8List&_TypedList&_IntListMixin&_TypedIntListMixin} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rax <- rax, rbx <- fp[-6]
StoreIndexed:78([_Int8List] v264 T{__Int8List&_TypedList&_IntListMixin&_TypedIntListMixin}, v64 T{int}, v125, NoStoreBarrier)
ParallelMove rcx <- rsi goto: B55
B54
  Loop 0
ParallelMove rsi <- fp[-1], rbx <- fp[-6]
ParallelMove rax <- fp[-4], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v67 T{X0?}, v121 T{_Type}, 'value', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[-1]
v153 <- LoadField(v2 T{_ExternalInt8Array} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v216 <- UnboxInt64([non-speculative], v153 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- fp[-6]
GenericCheckBound:14(v216 T{_Smi}, v64 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-4]
v163 <- UnboxInt64([non-speculative], v67 T{int}) [-9223372036854775808, 9223372036854775807] int64
v164 <- LoadField(v2 T{_ExternalInt8Array} . PointerBase.data {final}) untagged
ParallelMove rax <- rax, rbx <- fp[-6]
StoreIndexed([_Int8List] v164 T{_ExternalInt8Array}, v64 T{int}, v163, NoStoreBarrier)
ParallelMove  goto:18 B55
B55
  Loop 0
ParallelMove rax <- fp[-5]
v69 <- BinaryInt64Op(+ [tr], v63, v226 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v70 <- BinaryInt64Op(+ [tr], v64, v226 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- rax, r9 <- rbx, rsi <- rcx, rdx <- fp[-2], rdi <- fp[-7] goto:84 B34
B35
ParallelMove rax <- C
DartReturn:178(v0)
B5
v38 <- StaticCall:50( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:52(v38)
B18
v17 <- StaticCall:156( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:158(v17)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Intrinsic
Enter frame
PrologueOffset = 14
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(String_getHashCode) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{int})
B0
B1
MonomorphicCheckedEntry
Intrinsic
Enter frame
PrologueOffset = 148
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v3 T{int})
v6 <- StaticCall:12( []<0> v2, v3 T{int}, recognized_kind = StringBaseCharAt) T{String}
ParallelMove rax <- rax
DartReturn:14(v6)
CheckStackOverflowSlowPath
B0
B1
Intrinsic
Enter frame
PrologueOffset = 126
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(String_charAt) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{String})
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v67 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[0] <- v2)
ParallelMove rcx <- rcx
v3 <- DispatchTableCall( cid=v67 List.length<0>, v2) T{int}
ParallelMove rdx <- rax
ParallelMove rsi <- rdx, fp[-5] <- rdx
v50 <- UnboxInt64:86([non-speculative], v3 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove fp[-4] <- rsi
ParallelMove r9 <- C, r8 <- C goto:86 B9
B9
  Loop 1
ParallelMove fp[-2] <- r9, fp[-3] <- r8
CheckStackOverflow:84(stack=0, loop=1)
Branch if RelationalOp(<, v6, v50 T{_Smi}) T{bool} goto (8, 10)
B8
  Loop 1
v52 <- BoxInt64(v6) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v68 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v52 T{int})
ParallelMove rcx <- rcx
v11 <- DispatchTableCall( cid=v68 List.[]<0>, v2, v52 T{int}) T{*?}
ParallelMove rax <- rax
v69 <- LoadClassId(v11 T{X0?}) int64
MoveArgument(sp[0] <- v11 T{X0?})
ParallelMove rcx <- rcx
v12 <- DispatchTableCall( cid=v69 Object.toString<0>, v11 T{X0?}) T{String}
ParallelMove rax <- rax, rdi <- fp[2]
ParallelMove fp[-6] <- rax
v70 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v52 T{int})
MoveArgument(sp[0] <- v12 T{String})
ParallelMove rcx <- rcx
DispatchTableCall( cid=v70 List.[]=<0>, v2, v52 T{int}, v12 T{String})
ParallelMove rax <- fp[-6]
v26 <- LoadClassId(v12 T{String}) [93, 94] T{_Smi}
Branch if StrictCompare(===, v26 T{_Smi}, v14 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 1
v31 <- LoadField(v12 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v54 <- UnboxInt64([non-speculative], v31 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rax <- fp[-2]
v24 <- BinaryInt64Op(+ [tr], v5, v54 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[-3]
v25 <- BinaryInt64Op(+ [tr], v6, v60 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- rax, r8 <- rcx, rdx <- fp[-5], rsi <- fp[-4] goto:82 B9
B4
ParallelMove rax <- fp[-3] goto:70 B6
B6
  Loop 0
CheckStackOverflow:68(stack=0, loop=2)
ParallelMove rsi <- rax
v18 <- BinaryInt64Op(+ [tr], v16, v60 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- rsi
Branch if RelationalOp(<, v18, v50 T{_Smi}) T{bool} goto (5, 7)
B5
  Loop 0
v56 <- BoxInt64(v18) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v71 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v56 T{int})
ParallelMove rcx <- rcx
v21 <- DispatchTableCall( cid=v71 List.[]<0>, v2, v56 T{int}) T{*?}
ParallelMove rax <- rax
v72 <- LoadClassId(v21 T{X0?}) int64
MoveArgument(sp[0] <- v21 T{X0?})
ParallelMove rcx <- rcx
v22 <- DispatchTableCall( cid=v72 Object.toString<0>, v21 T{X0?}) T{String}
ParallelMove rax <- rax, rdi <- fp[2]
v73 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v56 T{int})
MoveArgument(sp[0] <- v22 T{String})
ParallelMove rcx <- rcx
DispatchTableCall( cid=v73 List.[]=<0>, v2, v56 T{int}, v22 T{String})
ParallelMove rax <- fp[-3] goto:66 B6
B7
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v3 T{_Smi})
v20 <- StaticCall:74( _concatRangeNative@0150898<0> v2, v4, v3 T{_Smi}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:76(v20)
B10
ParallelMove rdi <- fp[2], rsi <- fp[-2]
v10 <- StaticCall:90( _concatAll@0150898<0> v2, v5, result_type = T{!null}) T{*}
ParallelMove rax <- rax
DartReturn:92(v10)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
Branch if RelationalOp(>, v3, v80 T{_Smi}) T{bool} goto (3, 4)
B3
v88 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[0] <- v2)
ParallelMove rcx <- rcx
v28 <- DispatchTableCall( cid=v88 List.length<0>, v2) T{int}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v9)
MoveArgument(sp[0] <- v28 T{_Smi})
v29 <- StaticCall:22( _concatRangeNative@0150898<0> v2, v9, v28 T{_Smi}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:24(v29)
B4
ParallelMove rcx <- rdi
v72 <- BoxInt64(v3 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v72 T{int})
v52 <- StaticCall:10( allocateOneByteString<0> v72 T{int}, recognized_kind = AllocateOneByteString, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove rdx <- rax, rax <- fp[-1]
ParallelMove fp[-2] <- rdx
v89 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[0] <- v2)
ParallelMove rcx <- rcx
v8 <- DispatchTableCall( cid=v89 List.length<0>, v2) T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rax
v73 <- UnboxInt64:82([non-speculative], v8 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove fp[-5] <- rdx
ParallelMove r9 <- C, r8 <- C, rdi <- fp[-2] goto:82 B10
B10
  Loop 1
ParallelMove fp[-3] <- r9, fp[-4] <- r8
CheckStackOverflow:86(stack=0, loop=1)
Branch if RelationalOp(<, v11, v73 T{_Smi}) T{bool} goto (5, 6)
B5
  Loop 1
v74 <- BoxInt64(v11) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v90 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v74 T{int})
ParallelMove rcx <- rcx
v16 <- DispatchTableCall( cid=v90 List.[]<0>, v2, v74 T{int}) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-6] <- rbx
t0 <- AssertAssignable:48(v16 T{X0?}, v17, '', instantiator_type_args(v0), function_type_args(v0)) T{_OneByteString}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[-6]
v47 <- LoadField(v16 T{_OneByteString} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v75 <- UnboxInt64:74([non-speculative], v47 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove r9 <- fp[-3], rsi <- C, rbx <- fp[-2] goto:74 B9
B9
  Loop 0
  Loop 1
CheckStackOverflow:78(stack=0, loop=2)
Branch if RelationalOp(<, v21, v75 T{_Smi}) T{bool} goto (7, 8)
B7
  Loop 0
  Loop 1
ParallelMove rdi <- r9
v25 <- BinaryInt64Op(+ [tr], v20, v82 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v83 <- LoadIndexed:68([_OneByteString] v16 T{_OneByteString}, v21 T{int}) [0, 255] int64
ParallelMove rax <- rax
StoreIndexed:10([_OneByteString] v52 T{_OneByteString}, v20 T{int}, v83 T{_Smi}, NoStoreBarrier)
ParallelMove rsi <- rsi
v27 <- BinaryInt64Op(+ [tr], v21 T{int}, v82 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- rdi, rsi <- rsi goto:76 B9
B8
  Loop 1
ParallelMove rcx <- fp[-4]
v24 <- BinaryInt64Op(+ [tr], v11, v82 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- r9, r8 <- rcx, rdi <- rbx, rdx <- fp[-5] goto:84 B10
B6
ParallelMove rbx <- rdi
ParallelMove rax <- rbx
DartReturn:88(v52 T{_OneByteString})
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Intrinsic
Enter frame
PrologueOffset = 133
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(Internal_allocateOneByteString) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{String})
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v0)
v5 <- NativeCall(String_concatRange) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v5, v6, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v5 T{String})
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v8 <- LoadClassId(v2) [1, 617] int64
Branch if TestRange(v8 in [93-94]) T{bool} goto (3, 4)
B3
ParallelMove rax <- rax
DartReturn:20(v2 T{String})
B4
v9 <- LoadClassId(v2) int64
MoveArgument(sp[0] <- v2)
ParallelMove rcx <- rcx
v6 <- DispatchTableCall( cid=v9 Object.toString<0>, v2) T{String}
ParallelMove rax <- rax
DartReturn:26(v6 T{String})
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- C
v9 <- HashIntegerOp(smi v3 T{_Smi}) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
DartReturn:14(v9)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- fp[2]
v3 <- LoadField:4(v2 . hashCode, CallsInitializer) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
DartReturn:6(v3)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:4(stack=0, loop=0)
ParallelMove rbx <- fp[2]
v9 <- LoadField:4(v2 T{_Uri} . _text@0150898, CallsInitializer) T{String}
ParallelMove rax <- rax
v10 <- LoadClassId(<non-smi> v9 T{String}) int64
MoveArgument(sp[0] <- v9 T{String})
ParallelMove rcx <- rcx
v4 <- DispatchTableCall( cid=v10 String.hashCode<0>, v9 T{String}) T{int}
ParallelMove rax <- rax
DartReturn:10(v4 T{_Smi})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:4(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v3 <- StaticCall:6( _initializeText@0150898<0> v2, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:8(v3)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- AllocateObject:10(cls=StringBuffer) T{StringBuffer}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-2] <- rax
StaticCall:12( StringBuffer.<0> v3)
ParallelMove rax <- fp[-1]
v4 <- LoadField(v2 . scheme {final}) T{String}
ParallelMove fp[-3] <- rcx
v53 <- LoadField(v4 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(!==, v53, v56 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rdi <- fp[-2], rsi <- rcx
StaticCall:28( write<0> v3, v4 T{String}, using unchecked entrypoint)
ParallelMove rdi <- fp[-2], rsi <- C
StaticCall:30( write<0> v3, v29, using unchecked entrypoint)
ParallelMove  goto:36 B5
B4
B5
v40 <- LoadField(v2 T{_Uri} . _host@0150898 {final}) T{String??}
Branch if StrictCompare:12(!==, v40, v0 T{Null?}) T{bool} goto (8, 6)
B8
B6
ParallelMove rax <- fp[-3]
v106 <- LoadClassId(<non-smi> v4 T{String}) int64
MoveArgument(sp[1] <- v4 T{String})
MoveArgument(sp[0] <- v9)
ParallelMove rcx <- rcx
v10 <- DispatchTableCall( cid=v106 String.==<0>, v4 T{String}, v9) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:54(===, v10 T{bool}, v6) goto (9, 10)
BoolTest
B9
B7
ParallelMove rdi <- fp[-2], rsi <- C
StaticCall:70( write<0> v3, v27, using unchecked entrypoint)
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
StaticCall:72( _writeAuthority@0150898<0> v2, v3, using unchecked entrypoint)
ParallelMove  goto:78 B11
B10
B11
v11 <- LoadField(v2 . path {final}) T{String}
ParallelMove rdi <- fp[-2], rsi <- rsi
StaticCall:84( write<0> v3, v11, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
v12 <- LoadField(v2 . _query@0150898 {final}) T{String??}
ParallelMove fp[-3] <- rcx
Branch if StrictCompare:88(!==, v12, v0) goto (15, 16)
B15
ParallelMove rdi <- fp[-2], rsi <- C
StaticCall:94( write<0> v3, v24, using unchecked entrypoint)
ParallelMove rdi <- fp[-2], rsi <- fp[-3]
StaticCall:112( write<0> v3, v12 T{String?}, using unchecked entrypoint)
ParallelMove  goto:118 B17
B16
B17
v16 <- LoadField(v2 . _fragment@0150898 {final}) T{String??}
ParallelMove fp[-3] <- rcx
Branch if StrictCompare:124(!==, v16, v0) goto (21, 22)
B21
ParallelMove rdi <- fp[-2], rsi <- C
StaticCall:130( write<0> v3, v21, using unchecked entrypoint)
ParallelMove rdi <- fp[-2], rsi <- fp[-3]
StaticCall:148( write<0> v3, v16 T{String?}, using unchecked entrypoint)
ParallelMove  goto:154 B23
B22
B23
MoveArgument(sp[0] <- v3)
v20 <- StaticCall:158( toString<0> v3, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:160(v20)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . _userInfo@0150898 {final}) T{String}
v32 <- LoadField(v4 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(!==, v32, v35 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rdi <- rax, rsi <- rsi
StaticCall:24( write<0> v3, v4 T{String}, using unchecked entrypoint)
ParallelMove rdi <- fp[-2], rsi <- C
StaticCall:26( write<0> v3, v16, using unchecked entrypoint)
ParallelMove  goto:32 B5
B4
B5
v7 <- LoadField(v2 . _host@0150898 {final}) T{String??}
Branch if StrictCompare:38(!==, v7, v0) goto (9, 10)
B9
ParallelMove rdi <- fp[-2], rsi <- rsi
StaticCall:60( write<0> v3, v7 T{String?}, using unchecked entrypoint)
ParallelMove  goto:66 B11
B10
B11
v10 <- LoadField(v2 . _port@0150898) T{int??}
Branch if StrictCompare:72(!==, v10, v0) goto (12, 13)
B12
ParallelMove rdi <- fp[-2], rsi <- C
StaticCall:78( write<0> v3, v11, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
v12 <- LoadField(v2 . _port@0150898) T{int??}
ParallelMove rdi <- fp[-2], rsi <- rsi
StaticCall:82( write<0> v3, v12, using unchecked entrypoint)
ParallelMove  goto:88 B14
B13
B14
ParallelMove rax <- C
DartReturn:92(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v3)
v4 <- StaticCall:10( _interpolateSingle@0150898<0> v3) T{String}
ParallelMove rax <- rax
ParallelMove fp[-2] <- rax
MoveArgument(sp[0] <- v4)
v5 <- StaticCall:12( get:isEmpty<0> v4, recognized_kind = StringBaseIsEmpty, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:16(===, v5 T{bool}, v6) goto (3, 4)
BoolTest
B3
ParallelMove rax <- C
DartReturn:22(v0)
B4
ParallelMove rdi <- fp[-1]
StaticCall:26( _consumeBuffer@0150898<0> v2, using unchecked entrypoint)
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
StaticCall:28( _addPart@0150898<0> v2, v4, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:30(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . _parts@0150898) T{_GrowableList?}
ParallelMove fp[-5] <- rdx
v73 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
v6 <- LoadField(v2 . _partsCodeUnits@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v126 <- UnboxInt64([non-speculative], v73 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rsi <- rsi
v7 <- BinaryInt64Op(+ [tr], v6, v126 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{StringBuffer} . _partsCodeUnits@0150898 = v7 T{int} <int64>)
v8 <- LoadField(v2 . _partsCodeUnitsSinceCompaction@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v9 <- BinaryInt64Op(+ [tr], v8, v126 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{StringBuffer} . _partsCodeUnitsSinceCompaction@0150898 = v9 T{int} <int64>)
Branch if StrictCompare:26(===, v4, v0) goto (3, 4)
B3
ParallelMove rdi <- C
v17 <- StaticCall:32( _GrowableList@0150898.withCapacity<0> v16, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
ParallelMove fp[-4] <- rax
v101 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v106 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v107 <- LoadField(v106 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v129 <- UnboxInt64([non-speculative], v101 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-3] <- rcx
ParallelMove rbx <- rbx
v130 <- UnboxInt64([non-speculative], v107 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v129 T{_Smi} == v130 T{_Smi}) T{bool} goto (22, 23)
B22
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v17 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B24
B23
B24
ParallelMove rax <- rsi
v55 <- BinaryInt64Op(+ [tr], v129 T{_Smi}, v142 T{_Smi}) [1, 576460752303423488] int64
v131 <- BoxInt64(v55) [1, 576460752303423488] T{_Smi}
StoreField(v17 T{_GrowableList} . GrowableObjectArray.length = v131, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v55 T{_Smi}, v129 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v58 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-2]
StoreIndexed:40([_List] v58, v129 T{_Smi}, v3 T{String})
ParallelMove rax <- rcx
StoreField(v2 T{StringBuffer} . _parts@0150898 = v17 T{_GrowableList})
ParallelMove  goto:70 B8
B4
ParallelMove r8 <- rcx
v90 <- LoadField(v4 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v95 <- LoadField(v4 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v96 <- LoadField(v95 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v136 <- UnboxInt64([non-speculative], v90 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-3] <- rax
ParallelMove rbx <- rbx
v137 <- UnboxInt64([non-speculative], v96 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v136 T{_Smi} == v137 T{_Smi}) T{bool} goto (11, 12)
B11
ParallelMove rdi <- rdx
StaticCall:26( _growToNextCapacity@0150898<0> v4 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B13
B12
B13
ParallelMove r8 <- rsi
v30 <- BinaryInt64Op(+ [tr], v136 T{_Smi}, v142 T{_Smi}) [1, 576460752303423488] int64
v138 <- BoxInt64(v30) [1, 576460752303423488] T{_Smi}
StoreField(v4 T{_GrowableList} . GrowableObjectArray.length = v138, NoStoreBarrier)
ParallelMove rax <- r8, rbx <- rsi
GenericCheckBound:40(v30 T{_Smi}, v136 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v33 <- LoadField(v4 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-2]
StoreIndexed:40([_List] v33, v136 T{_Smi}, v3 T{String})
v11 <- LoadField(v2 . _partsCompactionIndex@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- r8
v12 <- BinaryInt64Op(- [tr], v30 T{_Smi}, v11) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v12 == v143 T{_Smi}) T{bool} goto (5, 6)
B5
ParallelMove rdi <- rdi
StaticCall:58( _compact@0150898<0> v2, using unchecked entrypoint)
ParallelMove  goto:64 B7
B6
B7
B8
ParallelMove rax <- C
DartReturn:74(v0)
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _parts@0150898) T{_GrowableList?}
ParallelMove fp[-1] <- rcx
CheckNull:12(v3, CastError) T{_GrowableList}
v4 <- LoadField(v2 . _partsCodeUnitsSinceCompaction@0150898) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v4, v93 T{_Smi}) T{bool} goto (3, 4)
B3
v10 <- LoadField(v2 . _partsCompactionIndex@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rsi
v13 <- BinaryInt64Op(+ [tr], v10 T{int}, v94 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rcx, rsi <- rsi, rdx <- rdx
v14 <- StaticCall:32( _concatRange@0150898<0> v3 T{_GrowableList}, v10, v13, result_type = T{!null}) T{String}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-3] <- rcx
v39 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v84 <- UnboxInt64([non-speculative], v39 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rdx <- rdx
v16 <- BinaryInt64Op(- [tr], v84 T{_Smi}, v94 T{_Smi}) [-128, 576460752303423359] int64
ParallelMove rdi <- rax, rsi <- rdx
StaticCall:38( set:length<0> v3 T{_GrowableList}, v16, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
v64 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v69 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v70 <- LoadField(v69 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v87 <- UnboxInt64([non-speculative], v64 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-4] <- rcx
ParallelMove rbx <- rbx
v88 <- UnboxInt64([non-speculative], v70 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v87 T{_Smi} == v88 T{_Smi}) T{bool} goto (14, 15)
B14
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v3 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B16
B15
B16
ParallelMove rax <- rsi
v51 <- BinaryInt64Op(+ [tr], v87 T{_Smi}, v95 T{_Smi}) [1, 576460752303423488] int64
v89 <- BoxInt64(v51) [1, 576460752303423488] T{_Smi}
StoreField(v3 T{_GrowableList} . GrowableObjectArray.length = v89, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v51 T{_Smi}, v87 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v54 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-3]
StoreIndexed:40([_List] v54, v87 T{_Smi}, v14 T{String})
ParallelMove  goto:46 B5
B4
B5
StoreField(v2 T{StringBuffer} . _partsCodeUnitsSinceCompaction@0150898 = v96 T{_Smi} <int64>)
v28 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rbx <- rbx
v92 <- UnboxInt64([non-speculative], v28 T{_Smi}) [0, 576460752303423487] int64
StoreField(v2 T{StringBuffer} . _partsCompactionIndex@0150898 = v92 T{_Smi} <int64>)
ParallelMove rax <- C
DartReturn:56(v0)
CheckStackOverflowSlowPath
slow path check null (cast) operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v45 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rax
v61 <- UnboxInt64([non-speculative], v45 T{_Smi}) [0, 576460752303423487] int64
Branch if RelationalOp(>, v3, v61 T{_Smi}) T{bool} goto (3, 7)
B3
v18 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- C, rdx <- rdx, rcx <- C
AssertAssignable:22(v0, v17, ' in type cast', instantiator_type_args(v18), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
v39 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v40 <- LoadField(v39 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v62 <- UnboxInt64([non-speculative], v40 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rcx <- fp[-2]
Branch if RelationalOp(>, v3, v62 T{_Smi}) T{bool} goto (4, 5)
B4
ParallelMove rdi <- rax, rsi <- rcx
StaticCall:36( _grow@0150898<0> v2, v3, using unchecked entrypoint)
ParallelMove  goto:42 B6
B5
B6
v60 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v2 . GrowableObjectArray.length = v60 T{int}, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:48(v0)
B7
ParallelMove r8 <- rdi, r9 <- rsi
ParallelMove rax <- r9
v7 <- BinaryInt64Op(+ [tr], v3, v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rcx
v9 <- BinaryInt64Op(- [tr], v61 T{_Smi}, v3) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v7, v9) T{bool} goto (8, 9)
B8
ParallelMove rdi <- r8, rsi <- r9, rdx <- r9
StaticCall:68( _shrink@0150898<0> v2, v3, v3, using unchecked entrypoint)
ParallelMove rdx <- fp[-1] goto:100 B13
B9
ParallelMove rdx <- r8
v23 <- LoadField:92(v2 . GrowableObjectArray.data) T{_List}
ParallelMove rdi <- fp[-2] goto:92 B12
B12
  Loop 0
CheckStackOverflow:96(stack=0, loop=1)
Branch if RelationalOp(<, v11, v61 T{_Smi}) T{bool} goto (10, 11)
B10
  Loop 0
ParallelMove rax <- rcx, rbx <- rdi
GenericCheckBound:88(v61 T{_Smi}, v11) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:88([_List] v23, v11 T{int}, v0, NoStoreBarrier)
ParallelMove rdi <- rdi
v15 <- BinaryInt64Op(+ [tr], v11 T{int}, v68 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:94 B12
B11
B13
v59 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v2 . GrowableObjectArray.length = v59 T{int}, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:106(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi, fp[-1] <- rdi, fp[-2] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi
v5 <- StaticCall:10( _allocateData@0150898<0> v3, result_type = T{_List}) T{_List}
ParallelMove rsi <- rax, rcx <- fp[-2]
Branch if RelationalOp(>, v4, v36 T{_Smi}) T{bool} goto (3, 7)
B3
ParallelMove rdi <- fp[-1]
v15 <- LoadField:42(v2 . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove r8 <- r8
v32 <- UnboxInt64:42([non-speculative], v15) [0, 576460752303423487] int64
v17 <- LoadField:42(v2 . GrowableObjectArray.data) T{_List}
v19 <- LoadField:42(v5 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove r10 <- r10
v34 <- UnboxInt64:42([non-speculative], v19) [0, 576460752303423487] int64
ParallelMove r12 <- C goto:42 B6
B6
  Loop 0
CheckStackOverflow:46(stack=0, loop=1)
Branch if RelationalOp(<, v10, v4) T{bool} goto (4, 5)
B4
  Loop 0
ParallelMove rax <- r8, rbx <- r12
GenericCheckBound:36(v32 T{_Smi}, v10) [-9223372036854775808, 9223372036854775807] int64
v37 <- LoadIndexed:36([_List] v17, v10 T{int}) T{X0?}
ParallelMove rax <- r10, rbx <- r12
GenericCheckBound:38(v34 T{_Smi}, v10 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rsi, rax <- rdx
StoreIndexed:38([_List] v5, v10 T{int}, v37 T{X0?})
ParallelMove r12 <- r12
v14 <- BinaryInt64Op(+ [tr], v10 T{int}, v38 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- r12 goto:44 B6
B5
B7
ParallelMove rdi <- fp[-1]
ParallelMove  goto:54 B8
B8
ParallelMove rax <- rsi
StoreField(v2 . GrowableObjectArray.data = v5)
ParallelMove rax <- C
DartReturn:58(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- rdx
v5 <- BinaryInt64Op(- [tr], v4, v3) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v5 == v24 T{_Smi}) T{bool} goto (3, 4)
B3
v11 <- LoadField(v2 . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v22 <- UnboxInt64([non-speculative], v11) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:22(v22 T{_Smi}, v3) [-4611686018427387904, 4611686018427387903] int64
v13 <- LoadField(v2 . GrowableObjectArray.data) T{_List}
v25 <- LoadIndexed:22([_List] v13, v3 T{_Smi}) T{String}
ParallelMove rax <- rdx
DartReturn:24(v25 T{String})
B4
v20 <- BoxInt64(v3) [-4611686018427387904, 4611686018427387903] T{_Smi}
v21 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v20 T{_Smi})
MoveArgument(sp[0] <- v21 T{int})
v9 <- StaticCall:28( _concatRangeNative@0150898<0> v2, v20 T{_Smi}, v21 T{int}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:30(v9)
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- C
v4 <- StaticCall:10( _allocateData@0150898<0> v16 T{_Smi}, result_type = T{_List}) T{_List}
ParallelMove rdx <- fp[-1], rax <- rax
ParallelMove fp[-1] <- rax
v12 <- AllocateObject:10(cls=_GrowableList, v2 T{*?}, <not-aliased>) T{_GrowableList}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v12 . GrowableObjectArray.data = v4 T{_List}, NoStoreBarrier)
StoreField(v12 . GrowableObjectArray.length = v14 T{_Smi}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v12 T{_GrowableList})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _bufferPosition@0150898) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v3 == v35 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:22(v0)
B4
v7 <- LoadField(v2 . _bufferCodeUnitMagnitude@0150898) [-9223372036854775808, 9223372036854775807] int64
v9 <- RelationalOp(<=, v7, v36 T{_Smi}) T{bool}
v10 <- LoadField(v2 . _buffer@0150898) T{_Uint16List?}
CheckNull:32(v10, CastError) T{_Uint16List}
v34 <- BoxInt64(v3 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v10 T{_Uint16List})
MoveArgument(sp[1] <- v34 T{int})
MoveArgument(sp[0] <- v9)
v12 <- StaticCall:36( _create@0150898<0> v10 T{_Uint16List}, v34 T{int}, v9, result_type = T{!null}) T{String}
ParallelMove rcx <- rax, rdi <- fp[-1], rax <- C
StoreField(v2 T{StringBuffer} . _bufferCodeUnitMagnitude@0150898 = v35 T{_Smi} <int64>)
StoreField(v2 T{StringBuffer} . _bufferPosition@0150898 = v35 T{_Smi} <int64>)
ParallelMove rdi <- rdi, rsi <- rcx
StaticCall:42( _addPart@0150898<0> v2, v12, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:44(v0)
CheckStackOverflowSlowPath
slow path check null (cast) operation
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v0)
v5 <- NativeCall(StringBuffer_createStringFromUint16Array) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v5, v6, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v5 T{String})
B0
B1
Intrinsic
B0
B1
Enter frame
PrologueOffset = 0
v5 <- LoadField(v3 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v7 <- BinarySmiOp:4(- [tr], v5, v6) [-1, 4611686018427387902] T{_Smi}
Branch if RelationalOp:6(<=, v6, v7) T{bool} goto (2, 3)
B2
v13 <- LoadIndexedUnsafe(rbp[v7 T{_Smi} + 8]) T{Object}
ParallelMove rsi <- rcx goto:20 B5
B3
ParallelMove rsi <- C goto:18 B5
B5
CheckStackOverflow:26(stack=0, loop=0)
StoreField(v2 . _partsCodeUnits@0150898 = v19 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v2 . _partsCompactionIndex@0150898 = v19 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v2 . _partsCodeUnitsSinceCompaction@0150898 = v19 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v2 . _bufferPosition@0150898 = v19 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v2 . _bufferCodeUnitMagnitude@0150898 = v19 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rdi <- rdi, rsi <- rsi
StaticCall:30( write<0> v2, v11, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:32(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . _hashCodeCache@0150898) T{_Smi?}
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
v5 <- LoadField(v2 . _uri@0150898 {final}) T{String}
v24 <- LoadClassId(<non-smi> v5) int64
MoveArgument(sp[0] <- v5)
ParallelMove rcx <- rdx
v6 <- DispatchTableCall( cid=v24 String.hashCode<0>, v5) T{int}
ParallelMove rax <- rax, rdx <- fp[2]
StoreField(v2 T{_SimpleUri} . _hashCodeCache@0150898 = v6 T{_Smi})
ParallelMove rax <- rax
v16 <- UnboxInt64([non-speculative], v6 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rcx <- rax goto:28 B5
B4
ParallelMove rcx <- rcx
v17 <- UnboxInt64([non-speculative], v3 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rcx <- rcx goto:30 B5
B5
v18 <- BoxInt64(v4) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
DartReturn:32(v18 T{_Smi})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . _controller@4048458) T{_StreamControllerLifecycle<X0>}
MoveArgument(sp[0] <- v3 T{_StreamControllerLifecycle<X0>})
v11 <- StaticCall:10( _getHash@0150898<0> v3 T{_StreamControllerLifecycle<X0>}, recognized_kind = Object_getHash, result_type = T{_Smi}) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
ParallelMove rax <- rax
v13 <- UnboxInt64([non-speculative], v11 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rax <- rax
v6 <- BinaryInt64Op(^ [tr], v13 T{_Smi}, v15 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v14 <- BoxInt64(v6) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rcx
DartReturn:16(v14)
CheckStackOverflowSlowPath
Checking for concrete finalized classes:
 * 473 (_RawSocket)
 * 475 (_ControllerStream)
 * 476 (_BroadcastStream)
Generating check for type argument 0: X0
Checking instantiated type parameter for possible top types
Checking for legacy or non-nullable instance type argument
Checking instance type argument for possible bottom types
Checking for legacy or nullable instantiated type parameter
B0
B1
Intrinsic
B0
B1
ParallelMove rax <- C
DartReturn:6(v2)
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v4 <- StaticCall:10( _unsupportedUriBase@0150898<0> ) T{Uri}
ParallelMove rax <- rax
DartReturn:12(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v2 <- AllocateObject:10(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v2 T{UnsupportedError} . message = v3 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:14(v2)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v2)
v3 <- StaticCall:10( _isLoaded@0150898<0> v2, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:14(!==, v3 T{bool}, v4) goto (3, 4)
BoolTest
B4
ParallelMove rax <- C
DartReturn:28(v0)
B3
ParallelMove rax <- fp[2]
v5 <- AllocateObject:20(cls=_DeferredNotLoadedError) T{_DeferredNotLoadedError}
ParallelMove rcx <- rax, rax <- fp[2]
StoreField(v5 T{_DeferredNotLoadedError} . prefix = v2 T{_LibraryPrefix}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:24(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(LibraryPrefix_isLoaded) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{bool}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{bool})
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v3)
v5 <- StaticCall:10( _checkLoaded@0150898<0> v3) T{void?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[3]
v5 <- LoadClassId(v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v4 <- DispatchTableCall( cid=v5 Object.noSuchMethod<0>, v2, v3) T{*?}
ParallelMove rax <- rax
DartReturn:12(v4 T{*})
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
v3 <- LoadIndexedUnsafe(rbp[v2 + 16]) T{_LibraryPrefix}
ParallelMove fp[-2] <- rcx
CheckStackOverflow:8(stack=0, loop=0)
v4 <- AllocateContext:10(num_variables=1) T{Context}
ParallelMove rcx <- rax, rax <- fp[-2]
ParallelMove fp[-3] <- rcx
StoreField(v4 . prefix = v3, NoStoreBarrier)
ParallelMove rax <- C
Call1ArgStub:12(InitAsync(v5))
ParallelMove rdx <- fp[-3]
v6 <- LoadField(v4 . prefix) T{_LibraryPrefix}
MoveArgument(sp[0] <- v6)
v7 <- StaticCall:14( _isLoaded@0150898<0> v6, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:18(!==, v7 T{bool}, v8) goto (3, 10)
BoolTest
B3
ParallelMove rdx <- fp[-3]
v14 <- LoadField(v4 . prefix) T{_LibraryPrefix}
MoveArgument(sp[0] <- v14)
v15 <- StaticCall:24( _loadingUnit@0150898<0> v14, using unchecked entrypoint, result_type = T{!null}) T{Object}
ParallelMove rax <- rax
ParallelMove fp[-2] <- rax
v67 <- LoadClassId(v15) int64
MoveArgument(sp[1] <- v15)
MoveArgument(sp[0] <- v16)
ParallelMove rcx <- rcx
v17 <- DispatchTableCall( cid=v67 Object.==<0>, v15, v16) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:30(!==, v17 T{bool}, v8) goto (4, 8)
BoolTest
B4
v31 <- LoadStaticField:4(_loads@0150898, CallsInitializer) T{_Map}
ParallelMove rdi <- rax, rsi <- fp[-2], rax <- rax
ParallelMove fp[-4] <- rax
v38 <- StaticCall:10( _getValueOrData@3220832<0> v31 T{_Map}, v15 T{Object}, using unchecked entrypoint) T{Object??}
ParallelMove rcx <- rax, rax <- fp[-4]
v45 <- LoadField(v31 T{_Map} . LinkedHashBase.data) T{_List}
Branch if StrictCompare:14(===, v45 T{_List}, v38) goto (16, 17)
B16
ParallelMove rcx <- C goto:24 B18
B17
B18
Branch if StrictCompare:40(===, v40 T{X1??}, v0) goto (5, 6)
B5
ParallelMove rdi <- C
v24 <- StaticCall:48( Completer.<0> v5, result_type = T{_AsyncCompleter}) T{_AsyncCompleter}
ParallelMove rdi <- fp[-4], rsi <- fp[-2], rdx <- rax, rax <- rax
ParallelMove fp[-4] <- rax
StaticCall:50( []=<0> v31 T{_Map}, v15, v24, using unchecked entrypoint)
MoveArgument(sp[0] <- v15)
StaticCall:52( _issueLoad@0150898<0> v15)
ParallelMove rax <- fp[-4] goto:58 B7
B6
ParallelMove rax <- rcx goto:60 B7
B7
v22 <- LoadField(v21 . future {final}) T{_Future}
ParallelMove rax <- rcx, fp[-2] <- rcx
Suspend:64(Await(v22))
ParallelMove  goto:72 B9
B8
B9
B10
B11
ParallelMove rbx <- C, rdx <- fp[-3]
v12 <- AllocateClosure:84(v11, v4) T{_Closure}
ParallelMove rdi <- C, rsi <- rax
v13 <- StaticCall:86( Future.<0> v5, v12) T{_Future}
ParallelMove rax <- rax, rcx <- rax
ParallelMove fp[-2] <- rcx
Suspend:88(Await(v13))
ParallelMove rax <- C
DartReturn:92(v0)
CheckStackOverflowSlowPath
PrologueOffset = 8
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- AllocateContext:10(num_variables=2) T{Context}
ParallelMove rcx <- rax, rax <- fp[-2]
ParallelMove fp[-3] <- rcx
StoreField(v4 . computation = v3, NoStoreBarrier)
ParallelMove rdx <- fp[-1]
v5 <- AllocateObject:12(cls=_Future, v2) T{_Future}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-1] <- rcx
StoreField(v5 T{_Future} . _state@4048458 = v20 T{_Smi} <int64>, NoStoreBarrier)
v18 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v5 T{_Future} . _zone@4048458 = v18, NoStoreBarrier)
ParallelMove rcx <- fp[-3]
StoreField(v4 . result = v5, NoStoreBarrier)
ParallelMove rbx <- C, rdx <- rcx
v7 <- AllocateClosure:16(v6, v4) T{_Closure}
ParallelMove rdi <- rax
StaticCall:18( run<0> v7)
ParallelMove rcx <- fp[-3]
v8 <- LoadField(v4 . result) T{_Future}
ParallelMove rax <- rax
DartReturn:20(v8)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- C, rsi <- C, rdx <- rdx
StaticCall:10( Timer.<0> v0, v3, v2)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi, rsi <- rdx, fp[-1] <- rsi, fp[-2] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v73 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rax <- rax
ParallelMove fp[-3] <- rax
Branch if StrictCompare:10(===, v73, v6 T{_RootZone}) T{bool} goto (3, 4)
B3
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
v51 <- StaticCall:10( _createTimer@4048458<0> v3 T{Duration}, v4 T{_Closure}, result_type = T{_Timer}) T{_Timer}
ParallelMove rax <- rax
DartReturn:26(v51 T{_Timer})
B4
ParallelMove rcx <- fp[-2]
v27 <- AllocateContext:10(num_variables=2) T{Context}
ParallelMove rcx <- rax, rax <- fp[-3]
StoreField(v27 . this = v73 T{_RootZone}, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreField(v27 . f = v4 T{_Closure}, NoStoreBarrier)
ParallelMove rbx <- C, rdx <- rcx
v29 <- AllocateClosure:12(v30 T{Function}, v27) T{_Closure}
ParallelMove rdi <- fp[-1], rsi <- rax
v39 <- StaticCall:10( _createTimer@4048458<0> v3 T{Duration}, v29 T{_Closure}, result_type = T{_Timer}) T{_Timer}
ParallelMove rax <- rax
DartReturn:38(v39 T{_Timer})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- AllocateContext:10(num_variables=1) T{Context}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v4 . callback = v3, NoStoreBarrier)
v5 <- LoadStaticField(timerFactory) T{_Closure?}
Branch if StrictCompare:12(===, v5, v0) goto (3, 7)
B7
ParallelMove rbx <- C, rdx <- rcx
v12 <- AllocateClosure:46(v11, v4) T{_Closure}
ParallelMove rdi <- rax, rsi <- C, rdx <- C
v68 <- StaticCall:10( _createTimer@1026248<0> v12 T{_Closure}, v26 T{_Smi}, v13 T{bool}, result_type = T{_Timer}) T{_Timer}
ParallelMove rax <- rax
DartReturn:52(v68 T{_Timer})
B3
v15 <- AllocateObject:18(cls=UnsupportedError, <not-aliased>) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v15 T{UnsupportedError} . message = v16 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:22(v15)
CheckStackOverflowSlowPath
Checking for cid 307 (_Timer)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi
CheckStackOverflow:8(stack=0, loop=0)
Branch if StrictCompare:12(===, v4 T{bool}, v5) goto (3, 4)
BoolTest
B3
ParallelMove rsi <- rax
v31 <- UnboxInt64([non-speculative], v2 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- C
v26 <- StaticCall:10( _createTimer@1026248<0> v3 T{_Closure}, v31 T{int}, v5 T{bool}, result_type = T{_Timer}) T{_Timer}
ParallelMove rax <- rax
DartReturn:20(v26 T{_Timer})
B4
ParallelMove rax <- rax
v32 <- UnboxInt64([non-speculative], v2 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi, rsi <- rax, rdx <- C
v16 <- StaticCall:10( _createTimer@1026248<0> v3 T{_Closure}, v32 T{int}, v17 T{bool}, result_type = T{_Timer}) T{_Timer}
ParallelMove rax <- rax
DartReturn:26(v16 T{_Timer})
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[4], rsi <- fp[3], rdx <- fp[2]
v7 <- StaticCall:10( _factory@1026248<0> v3, v4, v5) T{_Timer}
ParallelMove rax <- rax
DartReturn:12(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, r8 <- rdx, fp[-2] <- rdi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
Branch if RelationalOp(<, v3, v42 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rbx <- C goto:24 B5
B4
ParallelMove rbx <- rsi goto:26 B5
B5
ParallelMove fp[-1] <- rbx
v21 <- LoadStaticField:4(timerMillisecondClock, CallsInitializer) T{(dynamic) => int}
v27 <- StaticCall:10( _timerMillisecondClock@15069316<0> ) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rbx <- fp[-1]
Branch if EqualityCompare(v8 == v42 T{_Smi}) T{bool} goto (6, 7)
B6
ParallelMove rax <- rax
v40 <- UnboxInt64([non-speculative], v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax goto:52 B8
B7
ParallelMove rax <- rax
v41 <- UnboxInt64([non-speculative], v27 T{int?}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v13 <- BinaryInt64Op(+ [tr], v41 T{int?}, v43 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v14 <- BinaryInt64Op(+ [tr], v13, v8) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax goto:54 B8
B8
ParallelMove fp[-4] <- rdx
v16 <- AllocateObject:56(cls=_Timer) T{_Timer}
ParallelMove rdi <- rax, rsi <- fp[-2], rdx <- fp[-4], rbx <- fp[-1], r8 <- fp[-3], rax <- rax
ParallelMove fp[-2] <- rax
StaticCall:58( _Timer@1026248._internal@1026248<0> v16, v2, v15, v8, v4)
ParallelMove rdi <- fp[-2]
StaticCall:60( _enqueue@1026248<0> v16, using unchecked entrypoint)
ParallelMove rax <- fp[-2]
DartReturn:62(v16)
CheckStackOverflowSlowPath
slow path late initialization error operation
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v4 <- StaticCall:10( _timerMillisecondClock@15069316<0> ) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
DartReturn:12(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v24 <- UnboxInt64([non-speculative], v6) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- C, rsi <- rax
v8 <- StaticCall:12( InternetAddressType._from@15069316<0> v0, v24 T{int}, result_type = T{InternetAddressType}) T{InternetAddressType}
v9 <- AllocateObject:16(cls=Datagram) T{Datagram}
ParallelMove rax <- rax
DartReturn:20(v9)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
Branch if EqualityCompare(v3 == v49 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:22(v4)
B4
Branch if EqualityCompare(v3 == v50 T{_Smi}) T{bool} goto (5, 6)
B5
ParallelMove rax <- C
DartReturn:38(v8)
B6
Branch if EqualityCompare(v3 == v51 T{_Smi}) T{bool} goto (7, 8)
B7
ParallelMove rax <- C
DartReturn:54(v11)
B8
ParallelMove rbx <- C, r10 <- C
v16 <- CreateArray:60(v0, v15) T{_List}
ParallelMove rcx <- rax
StoreIndexed([_List] v16, v17, v18, NoStoreBarrier)
ParallelMove rdx <- fp[-1]
v48 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreIndexed([_List] v16, v19, v48 T{int}, NoStoreBarrier)
MoveArgument(sp[0] <- v16)
v20 <- StaticCall:62( _interpolate@0150898<0> v16, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove fp[-2] <- rax
v14 <- AllocateObject:58(cls=ArgumentError) T{ArgumentError}
ParallelMove rcx <- rax, rax <- fp[-2]
StoreField(v14 T{ArgumentError} . message = v20 T{String}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v14 T{ArgumentError} . _hasValue@0150898 = v27 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:66(v14)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- C
DartReturn:10(v2)
B0
B3
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v16 <- LoadStaticField:4(_signalControllers@15069316, CallsInitializer) T{_List}
ParallelMove rax <- C
Throw:12(v11 T{_OneByteString})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- C, r10 <- C
v5 <- CreateArray:6(v2, v3) T{_List}
ParallelMove rax <- rax
DartReturn:8(v5)
Checking for cid 222 (_SignalController)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[4]
v9 <- LoadClassId(<non-smi> v2) int64
ParallelMove rcx <- rcx, rdi <- rdi
v5 <- DispatchTableCall( cid=v9 TypedData.buffer<0>, v2) T{ByteBuffer}
ParallelMove rax <- rax
ParallelMove rcx <- fp[3]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v8 <- UnboxInt64([non-speculative], v4) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- C, rsi <- rax, rdx <- rcx, rbx <- rdx
v6 <- StaticCall:12( Uint8List.view<0> v0, v5 T{ByteBuffer}, v7 T{int}, v8 T{int}, result_type = T{!null}) T{Uint8List}
ParallelMove rax <- rax
DartReturn:14(v6)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi, rsi <- rdx, rdx <- rbx
CheckStackOverflow:8(stack=0, loop=0)
v7 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- rsi, rdx <- rdx
v6 <- DispatchTableCall( cid=v7 ByteBuffer.asUint8List<0>, v3, v4, v5) T{Uint8List}
ParallelMove rax <- rax
DartReturn:12(v6 T{Uint8List})
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- C
DartReturn:10(v2)
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v4 <- StaticCall:10( _uriBaseClosure@15069316<0> ) T{Uri}
ParallelMove rax <- rax
DartReturn:12(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
StaticCall:10( get:current<0> , result_type = T{Null?})
v18 <- StaticCall:10( get:_namespace@15069316<0> , result_type = T{_NamespaceImpl}) T{_NamespaceImpl}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v18)
v3 <- StaticCall:14( _current@15069316<0> v18) T{*?}
ParallelMove rbx <- rax
ParallelMove fp[-1] <- rbx
v14 <- LoadClassId(v3) [1, 617] int64
Branch if EqualityCompare(v14 == v15) T{bool} goto (3, 4)
B4
ParallelMove rax <- rbx, rdx <- C, rcx <- C
t1 <- AssertAssignable:32(v3, v7, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- C, rsi <- fp[-1]
v9 <- StaticCall:34( _Uri@0150898.directory<0> v0, v3 T{String}, result_type = T{_Uri}) T{_Uri}
ParallelMove rax <- rax
DartReturn:36(v9)
B3
MoveArgument(sp[3] <- v0)
MoveArgument(sp[2] <- v3 T{OSError})
MoveArgument(sp[1] <- v10)
MoveArgument(sp[0] <- v11)
v12 <- StaticCall:26( FileSystemException._fromOSError@15069316<0> v0, v3 T{OSError}, v10, v11) T{FileSystemException}
ParallelMove rax <- rax
Throw:28(v12)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
StaticCall:10( _setupNamespace@15069316<0> v2)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- AllocateObject:10(cls=_NamespaceImpl) T{_NamespaceImpl}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v2)
v4 <- StaticCall:14( _create@15069316<0> v3, v2, result_type = T{_NamespaceImpl}) T{_NamespaceImpl}
ParallelMove rax <- rax
StoreStaticField(_cachedNamespace@15069316, v4)
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(Namespace_Create) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{_NamespaceImpl}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{_NamespaceImpl})
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v161 <- LoadStaticField:4(isWindows, CallsInitializer) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v161 T{bool}, v7) goto (3, 72)
BoolTest
B3
ParallelMove rcx <- fp[4]
v24 <- LoadField(v3 . errorCode {final}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp:54(<=, v24, v421 T{_Smi}) T{bool} goto (8, 9)
B8
Branch if RelationalOp:64(<=, v24, v422 T{_Smi}) T{bool} goto (10, 11)
B10
Branch if RelationalOp:86(<=, v24, v423 T{_Smi}) T{bool} goto (14, 15)
B14
Branch if RelationalOp:108(<=, v24, v424 T{_Smi}) T{bool} goto (18, 19)
B18
Branch if RelationalOp:130(<=, v24, v425 T{_Smi}) T{bool} goto (22, 23)
B22
v417 <- BoxInt64(v24) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if StrictCompare:140(===, v417 T{int}, v9) T{bool} goto (24, 25)
B24
ParallelMove rdi <- rcx, rcx <- fp[3], rsi <- fp[2] goto:152 B6
B25
ParallelMove rbx <- rcx, rax <- fp[3], rdx <- fp[2] goto:150 B7
B23
ParallelMove rdi <- rcx, rcx <- fp[3], rsi <- fp[2] goto:154 B6
B19
Branch if RelationalOp:118(>=, v24, v423 T{_Smi}) T{bool} goto (20, 21)
B20
B21
ParallelMove rbx <- rcx, rax <- fp[3], rdx <- fp[2] goto:128 B7
B15
Branch if RelationalOp:96(>=, v24, v426 T{_Smi}) T{bool} goto (16, 17)
B16
Branch if RelationalOp:158(<=, v24, v426 T{_Smi}) T{bool} goto (26, 27)
B26
ParallelMove rdi <- rcx, rcx <- fp[3], rsi <- fp[2] goto:168 B6
B27
B17
ParallelMove rbx <- rcx, rax <- fp[3], rdx <- fp[2] goto:106 B7
B11
Branch if RelationalOp:74(>=, v24, v427 T{_Smi}) T{bool} goto (12, 13)
B12
Branch if RelationalOp:172(<=, v24, v428 T{_Smi}) T{bool} goto (28, 29)
B28
Branch if RelationalOp:194(<=, v24, v427 T{_Smi}) T{bool} goto (32, 33)
B32
ParallelMove rdi <- rcx, rcx <- fp[3], rsi <- fp[2] goto:204 B6
B33
B29
Branch if RelationalOp:182(>=, v24, v429 T{_Smi}) T{bool} goto (30, 31)
B30
Branch if RelationalOp:208(<=, v24, v429 T{_Smi}) T{bool} goto (34, 35)
B34
B35
Branch if RelationalOp:218(>=, v24, v421 T{_Smi}) T{bool} goto (36, 37)
B36
B37
ParallelMove rbx <- rcx, rax <- fp[3], rdx <- fp[2] goto:228 B7
B31
ParallelMove rbx <- rcx, rax <- fp[3], rdx <- fp[2] goto:192 B7
B13
ParallelMove rbx <- rcx, rax <- fp[3], rdx <- fp[2] goto:84 B7
B9
Branch if RelationalOp:234(<=, v24, v430 T{_Smi}) T{bool} goto (38, 39)
B38
Branch if RelationalOp:256(<=, v24, v431 T{_Smi}) T{bool} goto (42, 43)
B42
Branch if RelationalOp:278(<=, v24, v432 T{_Smi}) T{bool} goto (46, 47)
B46
Branch if RelationalOp:300(<=, v24, v433 T{_Smi}) T{bool} goto (50, 51)
B50
B51
Branch if RelationalOp:310(>=, v24, v432 T{_Smi}) T{bool} goto (52, 53)
B52
ParallelMove rdi <- rcx, rcx <- fp[3], rsi <- fp[2] goto:324 B6
B53
ParallelMove rbx <- rcx, rax <- fp[3], rdx <- fp[2] goto:320 B7
B47
Branch if RelationalOp:288(>=, v24, v431 T{_Smi}) T{bool} goto (48, 49)
B48
B49
ParallelMove rbx <- rcx, rax <- fp[3], rdx <- fp[2] goto:298 B7
B43
Branch if RelationalOp:266(>=, v24, v434 T{_Smi}) T{bool} goto (44, 45)
B44
Branch if RelationalOp:328(<=, v24, v434 T{_Smi}) T{bool} goto (54, 55)
B54
ParallelMove rdi <- rcx, rcx <- fp[3], rsi <- fp[2] goto:350 B6
B55
Branch if RelationalOp:338(>=, v24, v430 T{_Smi}) T{bool} goto (56, 57)
B56
ParallelMove rsi <- rcx, rax <- fp[3], rbx <- fp[2] goto:352 B5
B57
ParallelMove rbx <- rcx, rax <- fp[3], rdx <- fp[2] goto:348 B7
B45
ParallelMove rbx <- rcx, rax <- fp[3], rdx <- fp[2] goto:276 B7
B39
Branch if RelationalOp:244(>=, v24, v435 T{_Smi}) T{bool} goto (40, 41)
B40
Branch if RelationalOp:354(<=, v24, v436 T{_Smi}) T{bool} goto (58, 59)
B58
Branch if RelationalOp:376(<=, v24, v435 T{_Smi}) T{bool} goto (62, 63)
B62
B4
v56 <- AllocateObject:22(cls=PathAccessException, <not-aliased>) T{PathAccessException}
ParallelMove rcx <- rax, rax <- fp[3]
StoreField(v56 T{PathAccessException} . message = v4 T{String}, NoStoreBarrier)
ParallelMove rbx <- fp[2]
StoreField(v56 T{PathAccessException} . path = v5 T{String}, NoStoreBarrier)
ParallelMove rsi <- fp[4]
StoreField(v56 T{PathAccessException} . osError = v3 T{OSError}, NoStoreBarrier)
ParallelMove rax <- rcx
DartReturn:26(v56)
B63
ParallelMove rsi <- rcx, rax <- fp[3], rbx <- fp[2]
Branch if RelationalOp:386(>=, v24, v436 T{_Smi}) T{bool} goto (64, 65)
B64
ParallelMove rdi <- rsi, rcx <- rax, rsi <- rbx goto:400 B6
B65
ParallelMove rbx <- rsi, rdx <- rbx goto:396 B7
B59
ParallelMove rsi <- rcx, rax <- fp[3], rbx <- fp[2]
Branch if RelationalOp:364(>=, v24, v437 T{_Smi}) T{bool} goto (60, 61)
B60
Branch if RelationalOp:402(<=, v24, v437 T{_Smi}) T{bool} goto (66, 67)
B66
B5
v41 <- AllocateObject:30(cls=PathExistsException, <not-aliased>) T{PathExistsException}
ParallelMove rax <- rax, rcx <- fp[3]
StoreField(v41 T{PathExistsException} . message = v4 T{String}, NoStoreBarrier)
ParallelMove rsi <- fp[2]
StoreField(v41 T{PathExistsException} . path = v5 T{String}, NoStoreBarrier)
ParallelMove rdi <- fp[4]
StoreField(v41 T{PathExistsException} . osError = v3 T{OSError}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:34(v41)
B67
ParallelMove rdi <- rsi, rcx <- rax, rsi <- rbx
Branch if RelationalOp:412(>=, v24, v438 T{_Smi}) T{bool} goto (68, 69)
B68
v418 <- BoxInt64(v24) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if StrictCompare:426(===, v418 T{int}, v36) T{bool} goto (70, 71)
B70
B6
v55 <- AllocateObject:38(cls=PathNotFoundException, <not-aliased>) T{PathNotFoundException}
ParallelMove rcx <- rax, rax <- fp[3]
StoreField(v55 T{PathNotFoundException} . message = v4 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[2]
StoreField(v55 T{PathNotFoundException} . path = v5 T{String}, NoStoreBarrier)
ParallelMove rbx <- fp[4]
StoreField(v55 T{PathNotFoundException} . osError = v3 T{OSError}, NoStoreBarrier)
ParallelMove rax <- rcx
DartReturn:42(v55)
B71
ParallelMove rbx <- rdi, rax <- rcx, rdx <- rsi
ParallelMove  goto:436 B7
B69
ParallelMove rbx <- rdi, rax <- rcx, rdx <- rsi
ParallelMove  goto:422 B7
B61
ParallelMove rbx <- rsi, rdx <- rbx
ParallelMove  goto:374 B7
B41
ParallelMove rbx <- rcx, rax <- fp[3], rdx <- fp[2]
ParallelMove  goto:254 B7
B7
v54 <- AllocateObject:46(cls=FileSystemException, <not-aliased>) T{FileSystemException}
ParallelMove rax <- rax, rcx <- fp[3]
StoreField(v54 T{FileSystemException} . message = v4 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[2]
StoreField(v54 T{FileSystemException} . path = v5 T{String}, NoStoreBarrier)
ParallelMove rsi <- fp[4]
StoreField(v54 T{FileSystemException} . osError = v3 T{OSError}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:50(v54)
B72
ParallelMove rsi <- fp[4], rcx <- fp[3], rdx <- fp[2]
v8 <- LoadField(v3 . errorCode {final}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp:472(<=, v8, v425 T{_Smi}) T{bool} goto (75, 76)
B75
Branch if RelationalOp:494(<=, v8, v439 T{_Smi}) T{bool} goto (79, 80)
B79
v419 <- BoxInt64(v8) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if StrictCompare:504(===, v419 T{int}, v20) T{bool} goto (81, 82)
B81
ParallelMove rbx <- rsi, rax <- rcx goto:516 B73
B82
ParallelMove rbx <- rsi, rax <- rcx goto:514 B74
B80
v22 <- AllocateObject:458(cls=PathNotFoundException, <not-aliased>) T{PathNotFoundException}
ParallelMove rcx <- rax, rax <- fp[3]
StoreField(v22 T{PathNotFoundException} . message = v4 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[2]
StoreField(v22 T{PathNotFoundException} . path = v5 T{String}, NoStoreBarrier)
ParallelMove rbx <- fp[4]
StoreField(v22 T{PathNotFoundException} . osError = v3 T{OSError}, NoStoreBarrier)
ParallelMove rax <- rcx
DartReturn:462(v22)
B76
ParallelMove rbx <- rsi, rax <- rcx
Branch if RelationalOp:482(>=, v8, v440 T{_Smi}) T{bool} goto (77, 78)
B77
Branch if RelationalOp:518(<=, v8, v440 T{_Smi}) T{bool} goto (83, 84)
B83
B73
v19 <- AllocateObject:444(cls=PathAccessException, <not-aliased>) T{PathAccessException}
ParallelMove rax <- rax, rcx <- fp[3]
StoreField(v19 T{PathAccessException} . message = v4 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[2]
StoreField(v19 T{PathAccessException} . path = v5 T{String}, NoStoreBarrier)
ParallelMove rsi <- fp[4]
StoreField(v19 T{PathAccessException} . osError = v3 T{OSError}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:448(v19)
B84
ParallelMove rsi <- rbx, rcx <- rax
Branch if RelationalOp:528(>=, v8, v441 T{_Smi}) T{bool} goto (85, 86)
B85
v420 <- BoxInt64(v8) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
Branch if StrictCompare:542(===, v420 T{int}, v14) T{bool} goto (87, 88)
B87
v17 <- AllocateObject:452(cls=PathExistsException, <not-aliased>) T{PathExistsException}
ParallelMove rcx <- rax, rax <- fp[3]
StoreField(v17 T{PathExistsException} . message = v4 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[2]
StoreField(v17 T{PathExistsException} . path = v5 T{String}, NoStoreBarrier)
ParallelMove rbx <- fp[4]
StoreField(v17 T{PathExistsException} . osError = v3 T{OSError}, NoStoreBarrier)
ParallelMove rax <- rcx
DartReturn:456(v17)
B88
ParallelMove rbx <- rsi, rax <- rcx
ParallelMove  goto:552 B74
B86
ParallelMove rbx <- rsi, rax <- rcx
ParallelMove  goto:538 B74
B78
B74
v18 <- AllocateObject:464(cls=FileSystemException, <not-aliased>) T{FileSystemException}
ParallelMove rax <- rax, rcx <- fp[3]
StoreField(v18 T{FileSystemException} . message = v4 T{String}, NoStoreBarrier)
ParallelMove rcx <- fp[2]
StoreField(v18 T{FileSystemException} . path = v5 T{String}, NoStoreBarrier)
ParallelMove rcx <- fp[4]
StoreField(v18 T{FileSystemException} . osError = v3 T{OSError}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:468(v18)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v4 <- LoadField(v2 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v6 <- BinarySmiOp:4(- [tr], v4, v5) [-1, 4611686018427387902] T{_Smi}
v7 <- LoadIndexedUnsafe(rbp[v6 + 16]) T{*?}
Branch if RelationalOp:6(<=, v5, v6) T{bool} goto (2, 3)
B2
v15 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 8]) T{String}
Branch if RelationalOp:20(<=, v16, v6 T{_Smi}) T{bool} goto (5, 6)
B5
v18 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 0]) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rsi <- rsi
v20 <- UnboxInt64([non-speculative], v18) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rbx, rcx <- rsi goto:36 B8
B6
ParallelMove rcx <- rbx goto:30 B4
B3
ParallelMove rcx <- C goto:18 B4
B4
ParallelMove rax <- rcx, rcx <- C goto:34 B8
B8
ParallelMove rax <- rax
StoreField(v7 . message = v13)
StoreField(v7 . errorCode = v14 <int64>)
ParallelMove rax <- C
DartReturn:46(v0)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:4(stack=0, loop=0)
v7 <- LoadStaticField:4(operatingSystem, CallsInitializer) T{String}
ParallelMove rax <- rax
v8 <- LoadClassId(<non-smi> v7 T{String}) int64
MoveArgument(sp[1] <- v7 T{String})
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v4 <- DispatchTableCall( cid=v8 String.==<0>, v7 T{String}, v3) T{bool}
ParallelMove rax <- rax
DartReturn:10(v4 T{bool})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:4(stack=0, loop=0)
v5 <- StaticCall:10( _operatingSystem@15069316<0> , result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:8(v5 T{String})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[0] <- v0)
v2 <- NativeCall(Platform_OperatingSystem) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v2, v3, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v2 T{String})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi, fp[-1] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v14 <- LoadStaticField:4(_isWindowsCached@0150898, CallsInitializer) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v14 T{bool}, v5) goto (3, 4)
BoolTest
B3
ParallelMove rdi <- fp[-1], rsi <- C
v8 <- StaticCall:20( _makeWindowsFileUrl@0150898<0> v3, v5, result_type = T{_Uri}) T{_Uri}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:28 B5
B4
ParallelMove rdi <- fp[-1], rsi <- C
v6 <- StaticCall:24( _makeFileUri@0150898<0> v3, v5, result_type = T{_Uri}) T{_Uri}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:30 B5
B5
ParallelMove rax <- rax
DartReturn:32(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v127 <- LoadClassId(<non-smi> v2) int64
ParallelMove rcx <- rcx, rdi <- rdx, rsi <- C
v5 <- DispatchTableCall( cid=v127 String.split<0>, v2, v4) T{List<String>}
ParallelMove rcx <- rax, rax <- fp[-2]
ParallelMove fp[-3] <- rcx
Branch if StrictCompare:14(===, v3 T{bool}, v6) goto (3, 7)
BoolTest
B3
v77 <- LoadField(v5 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
Branch if StrictCompare(!==, v77 T{_Smi}, v65 T{_Smi}) T{bool} goto (4, 8)
B4
ParallelMove rdi <- rcx
v12 <- StaticCall:28( get:last<0> v5 T{_GrowableList}, result_type = T{!null}) T{X0}
ParallelMove rax <- rax
v62 <- LoadField(v12 T{X0} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(!==, v62, v65 T{_Smi}) T{bool} goto (5, 9)
B5
ParallelMove rax <- fp[-3]
v51 <- LoadField(v5 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v56 <- LoadField(v5 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v57 <- LoadField(v56 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v101 <- UnboxInt64([non-speculative], v51 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-4] <- rcx
ParallelMove rbx <- rbx
v102 <- UnboxInt64([non-speculative], v57 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v101 T{_Smi} == v102 T{_Smi}) T{bool} goto (15, 16)
B15
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v5 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B17
B16
B17
ParallelMove rax <- rdx
v26 <- BinaryInt64Op(+ [tr], v101 T{_Smi}, v108 T{_Smi}) [1, 576460752303423488] int64
v103 <- BoxInt64(v26) [1, 576460752303423488] T{_Smi}
StoreField(v5 T{_GrowableList} . GrowableObjectArray.length = v103, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rdx
GenericCheckBound:40(v26 T{_Smi}, v101 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v29 <- LoadField(v5 T{_GrowableList} . GrowableObjectArray.data) T{_List}
StoreIndexed:40([_List] v29, v101 T{_Smi}, v14 T{_OneByteString}, NoStoreBarrier)
ParallelMove  goto:60 B10
B9
ParallelMove rcx <- fp[-3]
ParallelMove  goto:56 B6
B8
B7
B6
B10
ParallelMove rdi <- fp[-1], rsi <- C
v7 <- StaticCall:64( startsWith<0> v2, v4, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:68(===, v7 T{bool}, v6) goto (11, 12)
BoolTest
B11
MoveArgument(sp[0] <- v9)
ParallelMove rdi <- C, rsi <- fp[-3]
v10 <- StaticCall:74( _Uri@0150898.<0> v0, v5 T{_GrowableList}, v9, result_type = T{_Uri}) T{_Uri}
ParallelMove rax <- rax
DartReturn:76(v10)
B12
ParallelMove rdi <- C, rsi <- fp[-3]
v8 <- StaticCall:80( _Uri@0150898.<0> v0, v5 T{_GrowableList}, result_type = T{_Uri}) T{_Uri}
ParallelMove rax <- rax
DartReturn:82(v8)
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rsi, fp[-2] <- rsi
v6 <- LoadField(v4 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
v13 <- LoadIndexed([_List] v4, v11 T{_Smi}) T{*?}
Branch if StrictCompare:16(===, v13, v14) goto (2, 3)
B2
ParallelMove rcx <- C goto:26 B4
B3
ParallelMove rcx <- C goto:28 B4
B4
v335 <- BoxInt64(v15) [0, 1] T{_Smi}
ParallelMove rsi <- rdx
v279 <- BinarySmiOp:30(<< [tr], v335 T{_Smi}, v82) [0, 2] T{_Smi}
ParallelMove rdi <- rsi
v17 <- BinarySmiOp:38(+ [tr], v279 T{_Smi}, v11) [4, 6] T{_Smi}
v18 <- LoadIndexed([_List] v4, v17) T{*?}
Branch if StrictCompare:40(===, v18, v19) goto (5, 6)
B5
ParallelMove rsi <- rsi
v104 <- BinarySmiOp:32(+ [tr], v279 T{_Smi}, v77) [5, 7] T{_Smi}
v105 <- LoadIndexed([_List] v4, v104) T{*?}
ParallelMove rsi <- rax
v106 <- BinarySmiOp:34(- [tr], v6, v105) [-4611686018427387903, 4611686018427387903] T{_Smi}
v107 <- LoadIndexedUnsafe(rbp[v106 + 8]) T{String??}
ParallelMove rdx <- rdx
v108 <- BinarySmiOp:36(+ [tr], v335 T{_Smi}, v82) [1, 2] T{_Smi}
ParallelMove rdx <- rdx
v337 <- UnboxInt64([non-speculative], v108) [1, 2] int64
ParallelMove rdx <- rcx, rcx <- rdx goto:50 B7
B6
ParallelMove rdx <- C, rcx <- rcx goto:52 B7
B7
ParallelMove fp[-1] <- rdx
v338 <- BoxInt64(v21) [0, 2] T{_Smi}
ParallelMove rdi <- rsi
v280 <- BinarySmiOp:54(<< [tr], v338 T{_Smi}, v82) [0, 4] T{_Smi}
ParallelMove rdi <- rdi
v23 <- BinarySmiOp:62(+ [tr], v280 T{_Smi}, v11) [4, 8] T{_Smi}
v24 <- LoadIndexed([_List] v4, v23) T{*?}
Branch if StrictCompare:64(===, v24, v25) goto (8, 9)
B8
ParallelMove rsi <- rsi
v103 <- BinarySmiOp:60(+ [tr], v338 T{_Smi}, v82) [1, 3] T{_Smi}
ParallelMove rsi <- rsi
v340 <- UnboxInt64([non-speculative], v103) [1, 3] int64
ParallelMove rcx <- rsi goto:74 B10
B9
B10
v341 <- BoxInt64(v26) [0, 3] T{_Smi}
ParallelMove rdi <- rsi
v281 <- BinarySmiOp:78(<< [tr], v341 T{_Smi}, v82) [0, 6] T{_Smi}
ParallelMove rdi <- rdi
v28 <- BinarySmiOp:86(+ [tr], v281 T{_Smi}, v11) [4, 10] T{_Smi}
v29 <- LoadIndexed([_List] v4, v28) T{*?}
Branch if StrictCompare:88(===, v29, v30) goto (11, 12)
B11
ParallelMove rsi <- rsi
v98 <- BinarySmiOp:84(+ [tr], v341 T{_Smi}, v82) [1, 4] T{_Smi}
ParallelMove rsi <- rsi
v343 <- UnboxInt64([non-speculative], v98) [1, 4] int64
ParallelMove rcx <- rsi goto:98 B13
B12
B13
v344 <- BoxInt64(v31) [0, 4] T{_Smi}
ParallelMove rdi <- rsi
v282 <- BinarySmiOp:102(<< [tr], v344 T{_Smi}, v82) [0, 8] T{_Smi}
ParallelMove rdi <- rdi
v33 <- BinarySmiOp:110(+ [tr], v282 T{_Smi}, v11) [4, 12] T{_Smi}
v34 <- LoadIndexed([_List] v4, v33) T{*?}
Branch if StrictCompare:112(===, v34, v35) goto (14, 15)
B14
ParallelMove rsi <- rsi
v93 <- BinarySmiOp:108(+ [tr], v344 T{_Smi}, v82) [1, 5] T{_Smi}
ParallelMove rsi <- rsi
v346 <- UnboxInt64([non-speculative], v93) [1, 5] int64
ParallelMove rcx <- rsi goto:122 B16
B15
B16
v347 <- BoxInt64(v36) [0, 5] T{_Smi}
ParallelMove rsi <- rsi
v252 <- BinarySmiOp:126(<< [tr], v347 T{_Smi}, v82) [0, 10] T{_Smi}
ParallelMove rcx <- rsi
v38 <- BinarySmiOp:134(+ [tr], v252 T{_Smi}, v11) [4, 14] T{_Smi}
v39 <- LoadIndexed([_List] v4, v38) T{*?}
Branch if StrictCompare:136(===, v39, v40) goto (17, 18)
B17
ParallelMove rsi <- rsi
v84 <- BinarySmiOp:128(+ [tr], v252 T{_Smi}, v77) [5, 15] T{_Smi}
v85 <- LoadIndexed([_List] v4, v84) T{*?}
ParallelMove rax <- rax
v86 <- BinarySmiOp:130(- [tr], v6, v85) [-4611686018427387903, 4611686018427387903] T{_Smi}
v87 <- LoadIndexedUnsafe(rbp[v86 + 8]) T{String??}
ParallelMove rdi <- rcx goto:146 B23
B18
ParallelMove rdi <- C goto:148 B23
B23
CheckStackOverflow:178(stack=0, loop=0)
Branch if StrictCompare:180(===, v41, v0) goto (24, 25)
B24
ParallelMove r8 <- C, rdi <- rdx goto:194 B26
B25
v251 <- LoadField(v41 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rax <- rax
v352 <- UnboxInt64([non-speculative], v251 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdi <- rdi, rsi <- rax
v48 <- StaticCall:190( _makeScheme@0150898<0> v41 T{String?}, v352 T{_Smi}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove r8 <- rax, rdi <- fp[-1] goto:196 B26
B26
ParallelMove fp[-3] <- r8
Branch if StrictCompare:10(===, v20 T{String??}, v0 T{Null?}) goto (108, 109)
B108
ParallelMove rdx <- C goto:22 B29
B109
v272 <- LoadField(v20 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rax <- rax
v353 <- UnboxInt64([non-speculative], v272 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdx <- rax goto:24 B29
B29
ParallelMove rdi <- rdi, rsi <- C, rdx <- rdx
v52 <- StaticCall:204( _makeHost@0150898<0> v20, v356 T{_Smi}, v235 T{_Smi}) T{String??}
ParallelMove rax <- rax, r8 <- fp[-3]
ParallelMove fp[-1] <- rax
v407 <- LoadClassId(<non-smi> v49) int64
MoveArgument(sp[1] <- v49)
MoveArgument(sp[0] <- v56)
ParallelMove rcx <- rcx
v57 <- DispatchTableCall( cid=v407 String.==<0>, v49, v56) T{bool}
ParallelMove rcx <- rax, rax <- fp[-1]
Branch if StrictCompare:236(===, v52, v0) goto (31, 38)
B31
Branch if StrictCompare:258(===, v57 T{bool}, v54) goto (33, 39)
BoolTest
B33
ParallelMove rcx <- C goto:292 B40
B39
B38
B37
ParallelMove rcx <- rax goto:294 B40
B40
ParallelMove fp[-1] <- rcx
v59 <- StrictCompare:296(!==, v58, v0) T{bool}
ParallelMove rdi <- C, rsi <- C, rdx <- C, rbx <- fp[-2], r8 <- rax, r9 <- r9
v61 <- StaticCall:302( _makePath@0150898<0> v0, v356 T{_Smi}, v356 T{_Smi}, v3, v49, v59 T{bool}, result_type = T{!null}) T{String}
ParallelMove rcx <- rax, rax <- fp[-3]
ParallelMove fp[-2] <- rcx
v155 <- LoadField(v49 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v155, v9 T{_Smi}) T{bool} goto (41, 48)
B41
ParallelMove rdx <- fp[-1]
Branch if StrictCompare:312(===, v58, v0) goto (42, 49)
B42
ParallelMove rdi <- rcx, rsi <- C
v71 <- StaticCall:318( startsWith<0> v61, v70, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:322(!==, v71 T{bool}, v54) goto (44, 50)
BoolTest
B44
ParallelMove rdi <- fp[-2], rsi <- C
v75 <- StaticCall:350( _normalizeRelativePath@0150898<0> v61, v73 T{bool}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:370 B51
B50
B49
B48
B47
ParallelMove rdi <- fp[-2]
v63 <- StaticCall:366( _removeDotSegments@0150898<0> v61, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:372 B51
B51
ParallelMove fp[-2] <- rcx
Branch if StrictCompare:374(===, v58, v0) goto (52, 55)
B52
ParallelMove rdi <- rcx, rsi <- C
v69 <- StaticCall:378( startsWith<0> v64, v68, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:382(===, v69 T{bool}, v54) goto (53, 56)
BoolTest
B53
ParallelMove rdx <- C goto:402 B57
B56
B55
B54
ParallelMove rdx <- fp[-1] goto:404 B57
B57
ParallelMove fp[-1] <- rdx
v67 <- AllocateObject:406(cls=_Uri, <not-aliased>) T{_Uri}
ParallelMove rax <- rax, rcx <- C
StoreField(v67 T{_Uri} . _text@0150898 = v137 T{Sentinel~}, NoStoreBarrier)
StoreField(v67 T{_Uri} . pathSegments = v137 T{Sentinel~}, NoStoreBarrier)
StoreField(v67 T{_Uri} . hashCode = v137 T{Sentinel~}, NoStoreBarrier)
ParallelMove rcx <- fp[-3]
StoreField(v67 T{_Uri} . scheme = v49 T{String}, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v67 T{_Uri} . _userInfo@0150898 = v50 T{_OneByteString}, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreField(v67 T{_Uri} . _host@0150898 = v66 T{String??}, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreField(v67 T{_Uri} . path = v64 T{String}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:410(v67)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax
v3 <- StaticCall:10( _mayContainDotSegments@0150898<0> v2, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:14(!==, v3 T{bool}, v4) goto (3, 4)
BoolTest
B3
ParallelMove rax <- fp[-1]
DartReturn:20(v2)
B4
ParallelMove rax <- fp[-1]
ParallelMove rdi <- C, rsi <- C
v7 <- StaticCall:24( _GrowableList@0150898.<0> v5, v367 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax, rdi <- fp[-1]
ParallelMove fp[-2] <- rax
v421 <- LoadClassId(<non-smi> v2) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- C
v10 <- DispatchTableCall( cid=v421 String.split<0>, v2, v9) T{List<String>}
ParallelMove rdx <- rax
ParallelMove fp[-5] <- rdx
v254 <- LoadField(v10 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rsi <- rax
v327 <- UnboxInt64([non-speculative], v254) [0, 576460752303423487] int64
ParallelMove fp[-4] <- rsi
ParallelMove rax <- C, rcx <- C, rdi <- fp[-2] goto:124 B19
B19
  Loop 0
CheckStackOverflow:128(stack=0, loop=1)
v259 <- LoadField(v10 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rbx <- rbx
v329 <- UnboxInt64([non-speculative], v259) [0, 576460752303423487] int64
Branch if EqualityCompare(v327 T{_Smi} != v329 T{_Smi}) T{bool} goto (64, 65)
B65
  Loop 0
Branch if RelationalOp(>=, v364 T{int}, v329 T{_Smi}) T{bool} goto (6, 61)
B61
  Loop 0
ParallelMove rax <- rbx, rbx <- rcx
GenericCheckBound:10(v329 T{_Smi}, v364 T{int}) [-9223372036854775808, 9223372036854775807] int64
v269 <- LoadField(v10 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v369 <- LoadIndexed:10([_List] v269, v364 T{int}) T{String}
ParallelMove fp[-1] <- rbx
ParallelMove rax <- rcx
v139 <- BinaryInt64Op(+ [tr], v364 T{int}, v368 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- rax
v422 <- LoadClassId(<non-smi> v369) int64
MoveArgument(sp[1] <- v369)
MoveArgument(sp[0] <- v18)
ParallelMove rcx <- rcx
v19 <- DispatchTableCall( cid=v422 String.==<0>, v369, v18) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:48(===, v19 T{bool}, v4) goto (7, 14)
BoolTest
B7
  Loop 0
ParallelMove rcx <- fp[-2]
v245 <- LoadField(v7 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v339 <- UnboxInt64([non-speculative], v245 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v339 T{_Smi} != v367 T{_Smi}) T{bool} goto (8, 12)
B8
  Loop 0
ParallelMove rdx <- rax
v90 <- BinaryInt64Op(- [tr], v339 T{_Smi}, v368 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rax <- rax, rbx <- rdx
GenericCheckBound:14(v339 T{_Smi}, v90) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rcx, rsi <- rdx
StaticCall:16( set:length<0> v7 T{_GrowableList}, v90 T{int}, using unchecked entrypoint)
ParallelMove rax <- fp[-2]
v200 <- LoadField(v7 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v343 <- UnboxInt64([non-speculative], v200 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-6] <- rcx
Branch if EqualityCompare(v343 T{_Smi} == v367 T{_Smi}) T{bool} goto (9, 10)
B9
  Loop 0
v189 <- LoadField(v7 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v190 <- LoadField(v189 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rbx <- rbx
v347 <- UnboxInt64([non-speculative], v190 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v343 T{_Smi} == v347 T{_Smi}) T{bool} goto (43, 44)
B43
  Loop 0
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v7 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B45
B44
B45
  Loop 0
StoreField(v7 T{_GrowableList} . GrowableObjectArray.length = v45, NoStoreBarrier)
ParallelMove rax <- C, rbx <- rcx
GenericCheckBound:40(v368 T{_Smi}, v343 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v79 <- LoadField(v7 T{_GrowableList} . GrowableObjectArray.data) T{_List}
StoreIndexed:40([_List] v79, v343 T{_Smi}, v16 T{_OneByteString}, NoStoreBarrier)
ParallelMove  goto:82 B11
B10
  Loop 0
ParallelMove rdi <- rax
ParallelMove  goto:84 B11
B11
B12
  Loop 0
ParallelMove rdi <- rcx
ParallelMove  goto:92 B13
B13
  Loop 0
ParallelMove rax <- C, rsi <- rdi goto:118 B18
B14
  Loop 0
ParallelMove rdi <- fp[-2]
MoveArgument(sp[1] <- v20)
MoveArgument(sp[0] <- v369)
v21 <- StaticCall:96( ==<0> v20, v369, using unchecked entrypoint, recognized_kind = OneByteString_equality, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:100(===, v21 T{bool}, v4) goto (15, 16)
BoolTest
B15
  Loop 0
ParallelMove rax <- C, rsi <- fp[-2] goto:112 B17
B16
  Loop 0
ParallelMove rax <- fp[-2]
v173 <- LoadField(v7 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v178 <- LoadField(v7 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v179 <- LoadField(v178 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v353 <- UnboxInt64([non-speculative], v173 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-6] <- rcx
ParallelMove rbx <- rbx
v354 <- UnboxInt64([non-speculative], v179 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v353 T{_Smi} == v354 T{_Smi}) T{bool} goto (34, 35)
B34
  Loop 0
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v7 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B36
B35
B36
  Loop 0
ParallelMove rax <- rcx
v57 <- BinaryInt64Op(+ [tr], v353 T{_Smi}, v368 T{_Smi}) [1, 576460752303423488] int64
v355 <- BoxInt64(v57) [1, 576460752303423488] T{_Smi}
StoreField(v7 T{_GrowableList} . GrowableObjectArray.length = v355, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:40(v57 T{_Smi}, v353 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v60 <- LoadField(v7 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-1]
StoreIndexed:40([_List] v60, v353 T{_Smi}, v369)
ParallelMove rax <- C goto:114 B17
B17
B18
  Loop 0
ParallelMove rax <- rax, rcx <- fp[-3], rdi <- rsi, rdx <- fp[-5], rsi <- fp[-4] goto:126 B19
B6
ParallelMove rsi <- rdi
Branch if StrictCompare:132(===, v12 T{bool}, v4) goto (20, 21)
BoolTest
B20
v162 <- LoadField(v7 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v167 <- LoadField(v7 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v168 <- LoadField(v167 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v332 <- UnboxInt64([non-speculative], v162 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-3] <- rax
ParallelMove rdx <- rdx
v333 <- UnboxInt64([non-speculative], v168 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v332 T{_Smi} == v333 T{_Smi}) T{bool} goto (25, 26)
B25
ParallelMove rdi <- rsi
StaticCall:26( _growToNextCapacity@0150898<0> v7 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B27
B26
B27
ParallelMove rax <- rcx
v37 <- BinaryInt64Op(+ [tr], v332 T{_Smi}, v368 T{_Smi}) [1, 576460752303423488] int64
v334 <- BoxInt64(v37) [1, 576460752303423488] T{_Smi}
StoreField(v7 T{_GrowableList} . GrowableObjectArray.length = v334, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:40(v37 T{_Smi}, v332 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v40 <- LoadField(v7 T{_GrowableList} . GrowableObjectArray.data) T{_List}
StoreIndexed:40([_List] v40, v332 T{_Smi}, v16 T{_OneByteString}, NoStoreBarrier)
ParallelMove  goto:144 B22
B21
ParallelMove rdi <- rsi
ParallelMove  goto:146 B22
B22
ParallelMove rdi <- rdi, rsi <- C
v15 <- StaticCall:148( join<0> v7, v9, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:150(v15)
B64
ParallelMove rax <- rdx
v141 <- AllocateObject:26(cls=ConcurrentModificationError, <not-aliased>) T{ConcurrentModificationError}
ParallelMove rcx <- rax, rax <- fp[-5]
StoreField(v141 T{ConcurrentModificationError} . modifiedObject = v10 T{_GrowableList}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:32(v141)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-3] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v125 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove fp[-2] <- rax
ParallelMove rcx <- rax
v164 <- UnboxInt64([non-speculative], v125 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-1] <- rcx
Branch if EqualityCompare(v164 T{_Smi} == v175 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:22(v58)
B4
Branch if EqualityCompare(v164 T{_Smi} == v176 T{_Smi}) T{bool} goto (5, 6)
B5
ParallelMove rax <- rcx, rbx <- C
GenericCheckBound:36(v164 T{_Smi}, v175 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v61 <- LoadField(v2 . GrowableObjectArray.data) T{_List}
v177 <- LoadIndexed:36([_List] v61, v175 T{_Smi}) T{X0?}
MoveArgument(sp[0] <- v177 T{X0?})
v57 <- StaticCall:38( _interpolateSingle@0150898<0> v177 T{X0?}) T{String}
ParallelMove rax <- rax
DartReturn:40(v57)
B6
MoveArgument(sp[0] <- v4 T{_OneByteString})
v119 <- StaticCall:10( get:isEmpty<0> v4 T{_OneByteString}, recognized_kind = StringBaseIsEmpty, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax
v120 <- BooleanNegate(v119 T{bool}) T{bool}
Branch if StrictCompare:48(===, v120 T{bool}, v8) goto (7, 8)
BoolTest
B7
ParallelMove rdi <- fp[-3]
v55 <- StaticCall:54( _joinWithSeparator@0150898<0> v2, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:56(v55)
B8
ParallelMove rdi <- fp[-3]
v63 <- LoadField:242(v2 . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rax
v167 <- UnboxInt64:242([non-speculative], v63) [0, 576460752303423487] int64
v65 <- LoadField:242(v2 . GrowableObjectArray.data) T{_List}
ParallelMove r9 <- C, r8 <- C, rsi <- fp[-1] goto:242 B29
B29
  Loop 1
CheckStackOverflow:240(stack=0, loop=1)
Branch if RelationalOp(<, v12, v164 T{_Smi}) T{bool} goto (28, 30)
B28
  Loop 1
ParallelMove rax <- rcx, rbx <- r9
GenericCheckBound:68(v167 T{_Smi}, v12) [-9223372036854775808, 9223372036854775807] int64
v178 <- LoadIndexed:68([_List] v65, v12 T{int}) T{X0}
v85 <- LoadClassId(v178 T{X0}) [1, 617] int64
Branch if EqualityCompare(v85 == v86) T{bool} goto (10, 11)
B10
  Loop 1
v114 <- LoadField(v178 T{_OneByteString} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rbx <- rbx
v169 <- UnboxInt64([non-speculative], v114 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove r8 <- r8
v53 <- BinaryInt64Op(+ [tr], v13, v169 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- r9
v54 <- BinaryInt64Op(+ [tr], v12 T{int}, v176 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- r9, r8 <- r8 goto:238 B29
B11
ParallelMove rax <- r9 goto:126 B14
B14
  Loop 0
CheckStackOverflow:124(stack=0, loop=2)
ParallelMove rdx <- rax
v48 <- BinaryInt64Op(+ [tr], v20, v176 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v48 == v164 T{_Smi}) T{bool} goto (12, 13)
B13
  Loop 0
ParallelMove rax <- rcx, rbx <- rdx
GenericCheckBound:116(v167 T{_Smi}, v48) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rdx goto:122 B14
B12
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v6)
MoveArgument(sp[0] <- v125 T{_Smi})
v51 <- StaticCall:110( _concatRangeNative@0150898<0> v2, v6, v125 T{_Smi}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:112(v51)
B30
ParallelMove rdi <- rdi, rsi <- r8
v16 <- StaticCall:246( _concatAll@0150898<0> v2, v13, result_type = T{!null}) T{*}
ParallelMove rax <- rax
DartReturn:248(v16)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- AllocateObject:10(cls=StringBuffer) T{StringBuffer}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-2] <- rax
StaticCall:12( StringBuffer.<0> v3)
ParallelMove rcx <- fp[-1]
v15 <- LoadField(v2 . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v69 <- UnboxInt64([non-speculative], v15) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:14(v69 T{_Smi}, v74 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v17 <- LoadField(v2 . GrowableObjectArray.data) T{_List}
v75 <- LoadIndexed:14([_List] v17, v74 T{_Smi}) T{X0}
ParallelMove rdi <- fp[-2], rsi <- rsi
StaticCall:16( write<0> v3, v75 T{X0}, using unchecked entrypoint)
ParallelMove rbx <- C goto:42 B5
B5
  Loop 0
ParallelMove fp[-3] <- rbx
CheckStackOverflow:46(stack=0, loop=1)
v53 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v71 <- UnboxInt64([non-speculative], v53 T{_Smi}) [0, 576460752303423487] int64
Branch if RelationalOp(<, v7, v71 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
MoveArgument(sp[0] <- v12 T{_OneByteString})
v30 <- StaticCall:12( get:isEmpty<0> v12 T{_OneByteString}, recognized_kind = StringBaseIsEmpty, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:16(===, v30 T{bool}, v10 T{bool}) goto (10, 11)
BoolTest
B10
B11
  Loop 0
ParallelMove rdi <- fp[-2]
StaticCall:26( _consumeBuffer@0150898<0> v3 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-2], rsi <- C
StaticCall:28( _addPart@0150898<0> v3 T{StringBuffer}, v12 T{_OneByteString}, using unchecked entrypoint)
ParallelMove  goto:30 B12
B12
  Loop 0
v19 <- LoadField(v2 . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v72 <- UnboxInt64([non-speculative], v19) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- rdx
GenericCheckBound:36(v72 T{_Smi}, v7) [-9223372036854775808, 9223372036854775807] int64
v21 <- LoadField(v2 . GrowableObjectArray.data) T{_List}
v77 <- LoadIndexed:36([_List] v21, v7 T{int}) T{X0}
MoveArgument(sp[0] <- v77 T{X0})
v42 <- StaticCall:10( _interpolateSingle@0150898<0> v77 T{X0}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-4] <- rax
MoveArgument(sp[0] <- v42)
v43 <- StaticCall:12( get:isEmpty<0> v42, recognized_kind = StringBaseIsEmpty, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:16(===, v43 T{bool}, v10 T{bool}) goto (15, 16)
BoolTest
B15
B16
  Loop 0
ParallelMove rdi <- fp[-2]
StaticCall:26( _consumeBuffer@0150898<0> v3 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-2], rsi <- fp[-4]
StaticCall:28( _addPart@0150898<0> v3 T{StringBuffer}, v42, using unchecked entrypoint)
ParallelMove  goto:30 B17
B17
  Loop 0
ParallelMove rax <- fp[-3]
v14 <- BinaryInt64Op(+ [tr], v7 T{int}, v76 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rax goto:44 B5
B4
MoveArgument(sp[0] <- v3)
v11 <- StaticCall:48( toString<0> v3, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:50(v11)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax, rsi <- C
v4 <- StaticCall:10( startsWith<0> v2, v3, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v4 T{bool}, v5) goto (3, 4)
BoolTest
B3
ParallelMove rax <- C
DartReturn:20(v5)
B4
ParallelMove rdi <- fp[-1]
v21 <- LoadClassId(<non-smi> v2) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- C
v7 <- DispatchTableCall( cid=v21 String.indexOf<0>, v2, v6) int64
ParallelMove rax <- rax
v10 <- EqualityCompare(v7 T{int} != v14) T{bool}
ParallelMove rax <- rcx
DartReturn:32(v10 T{bool})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax
v4 <- StaticCall:10( _mayContainDotSegments@0150898<0> v2, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:14(!==, v4 T{bool}, v5) goto (3, 7)
BoolTest
B3
ParallelMove rax <- fp[-2]
Branch if StrictCompare:22(!==, v3 T{bool}, v5) goto (4, 5)
BoolTest
B4
ParallelMove rdi <- fp[-1]
v41 <- StaticCall:28( _escapeScheme@0150898<0> v2, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:34 B6
B5
ParallelMove rax <- fp[-1] goto:36 B6
B6
ParallelMove rax <- rax
DartReturn:38(v40)
B7
ParallelMove rcx <- fp[-1], rax <- fp[-2]
ParallelMove rdi <- C, rsi <- C
v8 <- StaticCall:42( _GrowableList@0150898.<0> v6, v466 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax, rdi <- fp[-1]
ParallelMove fp[-3] <- rax
v547 <- LoadClassId(<non-smi> v2) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- C
v11 <- DispatchTableCall( cid=v547 String.split<0>, v2, v10) T{List<String>}
ParallelMove rcx <- rax
ParallelMove fp[-6] <- rcx
v310 <- LoadField(v11 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rax
v417 <- UnboxInt64([non-speculative], v310) [0, 576460752303423487] int64
ParallelMove fp[-5] <- rdx
ParallelMove r8 <- C, rsi <- C, rdi <- fp[-3] goto:144 B22
B22
  Loop 0
ParallelMove fp[-8] <- r8
CheckStackOverflow:148(stack=0, loop=1)
v315 <- LoadField(v11 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v419 <- UnboxInt64([non-speculative], v315) [0, 576460752303423487] int64
Branch if EqualityCompare(v417 T{_Smi} != v419 T{_Smi}) T{bool} goto (91, 92)
B92
  Loop 0
Branch if RelationalOp(>=, v463 T{int}, v419 T{_Smi}) T{bool} goto (9, 88)
B88
  Loop 0
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:10(v419 T{_Smi}, v463 T{int}) [-9223372036854775808, 9223372036854775807] int64
v325 <- LoadField(v11 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v470 <- LoadIndexed:10([_List] v325, v463 T{int}) T{String}
ParallelMove fp[-1] <- rbx
ParallelMove rsi <- rsi
v192 <- BinaryInt64Op(+ [tr], v463 T{int}, v467 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-4] <- rsi
MoveArgument(sp[1] <- v21)
MoveArgument(sp[0] <- v470)
v31 <- StaticCall:62( ==<0> v21, v470, using unchecked entrypoint, recognized_kind = OneByteString_equality, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:66(===, v31 T{bool}, v5) goto (10, 17)
BoolTest
B10
  Loop 0
ParallelMove rdi <- fp[-3]
v268 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v437 <- UnboxInt64([non-speculative], v268 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v437 T{_Smi} != v466 T{_Smi}) T{bool} goto (11, 14)
B11
  Loop 0
Branch if RelationalOp(>, v437 T{_Smi}, v466 T{_Smi}) T{bool} goto (79, 80)
B79
  Loop 0
ParallelMove rcx <- rax
v145 <- BinaryInt64Op(- [tr], v437 T{_Smi}, v467 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:26(v437 T{_Smi}, v145) [-9223372036854775808, 9223372036854775807] int64
v149 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v471 <- LoadIndexed:26([_List] v149, v145 T{int}) T{String}
v549 <- LoadClassId(<non-smi> v471 T{String}) int64
MoveArgument(sp[1] <- v471 T{String})
MoveArgument(sp[0] <- v21)
ParallelMove rcx <- rcx
v39 <- DispatchTableCall( cid=v549 String.==<0>, v471 T{String}, v21) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:86(!==, v39 T{bool}, v5) goto (12, 15)
BoolTest
B12
  Loop 0
ParallelMove rcx <- fp[-3]
v253 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v442 <- UnboxInt64([non-speculative], v253 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rdx <- rax
v128 <- BinaryInt64Op(- [tr], v442 T{_Smi}, v467 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rax <- rax, rbx <- rdx
GenericCheckBound:14(v442 T{_Smi}, v128) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rcx, rsi <- rdx
StaticCall:16( set:length<0> v8 T{_GrowableList}, v128 T{int}, using unchecked entrypoint)
ParallelMove rax <- C, rdi <- fp[-3] goto:110 B16
B15
B14
B13
  Loop 0
v242 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v247 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v248 <- LoadField(v247 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v447 <- UnboxInt64([non-speculative], v242 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-7] <- rcx
ParallelMove rbx <- rbx
v448 <- UnboxInt64([non-speculative], v248 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v447 T{_Smi} == v448 T{_Smi}) T{bool} goto (67, 68)
B67
  Loop 0
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v8 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B69
B68
B69
  Loop 0
ParallelMove rax <- rcx
v114 <- BinaryInt64Op(+ [tr], v447 T{_Smi}, v467 T{_Smi}) [1, 576460752303423488] int64
v449 <- BoxInt64(v114) [1, 576460752303423488] T{_Smi}
StoreField(v8 T{_GrowableList} . GrowableObjectArray.length = v449, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:40(v114 T{_Smi}, v447 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v117 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.data) T{_List}
StoreIndexed:40([_List] v117, v447 T{_Smi}, v21 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- C goto:112 B16
B16
  Loop 0
ParallelMove r8 <- rax goto:138 B21
B17
  Loop 0
ParallelMove rdi <- fp[-3]
MoveArgument(sp[1] <- v32)
MoveArgument(sp[0] <- v470)
v33 <- StaticCall:116( ==<0> v32, v470, using unchecked entrypoint, recognized_kind = OneByteString_equality, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:120(===, v33 T{bool}, v5) goto (18, 19)
BoolTest
B18
  Loop 0
ParallelMove rax <- C, rdi <- fp[-3] goto:132 B20
B19
  Loop 0
ParallelMove rax <- fp[-3]
v231 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v236 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v237 <- LoadField(v236 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v454 <- UnboxInt64([non-speculative], v231 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-7] <- rcx
ParallelMove rbx <- rbx
v455 <- UnboxInt64([non-speculative], v237 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v454 T{_Smi} == v455 T{_Smi}) T{bool} goto (58, 59)
B58
  Loop 0
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v8 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B60
B59
B60
  Loop 0
ParallelMove rax <- rcx
v95 <- BinaryInt64Op(+ [tr], v454 T{_Smi}, v467 T{_Smi}) [1, 576460752303423488] int64
v456 <- BoxInt64(v95) [1, 576460752303423488] T{_Smi}
StoreField(v8 T{_GrowableList} . GrowableObjectArray.length = v456, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:40(v95 T{_Smi}, v454 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v98 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-1]
StoreIndexed:40([_List] v98, v454 T{_Smi}, v470)
ParallelMove rax <- C goto:134 B20
B20
  Loop 0
ParallelMove r8 <- rax goto:140 B21
B21
  Loop 0
ParallelMove r8 <- r8, rsi <- fp[-4], rcx <- fp[-6], rdx <- fp[-5] goto:146 B22
B9
v226 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v420 <- UnboxInt64([non-speculative], v226 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v420 T{_Smi} == v466 T{_Smi}) T{bool} goto (26, 24)
B26
B24
Branch if EqualityCompare(v420 T{_Smi} == v467 T{_Smi}) T{bool} goto (23, 29)
B23
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:168(v420 T{_Smi}, v466 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v44 <- LoadField(v8 . GrowableObjectArray.data) T{_List}
v468 <- LoadIndexed:168([_List] v44, v466 T{_Smi}) T{String}
MoveArgument(sp[0] <- v468 T{String})
v28 <- StaticCall:170( get:isEmpty<0> v468 T{String}, recognized_kind = StringBaseIsEmpty, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:174(===, v28 T{bool}, v5) goto (27, 30)
BoolTest
B27
B25
ParallelMove rax <- C
DartReturn:192(v29)
B30
B29
B28
Branch if StrictCompare:206(===, v13 T{bool}, v5) goto (33, 31)
BoolTest
B33
B31
ParallelMove rdi <- fp[-3]
v20 <- StaticCall:210( get:last<0> v8, result_type = T{!null}) T{X0}
ParallelMove rax <- rax
v548 <- LoadClassId(<non-smi> v20) int64
MoveArgument(sp[1] <- v20)
MoveArgument(sp[0] <- v21)
ParallelMove rcx <- rcx
v22 <- DispatchTableCall( cid=v548 String.==<0>, v20, v21) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:216(===, v22 T{bool}, v5) goto (34, 35)
BoolTest
B34
B32
v215 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v220 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v221 <- LoadField(v220 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v426 <- UnboxInt64([non-speculative], v215 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-4] <- rcx
ParallelMove rbx <- rbx
v427 <- UnboxInt64([non-speculative], v221 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v426 T{_Smi} == v427 T{_Smi}) T{bool} goto (45, 46)
B45
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v8 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B47
B46
B47
ParallelMove rax <- rdx
v64 <- BinaryInt64Op(+ [tr], v426 T{_Smi}, v467 T{_Smi}) [1, 576460752303423488] int64
v428 <- BoxInt64(v64) [1, 576460752303423488] T{_Smi}
StoreField(v8 T{_GrowableList} . GrowableObjectArray.length = v428, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rdx
GenericCheckBound:40(v64 T{_Smi}, v426 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v67 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.data) T{_List}
StoreIndexed:40([_List] v67, v426 T{_Smi}, v26 T{_OneByteString}, NoStoreBarrier)
ParallelMove  goto:238 B36
B35
ParallelMove rcx <- fp[-3]
ParallelMove  goto:240 B36
B36
Branch if StrictCompare:244(!==, v3 T{bool}, v5) goto (37, 38)
BoolTest
B37
v46 <- LoadField(v8 . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v431 <- UnboxInt64([non-speculative], v46) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:250(v431 T{_Smi}, v466 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v48 <- LoadField(v8 . GrowableObjectArray.data) T{_List}
v469 <- LoadIndexed:250([_List] v48, v466 T{_Smi}) T{String}
ParallelMove rdi <- rdi
v25 <- StaticCall:252( _escapeScheme@0150898<0> v469 T{String}, result_type = T{!null}) T{String}
ParallelMove rcx <- rax, rdi <- fp[-3]
v50 <- LoadField(v8 . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v433 <- UnboxInt64([non-speculative], v50) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:254(v433 T{_Smi}, v466 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v52 <- LoadField(v8 . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- rcx
StoreIndexed:254([_List] v52, v466 T{_Smi}, v25)
ParallelMove  goto:260 B39
B38
ParallelMove rdi <- rcx
ParallelMove  goto:262 B39
B39
ParallelMove rdi <- rdi, rsi <- C
v23 <- StaticCall:264( join<0> v8, v10, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:266(v23)
B80
v142 <- StaticCall:32( noElement<0> ) T{StateError}
ParallelMove rax <- rax
Throw:34(v142)
B91
ParallelMove rax <- rcx
v194 <- AllocateObject:26(cls=ConcurrentModificationError, <not-aliased>) T{ConcurrentModificationError}
ParallelMove rcx <- rax, rax <- fp[-6]
StoreField(v194 T{ConcurrentModificationError} . modifiedObject = v11 T{_GrowableList}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:32(v194)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
v2 <- AllocateObject:10(cls=StateError) T{StateError}
ParallelMove rax <- rax, rcx <- C
StoreField(v2 T{StateError} . message = v3 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v2)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v108 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rsi <- rax
v158 <- UnboxInt64([non-speculative], v108 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(>=, v158 T{_Smi}, v169 T{_Smi}) T{bool} goto (3, 17)
B3
ParallelMove rax <- rsi, rbx <- C
t0 <- GenericCheckBound:20(v158 T{_Smi}, v170 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v75 <- LoadClassId(v2 T{_StringBase}) [93, 94] T{_Smi}
Branch if StrictCompare:20(===, v75, v61 T{_Smi}) goto (31, 32)
B31
v79 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v170 T{_Smi}) [0, 255] int64
ParallelMove rax <- rax goto:20 B30
B32
v77 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v170 T{_Smi}) [0, 65535] int64
ParallelMove rax <- rax goto:20 B30
B30
ParallelMove rax <- rax
v88 <- BinaryInt64Op(| [tr], v78 T{_Smi}, v171 T{_Smi}) [0, 65535] int64
Branch if RelationalOp(<=, v172 T{_Smi}, v88) T{bool} goto (36, 43)
B36
Branch if RelationalOp(<=, v88, v173 T{_Smi}) T{bool} goto (4, 41)
B4
ParallelMove r10 <- C, r9 <- C, r8 <- C goto:122 B15
B15
  Loop 0
ParallelMove fp[-1] <- r10
CheckStackOverflow:126(stack=0, loop=1)
Branch if RelationalOp(<, v13, v158 T{_Smi}) T{bool} goto (5, 6)
B5
  Loop 0
Branch if StrictCompare:50(===, v75 T{_Smi}, v61 T{_Smi}) goto (24, 25)
B24
  Loop 0
v57 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v13 T{int}) [0, 255] int64
ParallelMove rcx <- rax goto:50 B23
B25
  Loop 0
v55 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v13 T{int}) [0, 65535] int64
ParallelMove rcx <- rax goto:50 B23
B23
  Loop 0
Branch if EqualityCompare(v56 T{_Smi} == v175 T{_Smi}) T{bool} goto (7, 8)
B8
  Loop 0
Branch if RelationalOp(>, v56 T{_Smi}, v176 T{_Smi}) T{bool} goto (11, 9)
B9
  Loop 0
ParallelMove r12 <- rcx
v25 <- ShiftInt64Op(>> [tr], v56 T{_Smi}, v177 T{_Smi}) [0, 4095] int64
ParallelMove rax <- C, rbx <- r12
GenericCheckBound:86(v178 T{_Smi}, v25) [-9223372036854775808, 9223372036854775807] int64
v179 <- LoadIndexed:86([_List] v23, v25 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- rcx
v201 <- IntConverter(int64->uint32[tr], v56 T{_Smi}) uint32
ParallelMove rcx <- rcx
v28 <- BinaryUint32Op(& [tr], v201 T{_Smi}, v204 T{_Smi}) [0, 15] uint32
ParallelMove rcx <- rcx
v202 <- IntConverter(uint32->int64, v28) int64
ParallelMove rcx <- rcx
ParallelMove rbx <- C
v29 <- ShiftUint32Op(<< [tr], v205 T{_Smi}, v202 T{_Smi}) [1, 32768] uint32
ParallelMove rax <- rax
v164 <- UnboxUint32([tr], [non-speculative], v179 T{int?}) [0, 4294967295] uint32
ParallelMove rax <- rax
v30 <- BinaryUint32Op(& [tr], v164, v29) [0, 32768] uint32
ParallelMove rax <- rax
v203 <- IntConverter(uint32->int64, v30) int64
Branch if EqualityCompare(v203 T{_Smi} == v170 T{_Smi}) T{bool} goto (12, 14)
B14
  Loop 0
ParallelMove r10 <- r10
v32 <- BinaryInt64Op(+ [tr], v13 T{int}, v174 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- r10 goto:124 B15
B12
B11
B10
B7
v160 <- BoxInt64(v13 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v160 T{int})
ParallelMove rdi <- rdx, rsi <- C
v35 <- StaticCall:64( substring<0> v2, v170 T{_Smi}, v160 T{int}, using unchecked entrypoint) T{String}
ParallelMove rbx <- C, r10 <- C, rax <- rax
ParallelMove fp[-3] <- rax
v34 <- CreateArray:62(v0, v33) T{_List}
ParallelMove rcx <- rax, rax <- fp[-3]
ParallelMove fp[-4] <- rcx
StoreIndexed([_List] v34, v9, v35, NoStoreBarrier)
StoreIndexed([_List] v34, v12, v36, NoStoreBarrier)
ParallelMove rax <- fp[-1]
v37 <- BinaryInt64Op(+ [tr], v13 T{int}, v174 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-2], rsi <- rax
v38 <- StaticCall:68( substring<0> v2, v37, using unchecked entrypoint) T{String}
ParallelMove rdx <- fp[-4], rax <- rax
StoreIndexed([_List] v34, v4, v38)
MoveArgument(sp[0] <- v34)
v39 <- StaticCall:70( _interpolate@0150898<0> v34, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:72(v39)
B6
B13
B41
B43
B18
B17
B16
B19
ParallelMove rax <- fp[-2]
DartReturn:146(v2)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path uint32 shift operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
v6 <- LoadField(v4 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v8 <- BinarySmiOp:4(- [tr], v6, v7) [-2, 4611686018427387901] T{_Smi}
Branch if RelationalOp:6(<=, v9, v8) T{bool} goto (2, 3)
B2
v16 <- LoadIndexedUnsafe(rbp[v8 T{_Smi} + 8]) T{int??}
ParallelMove rsi <- rbx goto:20 B5
B3
ParallelMove rsi <- C goto:18 B5
B5
CheckStackOverflow:26(stack=0, loop=0)
v21 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v22 <- UnboxInt64([non-speculative], v21 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdi <- rax, rsi <- rsi, rdx <- rdx
v14 <- StaticCall:30( checkValidRange<0> v3, v12, v22 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-1], rsi <- fp[-2], rdx <- rax
v15 <- StaticCall:32( _substringUnchecked@0150898<0> v2, v3, v14, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:34(v15)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi
CheckStackOverflow:8(stack=0, loop=0)
Branch if EqualityCompare(v3 == v4) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:20(v16)
B4
Branch if EqualityCompare(v3 == v38 T{_Smi}) T{bool} goto (5, 8)
B5
v23 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rax <- rax
v37 <- UnboxInt64([non-speculative], v23 T{_Smi}) [0, 2305843009213693951] int64
Branch if EqualityCompare(v4 == v37 T{_Smi}) T{bool} goto (6, 9)
B6
ParallelMove rax <- rcx
DartReturn:46(v2)
B9
B8
B7
ParallelMove rax <- rsi
v10 <- BinaryInt64Op(+ [tr], v3, v39 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v10 == v4) T{bool} goto (10, 11)
B10
v35 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v35 T{int})
v13 <- StaticCall:70( []<0> v2, v35 T{int}, using unchecked entrypoint, recognized_kind = StringBaseCharAt, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:72(v13)
B11
v34 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rsi <- rax
v36 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v42 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v34 T{int})
MoveArgument(sp[0] <- v36 T{int})
ParallelMove rcx <- rdx
v12 <- DispatchTableCall( cid=v42 _StringBase._substringUncheckedNative<0>, v2, v34 T{int}, v36 T{int}) T{String}
ParallelMove rax <- rax
DartReturn:78(v12 T{String})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rsi, rsi <- r8, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx, fp[-4] <- rbx, fp[-5] <- r8, fp[-6] <- r9
CheckStackOverflow:8(stack=0, loop=0)
v77 <- LoadClassId(<non-smi> v6) int64
MoveArgument(sp[1] <- v6)
MoveArgument(sp[0] <- v8)
ParallelMove rcx <- rcx
v9 <- DispatchTableCall( cid=v77 String.==<0>, v6, v8) T{bool}
ParallelMove rax <- rax
ParallelMove fp[-8] <- rax
Branch if StrictCompare:16(===, v9 T{bool}, v10) goto (5, 4)
BoolTest
B5
ParallelMove rcx <- C goto:28 B3
B4
ParallelMove rcx <- fp[-6] goto:24 B3
B3
ParallelMove fp[-7] <- rcx
Branch if StrictCompare:30(===, v2, v0) goto (6, 7)
B6
ParallelMove rbx <- C, rdx <- C
v24 <- AllocateClosure:36(v23, v0) T{_Closure}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v22)
MoveArgument(sp[1] <- v5)
MoveArgument(sp[0] <- v24)
v25 <- StaticCall:38( map<1> v22, v5, v24, using unchecked entrypoint, result_type = T{MappedListIterable}) T{MappedListIterable}
ParallelMove rdi <- rax, rsi <- C
v26 <- StaticCall:40( join<0> v25, v17, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:48 B8
B7
MoveArgument(sp[1] <- v10)
MoveArgument(sp[0] <- v10)
ParallelMove rdi <- rdi, rsi <- fp[-2], rdx <- fp[-3], rbx <- C
v13 <- StaticCall:44( _normalizeOrSubstring@0150898<0> v2 T{String?}, v3, v4, v12, v10, v10, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:50 B8
B8
ParallelMove fp[-1] <- rax
v32 <- LoadField(v14 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v32, v35 T{_Smi}) T{bool} goto (9, 12)
B9
ParallelMove rcx <- fp[-8]
Branch if StrictCompare:64(===, v9 T{bool}, v10) goto (10, 11)
BoolTest
B10
ParallelMove rax <- C
DartReturn:70(v17)
B11
ParallelMove rdi <- rax goto:114 B19
B12
ParallelMove rcx <- fp[-7]
Branch if StrictCompare:78(===, v11 T{bool}, v10) goto (13, 16)
BoolTest
B13
ParallelMove rdi <- rax, rsi <- C
v18 <- StaticCall:82( startsWith<0> v14, v17, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:86(!==, v18 T{bool}, v10) goto (14, 17)
BoolTest
B14
MoveArgument(sp[1] <- v17)
MoveArgument(sp[0] <- v14)
v19 <- StaticCall:94( +<0> v17, v14, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:108 B18
B17
B16
B15
ParallelMove rax <- fp[-1] goto:110 B18
B18
ParallelMove rdi <- rax goto:116 B19
B19
ParallelMove rdi <- rdi, rsi <- fp[-5], rdx <- fp[-6]
v21 <- StaticCall:118( _normalizePath@0150898<0> v20, v6, v7, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:120(v21)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rdx, fp[-1] <- rdi, fp[-2] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v25 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v25, v28 T{_Smi}) T{bool} goto (3, 11)
B3
Branch if StrictCompare:20(!==, v4 T{bool}, v6) goto (4, 12)
BoolTest
B4
ParallelMove rdi <- rcx, rsi <- C
v9 <- StaticCall:26( startsWith<0> v2, v8, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:30(!==, v9 T{bool}, v6) goto (5, 13)
BoolTest
B5
ParallelMove rdi <- fp[-1], rsi <- C
v11 <- StaticCall:36( startsWith<0> v2, v10, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:40(!==, v11 T{bool}, v6) goto (7, 14)
BoolTest
B7
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
v14 <- StaticCall:68( _normalizeRelativePath@0150898<0> v2, v4 T{bool}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:70(v14)
B14
B13
B12
B11
B10
ParallelMove rdi <- fp[-1]
v7 <- StaticCall:90( _removeDotSegments@0150898<0> v2, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:92(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(String_concat) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{String})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove r9 <- rdi, rcx <- rsi, rax <- rdx, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
v8 <- LoadField(v6 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
v15 <- LoadIndexed([_List] v6, v9 T{_Smi}) T{*?}
Branch if StrictCompare:16(===, v15, v16) goto (2, 3)
B2
v36 <- LoadIndexed([_List] v6, v28 T{_Smi}) T{*?}
ParallelMove rdi <- rdx
v37 <- BinarySmiOp:10(- [tr], v8, v36) [-4611686018427387903, 4611686018427387903] T{_Smi}
v38 <- LoadIndexedUnsafe(rbp[v37 + 8]) T{bool}
ParallelMove r8 <- rsi, rsi <- C goto:26 B4
B3
ParallelMove r8 <- C, rsi <- C goto:28 B4
B4
v51 <- BoxInt64(v19) [0, 1] T{_Smi}
ParallelMove rdi <- rdi
v41 <- BinarySmiOp:30(<< [tr], v51 T{_Smi}, v33) [0, 2] T{_Smi}
ParallelMove rsi <- rdi
v21 <- BinarySmiOp:38(+ [tr], v41 T{_Smi}, v9) [4, 6] T{_Smi}
v22 <- LoadIndexed([_List] v6, v21) T{*?}
Branch if StrictCompare:40(===, v22, v23) goto (5, 6)
B5
ParallelMove rdi <- rdi
v29 <- BinarySmiOp:32(+ [tr], v41 T{_Smi}, v28) [5, 7] T{_Smi}
v30 <- LoadIndexed([_List] v6, v29) T{*?}
ParallelMove rdx <- rdx
v31 <- BinarySmiOp:34(- [tr], v8, v30) [-4611686018427387903, 4611686018427387903] T{_Smi}
v32 <- LoadIndexedUnsafe(rbp[v31 + 8]) T{bool}
ParallelMove rdx <- rsi goto:50 B8
B6
ParallelMove rdx <- C goto:52 B8
B8
CheckStackOverflow:58(stack=0, loop=0)
MoveArgument(sp[0] <- v24)
ParallelMove rdi <- r9, rsi <- rcx, rdx <- rax, rbx <- rbx, r8 <- r8
v25 <- StaticCall:60( _normalize@0150898<0> v2, v3, v4, v5, v18, v24) T{String??}
ParallelMove rax <- rax
Branch if StrictCompare:62(===, v25, v0) goto (9, 10)
B9
ParallelMove rcx <- fp[-3]
v50 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v50 T{int})
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
v27 <- StaticCall:68( substring<0> v2, v3, v50 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:74 B11
B10
B11
ParallelMove rax <- rax
DartReturn:78(v26)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove r13 <- rdi, r12 <- rdx, r9 <- rbx, fp[-2] <- r8, fp[-5] <- rdx, fp[-10] <- rdi, fp[-11] <- rbx
v9 <- LoadField(v7 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
v17 <- LoadIndexed([_List] v7, v15 T{_Smi}) T{*?}
Branch if StrictCompare:16(===, v17, v18) goto (2, 3)
B2
v124 <- LoadIndexed([_List] v7, v10 T{_Smi}) T{*?}
ParallelMove rax <- rax
v125 <- BinarySmiOp:10(- [tr], v9, v124) [-4611686018427387903, 4611686018427387903] T{_Smi}
v126 <- LoadIndexedUnsafe(rbp[v125 + 8]) T{bool}
ParallelMove r10 <- rcx goto:26 B5
B3
ParallelMove r10 <- C goto:28 B5
B5
ParallelMove fp[-4] <- r10
CheckStackOverflow:34(stack=0, loop=0)
v245 <- LoadField:328(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rax
v394 <- UnboxInt64:328([non-speculative], v245) [0, 2305843009213693951] int64
ParallelMove fp[-6] <- rdx
v247 <- LoadClassId:328(v2 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove fp[-7] <- rdi
v128 <- LoadField:328(v5 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rax
v395 <- UnboxInt64:328([non-speculative], v128) [0, 576460752303423487] int64
ParallelMove fp[-9] <- rcx
ParallelMove fp[-1] <- C, rax <- rsi, rbx <- rsi goto:328 B45
B45
  Loop 0
ParallelMove fp[-3] <- rax, fp[-8] <- rbx
CheckStackOverflow:326(stack=0, loop=1)
Branch if RelationalOp(<, v24, v4) T{bool} goto (44, 46)
B44
  Loop 0
ParallelMove rax <- rdx, rbx <- rbx, r8 <- rbx
t0 <- GenericCheckBound:44(v394 T{_Smi}, v24 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:44(===, v247, v199 T{_Smi}) goto (90, 91)
B90
  Loop 0
v251 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v24 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:44 B89
B91
  Loop 0
v249 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v24 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:44 B89
B89
  Loop 0
Branch if RelationalOp(<, v250 T{_Smi}, v410 T{_Smi}) T{bool} goto (6, 9)
B6
  Loop 0
ParallelMove rbx <- rax
v115 <- ShiftInt64Op(>> [tr], v250 T{_Smi}, v411 T{_Smi}) [0, 4095] int64
ParallelMove rax <- rcx, rbx <- rbx, r10 <- rbx, r12 <- rax
GenericCheckBound:56(v395 T{_Smi}, v115) [-9223372036854775808, 9223372036854775807] int64
v412 <- LoadIndexed:56([_List] v5, v115 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rbx <- r12
v497 <- IntConverter(int64->uint32[tr], v250 T{_Smi}) uint32
ParallelMove rbx <- rbx
v118 <- BinaryUint32Op(& [tr], v497 T{_Smi}, v508 T{_Smi}) [0, 15] uint32
ParallelMove rbx <- rbx
v498 <- IntConverter(uint32->int64, v118) int64
ParallelMove rcx <- rbx, rbx <- rcx
ParallelMove r10 <- C
v119 <- ShiftUint32Op(<< [tr], v509 T{_Smi}, v498 T{_Smi}) [1, 32768] uint32
ParallelMove rax <- rax
v397 <- UnboxUint32([tr], [non-speculative], v412 T{int}) [0, 4294967295] uint32
ParallelMove rax <- rax
v120 <- BinaryUint32Op(& [tr], v397, v119) [0, 32768] uint32
ParallelMove rax <- rax
v499 <- IntConverter(uint32->int64, v120) int64
Branch if EqualityCompare(v499 T{_Smi} != v415 T{_Smi}) T{bool} goto (7, 10)
B7
  Loop 0
ParallelMove rcx <- r8
v122 <- BinaryInt64Op(+ [tr], v24 T{int}, v414 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-1], rax <- fp[-3], rcx <- rcx goto:314 B43
B10
B9
  Loop 0
ParallelMove r12 <- rax, rbx <- rcx
ParallelMove  goto:82 B8
B8
  Loop 0
Branch if EqualityCompare(v250 T{_Smi} == v416 T{_Smi}) T{bool} goto (11, 18)
B11
  Loop 0
ParallelMove rax <- r8
ParallelMove rdi <- r13, rsi <- rax, rdx <- C, rcx <- rdi, r8 <- rdx
v89 <- StaticCall:98( _normalizeEscape@0150898<0> v2, v24 T{int}, v19) T{String??}
ParallelMove rax <- rax
ParallelMove fp[-12] <- rax
Branch if StrictCompare:100(===, v89, v0) goto (12, 14)
B12
  Loop 0
ParallelMove rcx <- fp[-8]
v96 <- BinaryInt64Op(+ [tr], v24 T{int}, v417 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[-1], rax <- fp[-3], rbx <- rcx goto:110 B13
B14
  Loop 0
MoveArgument(sp[1] <- v90)
MoveArgument(sp[0] <- v89 T{String?})
v91 <- StaticCall:114( ==<0> v90, v89 T{String?}, using unchecked entrypoint, recognized_kind = OneByteString_equality, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:118(===, v91 T{bool}, v31) goto (15, 16)
BoolTest
B15
  Loop 0
ParallelMove rdx <- C, rcx <- C goto:128 B17
B16
  Loop 0
ParallelMove rdx <- fp[-12], rcx <- C goto:130 B17
B17
  Loop 0
ParallelMove rdx <- rdx, rax <- rcx goto:282 B39
B18
  Loop 0
Branch if EqualityCompare(v250 T{_Smi} == v418 T{_Smi}) T{bool} goto (19, 22)
B19
  Loop 0
ParallelMove rdx <- fp[-4]
Branch if StrictCompare:144(===, v20 T{bool}, v31) goto (20, 23)
BoolTest
B20
  Loop 0
ParallelMove rdx <- C, rcx <- C goto:276 B38
B23
B22
  Loop 0
ParallelMove rdx <- fp[-4]
ParallelMove  goto:156 B21
B21
  Loop 0
Branch if StrictCompare:164(!==, v6 T{bool}, v31) goto (24, 27)
BoolTest
B24
  Loop 0
Branch if RelationalOp(<=, v250 T{_Smi}, v419 T{_Smi}) T{bool} goto (84, 108)
B84
  Loop 0
ParallelMove r9 <- C, r8 <- C
ParallelMove rcx <- r12
v217 <- ShiftInt64Op(>> [tr], v250 T{_Smi}, v411 T{_Smi}) [0, 4095] int64
ParallelMove rax <- C, rbx <- rcx
GenericCheckBound:24(v420 T{_Smi}, v217) [-9223372036854775808, 9223372036854775807] int64
v421 <- LoadIndexed:24([_List] v237, v217 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- r12
v496 <- IntConverter(int64->uint32[tr], v250 T{_Smi}) uint32
ParallelMove rcx <- rcx
v221 <- BinaryUint32Op(& [tr], v496 T{_Smi}, v508 T{_Smi}) [0, 15] uint32
ParallelMove rcx <- rcx
v500 <- IntConverter(uint32->int64, v221) int64
ParallelMove rcx <- rcx
ParallelMove rbx <- C
v222 <- ShiftUint32Op(<< [tr], v509 T{_Smi}, v500 T{_Smi}) [1, 32768] uint32
ParallelMove rax <- rax
v399 <- UnboxUint32([tr], [non-speculative], v421 T{int?}) [0, 4294967295] uint32
ParallelMove rax <- rax
v223 <- BinaryUint32Op(& [tr], v399, v222) [0, 32768] uint32
ParallelMove rax <- rax
v501 <- IntConverter(uint32->int64, v223) int64
Branch if EqualityCompare(v501 T{_Smi} != v415 T{_Smi}) T{bool} goto (25, 106)
B106
B108
  Loop 0
ParallelMove r9 <- C, r8 <- C
ParallelMove  goto:194 B28
B28
B27
  Loop 0
ParallelMove r9 <- C, r8 <- C
ParallelMove  goto:192 B26
B26
  Loop 0
ParallelMove rax <- r12
v495 <- IntConverter(int64->uint32[tr], v250 T{_Smi}) uint32
ParallelMove rax <- rax
v44 <- BinaryUint32Op(& [tr], v495 T{_Smi}, v510 T{_Smi}) [0, 64512] uint32
ParallelMove rax <- rax
v502 <- IntConverter(uint32->int64, v44) int64
Branch if EqualityCompare(v502 T{_Smi} == v423 T{_Smi}) T{bool} goto (29, 36)
B29
  Loop 0
ParallelMove r10 <- fp[-5]
ParallelMove rdi <- fp[-8]
v51 <- BinaryInt64Op(+ [tr], v24 T{int}, v414 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v51, v4) T{bool} goto (30, 34)
B30
  Loop 0
ParallelMove r13 <- fp[-7]
ParallelMove rax <- fp[-6], rbx <- rdi
t0 <- GenericCheckBound:224(v394 T{_Smi}, v51 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:224(===, v247 T{_Smi}, v199 T{_Smi}) goto (77, 78)
B77
  Loop 0
ParallelMove rax <- fp[-10]
v195 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v51 T{int}) [0, 255] int64
ParallelMove rbx <- rbx goto:224 B76
B78
  Loop 0
ParallelMove rax <- fp[-10]
v193 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v51 T{int}) [0, 65535] int64
ParallelMove rbx <- rbx goto:224 B76
B76
  Loop 0
ParallelMove rdi <- rbx
v504 <- IntConverter(int64->uint32[tr], v194 T{_Smi}) uint32
ParallelMove rdi <- rdi
v58 <- BinaryUint32Op(& [tr], v504 T{_Smi}, v510 T{_Smi}) [0, 64512] uint32
ParallelMove rdi <- rdi
v505 <- IntConverter(uint32->int64, v58) int64
Branch if EqualityCompare(v505 T{_Smi} == v424 T{_Smi}) T{bool} goto (31, 32)
B31
  Loop 0
ParallelMove rdi <- C
ParallelMove r12 <- r12
v494 <- IntConverter(int64->uint32[tr], v250 T{_Smi}) uint32
ParallelMove r12 <- r12
v65 <- BinaryUint32Op(& [tr], v494 T{_Smi}, v511 T{_Smi}) [0, 1023] uint32
ParallelMove r12 <- r12
v506 <- IntConverter(uint32->int64, v65) int64
ParallelMove r12 <- r12
v67 <- ShiftInt64Op(<< [tr], v506 T{_Smi}, v426 T{_Smi}) [0, 1047552] int64
ParallelMove r12 <- r12
v68 <- BinaryInt64Op(| [tr], v67, v427 T{_Smi}) [0, 1048575] int64
ParallelMove rbx <- rbx
v503 <- IntConverter(int64->uint32[tr], v194 T{_Smi}) uint32
ParallelMove rbx <- rbx
v69 <- BinaryUint32Op(& [tr], v503 T{_Smi}, v511 T{_Smi}) [0, 1023] uint32
ParallelMove rbx <- rbx
v507 <- IntConverter(uint32->int64, v69) int64
ParallelMove r12 <- r12
v70 <- BinaryInt64Op(| [tr], v68, v507 T{_Smi}) [0, 1048575] int64
ParallelMove rbx <- r12, r12 <- C goto:252 B33
B32
  Loop 0
ParallelMove rdi <- C
ParallelMove rbx <- r12, r12 <- C goto:254 B33
B33
B34
  Loop 0
ParallelMove rax <- fp[-10], r13 <- fp[-7], rdi <- C
ParallelMove rbx <- r12, r12 <- C goto:262 B35
B35
  Loop 0
ParallelMove r12 <- rbx, rbx <- r12 goto:268 B37
B36
  Loop 0
ParallelMove rax <- fp[-10], r10 <- fp[-5], r13 <- fp[-7], rdi <- C
ParallelMove r12 <- r12, rbx <- C goto:270 B37
B37
  Loop 0
ParallelMove rdi <- r12, fp[-13] <- rbx
v50 <- StaticCall:272( _escapeChar@0150898<0> v47, result_type = T{!null}) T{String}
ParallelMove rcx <- rax
ParallelMove rdx <- rcx, rcx <- fp[-13] goto:278 B38
B38
  Loop 0
ParallelMove rdx <- rdx, rax <- rcx goto:284 B39
B39
  Loop 0
ParallelMove fp[-12] <- rdx, fp[-13] <- rax
Branch if StrictCompare:286(===, v22, v0) goto (40, 41)
B40
  Loop 0
v88 <- AllocateObject:292(cls=StringBuffer) T{StringBuffer}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-14] <- rcx
StoreField(v88 T{StringBuffer} . _partsCodeUnits@0150898 = v415 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v88 T{StringBuffer} . _partsCompactionIndex@0150898 = v415 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v88 T{StringBuffer} . _partsCodeUnitsSinceCompaction@0150898 = v415 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v88 T{StringBuffer} . _bufferPosition@0150898 = v415 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v88 T{StringBuffer} . _bufferCodeUnitMagnitude@0150898 = v415 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rdi <- rcx, rsi <- C
StaticCall:30( write<0> v88 T{StringBuffer}, v181 T{_OneByteString}, using unchecked entrypoint)
ParallelMove r9 <- fp[-14], r8 <- fp[-14] goto:300 B42
B41
  Loop 0
ParallelMove r9 <- rcx, r8 <- rcx goto:302 B42
B42
  Loop 0
ParallelMove fp[-14] <- r9, fp[-15] <- r8
v393 <- BoxInt64(v24 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- fp[-3], rsi <- rax, rdx <- fp[-6]
v145 <- StaticCall:30( checkValidRange<0> v23 T{int}, v393 T{int?}, v394 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-10], rsi <- fp[-3], rdx <- rax
v146 <- StaticCall:32( _substringUnchecked@0150898<0> v2 T{_StringBase}, v23 T{int}, v145, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-16] <- rax
v273 <- LoadField(v146 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v273, v12 T{_Smi}) T{bool} goto (60, 61)
B60
B61
  Loop 0
ParallelMove rdi <- fp[-14]
StaticCall:26( _consumeBuffer@0150898<0> v84 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-14], rsi <- fp[-16]
StaticCall:28( _addPart@0150898<0> v84 T{StringBuffer}, v146 T{String}, using unchecked entrypoint)
ParallelMove  goto:30 B62
B62
  Loop 0
MoveArgument(sp[0] <- v81 T{String?})
v167 <- StaticCall:10( _interpolateSingle@0150898<0> v81 T{String?}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-12] <- rax
v280 <- LoadField(v167 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v280, v12 T{_Smi}) T{bool} goto (65, 66)
B65
B66
  Loop 0
ParallelMove rdi <- fp[-14]
StaticCall:26( _consumeBuffer@0150898<0> v84 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-14], rsi <- fp[-12]
StaticCall:28( _addPart@0150898<0> v84 T{StringBuffer}, v167, using unchecked entrypoint)
ParallelMove  goto:30 B67
B67
  Loop 0
ParallelMove rcx <- fp[-8]
v87 <- BinaryInt64Op(+ [tr], v24 T{int}, v82) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-15], rax <- rcx, rcx <- rcx goto:316 B43
B43
  Loop 0
ParallelMove rcx <- rdx, rax <- rax, rbx <- rcx goto:318 B13
B13
  Loop 0
ParallelMove fp[-1] <- rcx, rax <- rax, rbx <- rbx, r13 <- fp[-10], r12 <- fp[-5], r9 <- fp[-11], r8 <- fp[-2], r10 <- fp[-4], rdi <- fp[-7], rdx <- fp[-6], rcx <- fp[-9] goto:324 B45
B46
ParallelMove rcx <- fp[-1]
Branch if StrictCompare:332(===, v22, v0) goto (47, 48)
B47
ParallelMove rax <- C
DartReturn:338(v0)
B48
ParallelMove rdx <- fp[-5], rsi <- fp[-3]
Branch if RelationalOp(<, v23, v4) T{bool} goto (49, 50)
B49
v392 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v392 T{int})
ParallelMove rdi <- fp[-10], rsi <- rsi
v34 <- StaticCall:352( substring<0> v2, v23, v392 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdi <- fp[-1], rsi <- rax
StaticCall:354( write<0> v22 T{StringBuffer}, v34, using unchecked entrypoint)
ParallelMove  goto:360 B51
B50
B51
MoveArgument(sp[0] <- v22 T{StringBuffer})
v33 <- StaticCall:364( toString<0> v22 T{StringBuffer}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:366(v33)
B25
ParallelMove rdi <- fp[-10], rsi <- fp[-8], rdx <- C
v73 <- StaticCall:180( _fail@0150898<0> v2, v24 T{int}, v72) T{Never}
v74 <- AllocateObject:182(cls=ReachabilityError, <not-aliased>) T{ReachabilityError}
ParallelMove rcx <- rax, rax <- C
StoreField(v74 T{ReachabilityError} . _message@9040228 = v205 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:186(v74)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path uint32 shift operation
slow path check bound operation
slow path uint32 shift operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
v5 <- AllocateObject:10(cls=FormatException) T{FormatException}
ParallelMove rcx <- rax, rax <- fp[-3]
StoreField(v5 T{FormatException} . message = v4 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v5 T{FormatException} . source = v2 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[-2]
v14 <- BoxInt64(v3 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v5 T{FormatException} . offset = v14 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:14(v5)
B0
B1
Enter frame
PrologueOffset = 0
v4 <- LoadField(v2 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v6 <- BinarySmiOp:4(- [tr], v4, v5) [-1, 4611686018427387902] T{_Smi}
v7 <- LoadIndexedUnsafe(rbp[v6 + 16]) T{*?}
Branch if RelationalOp:6(<=, v5, v6) T{bool} goto (2, 3)
B2
v17 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 8]) T{String}
Branch if RelationalOp:20(<=, v18, v6 T{_Smi}) T{bool} goto (5, 6)
B5
v20 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 0]) T{*?}
Branch if RelationalOp:36(<=, v21, v6 T{_Smi}) T{bool} goto (8, 9)
B8
v23 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + -8]) T{int??}
ParallelMove rax <- rbx, rbx <- rsi, rcx <- rdi goto:52 B11
B9
ParallelMove rbx <- rbx, rcx <- rsi goto:46 B7
B6
ParallelMove rcx <- rbx goto:30 B4
B3
ParallelMove rcx <- C goto:18 B4
B4
ParallelMove rbx <- rcx, rcx <- C goto:34 B7
B7
ParallelMove rax <- rbx, rbx <- rcx, rcx <- C goto:50 B11
B11
ParallelMove rax <- rax
StoreField(v7 . message = v14)
ParallelMove rax <- rbx
StoreField(v7 . source = v15)
ParallelMove rax <- rcx
StoreField(v7 . offset = v16)
ParallelMove rax <- C
DartReturn:62(v0)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
Branch if RelationalOp(<, v2, v158 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
v100 <- AllocateTypedData:10(v12 T{_Smi}) T{_Uint8List}
ParallelMove rcx <- rax
StoreIndexed:22([_Uint8List] v100 T{_Uint8List}, v15 T{_Smi}, v101, NoStoreBarrier)
ParallelMove rdx <- fp[-1]
v51 <- ShiftInt64Op(>> [tr], v2, v159 T{_Smi}) [-576460752303423488, 576460752303423487] int64
ParallelMove rax <- C, rbx <- rdx
GenericCheckBound:26(v160 T{_Smi}, v51) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- C
v161 <- LoadIndexed:26([_OneByteString] v30, v51 T{int}) [0, 255] int64
ParallelMove rax <- rax
StoreIndexed:28([_Uint8List] v100 T{_Uint8List}, v19 T{_Smi}, v161 T{_Smi}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
v190 <- IntConverter(int64->uint32[tr], v2) uint32
ParallelMove rdx <- C
ParallelMove rax <- rax
v53 <- BinaryUint32Op(& [tr], v190 T{int}, v196 T{_Smi}) [0, 15] uint32
ParallelMove rax <- rax
v191 <- IntConverter(uint32->int64, v53) int64
v163 <- LoadIndexed:32([_OneByteString] v30, v191 T{_Smi}) [0, 255] int64
ParallelMove rax <- rdx
StoreIndexed:34([_Uint8List] v100 T{_Uint8List}, v7 T{_Smi}, v163 T{_Smi}, NoStoreBarrier)
ParallelMove rsi <- rcx goto:130 B14
B4
ParallelMove rcx <- rdi, rbx <- C, rdx <- C
Branch if RelationalOp(>, v2, v164 T{_Smi}) T{bool} goto (5, 9)
B5
Branch if RelationalOp(>, v2, v165 T{_Smi}) T{bool} goto (6, 7)
B6
ParallelMove rsi <- C, rax <- C goto:62 B8
B7
ParallelMove rsi <- C, rax <- C goto:64 B8
B8
ParallelMove rdi <- rsi, rsi <- rax goto:70 B10
B9
ParallelMove rdi <- C, rsi <- C goto:72 B10
B10
ParallelMove fp[-3] <- rdi, fp[-4] <- rsi
ParallelMove r8 <- rsi
v13 <- BinaryInt64Op(* [tr], v11, v167 T{_Smi}) [6, 12] int64
ParallelMove fp[-2] <- r8
v150 <- BoxInt64(v13 T{int}) [6, 12] T{_Smi}
ParallelMove rax <- rax
v94 <- AllocateTypedData:10(v150) T{_Uint8List}
ParallelMove rdx <- rax
ParallelMove rbx <- fp[-3], rax <- fp[-4], r9 <- C, rsi <- C, rdi <- C, r8 <- C goto:124 B12
B12
  Loop 0
CheckStackOverflow:122(stack=0, loop=1)
ParallelMove r10 <- rax
v20 <- BinaryInt64Op(- [tr], v17, v172 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v20, v171 T{_Smi}) T{bool} goto (11, 13)
B11
  Loop 0
ParallelMove rcx <- r10
v23 <- BinaryInt64Op(* [tr], v20, v173 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
ParallelMove rax <- fp[-1]
v24 <- ShiftInt64Op(>> [tr], v2, v23) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v192 <- IntConverter(int64->uint32[tr], v24) uint32
ParallelMove rax <- rax
v26 <- BinaryUint32Op(& [tr], v192 T{int}, v197 T{_Smi}) [0, 63] uint32
ParallelMove rax <- rax
v193 <- IntConverter(uint32->int64, v26) int64
ParallelMove rcx <- rax
v27 <- BinaryInt64Op(| [tr], v193 T{_Smi}, v16) [0, 255] int64
ParallelMove rax <- fp[-2], rbx <- r9
GenericCheckBound:96(v13 T{_Smi}, v18) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:96([_Uint8List] v94 T{_Uint8List}, v18 T{int}, v101, NoStoreBarrier)
ParallelMove r12 <- r9
v29 <- BinaryInt64Op(+ [tr], v18 T{int}, v172 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx
v32 <- ShiftInt64Op(>> [tr], v27, v159 T{_Smi}) [0, 15] int64
v175 <- LoadIndexed:102([_OneByteString] v30, v32 T{int}) [0, 255] int64
ParallelMove rax <- fp[-2], rbx <- r12
GenericCheckBound:104(v13 T{_Smi}, v29) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r13
StoreIndexed:104([_Uint8List] v94 T{_Uint8List}, v29 T{int}, v175 T{_Smi}, NoStoreBarrier)
ParallelMove r12 <- r9
v34 <- BinaryInt64Op(+ [tr], v18 T{int}, v170 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v194 <- IntConverter(int64->uint32[tr], v27) uint32
ParallelMove rcx <- rcx
v36 <- BinaryUint32Op(& [tr], v194 T{int}, v196 T{_Smi}) [0, 15] uint32
ParallelMove rcx <- rcx
v195 <- IntConverter(uint32->int64, v36) int64
v176 <- LoadIndexed:110([_OneByteString] v30, v195 T{_Smi}) [0, 255] int64
ParallelMove rax <- fp[-2], rbx <- r12
GenericCheckBound:112(v13 T{_Smi}, v34) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r13
StoreIndexed:112([_Uint8List] v94 T{_Uint8List}, v34 T{int}, v176 T{_Smi}, NoStoreBarrier)
ParallelMove r9 <- r9
v38 <- BinaryInt64Op(+ [tr], v18 T{int}, v167 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- C, rax <- r10, r9 <- r9 goto:120 B12
B13
ParallelMove rsi <- rdx goto:132 B14
B14
ParallelMove rdi <- C, rsi <- rsi
v49 <- StaticCall:134( String.fromCharCodes<0> v0, v45, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:136(v49)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path int64 shift operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi
v6 <- LoadField(v4 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v8 <- BinarySmiOp:4(- [tr], v6, v7) [-2, 4611686018427387901] T{_Smi}
Branch if RelationalOp:6(<=, v9, v8) T{bool} goto (2, 3)
B2
v17 <- LoadIndexedUnsafe(rbp[v8 T{_Smi} + 8]) [-9223372036854775808, 9223372036854775807] T{int}
Branch if RelationalOp:20(<=, v7, v8 T{_Smi}) T{bool} goto (5, 6)
B5
v19 <- LoadIndexedUnsafe(rbp[v8 T{_Smi} + 0]) T{int??}
ParallelMove rax <- rcx
v22 <- UnboxInt64([non-speculative], v17) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rax, rdx <- rdx goto:36 B8
B6
ParallelMove rcx <- rcx
v21 <- UnboxInt64([non-speculative], v17) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx goto:30 B4
B3
ParallelMove rax <- C goto:18 B4
B4
ParallelMove rsi <- rax, rdx <- C goto:34 B8
B8
CheckStackOverflow:42(stack=0, loop=0)
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx
v16 <- StaticCall:44( createFromCharCodes<0> v3, v14, v15, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:46(v16)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax, rsi <- C
StaticCall:10( checkNotNegative<0> v3, v5) int64
ParallelMove rcx <- fp[-3]
Branch if StrictCompare:12(!==, v4, v0) goto (3, 8)
B3
ParallelMove rax <- fp[-2]
ParallelMove rdx <- rcx
v142 <- UnboxInt64([non-speculative], v4 T{int?}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v39 <- BinaryInt64Op(- [tr], v142 T{int?}, v3) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v39, v158 T{_Smi}) T{bool} goto (4, 5)
B5
Branch if EqualityCompare(v39 == v158 T{_Smi}) T{bool} goto (6, 7)
B6
ParallelMove rax <- C
DartReturn:48(v28)
B7
B8
ParallelMove rax <- fp[-2]
ParallelMove  goto:58 B9
B9
v44 <- LoadClassId(v2) [87, 564] T{_Smi}
ParallelMove rdx <- rdx
v145 <- UnboxInt64([non-speculative], v44) [87, 564] int64
Branch if EqualityCompare(v145 T{_Smi} != v159 T{_Smi}) T{bool} goto (10, 22)
B10
Branch if EqualityCompare(v145 T{_Smi} != v160 T{_Smi}) T{bool} goto (11, 23)
B11
Branch if EqualityCompare(v145 T{_Smi} != v161 T{_Smi}) T{bool} goto (12, 24)
B12
v67 <- LoadField(v2 T{Iterable<int>} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v147 <- UnboxInt64([non-speculative], v67 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(<=, v147 T{_Smi}, v3) T{bool} goto (13, 14)
B13
ParallelMove rax <- C
DartReturn:104(v28)
B14
Branch if StrictCompare:108(===, v4, v0) goto (17, 15)
B17
B15
ParallelMove rcx <- rcx
v150 <- UnboxInt64([non-speculative], v4 T{int?}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v150 T{int?}, v147 T{_Smi}) T{bool} goto (18, 19)
B18
B16
ParallelMove rcx <- rdx goto:136 B20
B19
B20
ParallelMove rcx <- rcx
v37 <- BinaryInt64Op(- [tr], v36 T{int?}, v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rbx, rsi <- rax, rdx <- rcx
v38 <- StaticCall:142( _createOneByteString@0150898<0> v2, v3, v37, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove rax <- rax
DartReturn:144(v38)
B24
B23
B22
B21
v62 <- LoadField(v2 T{Iterable<int>} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v152 <- UnboxInt64([non-speculative], v62 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(<=, v152 T{_Smi}, v3) T{bool} goto (25, 26)
B25
ParallelMove rax <- C
DartReturn:172(v28)
B26
Branch if StrictCompare:176(===, v4, v0) goto (29, 27)
B29
B27
ParallelMove rcx <- rcx
v155 <- UnboxInt64([non-speculative], v4 T{int?}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v155 T{int?}, v152 T{_Smi}) T{bool} goto (30, 31)
B30
B28
ParallelMove rcx <- rdx goto:204 B32
B31
B32
ParallelMove fp[-5] <- rcx
ParallelMove r8 <- rcx
v15 <- BinaryInt64Op(- [tr], v14 T{int?}, v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-4] <- r8
Branch if EqualityCompare(v15 == v158 T{_Smi}) T{bool} goto (33, 34)
B33
ParallelMove rax <- C
DartReturn:220(v28)
B34
ParallelMove rdi <- rbx, rsi <- rax, rdx <- rcx
v18 <- StaticCall:224( _scanCodeUnits@0150898<0> v2, v3, v14 T{int?}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
Branch if RelationalOp(<, v18, v158 T{_Smi}) T{bool} goto (35, 36)
B36
Branch if RelationalOp(<=, v18, v162 T{_Smi}) T{bool} goto (37, 38)
B37
ParallelMove rdi <- fp[-1], rsi <- fp[-2], rdx <- fp[-4]
v26 <- StaticCall:254( _createOneByteString@0150898<0> v2, v3, v15, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove rax <- rax
DartReturn:256(v26)
B38
Branch if RelationalOp(<=, v18, v163 T{_Smi}) T{bool} goto (39, 40)
B39
ParallelMove rdx <- fp[-2], rcx <- fp[-5]
v140 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdx <- rax
v157 <- BoxInt64(v14 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v140 T{int})
MoveArgument(sp[0] <- v157 T{int?})
v25 <- StaticCall:270( _allocateFromTwoByteList@0150898<0> v2, v140 T{int}, v157 T{int?}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:272(v25)
B40
ParallelMove rdx <- fp[-2], rcx <- fp[-5]
v141 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdx <- rax
v156 <- BoxInt64(v14 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v141 T{int})
MoveArgument(sp[0] <- v156 T{int?})
v24 <- StaticCall:276( _createFromCodePoints@0150898<0> v2, v141 T{int}, v156 T{int?}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:278(v24)
B4
ParallelMove rdx <- rax
v139 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-6] <- rax
v42 <- AllocateObject:30(cls=RangeError) T{RangeError}
ParallelMove rax <- rax
ParallelMove fp[-7] <- rax
MoveArgument(sp[4] <- v42)
MoveArgument(sp[3] <- v4 T{int?})
MoveArgument(sp[2] <- v139 T{int})
MoveArgument(sp[1] <- v0)
MoveArgument(sp[0] <- v43)
StaticCall:32( RangeError.range<0> v42, v4 T{int?}, v139 T{int}, v0, v43)
ParallelMove rax <- fp[-7]
Throw:34(v42)
B35
ParallelMove rax <- fp[-1]
v27 <- AllocateObject:236(cls=ArgumentError, <not-aliased>) T{ArgumentError}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v27 T{ArgumentError} . message = v2 T{Iterable<int>}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v27 T{ArgumentError} . _hasValue@0150898 = v56 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:240(v27)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v0)
v5 <- NativeCall(StringBase_createFromCodePoints) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v5, v6, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v5 T{String})
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v0)
v5 <- NativeCall(TwoByteString_allocateFromTwoByteList) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v5, v6, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v5 T{String})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-3] <- rdi, fp[-4] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove r8 <- C, rsi <- rsi goto:30 B5
B5
  Loop 0
ParallelMove fp[-1] <- r8, fp[-2] <- rsi
CheckStackOverflow:34(stack=0, loop=1)
Branch if RelationalOp(<, v7, v4) T{bool} goto (3, 4)
B3
  Loop 0
v20 <- BoxInt64(v7) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v24 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v20 T{int})
ParallelMove rcx <- rcx
v10 <- DispatchTableCall( cid=v24 List.[]<0>, v2, v20 T{int}) T{*?}
ParallelMove rax <- rax
ParallelMove rax <- rax
v21 <- UnboxInt64([non-speculative], v10 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rcx <- fp[-1]
v11 <- BinaryInt64Op(| [tr], v6, v21 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rdx <- fp[-2]
v13 <- BinaryInt64Op(+ [tr], v7, v23 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rcx, rsi <- rdx, rdi <- fp[-3], rdx <- fp[-4] goto:32 B5
B4
ParallelMove rax <- fp[-1]
DartReturn:36(v6)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-2] <- rdi, fp[-3] <- rsi, fp[-4] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v51 <- BoxInt64(v4 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
MoveArgument(sp[0] <- v51 T{int})
v43 <- StaticCall:10( allocateOneByteString<0> v51 T{int}, recognized_kind = AllocateOneByteString, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove r8 <- rax, rdx <- fp[-2]
ParallelMove fp[-6] <- r8
v17 <- LoadClassId(v2) [89, 564] int64
Branch if TestRange(v17 in [115-118]) T{bool} goto (3, 4)
B3
ParallelMove rsi <- fp[-3]
v50 <- BoxInt64(v3 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v58 <- LoadField(v2 T{Uint8List} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- fp[-1]
ParallelMove rax <- rax
MemoryCopy(v58 T{Uint8List}, v43 T{_OneByteString}, v50 T{int}, v9 T{_Smi}, v51 T{int}, dest_cid=_OneByteString (93), src_cid=_Uint8List (115) [untagged])
ParallelMove rax <- r8
DartReturn:24(v43 T{_OneByteString})
B4
ParallelMove rsi <- fp[-3]
ParallelMove r9 <- C goto:50 B7
B7
  Loop 0
ParallelMove fp[-5] <- r9
CheckStackOverflow:54(stack=0, loop=1)
Branch if RelationalOp(<, v10, v4) T{bool} goto (5, 6)
B5
  Loop 0
ParallelMove rcx <- rsi
v12 <- BinaryInt64Op(+ [tr], v3, v10) [-9223372036854775808, 9223372036854775807] int64
v54 <- BoxInt64(v12) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v57 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v54 T{int})
ParallelMove rcx <- rcx
v13 <- DispatchTableCall( cid=v57 List.[]<0>, v2, v54 T{int}) T{*?}
ParallelMove rax <- rax
ParallelMove rax <- rax
v26 <- UnboxInt64:10([non-speculative], v13 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax, rdx <- fp[-5], rcx <- fp[-6]
StoreIndexed:10([_OneByteString] v43 T{_OneByteString}, v10 T{int}, v26, NoStoreBarrier)
ParallelMove rdx <- rdx
v15 <- BinaryInt64Op(+ [tr], v10, v56 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- rdx, rdx <- fp[-2], rsi <- fp[-3], r8 <- rcx goto:52 B7
B6
ParallelMove rcx <- r8
ParallelMove rax <- rcx
DartReturn:56(v43 T{_OneByteString})
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rcx <- rsi
v6 <- BinaryInt64Op(+ [tr], v3, v293 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v189 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove r8 <- rax
v287 <- UnboxInt64([non-speculative], v189 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(>=, v6, v287 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:24(v39)
B4
ParallelMove r9 <- rsi
v11 <- BinaryInt64Op(+ [tr], v3, v294 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r8, rbx <- r9
t0 <- GenericCheckBound:30(v287 T{_Smi}, v11 T{int}) [-9223372036854775808, 9223372036854775807] int64
v85 <- LoadClassId(v2 T{_StringBase}) [93, 94] T{_Smi}
Branch if StrictCompare:30(===, v85, v93 T{_Smi}) goto (34, 35)
B34
v89 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v11 T{int}) [0, 255] int64
ParallelMove r9 <- rax goto:30 B33
B35
v87 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v11 T{int}) [0, 65535] int64
ParallelMove r9 <- rax goto:30 B33
B33
ParallelMove rax <- r8, rbx <- rcx
t0 <- GenericCheckBound:34(v287 T{_Smi}, v6 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:34(===, v85 T{_Smi}, v93 T{_Smi}) goto (39, 40)
B39
v106 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v6 T{int}) [0, 255] int64
ParallelMove r8 <- rax goto:34 B38
B40
v104 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v6 T{int}) [0, 65535] int64
ParallelMove r8 <- rax goto:34 B38
B38
ParallelMove rax <- r9
v115 <- BinaryInt64Op(^ [tr], v88 T{_Smi}, v295 T{_Smi}) [0, 65535] int64
Branch if RelationalOp(<=, v115, v296 T{_Smi}) T{bool} goto (43, 44)
B43
B44
ParallelMove rax <- r9
v120 <- BinaryInt64Op(| [tr], v88 T{_Smi}, v297 T{_Smi}) [0, 65535] int64
Branch if RelationalOp(<=, v298 T{_Smi}, v120) T{bool} goto (45, 48)
B45
Branch if RelationalOp(<=, v120, v299 T{_Smi}) T{bool} goto (46, 49)
B46
ParallelMove rax <- rax
v129 <- BinaryInt64Op(- [tr], v120, v147 T{_Smi}) [-87, 65448] int64
ParallelMove rax <- rax goto:52 B50
B49
B48
B47
ParallelMove rax <- C goto:66 B50
B50
ParallelMove rcx <- r8
v155 <- BinaryInt64Op(^ [tr], v105 T{_Smi}, v295 T{_Smi}) [0, 65535] int64
Branch if RelationalOp(<=, v155, v296 T{_Smi}) T{bool} goto (53, 54)
B53
B54
ParallelMove rcx <- r8
v160 <- BinaryInt64Op(| [tr], v105 T{_Smi}, v297 T{_Smi}) [0, 65535] int64
Branch if RelationalOp(<=, v298 T{_Smi}, v160) T{bool} goto (55, 58)
B55
Branch if RelationalOp(<=, v160, v299 T{_Smi}) T{bool} goto (56, 59)
B56
ParallelMove rcx <- rcx
v169 <- BinaryInt64Op(- [tr], v160, v147 T{_Smi}) [-87, 65448] int64
ParallelMove rcx <- rcx goto:52 B60
B59
B58
B57
ParallelMove rcx <- C goto:66 B60
B60
Branch if RelationalOp(<, v149 T{int}, v300 T{_Smi}) T{bool} goto (7, 5)
B7
B5
Branch if RelationalOp(<, v184 T{int}, v300 T{_Smi}) T{bool} goto (8, 9)
B8
B6
ParallelMove rax <- C
DartReturn:68(v39)
B9
ParallelMove rax <- rax
v191 <- ShiftInt64Op(<< [tr], v149 T{int}, v190) [-1392, 1048560] int64
ParallelMove r10 <- rax
v22 <- BinaryInt64Op(+ [tr], v191 T{int}, v184 T{int}) [-1479, 1114095] int64
Branch if RelationalOp(<, v22 T{int}, v301 T{_Smi}) T{bool} goto (28, 66)
B28
ParallelMove r12 <- C, rcx <- C
ParallelMove r13 <- r10
v51 <- ShiftInt64Op(>> [tr], v22 T{int}, v190 T{_Smi}) [-93, 69630] int64
ParallelMove rax <- C, rbx <- r13
GenericCheckBound:24(v302 T{_Smi}, v51) [-9223372036854775808, 9223372036854775807] int64
v303 <- LoadIndexed:24([_List] v73, v51 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rbx <- r10
v327 <- IntConverter(int64->uint32[tr], v22 T{int}) uint32
ParallelMove rbx <- rbx
v55 <- BinaryUint32Op(& [tr], v327 T{int}, v331 T{_Smi}) [0, 15] uint32
ParallelMove rbx <- rbx
v328 <- IntConverter(uint32->int64, v55) int64
ParallelMove rcx <- rbx
ParallelMove rbx <- C
v56 <- ShiftUint32Op(<< [tr], v332 T{_Smi}, v328 T{_Smi}) [1, 32768] uint32
ParallelMove rax <- rax
v291 <- UnboxUint32([tr], [non-speculative], v303 T{int?}) [0, 4294967295] uint32
ParallelMove rax <- rax
v57 <- BinaryUint32Op(& [tr], v291, v56) [0, 32768] uint32
ParallelMove rax <- rax
v329 <- IntConverter(uint32->int64, v57) int64
Branch if EqualityCompare(v329 T{_Smi} != v300 T{_Smi}) T{bool} goto (10, 64)
B10
Branch if StrictCompare:88(===, v4 T{bool}, v9) goto (11, 15)
BoolTest
B11
Branch if RelationalOp(<=, v305 T{_Smi}, v22) T{bool} goto (12, 16)
B12
Branch if RelationalOp(>=, v306 T{_Smi}, v22) T{bool} goto (13, 17)
B13
ParallelMove rax <- r10
v38 <- BinaryInt64Op(| [tr], v22, v297 T{_Smi}) [-2097152, 2097151] int64
ParallelMove rsi <- rax goto:132 B18
B17
B16
B15
B14
ParallelMove rsi <- r10 goto:134 B18
B18
ParallelMove rdi <- C, rsi <- rsi
v32 <- StaticCall:136( String.fromCharCode<0> v0, v31, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:138(v32)
B64
B66
B19
Branch if RelationalOp(>=, v88 T{_Smi}, v298 T{_Smi}) T{bool} goto (22, 20)
B22
B20
Branch if RelationalOp(>=, v105 T{_Smi}, v298 T{_Smi}) T{bool} goto (23, 24)
B23
B21
ParallelMove rcx <- rsi
v28 <- BinaryInt64Op(+ [tr], v3, v307 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v292 <- BoxInt64(v28) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v292 T{int})
ParallelMove rdi <- rdi, rsi <- rsi
v29 <- StaticCall:172( substring<0> v2, v3, v292 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
v330 <- LoadClassId(<non-smi> v29) int64
MoveArgument(sp[0] <- v29)
ParallelMove rcx <- rcx
v30 <- DispatchTableCall( cid=v330 String.toUpperCase<0>, v29) T{String}
ParallelMove rax <- rax
DartReturn:176(v30 T{String})
B24
ParallelMove rax <- C
DartReturn:180(v0)
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path uint32 shift operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rsi, fp[-1] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
Branch if RelationalOp(>=, v3, v83 T{_Smi}) T{bool} goto (3, 10)
B3
Branch if RelationalOp(<=, v3, v84 T{_Smi}) T{bool} goto (4, 5)
B4
MoveArgument(sp[0] <- v27 T{_Smi})
v44 <- StaticCall:10( allocateOneByteString<0> v27 T{_Smi}, recognized_kind = AllocateOneByteString, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove rax <- fp[-1], rcx <- rax
StoreIndexed:10([_OneByteString] v44 T{_OneByteString}, v4 T{_Smi}, v3 T{int}, NoStoreBarrier)
ParallelMove rax <- rcx
DartReturn:34(v44 T{_OneByteString})
B5
ParallelMove rcx <- rax
Branch if RelationalOp(<=, v3, v85 T{_Smi}) T{bool} goto (6, 7)
B6
v79 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rbx <- C, r10 <- C, rax <- rax
ParallelMove fp[-2] <- rax
v32 <- CreateArray:48(v24, v27) T{_List}
ParallelMove rcx <- rax, rax <- fp[-2]
StoreIndexed:50([_List] v32, v4 T{_Smi}, v79 T{int}, NoStoreBarrier)
MoveArgument(sp[2] <- v32)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v27)
v30 <- StaticCall:52( _createFromCodePoints@0150898<0> v32, v4, v27, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:54(v30)
B7
Branch if RelationalOp(<=, v3, v86 T{_Smi}) T{bool} goto (8, 9)
B8
ParallelMove rax <- C
ParallelMove rdx <- rcx
v93 <- IntConverter(int64->uint32[tr], v3) uint32
ParallelMove rdx <- rdx
v16 <- BinaryUint32Op(& [tr], v93 T{int}, v95 T{_Smi}) [0, 1023] uint32
ParallelMove rdx <- rdx
v94 <- IntConverter(uint32->int64, v16) int64
ParallelMove rdx <- rdx
v17 <- BinaryInt64Op(| [tr], v94 T{_Smi}, v88 T{_Smi}) [0, 65535] int64
ParallelMove fp[-3] <- rdx
ParallelMove rax <- rcx
v19 <- BinaryInt64Op(- [tr], v3, v89 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v22 <- ShiftInt64Op(>> [tr], v19, v90 T{_Smi}) [-9007199254740992, 9007199254740991] int64
ParallelMove rax <- rax
v23 <- BinaryInt64Op(| [tr], v22, v91 T{_Smi}) [-9007199254740992, 9007199254740991] int64
v82 <- BoxInt64(v23) [-9007199254740992, 9007199254740991] T{_Smi}
ParallelMove rbx <- C, r10 <- C, fp[-2] <- rcx
v35 <- CreateArray:78(v24, v25) T{_List}
ParallelMove rcx <- rax, rax <- fp[-2]
StoreIndexed:80([_List] v35, v4 T{_Smi}, v82, NoStoreBarrier)
ParallelMove rax <- fp[-3]
v81 <- BoxInt64(v17) [0, 65535] T{_Smi}
StoreIndexed:82([_List] v35, v27 T{_Smi}, v81, NoStoreBarrier)
MoveArgument(sp[2] <- v35)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v25)
v28 <- StaticCall:84( _createFromCodePoints@0150898<0> v35, v4, v25, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:86(v28)
B9
B10
ParallelMove rcx <- rax
ParallelMove  goto:96 B11
B11
v80 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-2] <- rax
v7 <- AllocateObject:98(cls=RangeError) T{RangeError}
ParallelMove rax <- rax
ParallelMove fp[-4] <- rax
MoveArgument(sp[3] <- v7)
MoveArgument(sp[2] <- v80 T{int})
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v8)
StaticCall:100( RangeError.range<0> v7, v80 T{int}, v4, v8)
ParallelMove rax <- fp[-4]
Throw:102(v7)
CheckStackOverflowSlowPath
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-3] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v134 <- LoadField(v2 T{MappedListIterable} . _source@9040228 {final}) T{_GrowableList}
ParallelMove fp[-2] <- rcx
v222 <- LoadField(v134 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v253 <- UnboxInt64([non-speculative], v222 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-1] <- rdx
Branch if EqualityCompare(v253 T{_Smi} == v259 T{_Smi}) T{bool} goto (4, 5)
B4
ParallelMove rax <- C
DartReturn:32(v34)
B5
ParallelMove rdi <- rax, rsi <- C
v20 <- StaticCall:36( elementAt<0> v2, v259 T{_Smi}, using unchecked entrypoint) T{C1X1?}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v20)
v21 <- StaticCall:38( _interpolateSingle@0150898<0> v20) T{String}
ParallelMove rcx <- rax, rax <- fp[-2]
ParallelMove fp[-4] <- rcx
v217 <- LoadField(v134 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v254 <- UnboxInt64([non-speculative], v217 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rbx <- fp[-1]
Branch if EqualityCompare(v253 T{_Smi} != v254 T{_Smi}) T{bool} goto (6, 7)
B7
ParallelMove rdx <- fp[-3]
v24 <- AllocateObject:60(cls=StringBuffer) T{StringBuffer}
ParallelMove rax <- rax
ParallelMove fp[-5] <- rax
MoveArgument(sp[0] <- v21)
ParallelMove rdi <- rax
StaticCall:62( StringBuffer.<0> v24, v21)
ParallelMove rax <- fp[-3]
v97 <- LoadField:106(v2 T{MappedListIterable} . _f@9040228 {final}) T{(dynamic, C1X0) => C1X1}
ParallelMove fp[-4] <- rcx
ParallelMove rsi <- C, rdx <- fp[-2], rbx <- fp[-1] goto:106 B12
B12
  Loop 0
ParallelMove fp[-6] <- rsi
CheckStackOverflow:110(stack=0, loop=1)
Branch if RelationalOp(<, v25, v253 T{_Smi}) T{bool} goto (36, 9)
B36
  Loop 0
ParallelMove rdi <- fp[-5]
StaticCall:26( _consumeBuffer@0150898<0> v24 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-5], rsi <- C
StaticCall:28( _addPart@0150898<0> v24 T{StringBuffer}, v4 T{_OneByteString}, using unchecked entrypoint)
ParallelMove rcx <- fp[-2]
v193 <- LoadField(v134 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v255 <- UnboxInt64([non-speculative], v193) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- fp[-6]
GenericCheckBound:10(v255 T{_Smi}, v25 T{int}) [-9223372036854775808, 9223372036854775807] int64
v195 <- LoadField(v134 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- fp[-6]
v261 <- LoadIndexed:10([_List] v195, v25 T{int}) T{*?}
MoveArgument(sp[1] <- v97)
MoveArgument(sp[0] <- v261 T{X0})
ParallelMove rax <- fp[-4]
v98 <- ClosureCall:18( closure=v97<0>, v97, v261 T{X0}) T{*?}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v98 T{C1X1?})
v105 <- StaticCall:10( _interpolateSingle@0150898<0> v98 T{C1X1?}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-7] <- rax
v201 <- LoadField(v105 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v201, v9 T{_Smi}) T{bool} goto (41, 42)
B41
B42
  Loop 0
ParallelMove rdi <- fp[-5]
StaticCall:26( _consumeBuffer@0150898<0> v24 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-5], rsi <- fp[-7]
StaticCall:28( _addPart@0150898<0> v24 T{StringBuffer}, v105, using unchecked entrypoint)
ParallelMove  goto:30 B43
B43
  Loop 0
v208 <- LoadField(v134 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v257 <- UnboxInt64([non-speculative], v208 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v253 T{_Smi} != v257 T{_Smi}) T{bool} goto (10, 11)
B11
  Loop 0
ParallelMove rdx <- fp[-6]
v31 <- BinaryInt64Op(+ [tr], v25 T{int}, v260 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rdx, rax <- fp[-3], rcx <- fp[-4], rdx <- rax, rbx <- rcx goto:108 B12
B9
MoveArgument(sp[0] <- v24)
v27 <- StaticCall:112( toString<0> v24, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:114(v27)
B6
ParallelMove rax <- fp[-3]
v33 <- AllocateObject:52(cls=ConcurrentModificationError, <not-aliased>) T{ConcurrentModificationError}
ParallelMove rcx <- rax, rax <- fp[-3]
StoreField(v33 T{ConcurrentModificationError} . modifiedObject = v2 T{ListIterable<X0>}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:56(v33)
B10
ParallelMove rax <- fp[-3]
v32 <- AllocateObject:96(cls=ConcurrentModificationError, <not-aliased>) T{ConcurrentModificationError}
ParallelMove rcx <- rax, rax <- fp[-3]
StoreField(v32 T{ConcurrentModificationError} . modifiedObject = v2 T{ListIterable<X0>}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:100(v32)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
v5 <- LoadField(v4 . ArgumentsDescriptor.type_args_len {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare:4(===, v5, v6) goto (2, 3)
B2
ParallelMove rcx <- C goto:14 B5
B3
v7 <- LoadField(v4 . ArgumentsDescriptor.size {final}) [0, 4611686018427387903] T{_Smi}
v8 <- LoadIndexedUnsafe(rbp[v7 + 16]) T{TypeArguments?}
ParallelMove rcx <- rcx goto:16 B5
B5
v10 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx, rcx <- rcx, rbx <- C
v12 <- InstantiateTypeArguments:24(v11, instantiator_type_args(v10), function_type_args(v9), instantiator_class(Library:'dart:collection' Class: ListBase)) T{*?}
ParallelMove rdx <- rax
v13 <- AllocateObject:26(cls=MappedListIterable, v12, <not-aliased>) T{MappedListIterable}
ParallelMove rax <- rax, rcx <- fp[3]
StoreField(v13 T{MappedListIterable} . _source@9040228 = v2 T{_GrowableList}, NoStoreBarrier)
ParallelMove rcx <- fp[2]
StoreField(v13 T{MappedListIterable} . _f@9040228 = v3 T{_Closure}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:30(v13)
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v5 <- StaticCall:10( _uriEncode@0150898<0> v3, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B5
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, fp[-3] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v194 <- LoadField:104(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rsi <- rax
v269 <- UnboxInt64:104([non-speculative], v194 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-2] <- rsi
v182 <- LoadClassId:104(v2 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove r10 <- C, r9 <- C, r8 <- C goto:104 B17
B17
  Loop 2
ParallelMove fp[-1] <- r10
CheckStackOverflow:108(stack=0, loop=1)
Branch if RelationalOp(<, v45, v269 T{_Smi}) T{bool} goto (9, 10)
B9
  Loop 2
Branch if StrictCompare:56(===, v182, v168 T{_Smi}) goto (70, 71)
B70
  Loop 2
v186 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v45 T{int}) [0, 255] int64
ParallelMove rcx <- rax goto:56 B69
B71
  Loop 2
v184 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v45 T{int}) [0, 65535] int64
ParallelMove rcx <- rax goto:56 B69
B69
  Loop 2
Branch if RelationalOp(>=, v185 T{_Smi}, v292 T{_Smi}) T{bool} goto (13, 11)
B11
  Loop 2
ParallelMove r12 <- rcx
v52 <- ShiftInt64Op(>> [tr], v185 T{_Smi}, v293 T{_Smi}) [0, 4095] int64
ParallelMove rax <- C, rbx <- r12
GenericCheckBound:68(v294 T{_Smi}, v52) [-9223372036854775808, 9223372036854775807] int64
v295 <- LoadIndexed:68([_List] v36, v52 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- rcx
v336 <- IntConverter(int64->uint32[tr], v185 T{_Smi}) uint32
ParallelMove rcx <- rcx
v54 <- BinaryUint32Op(& [tr], v336 T{_Smi}, v344 T{_Smi}) [0, 15] uint32
ParallelMove rcx <- rcx
v337 <- IntConverter(uint32->int64, v54) int64
ParallelMove rcx <- rcx
ParallelMove rbx <- C
v55 <- ShiftUint32Op(<< [tr], v345 T{_Smi}, v337 T{_Smi}) [1, 32768] uint32
ParallelMove rax <- rax
v272 <- UnboxUint32([tr], [non-speculative], v295 T{int}) [0, 4294967295] uint32
ParallelMove rax <- rax
v56 <- BinaryUint32Op(& [tr], v272, v55) [0, 32768] uint32
ParallelMove rax <- rax
v338 <- IntConverter(uint32->int64, v56) int64
Branch if EqualityCompare(v338 T{_Smi} == v291 T{_Smi}) T{bool} goto (14, 16)
B16
  Loop 2
ParallelMove r10 <- r10
v58 <- BinaryInt64Op(+ [tr], v45 T{int}, v297 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- r10 goto:106 B17
B14
B13
B12
B10
B19
Branch if EqualityCompare(v45 T{int} == v269 T{_Smi}) T{bool} goto (20, 21)
B20
ParallelMove rax <- rdx
DartReturn:132(v2)
B21
v12 <- AllocateObject:136(cls=StringBuffer) T{StringBuffer}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-4] <- rax
StaticCall:138( StringBuffer.<0> v12)
ParallelMove rcx <- fp[-3]
v160 <- LoadClassId:160(v2 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove fp[-6] <- rdx
ParallelMove r9 <- C goto:160 B24
B24
  Loop 1
ParallelMove fp[-5] <- r9
CheckStackOverflow:164(stack=0, loop=1)
Branch if RelationalOp(<, v13, v45 T{int}) T{bool} goto (22, 23)
B22
  Loop 1
ParallelMove rax <- fp[-2], rbx <- r9
t0 <- GenericCheckBound:154(v269 T{_Smi}, v13 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:154(===, v160, v168 T{_Smi}) goto (63, 64)
B63
  Loop 1
v164 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v13 T{int}) [0, 255] int64
ParallelMove rsi <- rax goto:154 B62
B64
  Loop 1
v162 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v13 T{int}) [0, 65535] int64
ParallelMove rsi <- rax goto:154 B62
B62
  Loop 1
ParallelMove rdi <- fp[-4], rsi <- rsi
StaticCall:156( writeCharCode<0> v12, v163 T{_Smi}, using unchecked entrypoint)
ParallelMove rax <- fp[-5]
v44 <- BinaryInt64Op(+ [tr], v13 T{int}, v297 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- rax, rcx <- fp[-3], rdx <- fp[-6] goto:162 B24
B23
ParallelMove rdi <- C, rsi <- fp[-3]
v150 <- StaticCall:10( convert<0> v151 T{Utf8Encoder}, v2 T{String}, using unchecked entrypoint, result_type = T{_Uint8List}) T{_Uint8List}
ParallelMove rdx <- rax
ParallelMove fp[-3] <- rdx
v142 <- LoadField:280(v150 T{_Uint8List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r8 <- rax
v275 <- UnboxInt64:280([non-speculative], v142 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove fp[-2] <- r8
ParallelMove r13 <- fp[-1] goto:280 B38
B38
  Loop 0
ParallelMove fp[-1] <- r13
CheckStackOverflow:284(stack=0, loop=1)
Branch if RelationalOp(<, v16, v275 T{_Smi}) T{bool} goto (25, 26)
B25
  Loop 0
ParallelMove rax <- r8, rbx <- r13
GenericCheckBound:184(v275 T{_Smi}, v16) [-9223372036854775808, 9223372036854775807] int64
v298 <- LoadIndexed:184([_Uint8List] v150 T{_Uint8List}, v16 T{int}) [0, 255] int64
ParallelMove fp[-5] <- rsi
Branch if RelationalOp(<, v298 T{_Smi}, v292 T{_Smi}) T{bool} goto (27, 30)
B27
  Loop 0
ParallelMove rcx <- rsi
v37 <- ShiftInt64Op(>> [tr], v298 T{_Smi}, v293 T{_Smi}) [0, 15] int64
ParallelMove rax <- C, rbx <- rcx
GenericCheckBound:196(v294 T{_Smi}, v37) [-9223372036854775808, 9223372036854775807] int64
v299 <- LoadIndexed:196([_List] v36, v37 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- rsi
v340 <- IntConverter(int64->uint32[tr], v298 T{_Smi}) uint32
ParallelMove rcx <- rcx
v39 <- BinaryUint32Op(& [tr], v340 T{_Smi}, v344 T{_Smi}) [0, 15] uint32
ParallelMove rcx <- rcx
v341 <- IntConverter(uint32->int64, v39) int64
ParallelMove rcx <- rcx
ParallelMove rbx <- C
v40 <- ShiftUint32Op(<< [tr], v345 T{_Smi}, v341 T{_Smi}) [1, 32768] uint32
ParallelMove rax <- rax
v279 <- UnboxUint32([tr], [non-speculative], v299 T{int}) [0, 4294967295] uint32
ParallelMove rax <- rax
v41 <- BinaryUint32Op(& [tr], v279, v40) [0, 32768] uint32
ParallelMove rax <- rax
v342 <- IntConverter(uint32->int64, v41) int64
Branch if EqualityCompare(v342 T{_Smi} != v291 T{_Smi}) T{bool} goto (28, 31)
B28
  Loop 0
ParallelMove rdi <- r9, rsi <- rsi
StaticCall:216( writeCharCode<0> v12, v298 T{_Smi}, using unchecked entrypoint)
ParallelMove  goto:274 B37
B31
B30
B34
  Loop 0
ParallelMove rdi <- rax, rsi <- C, rcx <- rsi
StaticCall:38( _ensureCapacity@0150898<0> v12 T{StringBuffer}, v297 T{_Smi}, using unchecked entrypoint)
ParallelMove rcx <- fp[-4]
v109 <- LoadField(v12 T{StringBuffer} . _buffer@0150898) T{_Uint16List?}
CheckNull:42(v109, CastError) T{_Uint16List}
v110 <- LoadField(v12 T{StringBuffer} . _bufferPosition@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rsi
v111 <- BinaryInt64Op(+ [tr], v110, v297 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v12 T{StringBuffer} . _bufferPosition@0150898 = v111 T{int} <int64>)
v115 <- LoadField(v109 T{_Uint16List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v280 <- UnboxInt64([non-speculative], v115) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:50(v280 T{_Smi}, v110) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C
StoreIndexed:50([_Uint16List] v109 T{_Uint16List}, v110 T{int}, v137 T{_Smi}, NoStoreBarrier)
v112 <- LoadField(v12 T{StringBuffer} . _bufferCodeUnitMagnitude@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v113 <- BinaryInt64Op(| [tr], v112, v137 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v12 T{StringBuffer} . _bufferCodeUnitMagnitude@0150898 = v113 T{int} <int64>)
ParallelMove rdx <- fp[-5]
v28 <- ShiftInt64Op(>> [tr], v298 T{_Smi}, v293 T{_Smi}) [0, 15] int64
ParallelMove rbx <- C
v301 <- LoadIndexed:262([_OneByteString] v26, v28 T{int}) [0, 255] int64
ParallelMove rdi <- rcx, rsi <- rsi
StaticCall:264( writeCharCode<0> v12, v301, using unchecked entrypoint)
ParallelMove rax <- fp[-5]
v339 <- IntConverter(int64->uint32[tr], v298 T{_Smi}) uint32
ParallelMove rcx <- C
ParallelMove rax <- rax
v31 <- BinaryUint32Op(& [tr], v339 T{_Smi}, v344 T{_Smi}) [0, 15] uint32
ParallelMove rax <- rax
v343 <- IntConverter(uint32->int64, v31) int64
ParallelMove rdx <- C
v302 <- LoadIndexed:268([_OneByteString] v26, v343 T{_Smi}) [0, 255] int64
ParallelMove rdi <- fp[-4], rsi <- rsi
StaticCall:270( writeCharCode<0> v12, v302, using unchecked entrypoint)
ParallelMove  goto:276 B37
B37
  Loop 0
ParallelMove rax <- fp[-1]
v35 <- BinaryInt64Op(+ [tr], v16 T{int}, v297 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r13 <- rax, rdx <- fp[-3], r8 <- fp[-2] goto:282 B38
B26
MoveArgument(sp[0] <- v12)
v20 <- StaticCall:286( toString<0> v12, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:288(v20)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path uint32 shift operation
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path uint32 shift operation
slow path check null (cast) operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . _buffer@0150898) T{_Uint16List?}
Branch if StrictCompare:12(===, v4, v0) goto (3, 4)
B3
ParallelMove rax <- C
v23 <- AllocateTypedData:10(v10 T{_Smi}) T{_Uint16List}
ParallelMove rax <- rax, rdi <- fp[-1]
StoreField(v2 T{StringBuffer} . _buffer@0150898 = v23 T{_Uint16List})
ParallelMove  goto:52 B8
B4
v5 <- LoadField(v2 . _bufferPosition@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v6 <- BinaryInt64Op(+ [tr], v5, v3) [-9223372036854775808, 9223372036854775807] int64
v17 <- LoadField(v4 T{_Uint16List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v36 <- UnboxInt64([non-speculative], v17 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v6, v36 T{_Smi}) T{bool} goto (5, 6)
B5
ParallelMove rdi <- rdi
StaticCall:40( _consumeBuffer@0150898<0> v2, using unchecked entrypoint)
ParallelMove  goto:46 B7
B6
B7
B8
ParallelMove rax <- C
DartReturn:56(v0)
CheckStackOverflowSlowPath
B0
B15
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rsi, fp[-1] <- rsi
CheckStackOverflow:26(stack=0, loop=0)
ParallelMove rax <- rbx, rdx <- C, rcx <- C
t0 <- AssertAssignable:28(v3, v13, 'string', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
v68 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v93 <- UnboxInt64([non-speculative], v68 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdi <- C, rsi <- C, rdx <- rcx, fp[-2] <- rcx
v17 <- StaticCall:32( checkValidRange<0> v97 T{_Smi}, v0, v93 T{_Smi}, result_type = T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rax <- rax
ParallelMove fp[-4] <- rax
Branch if EqualityCompare(v17 == v97 T{_Smi}) T{bool} goto (6, 7)
B6
ParallelMove rax <- C
v63 <- AllocateTypedData:10(v5 T{_Smi}) T{_Uint8List}
ParallelMove rax <- rax
DartReturn:48(v63 T{_Uint8List})
B7
ParallelMove rcx <- rax
v22 <- BinaryInt64Op(* [tr], v17, v98 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- rcx
v20 <- AllocateObject:52(cls=_Utf8Encoder) T{_Utf8Encoder}
ParallelMove rcx <- rax, rsi <- C
ParallelMove fp[-5] <- rcx
StoreField(v20 T{_Utf8Encoder} . _bufferIndex@10003594 = v97 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rdx <- fp[-3]
v94 <- BoxInt64(v22 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v79 <- AllocateTypedData:10(v94 T{int}) T{_Uint8List}
ParallelMove rcx <- rax, rax <- fp[-5]
ParallelMove fp[-6] <- rcx
StoreField(v20 T{_Utf8Encoder} . _buffer@10003594 = v79 T{_Uint8List}, NoStoreBarrier)
ParallelMove rdi <- rax, rsi <- fp[-1], rdx <- fp[-4]
v23 <- StaticCall:58( _fillBuffer@10003594<0> v20, v3 T{String}, v17, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax, rax <- fp[-4]
Branch if EqualityCompare(v23 != v17) T{bool} goto (18, 9)
B18
ParallelMove rax <- rax
v28 <- BinaryInt64Op(- [tr], v17, v99 T{_Smi}) [-4611686018427387905, 4611686018427387902] int64
ParallelMove rax <- fp[-2], rbx <- rax
t0 <- GenericCheckBound:72(v93 T{_Smi}, v28 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-5]
StaticCall:74( _writeReplacementCharacter@10003594<0> v20, using unchecked entrypoint)
ParallelMove  goto:80 B10
B9
B10
v26 <- LoadField(v20 . _bufferIndex@10003594) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-6], rsi <- C, rdx <- rdx
v27 <- StaticCall:88( sublist<0> v79, v97 T{_Smi}, v26, using unchecked entrypoint, result_type = T{_Uint8List}) T{_Uint8List}
ParallelMove rax <- rax
DartReturn:90(v27)
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . _buffer@10003594 {final}) T{_Uint8List}
v4 <- LoadField(v2 . _bufferIndex@10003594) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rdx
v6 <- BinaryInt64Op(+ [tr], v4, v55 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Encoder} . _bufferIndex@10003594 = v6 T{int} <int64>)
v16 <- LoadField(v3 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r8 <- r8
v49 <- UnboxInt64([non-speculative], v16) [0, 4611686018427387903] int64
ParallelMove rax <- r8, rbx <- rdx
GenericCheckBound:18(v49 T{_Smi}, v4) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:18([_Uint8List] v3, v4 T{int}, v43, NoStoreBarrier)
ParallelMove rdx <- rsi
v10 <- BinaryInt64Op(+ [tr], v6 T{int}, v55 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Encoder} . _bufferIndex@10003594 = v10 T{int} <int64>)
ParallelMove rax <- r8, rbx <- rsi
GenericCheckBound:28(v49 T{_Smi}, v6 T{int}) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:28([_Uint8List] v3 T{_Uint8List}, v6 T{int}, v44, NoStoreBarrier)
ParallelMove rsi <- rdx
v14 <- BinaryInt64Op(+ [tr], v10 T{int}, v55 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Encoder} . _bufferIndex@10003594 = v14 T{int} <int64>)
ParallelMove rax <- r8, rbx <- rdx
GenericCheckBound:38(v49 T{_Smi}, v10 T{int}) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:38([_Uint8List] v3 T{_Uint8List}, v10 T{int}, v45, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:40(v0)
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove r8 <- rdi, rcx <- rsi, fp[-13] <- rdi, fp[-14] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
Branch if EqualityCompare(v377 T{_Smi} != v4) T{bool} goto (3, 6)
B3
ParallelMove rsi <- rdx
v96 <- BinaryInt64Op(- [tr], v4, v378 T{_Smi}) [-4611686018427387905, 4611686018427387902] int64
v237 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rax <- rax
v349 <- UnboxInt64([non-speculative], v237) [0, 2305843009213693951] int64
ParallelMove rax <- rax, rbx <- rsi
t0 <- GenericCheckBound:20(v349 T{_Smi}, v96 T{int}) [-9223372036854775808, 9223372036854775807] int64
v239 <- LoadClassId(v3 T{_StringBase}) [93, 94] T{_Smi}
Branch if StrictCompare:20(===, v239, v189 T{_Smi}) goto (77, 78)
B77
v243 <- LoadIndexed([_OneByteString] v3 T{_OneByteString}, v96 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:20 B76
B78
v241 <- LoadIndexed([_TwoByteString] v3 T{_StringBase}, v96 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:20 B76
B76
ParallelMove rax <- rax
v446 <- IntConverter(int64->uint32[tr], v242 T{_Smi}) uint32
ParallelMove rax <- rax
v252 <- BinaryUint32Op(& [tr], v446 T{_Smi}, v457 T{_Smi}) [0, 64512] uint32
ParallelMove rax <- rax
v447 <- IntConverter(uint32->int64, v252) int64
Branch if EqualityCompare(v447 T{_Smi} == v380 T{_Smi}) T{bool} goto (4, 7)
B4
ParallelMove r10 <- rsi goto:48 B8
B7
B6
ParallelMove r9 <- C
ParallelMove  goto:40 B5
B5
ParallelMove r10 <- rdx goto:50 B8
B8
ParallelMove fp[-5] <- r10
v221 <- LoadField:360(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove r12 <- rax
v350 <- UnboxInt64:360([non-speculative], v221) [0, 2305843009213693951] int64
ParallelMove fp[-1] <- r12
v223 <- LoadClassId:360(v3 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove fp[-12] <- r13
v25 <- LoadField:360(v2 . _buffer@10003594 {final}) T{_Uint8List}
ParallelMove fp[-7] <- rdx
v140 <- LoadField:360(v25 T{_Uint8List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rax
v363 <- UnboxInt64:360([non-speculative], v140 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove fp[-2] <- rsi
ParallelMove rdi <- rax
v358 <- UnboxInt64:360([non-speculative], v140 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove fp[-3] <- rdi
ParallelMove rbx <- rax
v357 <- UnboxInt64:360([non-speculative], v140 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove fp[-4] <- rbx
ParallelMove r12 <- rax
v355 <- UnboxInt64:360([non-speculative], v140 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove fp[-11] <- r12
ParallelMove rax <- rax
v352 <- UnboxInt64:360([non-speculative], v140 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove fp[-8] <- rax
ParallelMove rsi <- C goto:360 B37
B37
  Loop 0
ParallelMove fp[-9] <- rsi
CheckStackOverflow:364(stack=0, loop=1)
Branch if RelationalOp(<, v9, v8) T{bool} goto (9, 10)
B9
  Loop 0
ParallelMove rax <- fp[-1], rbx <- rsi, rdi <- rax
t0 <- GenericCheckBound:66(v350 T{_Smi}, v9 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:66(===, v223, v189 T{_Smi}) goto (72, 73)
B72
  Loop 0
v227 <- LoadIndexed([_OneByteString] v3 T{_OneByteString}, v9 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:66 B71
B73
  Loop 0
v225 <- LoadIndexed([_TwoByteString] v3 T{_StringBase}, v9 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:66 B71
B71
  Loop 0
ParallelMove fp[-6] <- rax
Branch if RelationalOp(<=, v226 T{_Smi}, v381 T{_Smi}) T{bool} goto (11, 15)
B11
  Loop 0
v89 <- LoadField(v2 . _bufferIndex@10003594) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v89, v352 T{_Smi}) T{bool} goto (12, 14)
B14
  Loop 0
ParallelMove r10 <- rbx
v95 <- BinaryInt64Op(+ [tr], v89 T{int}, v378 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Encoder} . _bufferIndex@10003594 = v95 T{int} <int64>)
ParallelMove rax <- rdi, rbx <- rbx, r10 <- rbx
GenericCheckBound:108(v352 T{_Smi}, v89 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-6]
StoreIndexed:108([_Uint8List] v25 T{_Uint8List}, v89 T{int}, v226, NoStoreBarrier)
ParallelMove rcx <- rsi, rdx <- r8, r9 <- rdx, rdi <- fp[-3], r8 <- fp[-2], r10 <- C goto:354 B36
B12
B15
  Loop 0
ParallelMove rax <- fp[-6]
v451 <- IntConverter(int64->uint32[tr], v226 T{_Smi}) uint32
ParallelMove rax <- rax
v200 <- BinaryUint32Op(& [tr], v451 T{_Smi}, v457 T{_Smi}) [0, 64512] uint32
ParallelMove rbx <- rax
v453 <- IntConverter(uint32->int64, v200) int64
Branch if EqualityCompare(v453 T{_Smi} == v380 T{_Smi}) T{bool} goto (16, 22)
B16
  Loop 0
v75 <- LoadField(v2 . _bufferIndex@10003594) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v77 <- BinaryInt64Op(+ [tr], v75, v382 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v77, v355 T{_Smi}) T{bool} goto (17, 18)
B18
  Loop 0
ParallelMove r10 <- rsi
v81 <- BinaryInt64Op(+ [tr], v9 T{int}, v378 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-1], rbx <- r10, fp[-10] <- r10
t0 <- GenericCheckBound:146(v350 T{_Smi}, v81 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:146(===, v223 T{_Smi}, v189 T{_Smi}) goto (60, 61)
B60
  Loop 0
v185 <- LoadIndexed([_OneByteString] v3 T{_OneByteString}, v81 T{int}) [0, 255] int64
ParallelMove rbx <- rax goto:146 B59
B61
  Loop 0
v183 <- LoadIndexed([_TwoByteString] v3 T{_StringBase}, v81 T{int}) [0, 65535] int64
ParallelMove rbx <- rax goto:146 B59
B59
  Loop 0
ParallelMove rdi <- r8, rsi <- fp[-6], rdx <- rbx, rbx <- rdi
v83 <- StaticCall:148( _writeSurrogate@10003594<0> v2, v226 T{_Smi}, v184 T{_Smi}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:152(===, v83 T{bool}, v7) goto (19, 20)
BoolTest
B19
  Loop 0
ParallelMove rax <- fp[-10] goto:164 B21
B20
  Loop 0
ParallelMove rax <- fp[-9] goto:166 B21
B21
  Loop 0
ParallelMove rcx <- rax, rdx <- fp[-13], r9 <- fp[-7], rdi <- fp[-3], r8 <- fp[-2], r10 <- C goto:348 B35
B17
B22
  Loop 0
ParallelMove rax <- rax
v452 <- IntConverter(uint32->int64, v200) int64
Branch if EqualityCompare(v452 T{_Smi} == v383 T{_Smi}) T{bool} goto (23, 26)
B23
  Loop 0
ParallelMove rax <- fp[-13], rcx <- fp[-4]
v67 <- LoadField(v2 . _bufferIndex@10003594) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v69 <- BinaryInt64Op(+ [tr], v67, v384 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v69, v357 T{_Smi}) T{bool} goto (24, 25)
B25
  Loop 0
ParallelMove rdi <- rax
StaticCall:202( _writeReplacementCharacter@10003594<0> v2, using unchecked entrypoint)
ParallelMove rdx <- fp[-13], r9 <- fp[-7], rdi <- fp[-3], r8 <- fp[-2], r10 <- C goto:342 B34
B24
B26
  Loop 0
ParallelMove rcx <- fp[-6]
Branch if RelationalOp(<=, v226 T{_Smi}, v385 T{_Smi}) T{bool} goto (27, 30)
B27
  Loop 0
ParallelMove rdx <- fp[-13], rdi <- fp[-3]
v50 <- LoadField(v2 . _bufferIndex@10003594) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rsi
v51 <- BinaryInt64Op(+ [tr], v50, v378 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v51, v358 T{_Smi}) T{bool} goto (28, 29)
B29
  Loop 0
ParallelMove r9 <- fp[-7], r10 <- C
StoreField(v2 T{_Utf8Encoder} . _bufferIndex@10003594 = v51 T{int} <int64>)
ParallelMove r12 <- rcx
v59 <- ShiftInt64Op(>> [tr], v226 T{_Smi}, v386 T{_Smi}) [0, 1023] int64
ParallelMove r12 <- r12
v60 <- BinaryInt64Op(| [tr], v59, v387 T{_Smi}) [0, 1023] int64
ParallelMove rax <- rdi, rbx <- rsi
GenericCheckBound:250(v358 T{_Smi}, v50 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r12
StoreIndexed:250([_Uint8List] v25 T{_Uint8List}, v50 T{int}, v60 T{int}, NoStoreBarrier)
ParallelMove rsi <- r8
v63 <- BinaryInt64Op(+ [tr], v51 T{int}, v378 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Encoder} . _bufferIndex@10003594 = v63 T{int} <int64>)
ParallelMove rsi <- rcx
v450 <- IntConverter(int64->uint32[tr], v226 T{_Smi}) uint32
ParallelMove rsi <- rsi
v64 <- BinaryUint32Op(& [tr], v450 T{_Smi}, v458 T{_Smi}) [0, 63] uint32
ParallelMove rsi <- rsi
v454 <- IntConverter(uint32->int64, v64) int64
ParallelMove rsi <- rsi
v65 <- BinaryInt64Op(| [tr], v454 T{_Smi}, v389 T{_Smi}) [0, 255] int64
ParallelMove rax <- rdi, rbx <- r8
GenericCheckBound:264(v358 T{_Smi}, v51 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rsi
StoreIndexed:264([_Uint8List] v25 T{_Uint8List}, v51 T{int}, v65 T{int}, NoStoreBarrier)
ParallelMove r8 <- fp[-2] goto:336 B33
B28
B30
  Loop 0
ParallelMove rdx <- fp[-13], r9 <- fp[-7], rdi <- fp[-3], r8 <- fp[-2], r10 <- C
v22 <- LoadField(v2 . _bufferIndex@10003594) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- rsi
v24 <- BinaryInt64Op(+ [tr], v22, v390 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v24, v363 T{_Smi}) T{bool} goto (31, 32)
B32
  Loop 0
ParallelMove r12 <- rsi
v31 <- BinaryInt64Op(+ [tr], v22 T{int}, v378 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Encoder} . _bufferIndex@10003594 = v31 T{int} <int64>)
ParallelMove r13 <- rcx
v34 <- ShiftInt64Op(>> [tr], v226 T{_Smi}, v391 T{_Smi}) [0, 15] int64
ParallelMove r13 <- r13
v35 <- BinaryInt64Op(| [tr], v34, v392 T{_Smi}) [0, 255] int64
ParallelMove rax <- r8, rbx <- rsi
GenericCheckBound:302(v363 T{_Smi}, v22 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r13
StoreIndexed:302([_Uint8List] v25 T{_Uint8List}, v22 T{int}, v35 T{int}, NoStoreBarrier)
ParallelMove rsi <- r12
v38 <- BinaryInt64Op(+ [tr], v31 T{int}, v378 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Encoder} . _bufferIndex@10003594 = v38 T{int} <int64>)
ParallelMove r13 <- rcx
v449 <- IntConverter(int64->uint32[tr], v226 T{_Smi}) uint32
ParallelMove r13 <- r13
v41 <- ShiftUint32Op(>> [tr], v449 T{_Smi}, v386 T{_Smi}) [0, 1023] uint32
ParallelMove r13 <- r13
v43 <- BinaryUint32Op(& [tr], v41, v458 T{_Smi}) [0, 63] uint32
ParallelMove r13 <- r13
v455 <- IntConverter(uint32->int64, v43) int64
ParallelMove r13 <- r13
v44 <- BinaryInt64Op(| [tr], v455 T{_Smi}, v389 T{_Smi}) [0, 255] int64
ParallelMove rax <- r8, rbx <- r12
GenericCheckBound:318(v363 T{_Smi}, v31 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r13
StoreIndexed:318([_Uint8List] v25 T{_Uint8List}, v31 T{int}, v44 T{int}, NoStoreBarrier)
ParallelMove r12 <- rsi
v47 <- BinaryInt64Op(+ [tr], v38 T{int}, v378 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Encoder} . _bufferIndex@10003594 = v47 T{int} <int64>)
ParallelMove rcx <- rcx
v448 <- IntConverter(int64->uint32[tr], v226 T{_Smi}) uint32
ParallelMove rcx <- rcx
v48 <- BinaryUint32Op(& [tr], v448 T{_Smi}, v458 T{_Smi}) [0, 63] uint32
ParallelMove rcx <- rcx
v456 <- IntConverter(uint32->int64, v48) int64
ParallelMove rcx <- rcx
v49 <- BinaryInt64Op(| [tr], v456 T{_Smi}, v389 T{_Smi}) [0, 255] int64
ParallelMove rax <- r8, rbx <- rsi
GenericCheckBound:332(v363 T{_Smi}, v38 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx
StoreIndexed:332([_Uint8List] v25 T{_Uint8List}, v38 T{int}, v49 T{int}, NoStoreBarrier)
ParallelMove  goto:338 B33
B33
B34
  Loop 0
ParallelMove rcx <- fp[-9] goto:350 B35
B35
B36
  Loop 0
ParallelMove rcx <- rcx
v88 <- BinaryInt64Op(+ [tr], v86, v378 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rcx, r8 <- rdx, rcx <- fp[-14], r10 <- fp[-5], rdx <- r9, r13 <- fp[-12], rax <- fp[-8], r12 <- fp[-11], rbx <- fp[-4], r9 <- C goto:362 B37
B31
B10
B13
ParallelMove rax <- fp[-9]
DartReturn:368(v9)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rcx <- rdx
v163 <- IntConverter(int64->uint32[tr], v4 T{_Smi}) uint32
ParallelMove rcx <- rcx
v96 <- BinaryUint32Op(& [tr], v163 T{_Smi}, v173 T{_Smi}) [0, 64512] uint32
ParallelMove rcx <- rcx
v164 <- IntConverter(uint32->int64, v96) int64
Branch if EqualityCompare(v164 T{_Smi} == v134 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C, rcx <- C
ParallelMove rsi <- rsi
v161 <- IntConverter(int64->uint32[tr], v3 T{_Smi}) uint32
ParallelMove rsi <- rsi
v58 <- BinaryUint32Op(& [tr], v161 T{_Smi}, v174 T{_Smi}) [0, 1023] uint32
ParallelMove rsi <- rsi
v165 <- IntConverter(uint32->int64, v58) int64
ParallelMove rsi <- rsi
v60 <- ShiftInt64Op(<< [tr], v165 T{_Smi}, v136 T{_Smi}) [0, 1047552] int64
ParallelMove rsi <- rsi
v61 <- BinaryInt64Op(+ [tr], v60, v137 T{_Smi}) [65536, 1113088] int64
ParallelMove rdx <- rdx
v162 <- IntConverter(int64->uint32[tr], v4 T{_Smi}) uint32
ParallelMove rdx <- rdx
v62 <- BinaryUint32Op(& [tr], v162 T{_Smi}, v174 T{_Smi}) [0, 1023] uint32
ParallelMove rdx <- rdx
v166 <- IntConverter(uint32->int64, v62) int64
ParallelMove rsi <- rsi
v63 <- BinaryInt64Op(| [tr], v61, v166 T{_Smi}) [0, 2097151] int64
v9 <- LoadField(v2 . _buffer@10003594 {final}) T{_Uint8List}
v10 <- LoadField(v2 . _bufferIndex@10003594) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- r8
v12 <- BinaryInt64Op(+ [tr], v10, v138 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Encoder} . _bufferIndex@10003594 = v12 T{int} <int64>)
ParallelMove rax <- rsi
v15 <- ShiftInt64Op(>> [tr], v63 T{int}, v139 T{_Smi}) [0, 7] int64
ParallelMove r10 <- rax
v16 <- BinaryInt64Op(| [tr], v15, v140 T{_Smi}) [0, 255] int64
v38 <- LoadField(v9 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r12 <- rax
v125 <- UnboxInt64([non-speculative], v38) [0, 4611686018427387903] int64
ParallelMove rax <- r12, rbx <- r8
GenericCheckBound:34(v125 T{_Smi}, v10) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r10
StoreIndexed:34([_Uint8List] v9, v10 T{int}, v16 T{int}, NoStoreBarrier)
ParallelMove r8 <- r9
v19 <- BinaryInt64Op(+ [tr], v12 T{int}, v138 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Encoder} . _bufferIndex@10003594 = v19 T{int} <int64>)
ParallelMove rax <- rsi
v169 <- IntConverter(int64->uint32[tr], v63 T{int}) uint32
ParallelMove rax <- rax
v22 <- ShiftUint32Op(>> [tr], v169 T{int}, v141 T{_Smi}) [0, 511] uint32
ParallelMove rax <- rax
v24 <- BinaryUint32Op(& [tr], v22, v175 T{_Smi}) [0, 63] uint32
ParallelMove rax <- rax
v170 <- IntConverter(uint32->int64, v24) int64
ParallelMove r10 <- rax
v25 <- BinaryInt64Op(| [tr], v170 T{_Smi}, v143 T{_Smi}) [0, 255] int64
ParallelMove rax <- r12, rbx <- r9
GenericCheckBound:50(v125 T{_Smi}, v12 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r10
StoreIndexed:50([_Uint8List] v9 T{_Uint8List}, v12 T{int}, v25 T{int}, NoStoreBarrier)
ParallelMove r9 <- r8
v28 <- BinaryInt64Op(+ [tr], v19 T{int}, v138 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Encoder} . _bufferIndex@10003594 = v28 T{int} <int64>)
ParallelMove rax <- rsi
v168 <- IntConverter(int64->uint32[tr], v63 T{int}) uint32
ParallelMove rax <- rax
v30 <- ShiftUint32Op(>> [tr], v168 T{int}, v144 T{_Smi}) [0, 32767] uint32
ParallelMove rax <- rax
v31 <- BinaryUint32Op(& [tr], v30, v175 T{_Smi}) [0, 63] uint32
ParallelMove rax <- rax
v171 <- IntConverter(uint32->int64, v31) int64
ParallelMove r10 <- rax
v32 <- BinaryInt64Op(| [tr], v171 T{_Smi}, v143 T{_Smi}) [0, 255] int64
ParallelMove rax <- r12, rbx <- r8
GenericCheckBound:66(v125 T{_Smi}, v19 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r10
StoreIndexed:66([_Uint8List] v9 T{_Uint8List}, v19 T{int}, v32 T{int}, NoStoreBarrier)
ParallelMove rax <- r9
v35 <- BinaryInt64Op(+ [tr], v28 T{int}, v138 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Encoder} . _bufferIndex@10003594 = v35 T{int} <int64>)
ParallelMove rsi <- rsi
v167 <- IntConverter(int64->uint32[tr], v63 T{int}) uint32
ParallelMove rsi <- rsi
v36 <- BinaryUint32Op(& [tr], v167 T{int}, v175 T{_Smi}) [0, 63] uint32
ParallelMove rsi <- rsi
v172 <- IntConverter(uint32->int64, v36) int64
ParallelMove rsi <- rsi
v37 <- BinaryInt64Op(| [tr], v172 T{_Smi}, v143 T{_Smi}) [0, 255] int64
ParallelMove rax <- r12, rbx <- r9
GenericCheckBound:80(v125 T{_Smi}, v28 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rsi
StoreIndexed:80([_Uint8List] v9 T{_Uint8List}, v28 T{int}, v37 T{int}, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:82(v6)
B4
ParallelMove rdi <- rdi
StaticCall:86( _writeReplacementCharacter@10003594<0> v2, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:88(v7)
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
Branch if RelationalOp(<=, v3, v115 T{_Smi}) T{bool} goto (3, 6)
B3
Branch if RelationalOp(<, v3, v116 T{_Smi}) T{bool} goto (4, 5)
B5
ParallelMove rdi <- rcx, rsi <- C
StaticCall:38( _ensureCapacity@0150898<0> v2, v117 T{_Smi}, using unchecked entrypoint)
ParallelMove rcx <- fp[-1]
v31 <- LoadField(v2 . _buffer@0150898) T{_Uint16List?}
CheckNull:42(v31, CastError) T{_Uint16List}
v32 <- LoadField(v2 . _bufferPosition@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rsi
v33 <- BinaryInt64Op(+ [tr], v32, v117 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{StringBuffer} . _bufferPosition@0150898 = v33 T{int} <int64>)
v37 <- LoadField(v31 T{_Uint16List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v106 <- UnboxInt64([non-speculative], v37) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:50(v106 T{_Smi}, v32) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-2]
StoreIndexed:50([_Uint16List] v31 T{_Uint16List}, v32 T{int}, v3 T{int}, NoStoreBarrier)
v34 <- LoadField(v2 . _bufferCodeUnitMagnitude@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v35 <- BinaryInt64Op(| [tr], v34, v3) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{StringBuffer} . _bufferCodeUnitMagnitude@0150898 = v35 T{int} <int64>)
ParallelMove  goto:118 B9
B6
Branch if RelationalOp(>, v3, v118 T{_Smi}) T{bool} goto (7, 8)
B8
ParallelMove rdi <- rcx, rsi <- C
StaticCall:78( _ensureCapacity@0150898<0> v2, v119 T{_Smi}, using unchecked entrypoint)
ParallelMove rcx <- fp[-2]
v11 <- BinaryInt64Op(- [tr], v3, v120 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-1]
v12 <- LoadField(v2 . _buffer@0150898) T{_Uint16List?}
CheckNull:84(v12, CastError) T{_Uint16List}
v13 <- LoadField(v2 . _bufferPosition@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rdi
v15 <- BinaryInt64Op(+ [tr], v13, v117 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{StringBuffer} . _bufferPosition@0150898 = v15 T{int} <int64>)
ParallelMove rax <- rcx
v18 <- ShiftInt64Op(>> [tr], v11, v121 T{_Smi}) [-9007199254740992, 9007199254740991] int64
ParallelMove r9 <- rax
v19 <- BinaryInt64Op(| [tr], v18, v122 T{_Smi}) [-9007199254740992, 9007199254740991] int64
v40 <- LoadField(v12 T{_Uint16List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r10 <- rax
v108 <- UnboxInt64([non-speculative], v40) [0, 4611686018427387903] int64
ParallelMove rax <- r10, rbx <- rdi
GenericCheckBound:96(v108 T{_Smi}, v13) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:96([_Uint16List] v12 T{_Uint16List}, v13 T{int}, v19 T{int}, NoStoreBarrier)
ParallelMove rax <- r8
v21 <- BinaryInt64Op(+ [tr], v15 T{int}, v117 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{StringBuffer} . _bufferPosition@0150898 = v21 T{int} <int64>)
ParallelMove rcx <- rcx
v138 <- IntConverter(int64->uint32[tr], v11) uint32
ParallelMove rax <- C
ParallelMove rcx <- rcx
v24 <- BinaryUint32Op(& [tr], v138 T{int}, v140 T{_Smi}) [0, 1023] uint32
ParallelMove rcx <- rcx
v139 <- IntConverter(uint32->int64, v24) int64
ParallelMove rcx <- rcx
v25 <- BinaryInt64Op(| [tr], v139 T{_Smi}, v124 T{_Smi}) [0, 65535] int64
ParallelMove rax <- r10, rbx <- r8
GenericCheckBound:108(v108 T{_Smi}, v15 T{int}) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:108([_Uint16List] v12 T{_Uint16List}, v15 T{int}, v25 T{int}, NoStoreBarrier)
v26 <- LoadField(v2 . _bufferCodeUnitMagnitude@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v27 <- BinaryInt64Op(| [tr], v26, v115 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{StringBuffer} . _bufferCodeUnitMagnitude@0150898 = v27 T{int} <int64>)
ParallelMove  goto:120 B9
B9
ParallelMove rax <- C
DartReturn:122(v0)
B4
ParallelMove rcx <- rax
v104 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v36 <- AllocateObject:30(cls=RangeError) T{RangeError}
ParallelMove rax <- rax
ParallelMove fp[-3] <- rax
MoveArgument(sp[3] <- v36)
MoveArgument(sp[2] <- v104 T{int})
MoveArgument(sp[1] <- v29)
MoveArgument(sp[0] <- v7)
StaticCall:32( RangeError.range<0> v36, v104 T{int}, v29, v7)
ParallelMove rax <- fp[-3]
Throw:34(v36)
B7
ParallelMove rcx <- rax
v105 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v28 <- AllocateObject:70(cls=RangeError) T{RangeError}
ParallelMove rax <- rax
ParallelMove fp[-3] <- rax
MoveArgument(sp[3] <- v28)
MoveArgument(sp[2] <- v105 T{int})
MoveArgument(sp[1] <- v29)
MoveArgument(sp[0] <- v7)
StaticCall:72( RangeError.range<0> v28, v105 T{int}, v29, v7)
ParallelMove rax <- fp[-3]
Throw:74(v28)
CheckStackOverflowSlowPath
slow path check null (cast) operation
slow path check bound operation
slow path check null (cast) operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove r9 <- rdi, r8 <- rsi, rcx <- rdx, fp[-3] <- rdi, fp[-4] <- rsi, fp[-8] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
Branch if StrictCompare:10(===, v2, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:16(v0)
B4
Branch if EqualityCompare(v3 == v4) T{bool} goto (5, 6)
B5
ParallelMove rax <- C
DartReturn:30(v20)
B6
v113 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rax
v175 <- UnboxInt64([non-speculative], v113) [0, 2305843009213693951] int64
ParallelMove rax <- rdx, rbx <- r8
t0 <- GenericCheckBound:34(v175 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
v115 <- LoadClassId(v2 T{_StringBase}) [93, 94] T{_Smi}
Branch if StrictCompare:34(===, v115, v44 T{_Smi}) goto (46, 47)
B46
v119 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v3 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:34 B45
B47
v117 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v3 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:34 B45
B45
Branch if EqualityCompare(v118 T{_Smi} == v183 T{_Smi}) T{bool} goto (7, 17)
B7
ParallelMove rcx <- rcx
v42 <- BinaryInt64Op(- [tr], v4, v184 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rdx, rbx <- rcx, fp[-2] <- rcx
t0 <- GenericCheckBound:48(v175 T{_Smi}, v42 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:48(===, v115 T{_Smi}, v44 T{_Smi}) goto (41, 42)
B41
v103 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v42 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:48 B40
B42
v101 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v42 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:48 B40
B40
Branch if EqualityCompare(v102 T{_Smi} != v185 T{_Smi}) T{bool} goto (8, 9)
B9
ParallelMove rax <- r8
v46 <- BinaryInt64Op(+ [tr], v3 T{int}, v184 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- r9, rsi <- rax, rdx <- rcx, fp[-1] <- rax
v48 <- StaticCall:74( _checkZoneID@0150898<0> v2 T{String?}, v46, v42 T{int}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax, rdx <- fp[-2]
ParallelMove fp[-6] <- rcx
Branch if RelationalOp(<, v48, v42 T{int}) T{bool} goto (10, 14)
B10
ParallelMove r8 <- rcx
v58 <- BinaryInt64Op(+ [tr], v48, v184 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-5] <- r8
v178 <- BoxInt64(v58) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v178 T{int})
ParallelMove rdi <- fp[-3], rsi <- C
v59 <- StaticCall:90( startsWith<0> v2 T{String?}, v34, v178 T{int}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:94(===, v59 T{bool}, v6) goto (11, 12)
BoolTest
B11
ParallelMove rax <- fp[-6]
v64 <- BinaryInt64Op(+ [tr], v48, v186 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rax goto:108 B13
B12
ParallelMove rsi <- fp[-5] goto:110 B13
B13
ParallelMove rdi <- fp[-3], rsi <- rsi, rdx <- fp[-2]
v63 <- StaticCall:114( _normalizeZoneID@0150898<0> v2 T{String?}, v61, v42 T{int}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:120 B15
B14
ParallelMove rcx <- C goto:122 B15
B15
ParallelMove rdi <- fp[-3], rsi <- fp[-1], rdx <- rax, fp[-7] <- rcx
StaticCall:126( parseIPv6Address<0> v2 T{String?}, v46 T{int}, v48)
ParallelMove rcx <- fp[-6]
v177 <- BoxInt64(v48) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v177 T{int})
ParallelMove rdi <- fp[-3], rsi <- fp[-4]
v54 <- StaticCall:128( substring<0> v2 T{String?}, v3 T{int}, v177 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
v222 <- LoadClassId(<non-smi> v54) int64
MoveArgument(sp[0] <- v54)
ParallelMove rcx <- rcx
v55 <- DispatchTableCall( cid=v222 String.toLowerCase<0>, v54) T{String}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v55 T{String})
MoveArgument(sp[0] <- v52)
v56 <- StaticCall:132( +<0> v55 T{String}, v52, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v56)
MoveArgument(sp[0] <- v32)
v57 <- StaticCall:134( +<0> v56, v32, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:136(v57)
B17
ParallelMove rdi <- fp[-4], r8 <- fp[-3] goto:238 B28
B28
  Loop 0
CheckStackOverflow:242(stack=0, loop=1)
Branch if RelationalOp(<, v13, v4) T{bool} goto (18, 30)
B18
  Loop 0
ParallelMove rax <- rdx, rbx <- rdi
t0 <- GenericCheckBound:162(v175 T{_Smi}, v13 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:162(===, v115 T{_Smi}, v44 T{_Smi}) goto (34, 35)
B34
  Loop 0
v81 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v13 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:162 B33
B35
  Loop 0
v79 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v13 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:162 B33
B33
  Loop 0
Branch if EqualityCompare(v80 T{_Smi} == v187 T{_Smi}) T{bool} goto (20, 27)
B27
  Loop 0
ParallelMove rdi <- rdi
v19 <- BinaryInt64Op(+ [tr], v13 T{int}, v184 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:240 B28
B20
ParallelMove rdi <- r8, rsi <- fp[-4], rdx <- rcx
v21 <- StaticCall:174( _checkZoneID@0150898<0> v2 T{String?}, v3 T{int}, v4, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax, rdx <- fp[-8]
ParallelMove fp[-2] <- rcx
Branch if RelationalOp(<, v21, v4) T{bool} goto (21, 25)
B21
ParallelMove r8 <- rcx
v35 <- BinaryInt64Op(+ [tr], v21, v184 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-1] <- r8
v181 <- BoxInt64(v35) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v181 T{int})
ParallelMove rdi <- fp[-3], rsi <- C
v36 <- StaticCall:188( startsWith<0> v2 T{String?}, v34, v181 T{int}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:192(===, v36 T{bool}, v6) goto (22, 23)
BoolTest
B22
ParallelMove rax <- fp[-2]
v41 <- BinaryInt64Op(+ [tr], v21, v186 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rax goto:206 B24
B23
ParallelMove rsi <- fp[-1] goto:208 B24
B24
ParallelMove rdi <- fp[-3], rsi <- rsi, rdx <- fp[-8]
v39 <- StaticCall:210( _normalizeZoneID@0150898<0> v2 T{String?}, v38, v4, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:216 B26
B25
ParallelMove rcx <- C goto:218 B26
B26
ParallelMove rdi <- fp[-3], rsi <- fp[-4], rdx <- rax, fp[-7] <- rcx
StaticCall:220( parseIPv6Address<0> v2 T{String?}, v3 T{int}, v21)
ParallelMove rbx <- C, r10 <- C
v26 <- CreateArray:222(v0, v25) T{_List}
ParallelMove rcx <- rax
ParallelMove fp[-9] <- rcx
StoreIndexed([_List] v26, v27, v28, NoStoreBarrier)
ParallelMove rdx <- fp[-2]
v180 <- BoxInt64(v21) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v180 T{int})
ParallelMove rdi <- fp[-3], rsi <- fp[-4]
v29 <- StaticCall:224( substring<0> v2 T{String?}, v3 T{int}, v180 T{int}, using unchecked entrypoint) T{String}
ParallelMove rdx <- fp[-9], rax <- rax
StoreIndexed([_List] v26, v18, v29)
MoveArgument(sp[0] <- v26)
v30 <- StaticCall:226( _interpolate@0150898<0> v26, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v30)
MoveArgument(sp[0] <- v24)
v31 <- StaticCall:228( +<0> v30, v24, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v31)
MoveArgument(sp[0] <- v32)
v33 <- StaticCall:230( +<0> v31, v32, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:232(v33)
B30
ParallelMove rdi <- fp[-3], rsi <- fp[-4], rdx <- fp[-8]
v12 <- StaticCall:252( _normalizeRegName@0150898<0> v2 T{String?}, v3 T{int}, v4, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:254(v12)
B8
ParallelMove rdi <- fp[-3], rsi <- fp[-4], rdx <- C
v66 <- StaticCall:60( _fail@0150898<0> v2 T{String?}, v3 T{int}, v65) T{Never}
v67 <- AllocateObject:62(cls=ReachabilityError, <not-aliased>) T{ReachabilityError}
ParallelMove rcx <- rax, rax <- C
StoreField(v67 T{ReachabilityError} . _message@9040228 = v90 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:66(v67)
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove r9 <- rdi, r8 <- rsi, rcx <- rdx, fp[-7] <- rdi, fp[-8] <- rsi, fp[-9] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v373 <- LoadField:408(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove r10 <- rax
v633 <- UnboxInt64:408([non-speculative], v373) [0, 2305843009213693951] int64
ParallelMove fp[-6] <- r10
v375 <- LoadClassId:408(v2 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove fp[-5] <- r12
ParallelMove rdi <- C, rsi <- r8, rdx <- r8, r13 <- C goto:408 B59
B59
  Loop 0
ParallelMove fp[-1] <- rdx, fp[-2] <- rsi, fp[-3] <- rdi, fp[-4] <- r13
CheckStackOverflow:406(stack=0, loop=1)
Branch if RelationalOp(<, v9, v4) T{bool} goto (58, 60)
B58
  Loop 0
ParallelMove rax <- r10, rbx <- rdx
t0 <- GenericCheckBound:18(v633 T{_Smi}, v9 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:18(===, v375, v206 T{_Smi}) goto (154, 155)
B154
  Loop 0
v379 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v9 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:18 B153
B155
  Loop 0
v377 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v9 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:18 B153
B153
  Loop 0
Branch if EqualityCompare(v378 T{_Smi} == v651 T{_Smi}) T{bool} goto (3, 22)
B3
  Loop 0
ParallelMove rdi <- r9, rsi <- rdx, rdx <- C, rax <- rdi, rbx <- rsi
v112 <- StaticCall:30( _normalizeEscape@0150898<0> v2, v9 T{int}, v5) T{String??}
ParallelMove rax <- rax
ParallelMove fp[-10] <- rax
Branch if StrictCompare:32(===, v112, v0) goto (4, 8)
B4
  Loop 0
ParallelMove rcx <- fp[-4]
Branch if StrictCompare:38(===, v10 T{bool}, v5) goto (5, 9)
BoolTest
B5
  Loop 0
ParallelMove rax <- fp[-1]
v130 <- BinaryInt64Op(+ [tr], v9 T{int}, v652 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-3], rsi <- fp[-2], rdx <- rax, r13 <- rcx goto:50 B6
B9
B8
  Loop 0
ParallelMove rcx <- fp[-4]
ParallelMove  goto:56 B7
B7
  Loop 0
Branch if StrictCompare:62(===, v7, v0) goto (10, 11)
B10
  Loop 0
v129 <- AllocateObject:68(cls=StringBuffer) T{StringBuffer}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-11] <- rcx
StoreField(v129 T{StringBuffer} . _partsCodeUnits@0150898 = v653 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v129 T{StringBuffer} . _partsCompactionIndex@0150898 = v653 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v129 T{StringBuffer} . _partsCodeUnitsSinceCompaction@0150898 = v653 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v129 T{StringBuffer} . _bufferPosition@0150898 = v653 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v129 T{StringBuffer} . _bufferCodeUnitMagnitude@0150898 = v653 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rdi <- rcx, rsi <- C
StaticCall:30( write<0> v129 T{StringBuffer}, v175 T{_OneByteString}, using unchecked entrypoint)
ParallelMove r9 <- fp[-11] goto:76 B12
B11
  Loop 0
ParallelMove r9 <- r8 goto:78 B12
B12
  Loop 0
ParallelMove fp[-11] <- r9
v630 <- BoxInt64(v9 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- fp[-2], rsi <- rax, rdx <- fp[-6]
v358 <- StaticCall:30( checkValidRange<0> v8 T{int}, v630 T{int?}, v633 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-7], rsi <- fp[-2], rdx <- rax
v359 <- StaticCall:32( _substringUnchecked@0150898<0> v2 T{_StringBase}, v8 T{int}, v358, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax, r9 <- fp[-4]
Branch if StrictCompare:84(!==, v10 T{bool}, v5) goto (13, 14)
BoolTest
B13
  Loop 0
v770 <- LoadClassId(<non-smi> v359 T{String}) int64
MoveArgument(sp[0] <- v359 T{String})
ParallelMove rcx <- rcx
v128 <- DispatchTableCall( cid=v770 String.toLowerCase<0>, v359 T{String}) T{String}
ParallelMove rax <- rax
ParallelMove rsi <- rax goto:96 B15
B14
  Loop 0
ParallelMove rsi <- rax goto:98 B15
B15
  Loop 0
ParallelMove fp[-12] <- rsi
v470 <- LoadField(v116 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v470, v176 T{_Smi}) T{bool} goto (137, 138)
B137
B138
  Loop 0
ParallelMove rdi <- fp[-11]
StaticCall:26( _consumeBuffer@0150898<0> v114 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-11], rsi <- fp[-12]
StaticCall:28( _addPart@0150898<0> v114 T{StringBuffer}, v116 T{String}, using unchecked entrypoint)
ParallelMove  goto:30 B139
B139
  Loop 0
Branch if StrictCompare:102(===, v112, v0) goto (16, 17)
B16
  Loop 0
ParallelMove rcx <- fp[-1]
v126 <- BinaryInt64Op(+ [tr], v9 T{int}, v652 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v635 <- BoxInt64(v126 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- fp[-1], rsi <- rax, rdx <- fp[-6]
v334 <- StaticCall:30( checkValidRange<0> v9 T{int}, v635 T{int?}, v633 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-7], rsi <- fp[-1], rdx <- rax
v335 <- StaticCall:32( _substringUnchecked@0150898<0> v2 T{_StringBase}, v9 T{int}, v334, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax, rax <- C goto:134 B21
B17
  Loop 0
v771 <- LoadClassId(<non-smi> v112 T{String?}) int64
MoveArgument(sp[1] <- v112 T{String?})
MoveArgument(sp[0] <- v118)
ParallelMove rcx <- rcx
v119 <- DispatchTableCall( cid=v771 String.==<0>, v112 T{String?}, v118) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:118(===, v119 T{bool}, v5) goto (18, 19)
BoolTest
B18
  Loop 0
ParallelMove rcx <- C, rax <- C goto:128 B20
B19
  Loop 0
ParallelMove rcx <- fp[-10], rax <- C goto:130 B20
B20
B21
  Loop 0
ParallelMove fp[-13] <- rax
MoveArgument(sp[0] <- v123 T{String?})
v318 <- StaticCall:10( _interpolateSingle@0150898<0> v123 T{String?}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-10] <- rax
v449 <- LoadField(v318 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v449, v176 T{_Smi}) T{bool} goto (127, 128)
B127
B128
  Loop 0
ParallelMove rdi <- fp[-11]
StaticCall:26( _consumeBuffer@0150898<0> v114 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-11], rsi <- fp[-10]
StaticCall:28( _addPart@0150898<0> v114 T{StringBuffer}, v318, using unchecked entrypoint)
ParallelMove  goto:30 B129
B129
  Loop 0
ParallelMove rcx <- fp[-1]
v125 <- BinaryInt64Op(+ [tr], v9 T{int}, v124) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-11], rbx <- rcx, rcx <- rcx, rax <- C goto:394 B57
B22
  Loop 0
ParallelMove r8 <- rdi, r9 <- r13
Branch if RelationalOp(<, v378 T{_Smi}, v655 T{_Smi}) T{bool} goto (122, 196)
B122
  Loop 0
ParallelMove rsi <- C, rdx <- C
ParallelMove rcx <- rax
v290 <- ShiftInt64Op(>> [tr], v378 T{_Smi}, v656 T{_Smi}) [0, 4095] int64
ParallelMove rax <- C, rbx <- rcx, r10 <- rax
GenericCheckBound:24(v657 T{_Smi}, v290) [-9223372036854775808, 9223372036854775807] int64
v658 <- LoadIndexed:24([_List] v311, v290 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- r10
v759 <- IntConverter(int64->uint32[tr], v378 T{_Smi}) uint32
ParallelMove rcx <- rcx
v294 <- BinaryUint32Op(& [tr], v759 T{_Smi}, v774 T{_Smi}) [0, 15] uint32
ParallelMove rcx <- rcx
v760 <- IntConverter(uint32->int64, v294) int64
ParallelMove rcx <- rcx
ParallelMove rbx <- C
v295 <- ShiftUint32Op(<< [tr], v775 T{_Smi}, v760 T{_Smi}) [1, 32768] uint32
ParallelMove rax <- rax
v638 <- UnboxUint32([tr], [non-speculative], v658 T{int?}) [0, 4294967295] uint32
ParallelMove rax <- rax
v296 <- BinaryUint32Op(& [tr], v638, v295) [0, 32768] uint32
ParallelMove rax <- rax
v761 <- IntConverter(uint32->int64, v296) int64
Branch if EqualityCompare(v761 T{_Smi} != v653 T{_Smi}) T{bool} goto (23, 194)
B23
  Loop 0
Branch if StrictCompare:156(===, v10 T{bool}, v5) goto (24, 34)
BoolTest
B24
  Loop 0
Branch if RelationalOp(<=, v660 T{_Smi}, v378 T{_Smi}) T{bool} goto (25, 35)
B25
  Loop 0
Branch if RelationalOp(>=, v661 T{_Smi}, v378 T{_Smi}) T{bool} goto (26, 36)
B26
  Loop 0
Branch if StrictCompare:182(===, v7, v0) goto (27, 28)
B27
  Loop 0
v91 <- AllocateObject:188(cls=StringBuffer) T{StringBuffer}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-10] <- rcx
StoreField(v91 T{StringBuffer} . _partsCodeUnits@0150898 = v653 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v91 T{StringBuffer} . _partsCompactionIndex@0150898 = v653 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v91 T{StringBuffer} . _partsCodeUnitsSinceCompaction@0150898 = v653 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v91 T{StringBuffer} . _bufferPosition@0150898 = v653 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v91 T{StringBuffer} . _bufferCodeUnitMagnitude@0150898 = v653 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rdi <- rcx, rsi <- C
StaticCall:30( write<0> v91 T{StringBuffer}, v175 T{_OneByteString}, using unchecked entrypoint)
ParallelMove r9 <- fp[-10] goto:196 B29
B28
  Loop 0
ParallelMove r9 <- r8 goto:198 B29
B29
  Loop 0
ParallelMove fp[-10] <- r9
Branch if RelationalOp(<, v8, v9 T{int}) T{bool} goto (30, 31)
B30
  Loop 0
v631 <- BoxInt64(v9 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- r8, rsi <- rax, rdx <- fp[-6]
v257 <- StaticCall:30( checkValidRange<0> v8 T{int}, v631 T{int?}, v633 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-7], rsi <- fp[-2], rdx <- rax
v258 <- StaticCall:32( _substringUnchecked@0150898<0> v2 T{_StringBase}, v8 T{int}, v257, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-11] <- rax
v442 <- LoadField(v258 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v442, v176 T{_Smi}) T{bool} goto (110, 111)
B110
B111
  Loop 0
ParallelMove rdi <- fp[-10]
StaticCall:26( _consumeBuffer@0150898<0> v86 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-10], rsi <- fp[-11]
StaticCall:28( _addPart@0150898<0> v86 T{StringBuffer}, v258 T{String}, using unchecked entrypoint)
ParallelMove  goto:30 B112
B112
  Loop 0
ParallelMove rax <- fp[-1] goto:218 B32
B31
  Loop 0
ParallelMove rax <- fp[-2] goto:220 B32
B32
  Loop 0
ParallelMove rbx <- fp[-10], rcx <- rax, rax <- C goto:238 B37
B36
B35
B34
B33
  Loop 0
ParallelMove rbx <- r8, rcx <- fp[-2], rax <- r9 goto:240 B37
B37
  Loop 0
ParallelMove rdx <- fp[-1]
v80 <- BinaryInt64Op(+ [tr], v9 T{int}, v654 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rbx, rbx <- rcx, rcx <- rdx, rax <- rax goto:388 B56
B194
B196
  Loop 0
ParallelMove r10 <- rax
ParallelMove  goto:244 B38
B38
  Loop 0
Branch if RelationalOp(<=, v378 T{_Smi}, v662 T{_Smi}) T{bool} goto (100, 200)
B100
  Loop 0
ParallelMove r13 <- C, r12 <- C
ParallelMove rcx <- r10
v224 <- ShiftInt64Op(>> [tr], v378 T{_Smi}, v656 T{_Smi}) [0, 4095] int64
ParallelMove rax <- C, rbx <- rcx
GenericCheckBound:24(v657 T{_Smi}, v224) [-9223372036854775808, 9223372036854775807] int64
v663 <- LoadIndexed:24([_List] v244, v224 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- r10
v758 <- IntConverter(int64->uint32[tr], v378 T{_Smi}) uint32
ParallelMove rcx <- rcx
v228 <- BinaryUint32Op(& [tr], v758 T{_Smi}, v774 T{_Smi}) [0, 15] uint32
ParallelMove rcx <- rcx
v762 <- IntConverter(uint32->int64, v228) int64
ParallelMove rcx <- rcx
ParallelMove rdx <- C
v229 <- ShiftUint32Op(<< [tr], v775 T{_Smi}, v762 T{_Smi}) [1, 32768] uint32
ParallelMove rax <- rax
v641 <- UnboxUint32([tr], [non-speculative], v663 T{int?}) [0, 4294967295] uint32
ParallelMove rax <- rax
v230 <- BinaryUint32Op(& [tr], v641, v229) [0, 32768] uint32
ParallelMove rax <- rax
v763 <- IntConverter(uint32->int64, v230) int64
Branch if EqualityCompare(v763 T{_Smi} != v653 T{_Smi}) T{bool} goto (39, 198)
B198
B200
  Loop 0
ParallelMove r13 <- C, r12 <- C
ParallelMove  goto:264 B40
B40
  Loop 0
ParallelMove rax <- r10
v757 <- IntConverter(int64->uint32[tr], v378 T{_Smi}) uint32
ParallelMove rax <- rax
v31 <- BinaryUint32Op(& [tr], v757 T{_Smi}, v776 T{_Smi}) [0, 64512] uint32
ParallelMove rax <- rax
v764 <- IntConverter(uint32->int64, v31) int64
Branch if EqualityCompare(v764 T{_Smi} == v665 T{_Smi}) T{bool} goto (41, 47)
B41
  Loop 0
ParallelMove rdx <- fp[-9]
ParallelMove rsi <- fp[-1]
v45 <- BinaryInt64Op(+ [tr], v9 T{int}, v654 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v45, v4) T{bool} goto (42, 48)
B42
  Loop 0
ParallelMove rdi <- fp[-5]
ParallelMove rax <- fp[-6], rbx <- rsi
t0 <- GenericCheckBound:292(v633 T{_Smi}, v45 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:292(===, v375 T{_Smi}, v206 T{_Smi}) goto (93, 94)
B93
  Loop 0
ParallelMove rax <- fp[-7]
v202 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v45 T{int}) [0, 255] int64
ParallelMove rbx <- rbx goto:292 B92
B94
  Loop 0
ParallelMove rax <- fp[-7]
v200 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v45 T{int}) [0, 65535] int64
ParallelMove rbx <- rbx goto:292 B92
B92
  Loop 0
ParallelMove rsi <- rbx
v766 <- IntConverter(int64->uint32[tr], v201 T{_Smi}) uint32
ParallelMove rsi <- rsi
v49 <- BinaryUint32Op(& [tr], v766 T{_Smi}, v776 T{_Smi}) [0, 64512] uint32
ParallelMove rsi <- rsi
v767 <- IntConverter(uint32->int64, v49) int64
Branch if EqualityCompare(v767 T{_Smi} == v666 T{_Smi}) T{bool} goto (43, 44)
B43
  Loop 0
ParallelMove rsi <- C
ParallelMove r10 <- r10
v756 <- IntConverter(int64->uint32[tr], v378 T{_Smi}) uint32
ParallelMove r10 <- r10
v56 <- BinaryUint32Op(& [tr], v756 T{_Smi}, v777 T{_Smi}) [0, 1023] uint32
ParallelMove r10 <- r10
v768 <- IntConverter(uint32->int64, v56) int64
ParallelMove r10 <- r10
v58 <- ShiftInt64Op(<< [tr], v768 T{_Smi}, v668 T{_Smi}) [0, 1047552] int64
ParallelMove r10 <- r10
v59 <- BinaryInt64Op(| [tr], v58, v669 T{_Smi}) [0, 1048575] int64
ParallelMove rbx <- rbx
v765 <- IntConverter(int64->uint32[tr], v201 T{_Smi}) uint32
ParallelMove rbx <- rbx
v60 <- BinaryUint32Op(& [tr], v765 T{_Smi}, v777 T{_Smi}) [0, 1023] uint32
ParallelMove rbx <- rbx
v769 <- IntConverter(uint32->int64, v60) int64
ParallelMove r10 <- r10
v61 <- BinaryInt64Op(| [tr], v59, v769 T{_Smi}) [0, 1048575] int64
ParallelMove r10 <- r10, rbx <- C goto:320 B45
B44
  Loop 0
ParallelMove rsi <- C
ParallelMove r10 <- r10, rbx <- C goto:322 B45
B45
  Loop 0
ParallelMove fp[-13] <- r10, rbx <- rbx goto:336 B49
B48
  Loop 0
ParallelMove rax <- fp[-7], rdi <- fp[-5], rsi <- C
ParallelMove  goto:332 B46
B47
  Loop 0
ParallelMove rax <- fp[-7], rdx <- fp[-9], rdi <- fp[-5], rsi <- C
ParallelMove  goto:328 B46
B46
  Loop 0
ParallelMove fp[-13] <- r10, rbx <- C goto:338 B49
B49
  Loop 0
ParallelMove fp[-14] <- rbx
v632 <- BoxInt64(v9 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- fp[-2], rsi <- rax, rdx <- fp[-6], rbx <- rdx, rax <- rdi
v187 <- StaticCall:30( checkValidRange<0> v8 T{int}, v632 T{int?}, v633 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-7], rsi <- fp[-2], rdx <- rax
v188 <- StaticCall:32( _substringUnchecked@0150898<0> v2 T{_StringBase}, v8 T{int}, v187, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rcx <- rax, rax <- fp[-4]
Branch if StrictCompare:344(!==, v10 T{bool}, v5) goto (50, 51)
BoolTest
B50
  Loop 0
v772 <- LoadClassId(<non-smi> v188 T{String}) int64
MoveArgument(sp[0] <- v188 T{String})
ParallelMove rcx <- rdx
v44 <- DispatchTableCall( cid=v772 String.toLowerCase<0>, v188 T{String}) T{String}
ParallelMove rax <- rax
ParallelMove rsi <- rax goto:356 B52
B51
  Loop 0
ParallelMove rsi <- rcx goto:358 B52
B52
  Loop 0
ParallelMove fp[-10] <- rsi
Branch if StrictCompare:360(===, v7, v0) goto (53, 54)
B53
  Loop 0
v43 <- AllocateObject:366(cls=StringBuffer) T{StringBuffer}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-11] <- rcx
StoreField(v43 T{StringBuffer} . _partsCodeUnits@0150898 = v653 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v43 T{StringBuffer} . _partsCompactionIndex@0150898 = v653 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v43 T{StringBuffer} . _partsCodeUnitsSinceCompaction@0150898 = v653 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v43 T{StringBuffer} . _bufferPosition@0150898 = v653 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v43 T{StringBuffer} . _bufferCodeUnitMagnitude@0150898 = v653 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rdi <- rcx, rsi <- C
StaticCall:30( write<0> v43 T{StringBuffer}, v175 T{_OneByteString}, using unchecked entrypoint)
ParallelMove rcx <- fp[-11], rax <- fp[-11] goto:374 B55
B54
  Loop 0
ParallelMove rcx <- rcx, rax <- rcx goto:376 B55
B55
  Loop 0
ParallelMove fp[-11] <- rcx, fp[-12] <- rax
v396 <- LoadField(v38 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v396, v176 T{_Smi}) T{bool} goto (71, 72)
B71
B72
  Loop 0
ParallelMove rdi <- rcx
StaticCall:26( _consumeBuffer@0150898<0> v39 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-11], rsi <- fp[-10]
StaticCall:28( _addPart@0150898<0> v39 T{StringBuffer}, v38 T{String}, using unchecked entrypoint)
ParallelMove  goto:30 B73
B73
  Loop 0
ParallelMove rdi <- fp[-13]
v41 <- StaticCall:380( _escapeChar@0150898<0> v34, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-10] <- rax
v412 <- LoadField(v41 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v412, v176 T{_Smi}) T{bool} goto (76, 77)
B76
B77
  Loop 0
ParallelMove rdi <- fp[-11]
StaticCall:26( _consumeBuffer@0150898<0> v39 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-11], rsi <- fp[-10]
StaticCall:28( _addPart@0150898<0> v39 T{StringBuffer}, v41 T{String}, using unchecked entrypoint)
ParallelMove  goto:30 B78
B78
  Loop 0
ParallelMove rcx <- fp[-1]
v42 <- BinaryInt64Op(+ [tr], v9 T{int}, v35) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-12], rbx <- rcx, rcx <- rcx, rax <- fp[-4] goto:390 B56
B56
B57
  Loop 0
ParallelMove rdi <- rdi, rsi <- rbx, rdx <- rcx, r13 <- rax goto:398 B6
B6
  Loop 0
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx, r13 <- r13, r9 <- fp[-7], r8 <- fp[-8], rcx <- fp[-9], r12 <- fp[-5], r10 <- fp[-6] goto:404 B59
B60
ParallelMove rcx <- rdi
Branch if StrictCompare:412(===, v7, v0) goto (61, 62)
B61
ParallelMove rdx <- fp[-9]
v628 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v628 T{int})
ParallelMove rdi <- fp[-7], rsi <- fp[-8]
v23 <- StaticCall:418( substring<0> v2, v3, v628 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:420(v23)
B62
ParallelMove rdx <- fp[-9], rsi <- fp[-2]
Branch if RelationalOp(<, v8, v4) T{bool} goto (63, 67)
B63
ParallelMove r8 <- fp[-4]
v629 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v629 T{int})
ParallelMove rdi <- fp[-7], rsi <- rsi
v20 <- StaticCall:434( substring<0> v2, v8, v629 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rcx <- rax, rax <- fp[-4]
Branch if StrictCompare:438(!==, v10 T{bool}, v5) goto (64, 65)
BoolTest
B64
v773 <- LoadClassId(<non-smi> v20) int64
MoveArgument(sp[0] <- v20)
ParallelMove rcx <- rax
v22 <- DispatchTableCall( cid=v773 String.toLowerCase<0>, v20) T{String}
ParallelMove rax <- rax
ParallelMove rsi <- rax goto:450 B66
B65
ParallelMove rsi <- rcx goto:452 B66
B66
ParallelMove rdi <- fp[-3], rsi <- rsi
StaticCall:454( write<0> v7 T{StringBuffer}, v21, using unchecked entrypoint)
ParallelMove  goto:460 B68
B67
B68
MoveArgument(sp[0] <- v7 T{StringBuffer})
v19 <- StaticCall:464( toString<0> v7 T{StringBuffer}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:466(v19)
B39
ParallelMove rdi <- fp[-7], rsi <- fp[-1], rdx <- C
v64 <- StaticCall:256( _fail@0150898<0> v2, v9 T{int}, v63) T{Never}
v65 <- AllocateObject:258(cls=ReachabilityError, <not-aliased>) T{ReachabilityError}
ParallelMove rcx <- rax, rax <- C
StoreField(v65 T{ReachabilityError} . _message@9040228 = v212 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:262(v65)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path uint32 shift operation
slow path check bound operation
slow path uint32 shift operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v5 <- AllocateContext:10(num_variables=2) T{Context}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-4] <- rcx
StoreField(v5 . host = v2, NoStoreBarrier)
ParallelMove rbx <- C, rdx <- rcx
v7 <- AllocateClosure:12(v6, v5) T{_Closure}
ParallelMove rcx <- rax, rax <- fp[-4]
StoreField(v5 . error = v7, NoStoreBarrier)
ParallelMove rbx <- C, rdx <- rax
v9 <- AllocateClosure:14(v8, v5) T{_Closure}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-5] <- rcx
v316 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v692 <- UnboxInt64([non-speculative], v316 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(<, v692 T{_Smi}, v781 T{_Smi}) T{bool} goto (157, 5)
B5
ParallelMove rdi <- C, rsi <- C
v17 <- StaticCall:38( _GrowableList@0150898.<0> v15, v549 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rcx <- rax
ParallelMove fp[-9] <- rcx
ParallelMove r12 <- C, r10 <- C, r9 <- fp[-2], rdi <- fp[-2] goto:182 B26
B26
  Loop 2
ParallelMove fp[-8] <- r10, fp[-10] <- r12, fp[-12] <- r9
CheckStackOverflow:186(stack=0, loop=1)
Branch if RelationalOp(<, v22, v4) T{bool} goto (6, 7)
B6
  Loop 2
v92 <- LoadField(v5 . host) T{String}
ParallelMove fp[-15] <- r13
v302 <- LoadField(v92 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rax <- rax
v694 <- UnboxInt64([non-speculative], v302) [0, 2305843009213693951] int64
ParallelMove rax <- rax, rbx <- rdi, fp[-6] <- rax
t0 <- GenericCheckBound:54(v694 T{_Smi}, v22 T{int}) [-9223372036854775808, 9223372036854775807] int64
v304 <- LoadClassId(v92 T{_StringBase}) [93, 94] T{_Smi}
Branch if StrictCompare:54(===, v304, v295 T{_Smi}) goto (134, 135)
B134
  Loop 2
v308 <- LoadIndexed([_OneByteString] v92 T{_OneByteString}, v22 T{int}) [0, 255] int64
ParallelMove rbx <- rbx goto:54 B133
B135
  Loop 2
v306 <- LoadIndexed([_TwoByteString] v92 T{_StringBase}, v22 T{int}) [0, 65535] int64
ParallelMove rbx <- rbx goto:54 B133
B133
  Loop 2
Branch if EqualityCompare(v307 T{_Smi} == v782 T{_Smi}) T{bool} goto (8, 21)
B8
  Loop 2
Branch if EqualityCompare(v22 T{int} == v3) T{bool} goto (9, 13)
B9
  Loop 2
ParallelMove rdi <- rdi
v115 <- BinaryInt64Op(+ [tr], v22 T{int}, v783 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-6], rbx <- rdi, r9 <- rax, fp[-14] <- rdi
t0 <- GenericCheckBound:78(v694 T{_Smi}, v115 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:78(===, v304 T{_Smi}, v295 T{_Smi}) goto (129, 130)
B129
  Loop 2
v291 <- LoadIndexed([_OneByteString] v92 T{_OneByteString}, v115 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:78 B128
B130
  Loop 2
v289 <- LoadIndexed([_TwoByteString] v92 T{_StringBase}, v115 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:78 B128
B128
  Loop 2
Branch if EqualityCompare(v290 T{_Smi} != v782 T{_Smi}) T{bool} goto (154, 12)
B12
  Loop 2
ParallelMove rdi <- rdi, rax <- rdi goto:104 B14
B13
  Loop 2
ParallelMove rdi <- r9, rax <- rdi goto:106 B14
B14
  Loop 2
ParallelMove fp[-7] <- rax
Branch if EqualityCompare(v106 == v105) T{bool} goto (15, 19)
B15
  Loop 2
Branch if StrictCompare:120(===, v19 T{bool}, v14) goto (151, 18)
BoolTest
B18
  Loop 2
v496 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v501 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v502 <- LoadField(v501 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rbx <- rbx
v702 <- UnboxInt64([non-speculative], v496 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-6] <- rbx
ParallelMove r9 <- r9
v703 <- UnboxInt64([non-speculative], v502 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v702 T{_Smi} == v703 T{_Smi}) T{bool} goto (119, 120)
B119
  Loop 2
ParallelMove rdi <- rcx
StaticCall:26( _growToNextCapacity@0150898<0> v17 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B121
B120
B121
  Loop 2
ParallelMove rax <- rdx
v271 <- BinaryInt64Op(+ [tr], v702 T{_Smi}, v783 T{_Smi}) [1, 576460752303423488] int64
v704 <- BoxInt64(v271) [1, 576460752303423488] T{_Smi}
StoreField(v17 T{_GrowableList} . GrowableObjectArray.length = v704, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rdx
GenericCheckBound:40(v271 T{_Smi}, v702 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v274 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.data) T{_List}
StoreIndexed:40([_List] v274, v702 T{_Smi}, v784 T{_Smi}, NoStoreBarrier)
ParallelMove rax <- C goto:148 B20
B19
  Loop 2
ParallelMove rdx <- rax
v697 <- BoxInt64(v105) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rsi <- rax
v699 <- BoxInt64(v106) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v9)
MoveArgument(sp[1] <- v697 T{int})
MoveArgument(sp[0] <- v699 T{int})
ParallelMove rax <- fp[-5]
v108 <- ClosureCall:142( closure=v9<0>, v9, v697 T{int}, v699 T{int}) T{*?}
ParallelMove rcx <- rax, rax <- fp[-9]
ParallelMove fp[-11] <- rcx
v485 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v490 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v491 <- LoadField(v490 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v709 <- UnboxInt64([non-speculative], v485 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-6] <- rdx
ParallelMove rsi <- rsi
v710 <- UnboxInt64([non-speculative], v491 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v709 T{_Smi} == v710 T{_Smi}) T{bool} goto (110, 111)
B110
  Loop 2
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v17 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B112
B111
B112
  Loop 2
ParallelMove rax <- rsi
v252 <- BinaryInt64Op(+ [tr], v709 T{_Smi}, v783 T{_Smi}) [1, 576460752303423488] int64
v711 <- BoxInt64(v252) [1, 576460752303423488] T{_Smi}
StoreField(v17 T{_GrowableList} . GrowableObjectArray.length = v711, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v252 T{_Smi}, v709 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v255 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-11]
StoreIndexed:40([_List] v255, v709 T{_Smi}, v108 T{*?})
ParallelMove rax <- fp[-10] goto:150 B20
B20
  Loop 2
ParallelMove rdx <- fp[-7]
v110 <- BinaryInt64Op(+ [tr], v106, v783 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- rax, r10 <- fp[-8], r9 <- rdx, rax <- fp[-7] goto:176 B25
B21
  Loop 2
Branch if EqualityCompare(v307 T{_Smi} == v785 T{_Smi}) T{bool} goto (22, 23)
B22
  Loop 2
ParallelMove rax <- C goto:170 B24
B23
  Loop 2
ParallelMove rax <- fp[-8] goto:172 B24
B24
  Loop 2
ParallelMove r12 <- fp[-10], r10 <- rax, r9 <- r9, rax <- rdi goto:178 B25
B25
  Loop 2
ParallelMove rax <- rax
v103 <- BinaryInt64Op(+ [tr], v102, v783 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- r12, r10 <- r10, r9 <- r9, rdi <- rax goto:184 B26
B7
v240 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
Branch if StrictCompare(===, v240 T{_Smi}, v16 T{_Smi}) T{bool} goto (148, 29)
B29
ParallelMove rdx <- fp[-3]
v27 <- EqualityCompare(v21 == v4) T{bool}
ParallelMove rdi <- rcx, fp[-11] <- rax
v28 <- StaticCall:212( get:last<0> v17, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- rax, rax <- fp[-11]
Branch if StrictCompare:220(===, v27, v14) goto (30, 33)
BoolTest
B30
Branch if StrictCompare(!==, v28 T{int}, v784 T{_Smi}) T{bool} goto (145, 34)
B34
B33
B35
Branch if StrictCompare:254(!==, v27, v14) goto (36, 40)
BoolTest
B36
ParallelMove rax <- fp[-8]
Branch if StrictCompare:262(!==, v20 T{bool}, v14) goto (37, 38)
BoolTest
B37
ParallelMove rdx <- fp[-3], rdi <- fp[-9], rsi <- fp[-12]
v691 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- rax
v693 <- BoxInt64(v21) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v9)
MoveArgument(sp[1] <- v693 T{int})
MoveArgument(sp[0] <- v691 T{int})
ParallelMove rax <- fp[-5]
v85 <- ClosureCall:268( closure=v9<0>, v9, v693 T{int}, v691 T{int}) T{*?}
ParallelMove rcx <- rax, rax <- fp[-9]
ParallelMove fp[-5] <- rcx
v474 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v479 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v480 <- LoadField(v479 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v718 <- UnboxInt64([non-speculative], v474 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-2] <- rdx
ParallelMove rsi <- rsi
v719 <- UnboxInt64([non-speculative], v480 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v718 T{_Smi} == v719 T{_Smi}) T{bool} goto (99, 100)
B99
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v17 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B101
B100
B101
ParallelMove rax <- rsi
v228 <- BinaryInt64Op(+ [tr], v718 T{_Smi}, v783 T{_Smi}) [1, 576460752303423488] int64
v720 <- BoxInt64(v228) [1, 576460752303423488] T{_Smi}
StoreField(v17 T{_GrowableList} . GrowableObjectArray.length = v720, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v228 T{_Smi}, v718 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v231 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-5]
StoreIndexed:40([_List] v231, v718 T{_Smi}, v85 T{*?})
ParallelMove  goto:298 B39
B38
ParallelMove rdx <- fp[-3], rax <- fp[-4], rcx <- fp[-9], rsi <- fp[-12]
v74 <- LoadField(v5 . host) T{String}
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx
v75 <- StaticCall:274( _parseIPv4Address@0150898<0> v74, v21, v4, result_type = T{_Uint8List}) T{_Uint8List}
ParallelMove rcx <- rax
ParallelMove fp[-5] <- rcx
v125 <- LoadField(v75 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rax
v723 <- UnboxInt64([non-speculative], v125) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- C, fp[-12] <- rdx
GenericCheckBound:276(v723 T{_Smi}, v549 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v788 <- LoadIndexed:276([_Uint8List] v75, v549 T{_Smi}) [0, 255] int64
ParallelMove rsi <- rax
v77 <- ShiftInt64Op(<< [tr], v788 T{_Smi}, v789 T{_Smi}) [0, 65280] int64
ParallelMove rax <- rdx, rbx <- C
GenericCheckBound:280(v723 T{_Smi}, v783 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v790 <- LoadIndexed:280([_Uint8List] v75, v783 T{_Smi}) [0, 255] int64
ParallelMove rsi <- rsi
v79 <- BinaryInt64Op(| [tr], v77, v790 T{_Smi}) [0, 65535] int64
ParallelMove rax <- fp[-9], fp[-6] <- rsi
v452 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v457 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v458 <- LoadField(v457 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rbx <- rbx
v730 <- UnboxInt64([non-speculative], v452 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-2] <- rbx
ParallelMove r8 <- r8
v731 <- UnboxInt64([non-speculative], v458 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v730 T{_Smi} == v731 T{_Smi}) T{bool} goto (81, 82)
B81
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v17 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B83
B82
B83
ParallelMove r8 <- rdi
v190 <- BinaryInt64Op(+ [tr], v730 T{_Smi}, v783 T{_Smi}) [-4611686018427387904, 5188146770730811390] int64
ParallelMove fp[-13] <- r8
v732 <- BoxInt64(v190) [-4611686018427387904, 5188146770730811390] T{int}
ParallelMove rax <- rax
StoreField(v17 T{_GrowableList} . GrowableObjectArray.length = v732 T{int}, NoStoreBarrier)
ParallelMove rax <- r8, rbx <- rdi
GenericCheckBound:40(v190 T{_Smi}, v730 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v193 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v727 <- BoxInt64(v79 T{int}) [0, 65535] T{_Smi}
StoreIndexed:40([_List] v193, v730 T{_Smi}, v727, NoStoreBarrier)
ParallelMove rax <- fp[-12], rbx <- C
GenericCheckBound:286(v723 T{_Smi}, v781 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v791 <- LoadIndexed:286([_Uint8List] v75, v781 T{_Smi}) [0, 255] int64
ParallelMove rdx <- rax
v81 <- ShiftInt64Op(<< [tr], v791 T{_Smi}, v789 T{_Smi}) [0, 65280] int64
ParallelMove rax <- fp[-12], rbx <- C
GenericCheckBound:290(v723 T{_Smi}, v792 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v793 <- LoadIndexed:290([_Uint8List] v75, v792 T{_Smi}) [0, 255] int64
ParallelMove rdx <- rdx
v84 <- BinaryInt64Op(| [tr], v81, v793 T{_Smi}) [0, 65535] int64
ParallelMove fp[-2] <- rdx
v469 <- LoadField(v193 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v743 <- UnboxInt64([non-speculative], v469 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v190 T{_Smi} == v743 T{_Smi}) T{bool} goto (90, 91)
B90
ParallelMove rdi <- rsi
StaticCall:26( _growToNextCapacity@0150898<0> v17 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B92
B91
B92
ParallelMove rdi <- rdx
v209 <- BinaryInt64Op(+ [tr], v190 T{_Smi}, v783 T{_Smi}) [v730-4611686018427387903, 9223372036854775806] int64
v744 <- BoxInt64(v209) [v730-4611686018427387903, 9223372036854775806] T{int}
ParallelMove rax <- rax
StoreField(v17 T{_GrowableList} . GrowableObjectArray.length = v744 T{int}, NoStoreBarrier)
ParallelMove rax <- rdi, rbx <- rdx
GenericCheckBound:40(v209 T{_Smi}, v190 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v212 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v739 <- BoxInt64(v84 T{int}) [0, 65535] T{_Smi}
StoreIndexed:40([_List] v212, v190 T{_Smi}, v739, NoStoreBarrier)
ParallelMove  goto:300 B39
B39
B40
ParallelMove rcx <- fp[-9]
ParallelMove  goto:308 B41
B41
Branch if StrictCompare:312(===, v19 T{bool}, v14) goto (42, 46)
BoolTest
B42
v178 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rax
v747 <- UnboxInt64([non-speculative], v178 T{_Smi}) [0, 576460752303423487] int64
Branch if RelationalOp(>, v747 T{_Smi}, v794 T{_Smi}) T{bool} goto (142, 45)
B45
ParallelMove rax <- rax
v921 <- UnboxInt64([non-speculative], v178) int64
ParallelMove rdx <- rax goto:366 B50
B46
v173 <- LoadField(v17 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
Branch if StrictCompare(!==, v173 T{_Smi}, v33 T{_Smi}) T{bool} goto (139, 49)
B49
ParallelMove rax <- rax
v922 <- UnboxInt64([non-speculative], v173) int64
ParallelMove rdx <- rax goto:368 B50
B50
ParallelMove rax <- C, fp[-2] <- rdx
v168 <- AllocateTypedData:10(v38 T{_Smi}, <not-aliased>) T{_Uint8List}
ParallelMove rcx <- rax, rax <- fp[-9]
v139 <- LoadField:458(v17 . GrowableObjectArray.data) T{_List}
ParallelMove rsi <- fp[-2]
ParallelMove rdi <- C
v61 <- BinaryInt64Op:458(- [tr], v797 T{_Smi}, v765 T{_Smi}) [-576460752303423478, 9] int64
ParallelMove r10 <- C, r9 <- C, r8 <- C goto:458 B59
B59
  Loop 1
CheckStackOverflow:462(stack=0, loop=1)
Branch if RelationalOp(<, v40, v765 T{_Smi}) T{bool} goto (51, 52)
B51
  Loop 1
v796 <- LoadIndexed:388([_List] v139, v40 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove r12 <- rax
v754 <- UnboxInt64([non-speculative], v796 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v754 T{int} == v600) T{bool} goto (53, 57)
B53
  Loop 1
ParallelMove r12 <- r9, r9 <- C goto:430 B56
B56
  Loop 0
  Loop 1
CheckStackOverflow:434(stack=0, loop=2)
Branch if RelationalOp(<, v63, v61) T{bool} goto (54, 55)
B54
  Loop 0
  Loop 1
ParallelMove rax <- C, rbx <- r12
GenericCheckBound:420(v798 T{_Smi}, v62) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:420([_Uint8List] v168 T{_Uint8List}, v62 T{int}, v549, NoStoreBarrier)
ParallelMove r13 <- r12
v65 <- BinaryInt64Op(+ [tr], v62 T{int}, v783 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C, rbx <- r13
GenericCheckBound:424(v798 T{_Smi}, v65) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:424([_Uint8List] v168 T{_Uint8List}, v65 T{int}, v549, NoStoreBarrier)
ParallelMove r12 <- r12
v66 <- BinaryInt64Op(+ [tr], v62 T{int}, v781 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- r9
v67 <- BinaryInt64Op(+ [tr], v63, v783 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- r12, r9 <- r9 goto:432 B56
B55
  Loop 1
ParallelMove r9 <- r12 goto:452 B58
B57
  Loop 1
ParallelMove r13 <- r12
v50 <- ShiftInt64Op(>> [tr], v754 T{int}, v789 T{_Smi}) [-36028797018963968, 36028797018963967] int64
ParallelMove rax <- C, rbx <- r9
GenericCheckBound:440(v798 T{_Smi}, v41) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r13
StoreIndexed:440([_Uint8List] v168 T{_Uint8List}, v41 T{int}, v50 T{int}, NoStoreBarrier)
ParallelMove r13 <- r9
v51 <- BinaryInt64Op(+ [tr], v41 T{int}, v783 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- r12
v925 <- IntConverter(int64->uint32[tr], v754 T{int}) uint32
ParallelMove r12 <- r12
v53 <- BinaryUint32Op(& [tr], v925 T{int}, v927 T{_Smi}) [0, 255] uint32
ParallelMove rax <- C, rbx <- r13
GenericCheckBound:446(v798 T{_Smi}, v51) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- r12
v926 <- IntConverter(uint32->int64, v53) int64
ParallelMove rax <- r12
StoreIndexed:446([_Uint8List] v168 T{_Uint8List}, v51 T{int}, v926 T{_Smi}, NoStoreBarrier)
ParallelMove r9 <- r9
v54 <- BinaryInt64Op(+ [tr], v41 T{int}, v781 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- r9 goto:454 B58
B58
  Loop 1
ParallelMove r10 <- r10
v58 <- BinaryInt64Op(+ [tr], v40 T{int}, v783 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- r10, r9 <- r9 goto:460 B59
B52
ParallelMove rax <- rcx
DartReturn:464(v168 T{_Uint8List})
B157
v438 <- AllocateObject:10(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v438 T{FormatException} . message = v447 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v438 T{FormatException} . source = v2 T{String}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:18(v438)
B154
v420 <- AllocateObject:10(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v420 T{FormatException} . message = v429 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-15]
StoreField(v420 T{FormatException} . source = v92 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[-14]
v695 <- BoxInt64(v115 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v420 T{FormatException} . offset = v695 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:18(v420)
B151
ParallelMove rax <- r13, rcx <- rax
v401 <- AllocateObject:10(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v401 T{FormatException} . message = v410 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-15]
StoreField(v401 T{FormatException} . source = v92 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[-7]
v698 <- BoxInt64(v106 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v401 T{FormatException} . offset = v698 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:18(v401)
B148
ParallelMove rax <- fp[-4]
v389 <- LoadField(v5 . host) T{String}
ParallelMove fp[-1] <- rcx
v382 <- AllocateObject:10(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v382 T{FormatException} . message = v391 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v382 T{FormatException} . source = v389 T{String}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:18(v382)
B145
ParallelMove rdx <- fp[-3], rax <- fp[-4]
v371 <- LoadField(v5 . host) T{String}
ParallelMove fp[-1] <- rcx
v364 <- AllocateObject:10(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v364 T{FormatException} . message = v373 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v364 T{FormatException} . source = v371 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[-3]
v690 <- BoxInt64(v4 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v364 T{FormatException} . offset = v690 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:18(v364)
B142
ParallelMove rax <- fp[-4]
v352 <- LoadField(v5 . host) T{String}
ParallelMove fp[-1] <- rcx
v345 <- AllocateObject:10(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v345 T{FormatException} . message = v354 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v345 T{FormatException} . source = v352 T{String}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:18(v345)
B139
ParallelMove rax <- fp[-4]
v332 <- LoadField(v5 . host) T{String}
ParallelMove fp[-1] <- rcx
v325 <- AllocateObject:10(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v325 T{FormatException} . message = v335 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v325 T{FormatException} . source = v332 T{String}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:18(v325)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- C
v88 <- AllocateTypedData:10(v8 T{_Smi}, <not-aliased>) T{_Uint8List}
ParallelMove r8 <- rax, rcx <- fp[-1]
ParallelMove fp[-8] <- r8
v72 <- LoadField:124(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove r9 <- rax
v276 <- UnboxInt64:124([non-speculative], v72) [0, 2305843009213693951] int64
ParallelMove fp[-7] <- r9
v74 <- LoadClassId:124(v2 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove fp[-6] <- r10
ParallelMove rsi <- C, rdx <- fp[-2], r13 <- fp[-2] goto:124 B17
B17
  Loop 0
ParallelMove fp[-2] <- rdx, fp[-4] <- rsi, fp[-5] <- r13
CheckStackOverflow:128(stack=0, loop=1)
Branch if RelationalOp(<, v13, v4) T{bool} goto (3, 4)
B3
  Loop 0
ParallelMove rax <- r9, rbx <- r13
t0 <- GenericCheckBound:30(v276 T{_Smi}, v13 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:30(===, v74, v82 T{_Smi}) goto (34, 35)
B34
  Loop 0
v78 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v13 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:30 B33
B35
  Loop 0
v76 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v13 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:30 B33
B33
  Loop 0
Branch if EqualityCompare(v77 T{_Smi} != v282 T{_Smi}) T{bool} goto (5, 9)
B5
  Loop 0
ParallelMove rax <- rax
v44 <- BinaryInt64Op(^ [tr], v77 T{_Smi}, v283 T{_Smi}) [0, 65535] int64
Branch if RelationalOp(>, v44, v284 T{_Smi}) T{bool} goto (51, 8)
B8
B9
  Loop 0
Branch if EqualityCompare(v11 == v285 T{_Smi}) T{bool} goto (48, 12)
B12
  Loop 0
v275 <- BoxInt64(v13 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- rdx, rsi <- rax, rdx <- r9, rbx <- rsi, rax <- rdx
v63 <- StaticCall:30( checkValidRange<0> v12 T{int}, v275 T{int?}, v276 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-1], rsi <- fp[-2], rdx <- rax
v64 <- StaticCall:32( _substringUnchecked@0150898<0> v2 T{_StringBase}, v12 T{int}, v63, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdi <- rax
v34 <- StaticCall:88( parse<0> v64 T{String}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
Branch if RelationalOp(>, v34, v286 T{_Smi}) T{bool} goto (45, 15)
B15
  Loop 0
ParallelMove r9 <- fp[-4], r8 <- fp[-8]
ParallelMove rsi <- r9
v37 <- BinaryInt64Op(+ [tr], v11, v287 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C, rbx <- r9
GenericCheckBound:112(v288 T{_Smi}, v11) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx
StoreIndexed:112([_Uint8List] v88 T{_Uint8List}, v11 T{int}, v34 T{int}, NoStoreBarrier)
ParallelMove rax <- fp[-5]
v38 <- BinaryInt64Op(+ [tr], v13 T{int}, v287 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi, rdx <- rax goto:120 B16
B16
  Loop 0
ParallelMove rax <- fp[-5]
v42 <- BinaryInt64Op(+ [tr], v13 T{int}, v287 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi, rdx <- rdx, r13 <- rax, rcx <- fp[-1], r10 <- fp[-6], r9 <- fp[-7] goto:126 B17
B4
ParallelMove r9 <- rsi
Branch if EqualityCompare(v11 != v285 T{_Smi}) T{bool} goto (42, 20)
B20
ParallelMove rcx <- fp[-3]
v270 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v270 T{int})
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
v21 <- StaticCall:150( substring<0> v2 T{String}, v12, v270 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdi <- rax
v22 <- StaticCall:152( parse<0> v21, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
Branch if RelationalOp(>, v22, v286 T{_Smi}) T{bool} goto (39, 23)
B23
ParallelMove rsi <- fp[-4], rdx <- fp[-8]
ParallelMove rax <- C, rbx <- rsi
GenericCheckBound:174(v288 T{_Smi}, v11 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx
StoreIndexed:174([_Uint8List] v88 T{_Uint8List}, v11 T{int}, v22 T{int}, NoStoreBarrier)
ParallelMove rax <- rdx
DartReturn:176(v88 T{_Uint8List})
B51
ParallelMove rax <- rcx, rcx <- r13
v175 <- AllocateObject:10(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v175 T{FormatException} . message = v184 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v175 T{FormatException} . source = v2 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[-5]
v273 <- BoxInt64(v13 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v175 T{FormatException} . offset = v273 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:18(v175)
B45
ParallelMove rax <- fp[-1], rcx <- fp[-2]
v139 <- AllocateObject:10(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v139 T{FormatException} . message = v109 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v139 T{FormatException} . source = v2 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[-2]
v271 <- BoxInt64(v12 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v139 T{FormatException} . offset = v271 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:18(v139)
B48
ParallelMove rax <- rcx, rdx <- r13
v157 <- AllocateObject:10(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v157 T{FormatException} . message = v129 T{_OneByteString}, NoStoreBarrier)
ParallelMove rdx <- fp[-1]
StoreField(v157 T{FormatException} . source = v2 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[-5]
v274 <- BoxInt64(v13 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v157 T{FormatException} . offset = v274 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:18(v157)
B42
ParallelMove rdx <- fp[-1], rcx <- fp[-3], rax <- C
v120 <- AllocateObject:10(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v120 T{FormatException} . message = v129 T{_OneByteString}, NoStoreBarrier)
ParallelMove rbx <- fp[-1]
StoreField(v120 T{FormatException} . source = v2 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[-3]
v269 <- BoxInt64(v4 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v120 T{FormatException} . offset = v269 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:18(v120)
B39
ParallelMove rbx <- fp[-1], rdx <- fp[-2], rax <- C
v98 <- AllocateObject:10(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v98 T{FormatException} . message = v109 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v98 T{FormatException} . source = v2 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[-2]
v272 <- BoxInt64(v12 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v98 T{FormatException} . offset = v272 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:18(v98)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-2] <- rdi
v5 <- LoadField(v3 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
v13 <- LoadIndexed([_List] v3, v11 T{_Smi}) T{*?}
Branch if StrictCompare:16(===, v13, v14) goto (2, 3)
B2
v38 <- LoadIndexed([_List] v3, v36 T{_Smi}) T{*?}
ParallelMove rcx <- rcx
v39 <- BinarySmiOp:10(- [tr], v5, v38) [-4611686018427387903, 4611686018427387903] T{_Smi}
v40 <- LoadIndexedUnsafe(rbp[v39 + 8]) T{int??}
ParallelMove rcx <- rdx goto:26 B5
B3
ParallelMove rcx <- C goto:28 B5
B5
ParallelMove fp[-1] <- rcx
CheckStackOverflow:34(stack=0, loop=0)
v59 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v59, v8 T{_Smi}) T{bool} goto (6, 10)
B10
Branch if StrictCompare:70(===, v15, v0) goto (13, 11)
B13
B11
Branch if StrictCompare(===, v15 T{int?}, v18) T{bool} goto (14, 17)
B14
B12
ParallelMove rdx <- rdx
v99 <- UnboxInt64([non-speculative], v59 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdx <- rdx
v32 <- BinaryInt64Op(- [tr], v99 T{_Smi}, v103 T{_Smi}) [v99-1, v99-1] int64
ParallelMove rdi <- rax, rsi <- C, rdx <- rdx
v33 <- StaticCall:98( _tryParseSmi@0150898<0> v2, v104 T{_Smi}, v32, result_type = T{int??}) T{int??}
ParallelMove rax <- rax
Branch if StrictCompare:100(!==, v33, v0) goto (15, 16)
B15
ParallelMove rax <- rax
v100 <- UnboxInt64([non-speculative], v33 T{int?}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
DartReturn:106(v100 T{int?})
B16
B17
ParallelMove rax <- fp[-1]
v97 <- UnboxInt64([non-speculative], v15 T{int?}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v97 T{int?}, v105 T{_Smi}) T{bool} goto (20, 18)
B18
Branch if RelationalOp(>, v97 T{int?}, v106 T{_Smi}) T{bool} goto (21, 22)
B22
B23
ParallelMove rdi <- fp[-2], rsi <- fp[-1], rdx <- C
v30 <- StaticCall:158( _parse@0150898<0> v2, v15, v0, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v101 <- UnboxInt64([non-speculative], v30) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
DartReturn:160(v101 T{int})
B6
ParallelMove rdi <- C, rsi <- fp[-2], rdx <- C, rbx <- fp[-1], r8 <- C
v34 <- StaticCall:46( _handleFormatError@0150898<0> v0, v2, v8, v15, v0, result_type = T{!null}) [-9223372036854775808, 9223372036854775807] T{int?}
ParallelMove rax <- C
Throw:48(v35)
B20
B21
B19
ParallelMove rbx <- C, r10 <- C
v25 <- CreateArray:142(v0, v24) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v25, v8, v26, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreIndexed([_List] v25, v6, v15 T{int?}, NoStoreBarrier)
StoreIndexed([_List] v25, v9, v27, NoStoreBarrier)
MoveArgument(sp[0] <- v25)
v28 <- StaticCall:144( _interpolate@0150898<0> v25, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v23 <- AllocateObject:140(cls=RangeError, <not-aliased>) T{RangeError}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v23 T{RangeError} . message = v28 T{String}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v23 T{RangeError} . _hasValue@0150898 = v68 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:148(v23)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rbx, fp[-1] <- rsi, fp[-2] <- rdx, fp[-3] <- r8, fp[-4] <- rbx
CheckStackOverflow:8(stack=0, loop=0)
Branch if StrictCompare:10(!==, v2, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:20(v0)
B4
Branch if StrictCompare:24(!==, v6, v0) goto (5, 6)
B5
v18 <- AllocateObject:30(cls=FormatException) T{FormatException}
ParallelMove rcx <- rax, rax <- fp[-3]
StoreField(v18 T{FormatException} . message = v6 T{_OneByteString}, NoStoreBarrier)
ParallelMove rdx <- fp[-1]
StoreField(v18 T{FormatException} . source = v3 T{String}, NoStoreBarrier)
ParallelMove rbx <- fp[-2]
StoreField(v18 T{FormatException} . offset = v4 T{int??}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:34(v18)
B6
ParallelMove rdx <- rsi, rbx <- rdx
Branch if StrictCompare:38(===, v5, v0) goto (7, 8)
B7
v16 <- AllocateObject:44(cls=FormatException) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v16 T{FormatException} . message = v17 T{_OneByteString}, NoStoreBarrier)
ParallelMove rdx <- fp[-1]
StoreField(v16 T{FormatException} . source = v3 T{String}, NoStoreBarrier)
ParallelMove rsi <- fp[-2]
StoreField(v16 T{FormatException} . offset = v4 T{int??}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:48(v16)
B8
ParallelMove rsi <- rbx
ParallelMove rbx <- C, r10 <- C
v9 <- CreateArray:54(v0, v8) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v9, v10, v11, NoStoreBarrier)
ParallelMove rcx <- fp[-4]
StoreIndexed([_List] v9, v12, v5 T{_Smi}, NoStoreBarrier)
StoreIndexed([_List] v9, v13, v14, NoStoreBarrier)
MoveArgument(sp[0] <- v9)
v15 <- StaticCall:56( _interpolate@0150898<0> v9, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove fp[-3] <- rax
v7 <- AllocateObject:52(cls=FormatException) T{FormatException}
ParallelMove rcx <- rax, rax <- fp[-3]
StoreField(v7 T{FormatException} . message = v15 T{String}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v7 T{FormatException} . source = v3 T{String}, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreField(v7 T{FormatException} . offset = v4 T{int??}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:60(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rbx <- rsi, rax <- rdx, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rcx
v5 <- StaticCall:10( _lastNonWhitespace@0150898<0> v2, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
ParallelMove rax <- rax
v7 <- BinaryInt64Op(+ [tr], v5, v153 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-4] <- rax
Branch if EqualityCompare(v7 == v154 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rsi <- fp[-1]
v100 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdi <- fp[-3], rsi <- rsi, rdx <- rdx, rbx <- fp[-2], r8 <- C
StaticCall:26( _handleFormatError@0150898<0> v4, v2, v100 T{_Smi}, v3, v0, result_type = T{Null?})
ParallelMove rax <- C
DartReturn:28(v0)
B4
ParallelMove rsi <- fp[-1]
ParallelMove rdi <- rsi
v11 <- StaticCall:32( _firstNonWhitespace@0150898<0> v2, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax, rsi <- fp[-1]
v86 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rax
v145 <- UnboxInt64([non-speculative], v86) [0, 2305843009213693951] int64
ParallelMove rax <- rdx, rbx <- rcx
t0 <- GenericCheckBound:34(v145 T{_Smi}, v11 T{int}) [-9223372036854775808, 9223372036854775807] int64
v88 <- LoadClassId(v2 T{_StringBase}) [93, 94] T{_Smi}
Branch if StrictCompare:34(===, v88, v63 T{_Smi}) goto (38, 39)
B38
v92 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v11 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:34 B37
B39
v90 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v11 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:34 B37
B37
Branch if EqualityCompare(v91 T{_Smi} == v155 T{_Smi}) T{bool} goto (7, 5)
B7
B5
Branch if EqualityCompare(v91 T{_Smi} == v156 T{_Smi}) T{bool} goto (8, 11)
B8
B6
ParallelMove r9 <- C
v41 <- BinaryInt64Op(- [tr], v157 T{_Smi}, v91 T{_Smi}) [-65491, 44] int64
ParallelMove rcx <- rcx
v42 <- BinaryInt64Op(+ [tr], v11 T{int}, v153 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v42 == v7) T{bool} goto (9, 10)
B9
v144 <- BoxInt64(v7) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- fp[-3], rsi <- rsi, rdx <- rax, rbx <- fp[-2], r8 <- C
StaticCall:78( _handleFormatError@0150898<0> v4, v2, v144 T{int}, v3, v0, result_type = T{Null?})
ParallelMove rax <- C
DartReturn:80(v0)
B10
ParallelMove rax <- rdx, rbx <- rcx
t0 <- GenericCheckBound:84(v145 T{_Smi}, v42 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:84(===, v88 T{_Smi}, v63 T{_Smi}) goto (33, 34)
B33
v76 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v42 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:84 B32
B34
v74 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v42 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:84 B32
B32
ParallelMove r9 <- rcx, rbx <- rax, rcx <- r9 goto:90 B12
B11
ParallelMove r8 <- fp[-4]
ParallelMove r9 <- rcx, rbx <- rax, rcx <- C goto:92 B12
B12
Branch if StrictCompare:94(===, v3, v0) goto (13, 23)
B13
Branch if EqualityCompare(v18 == v158 T{_Smi}) T{bool} goto (14, 21)
B14
ParallelMove r10 <- r9
v28 <- BinaryInt64Op(+ [tr], v17, v153 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v28 == v7) T{bool} goto (15, 16)
B15
ParallelMove rax <- C
DartReturn:122(v8)
B16
ParallelMove rax <- rdx, rbx <- r10
t0 <- GenericCheckBound:126(v145 T{_Smi}, v28 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:126(===, v88 T{_Smi}, v63 T{_Smi}) goto (28, 29)
B28
v59 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v28 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:126 B27
B29
v57 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v28 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:126 B27
B27
ParallelMove rax <- rax
v32 <- BinaryInt64Op(| [tr], v58 T{_Smi}, v159 T{_Smi}) [0, 65535] int64
Branch if EqualityCompare(v32 == v160 T{_Smi}) T{bool} goto (17, 20)
B17
ParallelMove r10 <- r10
v35 <- BinaryInt64Op(+ [tr], v28 T{int}, v153 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v35 == v7) T{bool} goto (18, 19)
B18
v148 <- BoxInt64(v35) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- fp[-3], rsi <- rsi, rdx <- rax, rbx <- C, r8 <- C
StaticCall:152( _handleFormatError@0150898<0> v4, v2, v148 T{int}, v0, v0, result_type = T{Null?})
ParallelMove rax <- C
DartReturn:154(v0)
B19
v38 <- RelationalOp(>, v19, v154 T{_Smi}) T{bool}
MoveArgument(sp[0] <- v4)
ParallelMove rdi <- rsi, rsi <- C, rdx <- r10, rbx <- r8, r8 <- rcx, r9 <- r9
v39 <- StaticCall:160( _parseRadix@0150898<0> v2, v161 T{_Smi}, v35, v7, v19, v38, v4, result_type = T{int??}) T{int??}
ParallelMove rax <- rax
DartReturn:162(v39)
B20
B21
B22
ParallelMove rax <- C goto:178 B24
B23
ParallelMove rax <- rax
v149 <- UnboxInt64([non-speculative], v3 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rax <- rax goto:180 B24
B24
MoveArgument(sp[0] <- v4)
ParallelMove rdi <- rsi, rsi <- rax, rdx <- r9, rbx <- r8, r8 <- rcx, r9 <- C
v23 <- StaticCall:182( _parseRadix@0150898<0> v2, v20, v17, v7, v19, v22, v4, result_type = T{int??}) T{int??}
ParallelMove rax <- rax
DartReturn:184(v23)
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B5
Enter frame
PrologueOffset = 0
ParallelMove rcx <- C
ParallelMove r13 <- rsi, r12 <- rdx, r10 <- rbx, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx, fp[-4] <- r8, fp[-8] <- rbx, fp[-9] <- r9
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- r13
v10 <- BinaryInt64Op(- [tr], v3, v135 T{_Smi}) [-4611686018427387906, 4611686018427387901] int64
ParallelMove rax <- rax
v136 <- ShiftInt64Op(<< [tr], v10, v135) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax
v17 <- BinaryInt64Op(+ [tr], v136 T{int}, v135 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C, rbx <- rdx, fp[-5] <- rdx
GenericCheckBound:34(v259 T{_Smi}, v17) [-9223372036854775808, 9223372036854775807] int64
v260 <- LoadIndexed:34([_List] v18, v17 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rbx <- r10
v20 <- BinaryInt64Op(- [tr], v5, v4) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v232 <- UnboxInt64([non-speculative], v260 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-7] <- rax
Branch if RelationalOp(<=, v20, v232 T{int}) T{bool} goto (6, 9)
B6
ParallelMove rdi <- rdi, rsi <- r13, rdx <- r12, rbx <- r10, rax <- rdi
v85 <- StaticCall:48( _parseBlock@0150898<0> v2, v3, v4, v5, result_type = T{_Smi?}) T{_Smi?}
ParallelMove rax <- rax
Branch if StrictCompare:50(===, v85, v0) goto (7, 8)
B7
ParallelMove r12 <- fp[-2], r8 <- fp[-3]
v219 <- BoxInt64(v3) [-4611686018427387904, 4611686018427387903] T{_Smi}
v224 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- fp[2], rsi <- fp[-1], rdx <- rax, rbx <- rcx, r8 <- C
StaticCall:56( _handleFormatError@0150898<0> v8, v2, v224 T{int}, v219 T{_Smi}, v0, result_type = T{Null?})
ParallelMove rax <- C
DartReturn:58(v0)
B8
ParallelMove rax <- rax
v233 <- UnboxInt64([non-speculative], v85 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rcx <- fp[-4]
v86 <- BinaryInt64Op(* [tr], v6, v233 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v234 <- BoxInt64(v86) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
DartReturn:64(v234 T{int})
B9
ParallelMove r12 <- r13, r8 <- r12
ParallelMove rbx <- rbx goto:86 B11
B11
  Loop 1
CheckStackOverflow:84(stack=0, loop=1)
Branch if RelationalOp(>=, v22, v232 T{int}) T{bool} goto (10, 12)
B10
  Loop 1
ParallelMove rbx <- rbx
v84 <- BinaryInt64Op(- [tr], v22, v232 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx goto:82 B11
B12
Branch if RelationalOp(>, v22, v261 T{_Smi}) T{bool} goto (13, 16)
B13
ParallelMove r13 <- r8
v81 <- BinaryInt64Op(+ [tr], v4, v22) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-1], rsi <- r12, rdx <- r8, rbx <- r13, fp[-6] <- r13
v82 <- StaticCall:102( _parseBlock@0150898<0> v2, v3, v4, v81, result_type = T{_Smi?}) T{_Smi?}
ParallelMove rax <- rax
Branch if StrictCompare:104(===, v82, v0) goto (14, 15)
B14
ParallelMove rsi <- fp[-2], rcx <- fp[-3]
v220 <- BoxInt64(v3) [-4611686018427387904, 4611686018427387903] T{_Smi}
v225 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- fp[2], rsi <- fp[-1], rdx <- rax, rbx <- rdx, r8 <- C
StaticCall:110( _handleFormatError@0150898<0> v8, v2, v225 T{int}, v220 T{_Smi}, v0, result_type = T{Null?})
ParallelMove rax <- C
DartReturn:112(v0)
B15
ParallelMove rsi <- fp[-2]
ParallelMove rax <- rax
v235 <- UnboxInt64([non-speculative], v82 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rcx <- fp[-4]
v83 <- BinaryInt64Op(* [tr], v6, v235 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-6], rdx <- rcx goto:122 B17
B16
ParallelMove rsi <- r12, rcx <- r8
ParallelMove rdi <- rcx, rdx <- C goto:124 B17
B17
ParallelMove fp[-6] <- rdi, fp[-11] <- rdx
ParallelMove r8 <- fp[-5]
v30 <- BinaryInt64Op(+ [tr], v17 T{int}, v262 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C, rbx <- r8
GenericCheckBound:128(v259 T{_Smi}, v30) [-9223372036854775808, 9223372036854775807] int64
v263 <- LoadIndexed:128([_List] v18, v30 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove fp[-10] <- rax
ParallelMove rcx <- fp[-5]
v32 <- ShiftInt64Op(<< [tr], v17 T{int}, v262 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- rcx
v131 <- LoadStaticField:4(_int64OverflowLimits@0150898, CallsInitializer) T{_Int64List}
ParallelMove rcx <- rax
ParallelMove fp[-12] <- rcx
v87 <- LoadField(v131 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rax
v240 <- UnboxInt64([non-speculative], v87) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- fp[-3], fp[-5] <- rdx
GenericCheckBound:134(v240 T{_Smi}, v32) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-3]
v264 <- LoadIndexed:134([_Int64List] v131, v32 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v264 T{int} == v261 T{_Smi}) T{bool} goto (18, 19)
B18
ParallelMove rbx <- fp[-10]
v239 <- UnboxInt64([non-speculative], v263 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rax, rsi <- rbx
v80 <- StaticCall:146( _initInt64OverflowLimits@0150898<0> v32 T{int}, v239 T{int}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
ParallelMove r9 <- rax goto:152 B20
B19
ParallelMove r9 <- rbx goto:154 B20
B20
ParallelMove fp[-17] <- r9
ParallelMove rdx <- fp[-3]
v38 <- BinaryInt64Op(+ [tr], v32 T{int}, v262 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-5], rbx <- rdx
GenericCheckBound:160(v240 T{_Smi}, v38) [-9223372036854775808, 9223372036854775807] int64
v265 <- LoadIndexed:160([_Int64List] v131 T{_Int64List}, v38 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-13] <- rax
ParallelMove rdx <- fp[-6]
v40 <- BinaryInt64Op(+ [tr], v25, v232 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- fp[-10]
v237 <- UnboxInt64:424([non-speculative], v263 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-16] <- r10
ParallelMove r12 <- fp[-3]
v51 <- BinaryInt64Op:424(+ [tr], v32 T{int}, v269 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-15] <- r12
ParallelMove r13 <- fp[-3]
v62 <- BinaryInt64Op:424(+ [tr], v32 T{int}, v135 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-14] <- r13
ParallelMove fp[-6] <- fp[-6], fp[-3] <- fp[-11], rdi <- rdx, rsi <- fp[-2], rbx <- fp[-8], rdx <- fp[-9] goto:424 B54
B54
  Loop 0
ParallelMove fp[-11] <- rdi
CheckStackOverflow:418(stack=0, loop=1)
ParallelMove rdi <- fp[-1], rsi <- rsi, rdx <- fp[-6], rbx <- rdi, rax <- rdi
v45 <- StaticCall:164( _parseBlock@0150898<0> v2, v3, v41, v43, result_type = T{_Smi?}) T{_Smi?}
ParallelMove rcx <- rax
Branch if StrictCompare:166(===, v45, v0) goto (21, 22)
B22
  Loop 0
ParallelMove rdx <- fp[-17], rsi <- fp[-3]
Branch if RelationalOp(>=, v42, v36) T{bool} goto (23, 44)
B23
  Loop 0
Branch if RelationalOp(>, v42, v36) T{bool} goto (26, 24)
B24
  Loop 0
ParallelMove r9 <- fp[-14], r8 <- fp[-12]
ParallelMove rax <- fp[-5], rbx <- r9
GenericCheckBound:200(v240 T{_Smi}, v62) [-9223372036854775808, 9223372036854775807] int64
v266 <- LoadIndexed:200([_Int64List] v131 T{_Int64List}, v62 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rcx
v246 <- UnboxInt64([non-speculative], v45 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
Branch if RelationalOp(>, v246 T{_Smi}, v266 T{int}) T{bool} goto (27, 43)
B43
  Loop 0
ParallelMove r13 <- fp[-2], r12 <- fp[-8], rdi <- fp[-9], rdx <- fp[-15], r10 <- fp[-7] goto:396 B53
B27
B26
B30
Branch if StrictCompare:242(===, v7 T{bool}, v14) goto (33, 39)
BoolTest
B33
Branch if RelationalOp(>=, v42, v267 T{_Smi}) T{bool} goto (32, 35)
B32
Branch if RelationalOp(>, v42, v267 T{_Smi}) T{bool} goto (40, 31)
B40
B31
ParallelMove rax <- rcx
v245 <- UnboxInt64([non-speculative], v45 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
Branch if RelationalOp(>, v245 T{_Smi}, v268 T{_Smi}) T{bool} goto (41, 36)
B41
B36
B35
B34
ParallelMove rax <- fp[-11]
v71 <- BinaryInt64Op(+ [tr], v43, v232 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v71 T{int}, v5) T{bool} goto (37, 42)
B37
ParallelMove rax <- fp[-10]
v238 <- UnboxInt64([non-speculative], v263 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rsi
v73 <- BinaryInt64Op(* [tr], v42, v238 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx
v247 <- UnboxInt64([non-speculative], v45 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rdx <- rdx
v74 <- BinaryInt64Op(+ [tr], v73 T{int}, v247 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v252 <- BoxInt64(v74) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
DartReturn:308(v252 T{int})
B42
B39
B38
v222 <- BoxInt64(v3) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rdi <- fp[2], rsi <- fp[-1], rdx <- C, rbx <- rbx, r8 <- C
StaticCall:328( _handleFormatError@0150898<0> v8, v2, v0, v222 T{_Smi}, v67, result_type = T{Null?})
ParallelMove rax <- C
DartReturn:330(v0)
B44
  Loop 0
ParallelMove r13 <- fp[-2], r12 <- fp[-8], rdi <- fp[-9], r9 <- fp[-14], r8 <- fp[-12], r10 <- fp[-7], rax <- fp[-13]
Branch if RelationalOp(<=, v42, v265 T{int}) T{bool} goto (45, 51)
B45
  Loop 0
Branch if RelationalOp(<, v42, v265 T{int}) T{bool} goto (48, 46)
B46
  Loop 0
ParallelMove rbx <- fp[-15]
ParallelMove rax <- fp[-5], rbx <- rbx, rdx <- rbx
GenericCheckBound:358(v240 T{_Smi}, v51) [-9223372036854775808, 9223372036854775807] int64
v270 <- LoadIndexed:358([_Int64List] v131 T{_Int64List}, v51 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rcx
v248 <- UnboxInt64([non-speculative], v45 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
Branch if RelationalOp(>, v248 T{_Smi}, v270 T{int}) T{bool} goto (49, 50)
B50
B49
B48
B47
v223 <- BoxInt64(v3) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rdi <- fp[2], rsi <- fp[-1], rdx <- C, rbx <- rbx, r8 <- C
StaticCall:380( _handleFormatError@0150898<0> v8, v2, v0, v223 T{_Smi}, v54, result_type = T{Null?})
ParallelMove rax <- C
DartReturn:382(v0)
B51
  Loop 0
ParallelMove rdx <- fp[-15]
ParallelMove  goto:392 B52
B52
B53
  Loop 0
ParallelMove rsi <- rsi
v55 <- BinaryInt64Op(* [tr], v42, v237 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v249 <- UnboxInt64([non-speculative], v45 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rbx <- fp[-4]
v56 <- BinaryInt64Op(* [tr], v6, v249 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v57 <- BinaryInt64Op(+ [tr], v55 T{int}, v56) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[-11]
v58 <- BinaryInt64Op(+ [tr], v43, v232 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<=, v58 T{int}, v5) T{bool} goto (55, 56)
B55
  Loop 0
ParallelMove fp[-6] <- fp[-11], fp[-3] <- rsi, rdi <- rcx, rsi <- r13, rbx <- r12, rdx <- rdi, r9 <- fp[-17], r12 <- rdx, r13 <- r9, rcx <- r8, r8 <- r10, r10 <- rax, rax <- fp[-13] goto:422 B54
B56
v255 <- BoxInt64(v57) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
DartReturn:428(v255 T{int})
B21
ParallelMove r13 <- fp[-2], rcx <- fp[-6]
v221 <- BoxInt64(v3) [-4611686018427387904, 4611686018427387903] T{_Smi}
v244 <- BoxInt64(v41) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- fp[2], rsi <- fp[-1], rdx <- rax, rbx <- rdx, r8 <- C
StaticCall:172( _handleFormatError@0150898<0> v8, v2, v244 T{int}, v221 T{_Smi}, v0, result_type = T{Null?})
ParallelMove rax <- C
DartReturn:174(v0)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rdi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v40 <- LoadStaticField:4(_int64OverflowLimits@0150898, CallsInitializer) T{_Int64List}
ParallelMove rax <- C, rsi <- rax, rcx <- fp[-2]
v6 <- BinaryInt64Op(~/ [tr], v104 T{_Mint}, v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rax
v23 <- LoadField(v40 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r8 <- r8
v94 <- UnboxInt64([non-speculative], v23) [0, 4611686018427387903] int64
ParallelMove rax <- r8, rbx <- fp[-1]
GenericCheckBound:14(v94 T{_Smi}, v2) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- fp[-1]
StoreIndexed:14([_Int64List] v40, v2 T{int}, v6 T{int}, NoStoreBarrier)
ParallelMove r10 <- r9
v9 <- BinaryInt64Op(+ [tr], v2 T{int}, v105 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C
v11 <- BinaryInt64Op(~/ [tr], v106 T{_Mint}, v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r8, rbx <- r10, rdx <- rax
GenericCheckBound:22(v94 T{_Smi}, v9) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:22([_Int64List] v40 T{_Int64List}, v9 T{int}, v11 T{int}, NoStoreBarrier)
ParallelMove r10 <- r9
v14 <- BinaryInt64Op(+ [tr], v2 T{int}, v107 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi
v74 <- BinaryInt64Op(* [tr], v6 T{int}, v3 T{_IntegerImplementation}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- C
v75 <- BinaryInt64Op(- [tr], v104 T{_Mint}, v74) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r8, rbx <- r10
GenericCheckBound:30(v94 T{_Smi}, v14) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:30([_Int64List] v40 T{_Int64List}, v14 T{int}, v75 T{int}, NoStoreBarrier)
ParallelMove rdi <- r9
v18 <- BinaryInt64Op(+ [tr], v2 T{int}, v108 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v83 <- BinaryInt64Op(* [tr], v11 T{int}, v3 T{_IntegerImplementation}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- C
v84 <- BinaryInt64Op(- [tr], v106 T{_Mint}, v83) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v20 <- UnaryInt64Op(unary-, v84 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r8, rbx <- rdi
GenericCheckBound:40(v94 T{_Smi}, v18) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:40([_Int64List] v40 T{_Int64List}, v18 T{int}, v20 T{int}, NoStoreBarrier)
v109 <- LoadIndexed:44([_Int64List] v40 T{_Int64List}, v2 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
DartReturn:46(v109 T{int})
CheckStackOverflowSlowPath
slow path int64 divide operation
slow path check bound operation
slow path int64 divide operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove r8 <- rdi, rdi <- rsi, rsi <- rbx, fp[-5] <- rdi, fp[-6] <- rsi, fp[-7] <- rbx
Branch if RelationalOp(<=, v3, v124 T{_Smi}) T{bool} goto (3, 9)
B3
v72 <- LoadField:60(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove r9 <- rax
v117 <- UnboxInt64:60([non-speculative], v72) [0, 2305843009213693951] int64
ParallelMove fp[-4] <- r9
v74 <- LoadClassId:60(v2 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove fp[-3] <- r10
ParallelMove rcx <- C, r12 <- rdx goto:60 B8
B8
  Loop 1
ParallelMove fp[-2] <- r12
CheckStackOverflow:64(stack=0, loop=1)
Branch if RelationalOp(<, v39, v5) T{bool} goto (4, 5)
B4
  Loop 1
ParallelMove rax <- r9, rbx <- r12
t0 <- GenericCheckBound:34(v117 T{_Smi}, v39 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:34(===, v74, v65 T{_Smi}) goto (30, 31)
B30
  Loop 1
v78 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v39 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:34 B29
B31
  Loop 1
v76 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v39 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:34 B29
B29
  Loop 1
ParallelMove rax <- rax
v43 <- BinaryInt64Op(^ [tr], v77 T{_Smi}, v126 T{_Smi}) [0, 65535] int64
Branch if RelationalOp(>=, v43, v3) T{bool} goto (6, 7)
B7
  Loop 1
ParallelMove rdx <- rdi
v45 <- BinaryInt64Op(* [tr], v3, v38) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r13 <- rdx
v46 <- BinaryInt64Op(+ [tr], v45, v43) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-1] <- r13
v118 <- BoxInt64(v46) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdx <- C, rcx <- C
t0 <- AssertAssignable:56(v118 T{int}, v23, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{_Smi}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-2]
v48 <- BinaryInt64Op(+ [tr], v39 T{int}, v127 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[-1], r12 <- rax, r8 <- fp[-5], rdi <- fp[-6], rsi <- fp[-7], r10 <- fp[-3], r9 <- fp[-4] goto:62 B8
B6
ParallelMove rax <- C
DartReturn:48(v0)
B5
B9
ParallelMove rsi <- r8
v55 <- LoadField:150(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdi <- rax
v120 <- UnboxInt64:150([non-speculative], v55) [0, 2305843009213693951] int64
ParallelMove fp[-4] <- rdi
v57 <- LoadClassId:150(v2 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove fp[-3] <- r8
ParallelMove rcx <- C, r12 <- rdx goto:150 B20
B20
  Loop 0
ParallelMove fp[-2] <- r12
CheckStackOverflow:154(stack=0, loop=1)
Branch if RelationalOp(<, v11, v5) T{bool} goto (10, 11)
B10
  Loop 0
ParallelMove rax <- rdi, rbx <- r12
t0 <- GenericCheckBound:82(v120 T{_Smi}, v11 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:82(===, v57, v65 T{_Smi}) goto (25, 26)
B25
  Loop 0
v61 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v11 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:82 B24
B26
  Loop 0
v59 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v11 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:82 B24
B24
  Loop 0
ParallelMove rdx <- rax
v17 <- BinaryInt64Op(^ [tr], v60 T{_Smi}, v126 T{_Smi}) [0, 65535] int64
Branch if RelationalOp(>, v17, v128 T{_Smi}) T{bool} goto (12, 18)
B12
  Loop 0
ParallelMove rax <- rax
v28 <- BinaryInt64Op(| [tr], v60 T{_Smi}, v129 T{_Smi}) [0, 65535] int64
ParallelMove rax <- rax
v31 <- BinaryInt64Op(- [tr], v28, v82) [-87, 65448] int64
Branch if RelationalOp(<, v31, v124 T{_Smi}) T{bool} goto (15, 13)
B13
  Loop 0
Branch if RelationalOp(>=, v31, v3) T{bool} goto (16, 17)
B17
B16
B15
B14
ParallelMove rax <- C
DartReturn:130(v0)
B18
  Loop 0
ParallelMove rax <- rdx goto:140 B19
B19
  Loop 0
ParallelMove rdx <- r10
v21 <- BinaryInt64Op(* [tr], v3, v10) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r13 <- rdx
v22 <- BinaryInt64Op(+ [tr], v21, v20) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-1] <- r13
v121 <- BoxInt64(v22) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdx <- C, rcx <- C
t0 <- AssertAssignable:146(v121 T{int}, v23, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{_Smi}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdx <- fp[-2]
v26 <- BinaryInt64Op(+ [tr], v11 T{int}, v127 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[-1], r12 <- rdx, rsi <- fp[-5], r8 <- fp[-3], rdi <- fp[-4] goto:152 B20
B11
B21
v123 <- BoxInt64(v34) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
DartReturn:162(v123 T{_Smi})
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
v19 <- AllocateTypedData:10(v22 T{_Smi}) T{_Int64List}
ParallelMove rax <- rax
DartReturn:12(v19 T{_Int64List})
B0
B1
v54 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v319 <- UnboxInt64:46([non-speculative], v54 T{_Smi}) [0, 2305843009213693951] int64
v41 <- LoadClassId:46(v2 T{_StringBase}) [93, 94] T{_Smi}
v30 <- LoadClassId:46(v2) [93, 94] int64
ParallelMove rax <- C goto:46 B8
B8
  Loop 0
CheckStackOverflow:50(stack=0, loop=1)
Branch if RelationalOp(<, v5, v319 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
Branch if StrictCompare:26(===, v41, v49 T{_Smi}) goto (19, 20)
B19
  Loop 0
v45 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v5 T{int}) [0, 255] int64
ParallelMove rsi <- rsi goto:26 B18
B20
  Loop 0
v43 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v5 T{int}) [0, 65535] int64
ParallelMove rsi <- rsi goto:26 B18
B18
  Loop 0
Branch if EqualityCompare:28(v30 == v31) goto (9, 14)
B9
  Loop 0
Branch if RelationalOp(<=, v44 T{_Smi}, v324 T{_Smi}) T{bool} goto (25, 31)
B25
  Loop 0
Branch if EqualityCompare(v44 T{_Smi} == v324 T{_Smi}) T{bool} goto (112, 27)
B112
B27
  Loop 0
Branch if RelationalOp(<=, v44 T{_Smi}, v325 T{_Smi}) T{bool} goto (28, 113)
B28
  Loop 0
Branch if RelationalOp(<, v44 T{_Smi}, v326 T{_Smi}) T{bool} goto (109, 110)
B110
B102
B109
B113
B101
B31
  Loop 0
Branch if EqualityCompare(v44 T{_Smi} == v327 T{_Smi}) T{bool} goto (108, 33)
B108
B33
  Loop 0
Branch if EqualityCompare(v44 T{_Smi} != v328 T{_Smi}) T{bool} goto (103, 106)
B106
B104
B72
B103
B71
B14
  Loop 0
Branch if RelationalOp(<=, v44 T{_Smi}, v324 T{_Smi}) T{bool} goto (38, 44)
B38
  Loop 0
Branch if EqualityCompare(v44 T{_Smi} == v324 T{_Smi}) T{bool} goto (98, 40)
B98
B40
  Loop 0
Branch if RelationalOp(<=, v44 T{_Smi}, v325 T{_Smi}) T{bool} goto (41, 99)
B41
  Loop 0
Branch if RelationalOp(<, v44 T{_Smi}, v326 T{_Smi}) T{bool} goto (95, 96)
B96
B76
B95
B99
B75
B44
  Loop 0
Branch if RelationalOp(<, v44 T{_Smi}, v327 T{_Smi}) T{bool} goto (77, 46)
B46
  Loop 0
Branch if EqualityCompare(v44 T{_Smi} == v327 T{_Smi}) T{bool} goto (49, 47)
B49
B47
  Loop 0
Branch if EqualityCompare(v44 T{_Smi} == v328 T{_Smi}) T{bool} goto (50, 51)
B50
B80
B51
  Loop 0
Branch if RelationalOp(<=, v44 T{_Smi}, v329 T{_Smi}) T{bool} goto (52, 56)
B52
  Loop 0
Branch if EqualityCompare(v44 T{_Smi} == v330 T{_Smi}) T{bool} goto (94, 54)
B94
B54
  Loop 0
Branch if RelationalOp(>, v331 T{_Smi}, v44 T{_Smi}) T{bool} goto (83, 92)
B92
B84
B83
B56
  Loop 0
Branch if EqualityCompare(v44 T{_Smi} == v332 T{_Smi}) T{bool} goto (64, 58)
B64
B58
  Loop 0
Branch if EqualityCompare(v44 T{_Smi} == v333 T{_Smi}) T{bool} goto (65, 59)
B65
B59
  Loop 0
Branch if EqualityCompare(v44 T{_Smi} == v334 T{_Smi}) T{bool} goto (66, 60)
B66
B60
  Loop 0
Branch if EqualityCompare(v44 T{_Smi} == v335 T{_Smi}) T{bool} goto (67, 61)
B67
B61
  Loop 0
Branch if EqualityCompare(v44 T{_Smi} == v336 T{_Smi}) T{bool} goto (68, 62)
B68
B90
B62
  Loop 0
Branch if EqualityCompare(v44 T{_Smi} != v337 T{_Smi}) T{bool} goto (85, 88)
B88
B86
B82
B74
B7
  Loop 0
ParallelMove rax <- rax
v11 <- BinaryInt64Op(+ [tr], v5 T{int}, v338 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax goto:48 B8
B85
B81
B77
B73
B5
B4
B6
ParallelMove rax <- rax
DartReturn:54(v5)
CheckStackOverflowSlowPath
PrologueOffset = 375
B0
B1
v55 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v321 <- UnboxInt64([non-speculative], v55 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rcx <- rcx
v5 <- BinaryInt64Op(- [tr], v321 T{_Smi}, v325 T{_Smi}) [v321-1, v321-1] int64
v42 <- LoadClassId:48(v2 T{_StringBase}) [93, 94] T{_Smi}
v31 <- LoadClassId:48(v2) [93, 94] int64
ParallelMove rax <- rcx goto:48 B8
B8
  Loop 0
CheckStackOverflow:52(stack=0, loop=1)
Branch if RelationalOp(>=, v6, v326 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
Branch if StrictCompare:28(===, v42, v50 T{_Smi}) goto (19, 20)
B19
  Loop 0
v46 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v6 T{int}) [0, 255] int64
ParallelMove rcx <- rcx goto:28 B18
B20
  Loop 0
v44 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v6 T{int}) [0, 65535] int64
ParallelMove rcx <- rcx goto:28 B18
B18
  Loop 0
Branch if EqualityCompare:30(v31 == v32) goto (9, 14)
B9
  Loop 0
Branch if RelationalOp(<=, v45 T{_Smi}, v327 T{_Smi}) T{bool} goto (25, 31)
B25
  Loop 0
Branch if EqualityCompare(v45 T{_Smi} == v327 T{_Smi}) T{bool} goto (112, 27)
B112
B27
  Loop 0
Branch if RelationalOp(<=, v45 T{_Smi}, v328 T{_Smi}) T{bool} goto (28, 113)
B28
  Loop 0
Branch if RelationalOp(<, v45 T{_Smi}, v329 T{_Smi}) T{bool} goto (109, 110)
B110
B102
B109
B113
B101
B31
  Loop 0
Branch if EqualityCompare(v45 T{_Smi} == v330 T{_Smi}) T{bool} goto (108, 33)
B108
B33
  Loop 0
Branch if EqualityCompare(v45 T{_Smi} != v331 T{_Smi}) T{bool} goto (103, 106)
B106
B104
B72
B103
B71
B14
  Loop 0
Branch if RelationalOp(<=, v45 T{_Smi}, v327 T{_Smi}) T{bool} goto (38, 44)
B38
  Loop 0
Branch if EqualityCompare(v45 T{_Smi} == v327 T{_Smi}) T{bool} goto (98, 40)
B98
B40
  Loop 0
Branch if RelationalOp(<=, v45 T{_Smi}, v328 T{_Smi}) T{bool} goto (41, 99)
B41
  Loop 0
Branch if RelationalOp(<, v45 T{_Smi}, v329 T{_Smi}) T{bool} goto (95, 96)
B96
B76
B95
B99
B75
B44
  Loop 0
Branch if RelationalOp(<, v45 T{_Smi}, v330 T{_Smi}) T{bool} goto (77, 46)
B46
  Loop 0
Branch if EqualityCompare(v45 T{_Smi} == v330 T{_Smi}) T{bool} goto (49, 47)
B49
B47
  Loop 0
Branch if EqualityCompare(v45 T{_Smi} == v331 T{_Smi}) T{bool} goto (50, 51)
B50
B80
B51
  Loop 0
Branch if RelationalOp(<=, v45 T{_Smi}, v332 T{_Smi}) T{bool} goto (52, 56)
B52
  Loop 0
Branch if EqualityCompare(v45 T{_Smi} == v333 T{_Smi}) T{bool} goto (94, 54)
B94
B54
  Loop 0
Branch if RelationalOp(>, v334 T{_Smi}, v45 T{_Smi}) T{bool} goto (83, 92)
B92
B84
B83
B56
  Loop 0
Branch if EqualityCompare(v45 T{_Smi} == v335 T{_Smi}) T{bool} goto (64, 58)
B64
B58
  Loop 0
Branch if EqualityCompare(v45 T{_Smi} == v336 T{_Smi}) T{bool} goto (65, 59)
B65
B59
  Loop 0
Branch if EqualityCompare(v45 T{_Smi} == v337 T{_Smi}) T{bool} goto (66, 60)
B66
B60
  Loop 0
Branch if EqualityCompare(v45 T{_Smi} == v338 T{_Smi}) T{bool} goto (67, 61)
B67
B61
  Loop 0
Branch if EqualityCompare(v45 T{_Smi} == v339 T{_Smi}) T{bool} goto (68, 62)
B68
B90
B62
  Loop 0
Branch if EqualityCompare(v45 T{_Smi} != v340 T{_Smi}) T{bool} goto (85, 88)
B88
B86
B82
B74
B7
  Loop 0
ParallelMove rax <- rax
v12 <- BinaryInt64Op(- [tr], v6 T{int}, v325 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax goto:50 B8
B85
B81
B77
B73
B5
B4
B6
ParallelMove rax <- rax
DartReturn:56(v6)
CheckStackOverflowSlowPath
PrologueOffset = 381
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rsi
v64 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rsi <- rsi
v110 <- UnboxInt64([non-speculative], v64) [0, 2305843009213693951] int64
ParallelMove rax <- rsi, rbx <- rcx
t0 <- GenericCheckBound:10(v110 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
v66 <- LoadClassId(v2 T{_StringBase}) [93, 94] T{_Smi}
Branch if StrictCompare:10(===, v66, v54 T{_Smi}) goto (31, 32)
B31
v70 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v3 T{int}) [0, 255] int64
ParallelMove r9 <- r9 goto:10 B30
B32
v68 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v3 T{int}) [0, 65535] int64
ParallelMove r9 <- r9 goto:10 B30
B30
Branch if EqualityCompare(v69 T{_Smi} == v114 T{_Smi}) T{bool} goto (5, 3)
B5
B3
Branch if EqualityCompare(v69 T{_Smi} == v115 T{_Smi}) T{bool} goto (6, 9)
B6
B4
ParallelMove r10 <- rcx
v34 <- BinaryInt64Op(+ [tr], v3 T{int}, v116 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- C
v36 <- BinaryInt64Op(- [tr], v117 T{_Smi}, v69 T{_Smi}) [-65491, 44] int64
Branch if RelationalOp(>, v34, v4) T{bool} goto (7, 8)
B7
ParallelMove rax <- C
DartReturn:54(v0)
B8
ParallelMove r9 <- r10, rcx <- r12 goto:62 B13
B9
ParallelMove r9 <- rcx, rcx <- C goto:64 B13
B13
ParallelMove r10 <- rdx
v17 <- BinaryInt64Op(- [tr], v4, v12) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v17, v118 T{_Smi}) T{bool} goto (14, 15)
B14
ParallelMove rax <- C
DartReturn:96(v0)
B15
ParallelMove r10 <- C, r9 <- r9 goto:138 B20
B20
  Loop 0
CheckStackOverflow:142(stack=0, loop=1)
Branch if RelationalOp(<=, v21, v4) T{bool} goto (16, 17)
B16
  Loop 0
ParallelMove rax <- rsi, rbx <- r9
t0 <- GenericCheckBound:114(v110 T{_Smi}, v21 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:114(===, v66 T{_Smi}, v54 T{_Smi}) goto (24, 25)
B24
  Loop 0
v50 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v21 T{int}) [0, 255] int64
ParallelMove r12 <- r12 goto:114 B23
B25
  Loop 0
v48 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v21 T{int}) [0, 65535] int64
ParallelMove r12 <- r12 goto:114 B23
B23
  Loop 0
ParallelMove r12 <- r12
v27 <- BinaryInt64Op(^ [tr], v49 T{_Smi}, v120 T{_Smi}) [0, 65535] int64
Branch if RelationalOp(<, v121 T{_Smi}, v27) T{bool} goto (18, 19)
B19
  Loop 0
ParallelMove r13 <- r10
v30 <- BinaryInt64Op(* [tr], v20, v122 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r13 <- r13
v31 <- BinaryInt64Op(+ [tr], v30, v27) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- r9
v32 <- BinaryInt64Op(+ [tr], v21 T{int}, v116 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- r13, r9 <- r9 goto:140 B20
B18
ParallelMove rax <- C
DartReturn:128(v0)
B17
ParallelMove rcx <- rcx
v24 <- BinaryInt64Op(* [tr], v13, v20) [-9223372036854775808, 9223372036854775807] int64
v112 <- BoxInt64(v24) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
DartReturn:146(v112 T{int})
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[4]
v5 <- LoadField(v2 . Closure.context {final}) T{*}
ParallelMove fp[-1] <- rcx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[3]
v96 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[2]
v98 <- UnboxInt64([non-speculative], v4) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v6 <- BinaryInt64Op(- [tr], v98 T{int}, v96 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v6, v100 T{_Smi}) T{bool} goto (16, 5)
B5
v10 <- LoadField(v5 . host) T{String}
MoveArgument(sp[0] <- v4)
ParallelMove rdi <- rdi, rsi <- rax
v11 <- StaticCall:32( substring<0> v10, v96 T{int}, v4, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v12)
ParallelMove rdi <- rax
v13 <- StaticCall:34( parse<0> v11, v12, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
Branch if RelationalOp(<, v13, v101 T{_Smi}) T{bool} goto (8, 6)
B6
Branch if RelationalOp(>, v13, v102 T{_Smi}) T{bool} goto (9, 11)
B11
v99 <- BoxInt64(v13) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
DartReturn:74(v99 T{int})
B16
ParallelMove rcx <- fp[3], rax <- rcx
v21 <- LoadField(v5 . error {final}) T{_Closure}
v55 <- LoadField(v21 T{_Closure} . Closure.context {final}) T{*}
v63 <- LoadField(v55 . host) T{String}
ParallelMove fp[-2] <- rdx
v56 <- AllocateObject:10(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v56 T{FormatException} . message = v65 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreField(v56 T{FormatException} . source = v63 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[3]
StoreField(v56 T{FormatException} . offset = v3 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:18(v56)
B8
ParallelMove rdx <- fp[3], rax <- fp[-1]
ParallelMove  goto:58 B13
B9
ParallelMove rdx <- fp[3], rax <- fp[-1]
ParallelMove  goto:62 B13
B13
v18 <- LoadField(v5 . error {final}) T{_Closure}
v32 <- LoadField(v18 T{_Closure} . Closure.context {final}) T{*}
v40 <- LoadField(v32 . host) T{String}
ParallelMove fp[-1] <- rcx
v33 <- AllocateObject:10(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v33 T{FormatException} . message = v45 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v33 T{FormatException} . source = v40 T{String}, NoStoreBarrier)
ParallelMove rax <- fp[3]
StoreField(v33 T{FormatException} . offset = v3 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:18(v33)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[4]
v5 <- LoadField(v2 . Closure.context {final}) T{*}
ParallelMove fp[-1] <- rcx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v8 <- CreateArray:12(v0, v7) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v8, v9, v10, NoStoreBarrier)
ParallelMove rcx <- fp[3]
StoreIndexed([_List] v8, v11, v3, NoStoreBarrier)
MoveArgument(sp[0] <- v8)
v12 <- StaticCall:14( _interpolate@0150898<0> v8, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-3] <- rcx
v13 <- LoadField(v5 . host) T{String}
ParallelMove fp[-2] <- rdx
v6 <- AllocateObject:10(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- fp[-3]
StoreField(v6 T{FormatException} . message = v12 T{String}, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreField(v6 T{FormatException} . source = v13 T{String}, NoStoreBarrier)
ParallelMove rax <- fp[2]
StoreField(v6 T{FormatException} . offset = v4 T{int??}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:18(v6)
CheckStackOverflowSlowPath
B0
B5
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v123 <- AllocateObject:20(cls=StringBuffer) T{StringBuffer}
ParallelMove rax <- rax
ParallelMove fp[-4] <- rax
MoveArgument(sp[0] <- v5)
ParallelMove rdi <- rax
StaticCall:22( StringBuffer.<0> v123, v5)
ParallelMove rcx <- fp[-1]
v333 <- LoadField:376(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove r8 <- rax
v565 <- UnboxInt64:376([non-speculative], v333) [0, 2305843009213693951] int64
ParallelMove fp[-8] <- r8
v335 <- LoadClassId:376(v2 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove fp[-7] <- r9
ParallelMove rdx <- C, r13 <- fp[-2], r12 <- fp[-2] goto:376 B53
B53
  Loop 0
ParallelMove fp[-5] <- rdx, fp[-2] <- r13, fp[-6] <- r12
CheckStackOverflow:374(stack=0, loop=1)
Branch if RelationalOp(<, v13, v4) T{bool} goto (52, 56)
B52
  Loop 0
ParallelMove rax <- r8, rbx <- r12
t0 <- GenericCheckBound:40(v565 T{_Smi}, v13 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:40(===, v335, v198 T{_Smi}) goto (139, 140)
B139
  Loop 0
v339 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v13 T{int}) [0, 255] int64
ParallelMove rsi <- rax goto:40 B138
B140
  Loop 0
v337 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v13 T{int}) [0, 65535] int64
ParallelMove rsi <- rax goto:40 B138
B138
  Loop 0
Branch if EqualityCompare(v338 T{_Smi} == v581 T{_Smi}) T{bool} goto (6, 21)
B6
  Loop 0
ParallelMove rdi <- rcx, rsi <- r12, rdx <- C, rax <- rdx
v107 <- StaticCall:52( _normalizeEscape@0150898<0> v2, v13 T{int}, v8) T{String??}
ParallelMove rcx <- rax
ParallelMove fp[-9] <- rcx
Branch if StrictCompare:54(===, v107, v0) goto (7, 11)
B7
  Loop 0
ParallelMove r8 <- fp[-5]
Branch if StrictCompare:60(===, v14 T{bool}, v8) goto (8, 12)
BoolTest
B8
  Loop 0
ParallelMove rax <- fp[-6]
v122 <- BinaryInt64Op(+ [tr], v13 T{int}, v582 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- r8, r13 <- fp[-2], r12 <- rax goto:72 B9
B12
B11
B15
  Loop 0
v562 <- BoxInt64(v13 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- fp[-2], rsi <- rax, rdx <- fp[-8]
v305 <- StaticCall:30( checkValidRange<0> v12 T{int}, v562 T{int?}, v565 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-1], rsi <- fp[-2], rdx <- rax
v306 <- StaticCall:32( _substringUnchecked@0150898<0> v2 T{_StringBase}, v12 T{int}, v305, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-10] <- rax
v435 <- LoadField(v306 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v435, v168 T{_Smi}) T{bool} goto (127, 128)
B127
B128
  Loop 0
ParallelMove rdi <- fp[-4]
StaticCall:26( _consumeBuffer@0150898<0> v123 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-4], rsi <- fp[-10]
StaticCall:28( _addPart@0150898<0> v123 T{StringBuffer}, v306 T{String}, using unchecked entrypoint)
ParallelMove  goto:30 B129
B129
  Loop 0
Branch if StrictCompare:106(===, v107, v0) goto (16, 17)
B16
  Loop 0
ParallelMove rcx <- fp[-6]
v119 <- BinaryInt64Op(+ [tr], v13 T{int}, v582 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v567 <- BoxInt64(v119 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- fp[-6], rsi <- rax, rdx <- fp[-8]
v294 <- StaticCall:30( checkValidRange<0> v13 T{int}, v567 T{int?}, v565 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-1], rsi <- fp[-6], rdx <- rax
v295 <- StaticCall:32( _substringUnchecked@0150898<0> v2 T{_StringBase}, v13 T{int}, v294, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:140 B20
B17
  Loop 0
v674 <- LoadClassId(<non-smi> v107 T{String?}) int64
MoveArgument(sp[1] <- v107 T{String?})
MoveArgument(sp[0] <- v112)
ParallelMove rcx <- rcx
v113 <- DispatchTableCall( cid=v674 String.==<0>, v107 T{String?}, v112) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:122(===, v113 T{bool}, v8) goto (18, 19)
BoolTest
B19
  Loop 0
ParallelMove rax <- fp[-9] goto:142 B20
B20
  Loop 0
MoveArgument(sp[0] <- v117 T{String?})
v272 <- StaticCall:10( _interpolateSingle@0150898<0> v117 T{String?}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-9] <- rax
v405 <- LoadField(v272 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v405, v168 T{_Smi}) T{bool} goto (110, 111)
B110
B111
  Loop 0
ParallelMove rdi <- fp[-4]
StaticCall:26( _consumeBuffer@0150898<0> v123 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-4], rsi <- fp[-9]
StaticCall:28( _addPart@0150898<0> v123 T{StringBuffer}, v272, using unchecked entrypoint)
ParallelMove  goto:30 B112
B112
  Loop 0
ParallelMove rax <- fp[-6]
v118 <- BinaryInt64Op(+ [tr], v13 T{int}, v582 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- C, rcx <- rax, rax <- rax goto:362 B51
B21
  Loop 0
ParallelMove r8 <- rdx
Branch if RelationalOp(<, v338 T{_Smi}, v584 T{_Smi}) T{bool} goto (105, 181)
B105
  Loop 0
ParallelMove r10 <- C, r9 <- C
ParallelMove rcx <- rsi
v241 <- ShiftInt64Op(>> [tr], v338 T{_Smi}, v585 T{_Smi}) [0, 4095] int64
ParallelMove rax <- C, rbx <- rcx
GenericCheckBound:24(v586 T{_Smi}, v241) [-9223372036854775808, 9223372036854775807] int64
v587 <- LoadIndexed:24([_List] v262, v241 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- rsi
v665 <- IntConverter(int64->uint32[tr], v338 T{_Smi}) uint32
ParallelMove rcx <- rcx
v245 <- BinaryUint32Op(& [tr], v665 T{_Smi}, v675 T{_Smi}) [0, 15] uint32
ParallelMove rcx <- rcx
v666 <- IntConverter(uint32->int64, v245) int64
ParallelMove rcx <- rcx
ParallelMove rdx <- C
v246 <- ShiftUint32Op(<< [tr], v676 T{_Smi}, v666 T{_Smi}) [1, 32768] uint32
ParallelMove rax <- rax
v570 <- UnboxUint32([tr], [non-speculative], v587 T{int?}) [0, 4294967295] uint32
ParallelMove rax <- rax
v247 <- BinaryUint32Op(& [tr], v570, v246) [0, 32768] uint32
ParallelMove rax <- rax
v667 <- IntConverter(uint32->int64, v247) int64
Branch if EqualityCompare(v667 T{_Smi} != v583 T{_Smi}) T{bool} goto (22, 179)
B22
  Loop 0
Branch if StrictCompare:162(===, v14 T{bool}, v8) goto (23, 33)
BoolTest
B23
  Loop 0
Branch if RelationalOp(<=, v590 T{_Smi}, v338 T{_Smi}) T{bool} goto (24, 34)
B24
  Loop 0
Branch if RelationalOp(>=, v591 T{_Smi}, v338 T{_Smi}) T{bool} goto (28, 35)
B28
  Loop 0
ParallelMove r8 <- fp[-2], rcx <- fp[-6]
Branch if RelationalOp(<, v12, v13 T{int}) T{bool} goto (29, 30)
B29
  Loop 0
v563 <- BoxInt64(v13 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- r8, rsi <- rax, rdx <- fp[-8]
v208 <- StaticCall:30( checkValidRange<0> v12 T{int}, v563 T{int?}, v565 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-1], rsi <- fp[-2], rdx <- rax
v209 <- StaticCall:32( _substringUnchecked@0150898<0> v2 T{_StringBase}, v12 T{int}, v208, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-9] <- rax
v398 <- LoadField(v209 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v398, v168 T{_Smi}) T{bool} goto (93, 94)
B93
B94
  Loop 0
ParallelMove rdi <- fp[-4]
StaticCall:26( _consumeBuffer@0150898<0> v123 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-4], rsi <- fp[-9]
StaticCall:28( _addPart@0150898<0> v123 T{StringBuffer}, v209 T{String}, using unchecked entrypoint)
ParallelMove  goto:30 B95
B95
  Loop 0
ParallelMove rax <- fp[-6] goto:224 B31
B30
  Loop 0
ParallelMove rax <- fp[-2] goto:226 B31
B31
  Loop 0
ParallelMove rcx <- C, rax <- rax goto:244 B36
B35
B34
B33
B32
  Loop 0
ParallelMove rcx <- r8, rax <- fp[-2] goto:246 B36
B36
  Loop 0
ParallelMove rbx <- fp[-6]
v75 <- BinaryInt64Op(+ [tr], v13 T{int}, v589 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rcx, rcx <- rax, rax <- rbx goto:356 B50
B179
B181
B37
  Loop 0
ParallelMove rax <- rsi
v664 <- IntConverter(int64->uint32[tr], v338 T{_Smi}) uint32
ParallelMove rax <- rax
v31 <- BinaryUint32Op(& [tr], v664 T{_Smi}, v677 T{_Smi}) [0, 64512] uint32
ParallelMove rax <- rax
v668 <- IntConverter(uint32->int64, v31) int64
Branch if EqualityCompare(v668 T{_Smi} == v593 T{_Smi}) T{bool} goto (38, 44)
B38
  Loop 0
ParallelMove r9 <- fp[-3]
ParallelMove rdx <- fp[-6]
v43 <- BinaryInt64Op(+ [tr], v13 T{int}, v589 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v43, v4) T{bool} goto (39, 45)
B39
  Loop 0
ParallelMove r10 <- fp[-7]
ParallelMove rax <- fp[-8], rbx <- rdx
t0 <- GenericCheckBound:278(v565 T{_Smi}, v43 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:278(===, v335 T{_Smi}, v198 T{_Smi}) goto (84, 85)
B84
  Loop 0
ParallelMove r12 <- fp[-1]
v194 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v43 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:278 B83
B85
  Loop 0
ParallelMove r12 <- fp[-1]
v192 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v43 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:278 B83
B83
  Loop 0
ParallelMove rdx <- rax
v670 <- IntConverter(int64->uint32[tr], v193 T{_Smi}) uint32
ParallelMove rdx <- rdx
v47 <- BinaryUint32Op(& [tr], v670 T{_Smi}, v677 T{_Smi}) [0, 64512] uint32
ParallelMove rdx <- rdx
v671 <- IntConverter(uint32->int64, v47) int64
Branch if EqualityCompare(v671 T{_Smi} == v594 T{_Smi}) T{bool} goto (40, 41)
B40
  Loop 0
ParallelMove r13 <- C
ParallelMove rbx <- rsi
v663 <- IntConverter(int64->uint32[tr], v338 T{_Smi}) uint32
ParallelMove rbx <- rbx
v54 <- BinaryUint32Op(& [tr], v663 T{_Smi}, v678 T{_Smi}) [0, 1023] uint32
ParallelMove rbx <- rbx
v672 <- IntConverter(uint32->int64, v54) int64
ParallelMove rbx <- rbx
v56 <- ShiftInt64Op(<< [tr], v672 T{_Smi}, v596 T{_Smi}) [0, 1047552] int64
ParallelMove rbx <- rbx
v57 <- BinaryInt64Op(| [tr], v56, v597 T{_Smi}) [0, 1048575] int64
ParallelMove rax <- rax
v669 <- IntConverter(int64->uint32[tr], v193 T{_Smi}) uint32
ParallelMove rax <- rax
v58 <- BinaryUint32Op(& [tr], v669 T{_Smi}, v678 T{_Smi}) [0, 1023] uint32
ParallelMove rax <- rax
v673 <- IntConverter(uint32->int64, v58) int64
ParallelMove rbx <- rbx
v59 <- BinaryInt64Op(| [tr], v57, v673 T{_Smi}) [0, 1048575] int64
ParallelMove rbx <- rbx, rax <- C goto:306 B42
B41
  Loop 0
ParallelMove r13 <- C
ParallelMove rbx <- rsi, rax <- C goto:308 B42
B42
  Loop 0
ParallelMove rdi <- rbx, rdx <- rax goto:322 B49
B45
  Loop 0
ParallelMove r12 <- fp[-1], r10 <- fp[-7], r13 <- C
ParallelMove  goto:318 B43
B44
  Loop 0
ParallelMove r12 <- fp[-1], r9 <- fp[-3], r10 <- fp[-7], r13 <- C
ParallelMove  goto:314 B43
B43
  Loop 0
ParallelMove rdi <- rsi, rdx <- C goto:324 B49
B49
  Loop 0
ParallelMove fp[-11] <- rdx, fp[-12] <- rdi
v564 <- BoxInt64(v13 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- fp[-2], rsi <- rax, rdx <- fp[-8], rax <- rdi, rbx <- rdx
v179 <- StaticCall:30( checkValidRange<0> v12 T{int}, v564 T{int?}, v565 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-1], rsi <- fp[-2], rdx <- rax
v180 <- StaticCall:32( _substringUnchecked@0150898<0> v2 T{_StringBase}, v12 T{int}, v179, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-9] <- rax
v356 <- LoadField(v180 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v356, v168 T{_Smi}) T{bool} goto (62, 63)
B62
B63
  Loop 0
ParallelMove rdi <- fp[-4]
StaticCall:26( _consumeBuffer@0150898<0> v123 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-4], rsi <- fp[-9]
StaticCall:28( _addPart@0150898<0> v123 T{StringBuffer}, v180 T{String}, using unchecked entrypoint)
ParallelMove  goto:30 B64
B64
  Loop 0
ParallelMove rdi <- fp[-12]
v40 <- StaticCall:348( _escapeChar@0150898<0> v34, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-9] <- rax
v372 <- LoadField(v40 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v372, v168 T{_Smi}) T{bool} goto (67, 68)
B67
B68
  Loop 0
ParallelMove rdi <- fp[-4]
StaticCall:26( _consumeBuffer@0150898<0> v123 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-4], rsi <- fp[-9]
StaticCall:28( _addPart@0150898<0> v123 T{StringBuffer}, v40 T{String}, using unchecked entrypoint)
ParallelMove  goto:30 B69
B69
  Loop 0
ParallelMove rcx <- fp[-6]
v41 <- BinaryInt64Op(+ [tr], v13 T{int}, v35) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-5], rcx <- rcx, rax <- rcx goto:358 B50
B50
B51
  Loop 0
ParallelMove rdx <- rdx, r13 <- rcx, r12 <- rax goto:366 B9
B9
  Loop 0
ParallelMove rdx <- rdx, r13 <- r13, r12 <- r12, rcx <- fp[-1], r9 <- fp[-7], r8 <- fp[-8] goto:372 B53
B56
ParallelMove rcx <- r10, rsi <- r13
Branch if RelationalOp(<, v12, v4) T{bool} goto (57, 58)
B57
v561 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v561 T{int})
ParallelMove rdi <- fp[-1], rsi <- rsi
v23 <- StaticCall:402( substring<0> v2, v12, v561 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdi <- fp[-4], rsi <- rax
StaticCall:404( write<0> v123 T{StringBuffer}, v23, using unchecked entrypoint)
ParallelMove  goto:410 B59
B58
B59
MoveArgument(sp[0] <- v123 T{StringBuffer})
v22 <- StaticCall:414( toString<0> v123 T{StringBuffer}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:416(v22)
B18
ParallelMove rdi <- fp[-1], rsi <- fp[-6], rdx <- C
v115 <- StaticCall:128( _fail@0150898<0> v2, v13 T{int}, v114) T{Never}
v116 <- AllocateObject:130(cls=ReachabilityError, <not-aliased>) T{ReachabilityError}
ParallelMove rcx <- rax, rax <- C
StoreField(v116 T{ReachabilityError} . _message@9040228 = v284 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:134(v116)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path uint32 shift operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove r8 <- rsi, fp[-1] <- rsi, fp[-2] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v11 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v12 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[0] <- v11 T{int})
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- C
v6 <- DispatchTableCall( cid=v12 String.indexOf<0>, v2, v5, v11 T{int}) int64
ParallelMove rax <- rax, rcx <- fp[-1]
Branch if RelationalOp(>=, v6 T{int}, v3) T{bool} goto (3, 6)
B3
ParallelMove rcx <- fp[-2]
Branch if RelationalOp(<, v6 T{int}, v4) T{bool} goto (4, 7)
B4
B7
B6
ParallelMove rcx <- fp[-2]
ParallelMove  goto:36 B5
B5
ParallelMove rax <- rcx goto:46 B8
B8
ParallelMove rax <- rax
DartReturn:48(v9)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
Branch if EqualityCompare(v205 T{_Smi} == v3) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:20(v33)
B4
v104 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rax
v200 <- UnboxInt64([non-speculative], v104) [0, 2305843009213693951] int64
ParallelMove rax <- rdx, rbx <- C
t0 <- GenericCheckBound:24(v200 T{_Smi}, v205 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v106 <- LoadClassId(v2 T{_StringBase}) [93, 94] T{_Smi}
Branch if StrictCompare:24(===, v106, v56 T{_Smi}) goto (39, 40)
B39
v110 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v205 T{_Smi}) [0, 255] int64
ParallelMove rax <- rax goto:24 B38
B40
v108 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v205 T{_Smi}) [0, 65535] int64
ParallelMove rax <- rax goto:24 B38
B38
ParallelMove rax <- rax
v119 <- BinaryInt64Op(| [tr], v109 T{_Smi}, v206 T{_Smi}) [0, 65535] int64
Branch if RelationalOp(<=, v207 T{_Smi}, v119) T{bool} goto (44, 54)
B44
Branch if RelationalOp(>, v119, v208 T{_Smi}) T{bool} goto (52, 6)
B6
ParallelMove r13 <- C, r12 <- C, r10 <- C, r9 <- C goto:120 B17
B17
  Loop 0
ParallelMove fp[-2] <- r13
CheckStackOverflow:124(stack=0, loop=1)
Branch if RelationalOp(<, v11, v3) T{bool} goto (7, 8)
B7
  Loop 0
ParallelMove rax <- rdx, rbx <- r12
t0 <- GenericCheckBound:60(v200 T{_Smi}, v11 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:60(===, v106 T{_Smi}, v56 T{_Smi}) goto (26, 27)
B26
  Loop 0
v52 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v11 T{int}) [0, 255] int64
ParallelMove rcx <- rax goto:60 B25
B27
  Loop 0
v50 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v11 T{int}) [0, 65535] int64
ParallelMove rcx <- rax goto:60 B25
B25
  Loop 0
Branch if RelationalOp(<, v51 T{_Smi}, v209 T{_Smi}) T{bool} goto (31, 58)
B31
  Loop 0
ParallelMove rbx <- rcx
v68 <- ShiftInt64Op(>> [tr], v51 T{_Smi}, v210 T{_Smi}) [0, 4095] int64
ParallelMove rax <- C, rbx <- rbx, rdi <- rbx
GenericCheckBound:24(v211 T{_Smi}, v68) [-9223372036854775808, 9223372036854775807] int64
v212 <- LoadIndexed:24([_List] v89, v68 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rbx <- rcx
v239 <- IntConverter(int64->uint32[tr], v51 T{_Smi}) uint32
ParallelMove rbx <- rbx
v72 <- BinaryUint32Op(& [tr], v239 T{_Smi}, v243 T{_Smi}) [0, 15] uint32
ParallelMove rbx <- rbx
v240 <- IntConverter(uint32->int64, v72) int64
ParallelMove rcx <- rbx, rbx <- rcx
ParallelMove rdi <- C
v73 <- ShiftUint32Op(<< [tr], v244 T{_Smi}, v240 T{_Smi}) [1, 32768] uint32
ParallelMove rax <- rax
v203 <- UnboxUint32([tr], [non-speculative], v212 T{int?}) [0, 4294967295] uint32
ParallelMove rax <- rax
v74 <- BinaryUint32Op(& [tr], v203, v73) [0, 32768] uint32
ParallelMove rax <- rax
v241 <- IntConverter(uint32->int64, v74) int64
Branch if EqualityCompare(v241 T{_Smi} == v205 T{_Smi}) T{bool} goto (56, 10)
B10
  Loop 0
Branch if RelationalOp(<=, v215 T{_Smi}, v51 T{_Smi}) T{bool} goto (11, 14)
B11
  Loop 0
Branch if RelationalOp(<=, v51 T{_Smi}, v216 T{_Smi}) T{bool} goto (12, 15)
B12
  Loop 0
ParallelMove r13 <- C goto:114 B16
B15
B14
B13
B16
  Loop 0
ParallelMove r12 <- r12
v24 <- BinaryInt64Op(+ [tr], v11 T{int}, v214 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r13 <- r13, r12 <- r12, rdi <- fp[-1] goto:122 B17
B8
v199 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v199 T{int})
ParallelMove rdi <- fp[-1], rsi <- C
v14 <- StaticCall:126( substring<0> v2, v205 T{_Smi}, v199 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rcx <- rax, rax <- fp[-2]
Branch if StrictCompare:130(===, v10 T{bool}, v6) goto (18, 19)
BoolTest
B18
v242 <- LoadClassId(<non-smi> v14) int64
MoveArgument(sp[0] <- v14)
ParallelMove rcx <- rax
v17 <- DispatchTableCall( cid=v242 String.toLowerCase<0>, v14) T{String}
ParallelMove rax <- rax
ParallelMove rdi <- rax goto:142 B20
B19
ParallelMove rdi <- rcx goto:144 B20
B20
ParallelMove rdi <- rdi
v16 <- StaticCall:146( _canonicalizeScheme@0150898<0> v15, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:148(v16)
B52
ParallelMove rax <- C goto:34 B5
B56
B58
B9
ParallelMove rdi <- fp[-1], rsi <- r12, rdx <- C
v28 <- StaticCall:72( _fail@0150898<0> v2, v11 T{int}, v27) T{Never}
v29 <- AllocateObject:74(cls=ReachabilityError, <not-aliased>) T{ReachabilityError}
ParallelMove rcx <- rax, rax <- C
StoreField(v29 T{ReachabilityError} . _message@9040228 = v39 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:78(v29)
B54
ParallelMove rax <- C
ParallelMove  goto:34 B5
B5
ParallelMove rdi <- fp[-1], rsi <- C, rdx <- C
v31 <- StaticCall:36( _fail@0150898<0> v2, v205 T{_Smi}, v30) T{Never}
v32 <- AllocateObject:38(cls=ReachabilityError, <not-aliased>) T{ReachabilityError}
ParallelMove rcx <- rax, rax <- C
StoreField(v32 T{ReachabilityError} . _message@9040228 = v39 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:42(v32)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path uint32 shift operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v44 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v4 <- DispatchTableCall( cid=v44 String.==<0>, v2, v3) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v4 T{bool}, v5) goto (3, 4)
BoolTest
B3
ParallelMove rax <- C
DartReturn:20(v3)
B4
ParallelMove rax <- fp[-1]
v45 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v6)
ParallelMove rcx <- rcx
v7 <- DispatchTableCall( cid=v45 String.==<0>, v2, v6) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:28(===, v7 T{bool}, v5) goto (5, 6)
BoolTest
B5
ParallelMove rax <- C
DartReturn:34(v6)
B6
ParallelMove rax <- fp[-1]
v46 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v8)
ParallelMove rcx <- rcx
v9 <- DispatchTableCall( cid=v46 String.==<0>, v2, v8) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:42(===, v9 T{bool}, v5) goto (7, 8)
BoolTest
B7
ParallelMove rax <- C
DartReturn:48(v8)
B8
ParallelMove rax <- fp[-1]
v47 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v10)
ParallelMove rcx <- rcx
v11 <- DispatchTableCall( cid=v47 String.==<0>, v2, v10) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:56(===, v11 T{bool}, v5) goto (9, 10)
BoolTest
B9
ParallelMove rax <- C
DartReturn:62(v10)
B10
ParallelMove rax <- fp[-1]
DartReturn:66(v2)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rsi <- rdi, rdi <- rsi
v6 <- LoadField(v4 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v8 <- BinarySmiOp:4(- [tr], v6, v7) [-2, 4611686018427387901] T{_Smi}
Branch if RelationalOp:6(<=, v9, v8) T{bool} goto (2, 3)
B2
v25 <- LoadIndexedUnsafe(rbp[v8 T{_Smi} + 8]) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- rcx
v48 <- UnboxInt64([non-speculative], v25) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rcx goto:20 B5
B3
ParallelMove rdx <- C goto:18 B5
B5
CheckStackOverflow:26(stack=0, loop=0)
Branch if RelationalOp(<, v13, v52 T{_Smi}) T{bool} goto (8, 6)
B6
v37 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rax <- rax
v51 <- UnboxInt64([non-speculative], v37 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(>, v13, v51 T{_Smi}) T{bool} goto (9, 10)
B10
v27 <- LoadClassId(v3) [78, 94] int64
Branch if TestRange(v27 in [93-94]) T{bool} goto (11, 12)
B11
v50 <- BoxInt64(v13) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v50 T{int})
MoveArgument(sp[0] <- v3 T{String})
v22 <- StaticCall:78( _substringMatches@0150898<0> v2, v50 T{int}, v3 T{String}, using unchecked entrypoint, recognized_kind = StringBaseSubstringMatches, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
DartReturn:80(v22)
B12
v55 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- rsi, rdx <- rdx
v19 <- DispatchTableCall( cid=v55 Pattern.matchAsPrefix<0>, v3, v2, v13) T{Match??}
ParallelMove rax <- rax
v20 <- StrictCompare:86(!==, v19 T{Match??}, v0) T{bool}
ParallelMove rax <- rcx
DartReturn:90(v20 T{bool})
B8
B9
B7
v32 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove fp[-2] <- rcx
v49 <- BoxInt64(v13) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v23 <- AllocateObject:58(cls=RangeError) T{RangeError}
ParallelMove rax <- rax
ParallelMove fp[-3] <- rax
MoveArgument(sp[3] <- v23)
MoveArgument(sp[2] <- v49 T{int})
MoveArgument(sp[1] <- v12)
MoveArgument(sp[0] <- v32 T{_Smi})
StaticCall:62( RangeError.range<0> v23, v49 T{int}, v12, v32 T{_Smi})
ParallelMove rax <- fp[-3]
Throw:64(v23)
CheckStackOverflowSlowPath
B0
B1
Intrinsic
Enter frame
PrologueOffset = 276
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v4)
v5 <- StaticCall:10( get:isEmpty<0> v4, recognized_kind = StringBaseIsEmpty, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v5 T{bool}, v6) goto (3, 4)
BoolTest
B3
ParallelMove rax <- C
DartReturn:20(v6)
B4
ParallelMove rcx <- fp[2]
v64 <- LoadField(v4 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rsi <- fp[3]
v94 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v94 T{int}, v102 T{_Smi}) T{bool} goto (7, 5)
B7
B5
ParallelMove rdi <- fp[4]
ParallelMove rdx <- rdx
v96 <- UnboxInt64([non-speculative], v64 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove r8 <- rsi
v10 <- BinaryInt64Op(+ [tr], v94 T{int}, v96 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v59 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove r9 <- r9
v97 <- UnboxInt64([non-speculative], v59 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(>, v10, v97 T{_Smi}) T{bool} goto (8, 9)
B8
B6
ParallelMove rax <- C
DartReturn:58(v21)
B9
v30 <- LoadClassId:98(v2 T{_StringBase}) [93, 94] T{_Smi}
v47 <- LoadClassId:98(v4 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove r12 <- C goto:98 B14
B14
  Loop 0
CheckStackOverflow:102(stack=0, loop=1)
Branch if RelationalOp(<, v13, v96 T{_Smi}) T{bool} goto (10, 11)
B10
  Loop 0
ParallelMove r13 <- r12
v15 <- BinaryInt64Op(+ [tr], v13, v94 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r9, rbx <- r13
t0 <- GenericCheckBound:78(v97 T{_Smi}, v15 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:78(===, v30, v38 T{_Smi}) goto (18, 19)
B18
  Loop 0
v34 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v15 T{int}) [0, 255] int64
ParallelMove rbx <- rbx goto:78 B17
B19
  Loop 0
v32 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v15 T{int}) [0, 65535] int64
ParallelMove rbx <- rbx goto:78 B17
B17
  Loop 0
Branch if StrictCompare:80(===, v47, v38 T{_Smi}) goto (23, 24)
B23
  Loop 0
v51 <- LoadIndexed([_OneByteString] v4 T{_OneByteString}, v13 T{int}) [0, 255] int64
ParallelMove r13 <- r13 goto:80 B22
B24
  Loop 0
v49 <- LoadIndexed([_TwoByteString] v4 T{_StringBase}, v13 T{int}) [0, 65535] int64
ParallelMove r13 <- r13 goto:80 B22
B22
  Loop 0
Branch if EqualityCompare(v33 T{_Smi} != v50 T{_Smi}) T{bool} goto (12, 13)
B13
  Loop 0
ParallelMove r12 <- r12
v20 <- BinaryInt64Op(+ [tr], v13 T{int}, v103 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- r12 goto:100 B14
B12
ParallelMove rax <- C
DartReturn:92(v21)
B11
ParallelMove rax <- C
DartReturn:104(v6)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rcx, rsi <- C
v5 <- StaticCall:10( startsWith<0> v2, v4, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v5 T{bool}, v6) goto (3, 14)
BoolTest
B3
MoveArgument(sp[0] <- v59)
ParallelMove rdi <- fp[-1], rsi <- C
v60 <- StaticCall:20( startsWith<0> v2, v58, v59, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:24(===, v60 T{bool}, v6) goto (4, 5)
BoolTest
B4
ParallelMove rdi <- fp[-1], rsi <- C, rdx <- C, rbx <- C
v73 <- StaticCall:30( replaceRange<0> v2, v557 T{_Smi}, v72, v8, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:94 B13
B5
ParallelMove rdi <- fp[-1], rsi <- C
v61 <- StaticCall:34( substring<0> v2, v558 T{_Smi}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rcx <- rax
ParallelMove fp[-6] <- rcx
v293 <- LoadField(v61 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rax
v516 <- UnboxInt64([non-speculative], v293 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(<, v516 T{_Smi}, v559 T{_Smi}) T{bool} goto (9, 6)
B6
ParallelMove rax <- rdx, rbx <- C
t0 <- GenericCheckBound:46(v516 T{_Smi}, v560 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v281 <- LoadClassId(v61 T{_StringBase}) [93, 94] T{_Smi}
Branch if StrictCompare:46(===, v281, v206 T{_Smi}) goto (151, 152)
B151
v285 <- LoadIndexed([_OneByteString] v61 T{_OneByteString}, v560 T{_Smi}) [0, 255] int64
ParallelMove rax <- rax goto:46 B150
B152
v283 <- LoadIndexed([_TwoByteString] v61 T{_StringBase}, v560 T{_Smi}) [0, 65535] int64
ParallelMove rax <- rax goto:46 B150
B150
Branch if EqualityCompare(v284 T{_Smi} != v561 T{_Smi}) T{bool} goto (10, 7)
B7
ParallelMove rax <- rdx, rbx <- C
t0 <- GenericCheckBound:58(v516 T{_Smi}, v562 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
Branch if StrictCompare:58(===, v281 T{_Smi}, v206 T{_Smi}) goto (146, 147)
B146
v269 <- LoadIndexed([_OneByteString] v61 T{_OneByteString}, v562 T{_Smi}) [0, 255] int64
ParallelMove rax <- rax goto:58 B145
B147
v267 <- LoadIndexed([_TwoByteString] v61 T{_StringBase}, v562 T{_Smi}) [0, 65535] int64
ParallelMove rax <- rax goto:58 B145
B145
Branch if EqualityCompare(v268 T{_Smi} != v563 T{_Smi}) T{bool} goto (11, 12)
B12
ParallelMove rax <- rcx goto:96 B13
B13
ParallelMove rcx <- rax goto:104 B15
B14
ParallelMove rdi <- fp[-1], rsi <- C, rdx <- C
v9 <- StaticCall:100( replaceAll<0> v2, v7, v8, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:106 B15
B15
ParallelMove fp[-4] <- rcx
v248 <- LoadField(v10 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rax
v519 <- UnboxInt64([non-speculative], v248 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-3] <- rdx
Branch if RelationalOp(>, v519 T{_Smi}, v560 T{_Smi}) T{bool} goto (16, 30)
B16
ParallelMove rax <- rdx, rbx <- C
t0 <- GenericCheckBound:118(v519 T{_Smi}, v560 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v236 <- LoadClassId(v10 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove fp[-1] <- rax
Branch if StrictCompare:118(===, v236, v206 T{_Smi}) goto (131, 132)
B131
v240 <- LoadIndexed([_OneByteString] v10 T{_OneByteString}, v560 T{_Smi}) [0, 255] int64
ParallelMove rbx <- rbx goto:118 B130
B132
v238 <- LoadIndexed([_TwoByteString] v10 T{_StringBase}, v560 T{_Smi}) [0, 65535] int64
ParallelMove rbx <- rbx goto:118 B130
B130
Branch if EqualityCompare(v239 T{_Smi} == v561 T{_Smi}) T{bool} goto (17, 31)
B17
Branch if StrictCompare:132(===, v236 T{_Smi}, v206 T{_Smi}) goto (124, 125)
B124
v219 <- LoadIndexed([_OneByteString] v10 T{_OneByteString}, v557 T{_Smi}) [0, 255] int64
ParallelMove rdi <- rbx goto:132 B123
B125
v217 <- LoadIndexed([_TwoByteString] v10 T{_StringBase}, v557 T{_Smi}) [0, 65535] int64
ParallelMove rdi <- rbx goto:132 B123
B123
ParallelMove rdi <- rdi, rsi <- C
StaticCall:134( _checkWindowsDriveLetter@0150898<0> v218 T{_Smi}, v6)
ParallelMove rax <- fp[-3]
Branch if EqualityCompare(v519 T{_Smi} == v562 T{_Smi}) T{bool} goto (20, 18)
B18
ParallelMove rcx <- fp[-1]
ParallelMove rax <- rax, rbx <- C
t0 <- GenericCheckBound:146(v519 T{_Smi}, v562 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
Branch if StrictCompare:146(===, v236 T{_Smi}, v206 T{_Smi}) goto (119, 120)
B119
ParallelMove rax <- fp[-4]
v202 <- LoadIndexed([_OneByteString] v10 T{_OneByteString}, v562 T{_Smi}) [0, 255] int64
ParallelMove rcx <- rcx goto:146 B118
B120
ParallelMove rax <- fp[-4]
v200 <- LoadIndexed([_TwoByteString] v10 T{_StringBase}, v562 T{_Smi}) [0, 65535] int64
ParallelMove rcx <- rcx goto:146 B118
B118
Branch if EqualityCompare(v201 T{_Smi} != v563 T{_Smi}) T{bool} goto (21, 22)
B22
ParallelMove rdx <- fp[-2]
v657 <- LoadClassId(<non-smi> v10) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- C
v51 <- DispatchTableCall( cid=v657 String.split<0>, v10, v8) T{List<String>}
ParallelMove rax <- rax, rcx <- fp[-2]
ParallelMove fp[-1] <- rax
Branch if StrictCompare:180(===, v3 T{bool}, v6) goto (23, 26)
BoolTest
B23
ParallelMove rdi <- rax
v53 <- StaticCall:184( get:last<0> v51 T{_GrowableList}, result_type = T{!null}) T{X0}
ParallelMove rax <- rax
v370 <- LoadField(v53 T{X0} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(!==, v370, v29 T{_Smi}) T{bool} goto (24, 27)
B24
ParallelMove rax <- fp[-1]
v359 <- LoadField(v51 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v364 <- LoadField(v51 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v365 <- LoadField(v364 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v526 <- UnboxInt64([non-speculative], v359 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-3] <- rcx
ParallelMove rbx <- rbx
v527 <- UnboxInt64([non-speculative], v365 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v526 T{_Smi} == v527 T{_Smi}) T{bool} goto (99, 100)
B99
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v51 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B101
B100
B101
ParallelMove rsi <- rdx
v167 <- BinaryInt64Op(+ [tr], v526 T{_Smi}, v560 T{_Smi}) [-4611686018427387904, 5188146770730811390] int64
v528 <- BoxInt64(v167) [-4611686018427387904, 5188146770730811390] T{int}
ParallelMove rax <- rax
StoreField(v51 T{_GrowableList} . GrowableObjectArray.length = v528 T{int}, NoStoreBarrier)
ParallelMove rax <- rsi, rbx <- rdx
GenericCheckBound:40(v167 T{_Smi}, v526 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v170 <- LoadField(v51 T{_GrowableList} . GrowableObjectArray.data) T{_List}
StoreIndexed:40([_List] v170, v526 T{_Smi}, v20 T{_OneByteString}, NoStoreBarrier)
ParallelMove  goto:212 B28
B27
ParallelMove rcx <- fp[-1]
ParallelMove  goto:208 B25
B26
ParallelMove rcx <- rax
ParallelMove  goto:204 B25
B25
B28
MoveArgument(sp[0] <- v12)
ParallelMove rdi <- rcx, rsi <- C
StaticCall:216( _checkWindowsPathReservedCharacters@0150898<0> v51 T{_GrowableList}, v6, v12)
MoveArgument(sp[0] <- v23)
ParallelMove rdi <- C, rsi <- fp[-1]
v52 <- StaticCall:218( _Uri@0150898.<0> v0, v51 T{_GrowableList}, v23, result_type = T{_Uri}) T{_Uri}
ParallelMove rax <- rax
DartReturn:220(v52)
B31
ParallelMove rcx <- fp[-2], rax <- rcx
ParallelMove  goto:230 B29
B30
ParallelMove rcx <- fp[-2], rax <- rcx
ParallelMove  goto:226 B29
B29
ParallelMove rdi <- rax, rsi <- C
v14 <- StaticCall:232( startsWith<0> v10, v8, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:236(===, v14 T{bool}, v6) goto (32, 53)
BoolTest
B32
MoveArgument(sp[0] <- v12)
ParallelMove rdi <- fp[-4], rsi <- C
v21 <- StaticCall:242( startsWith<0> v10, v8, v12, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:246(===, v21 T{bool}, v6) goto (33, 46)
BoolTest
B33
ParallelMove rax <- fp[-4]
v658 <- LoadClassId(<non-smi> v10) int64
MoveArgument(sp[0] <- v27)
ParallelMove rcx <- rcx, rdi <- rax, rsi <- C
v28 <- DispatchTableCall( cid=v658 String.indexOf<0>, v10, v8, v27) int64
ParallelMove rax <- rax
ParallelMove fp[-3] <- rax
v30 <- RelationalOp(<, v28 T{int}, v557 T{_Smi}) T{bool}
ParallelMove fp[-1] <- rcx
Branch if StrictCompare:258(===, v30, v6) goto (34, 35)
BoolTest
B34
ParallelMove rdi <- fp[-4], rsi <- C
v41 <- StaticCall:264( substring<0> v10, v562 T{_Smi}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:272 B36
B35
ParallelMove rcx <- rax
v531 <- BoxInt64(v28 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v531 T{int})
ParallelMove rdi <- fp[-4], rsi <- C
v31 <- StaticCall:268( substring<0> v10, v562 T{_Smi}, v531 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:274 B36
B36
ParallelMove fp[-5] <- rcx
Branch if StrictCompare:280(===, v30 T{bool}, v6) goto (37, 38)
BoolTest
B37
ParallelMove rdi <- C goto:294 B39
B38
ParallelMove rax <- fp[-3]
v34 <- BinaryInt64Op(+ [tr], v28 T{int}, v560 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-4], rsi <- rax
v35 <- StaticCall:290( substring<0> v10, v34, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rdi <- rax goto:296 B39
B39
v659 <- LoadClassId(<non-smi> v36) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- C
v37 <- DispatchTableCall( cid=v659 String.split<0>, v36, v8) T{List<String>}
ParallelMove rdi <- rax, rsi <- C, rax <- rax
ParallelMove fp[-1] <- rax
StaticCall:300( _checkWindowsPathReservedCharacters@0150898<0> v37 T{_GrowableList}, v6)
ParallelMove rax <- fp[-2]
Branch if StrictCompare:304(===, v3 T{bool}, v6) goto (40, 43)
BoolTest
B40
ParallelMove rdi <- fp[-1]
v39 <- StaticCall:308( get:last<0> v37 T{_GrowableList}, result_type = T{!null}) T{X0}
ParallelMove rax <- rax
v352 <- LoadField(v39 T{X0} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(!==, v352, v29 T{_Smi}) T{bool} goto (41, 44)
B41
ParallelMove rax <- fp[-1]
v341 <- LoadField(v37 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v346 <- LoadField(v37 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v347 <- LoadField(v346 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v534 <- UnboxInt64([non-speculative], v341 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-3] <- rcx
ParallelMove rbx <- rbx
v535 <- UnboxInt64([non-speculative], v347 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v534 T{_Smi} == v535 T{_Smi}) T{bool} goto (88, 89)
B88
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v37 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B90
B89
B90
ParallelMove rax <- rcx
v142 <- BinaryInt64Op(+ [tr], v534 T{_Smi}, v560 T{_Smi}) [1, 576460752303423488] int64
v536 <- BoxInt64(v142) [1, 576460752303423488] T{_Smi}
StoreField(v37 T{_GrowableList} . GrowableObjectArray.length = v536, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:40(v142 T{_Smi}, v534 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v145 <- LoadField(v37 T{_GrowableList} . GrowableObjectArray.data) T{_List}
StoreIndexed:40([_List] v145, v534 T{_Smi}, v20 T{_OneByteString}, NoStoreBarrier)
ParallelMove  goto:336 B45
B44
ParallelMove rsi <- fp[-1]
ParallelMove  goto:332 B42
B43
ParallelMove rsi <- fp[-1]
ParallelMove  goto:328 B42
B42
B45
MoveArgument(sp[1] <- v23)
MoveArgument(sp[0] <- v32)
ParallelMove rdi <- C, rsi <- rsi
v38 <- StaticCall:340( _Uri@0150898.<0> v0, v37 T{_GrowableList}, v23, v32, result_type = T{_Uri}) T{_Uri}
ParallelMove rax <- rax
DartReturn:342(v38)
B46
ParallelMove rax <- fp[-2], rdi <- fp[-4]
v660 <- LoadClassId(<non-smi> v10) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- C
v22 <- DispatchTableCall( cid=v660 String.split<0>, v10, v8) T{List<String>}
ParallelMove rcx <- rax, rax <- fp[-2]
ParallelMove fp[-1] <- rcx
Branch if StrictCompare:350(===, v3 T{bool}, v6) goto (47, 50)
BoolTest
B47
ParallelMove rdi <- rcx
v25 <- StaticCall:354( get:last<0> v22 T{_GrowableList}, result_type = T{!null}) T{X0}
ParallelMove rax <- rax
v334 <- LoadField(v25 T{X0} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(!==, v334, v29 T{_Smi}) T{bool} goto (48, 51)
B48
ParallelMove rax <- fp[-1]
v323 <- LoadField(v22 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v328 <- LoadField(v22 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v329 <- LoadField(v328 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v541 <- UnboxInt64([non-speculative], v323 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-3] <- rcx
ParallelMove rbx <- rbx
v542 <- UnboxInt64([non-speculative], v329 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v541 T{_Smi} == v542 T{_Smi}) T{bool} goto (77, 78)
B77
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v22 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B79
B78
B79
ParallelMove rax <- rdx
v117 <- BinaryInt64Op(+ [tr], v541 T{_Smi}, v560 T{_Smi}) [1, 576460752303423488] int64
v543 <- BoxInt64(v117) [1, 576460752303423488] T{_Smi}
StoreField(v22 T{_GrowableList} . GrowableObjectArray.length = v543, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rdx
GenericCheckBound:40(v117 T{_Smi}, v541 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v120 <- LoadField(v22 T{_GrowableList} . GrowableObjectArray.data) T{_List}
StoreIndexed:40([_List] v120, v541 T{_Smi}, v20 T{_OneByteString}, NoStoreBarrier)
ParallelMove  goto:382 B52
B51
ParallelMove rcx <- fp[-1]
ParallelMove  goto:378 B49
B50
B49
B52
ParallelMove rdi <- rcx, rsi <- C
StaticCall:386( _checkWindowsPathReservedCharacters@0150898<0> v22 T{_GrowableList}, v6)
MoveArgument(sp[0] <- v23)
ParallelMove rdi <- C, rsi <- fp[-1]
v24 <- StaticCall:388( _Uri@0150898.<0> v0, v22 T{_GrowableList}, v23, result_type = T{_Uri}) T{_Uri}
ParallelMove rax <- rax
DartReturn:390(v24)
B53
ParallelMove rax <- fp[-2], rdi <- fp[-4]
v661 <- LoadClassId(<non-smi> v10) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- C
v15 <- DispatchTableCall( cid=v661 String.split<0>, v10, v8) T{List<String>}
ParallelMove rdi <- rax, rsi <- C, rax <- rax
ParallelMove fp[-1] <- rax
StaticCall:396( _checkWindowsPathReservedCharacters@0150898<0> v15 T{_GrowableList}, v6)
ParallelMove rax <- fp[-2]
Branch if StrictCompare:400(===, v3 T{bool}, v6) goto (54, 58)
BoolTest
B54
ParallelMove rax <- fp[-1]
v385 <- LoadField(v15 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
Branch if StrictCompare(!==, v385 T{_Smi}, v29 T{_Smi}) T{bool} goto (55, 59)
B55
ParallelMove rdi <- rax
v18 <- StaticCall:414( get:last<0> v15 T{_GrowableList}, result_type = T{!null}) T{X0}
ParallelMove rax <- rax
v309 <- LoadField(v18 T{X0} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(!==, v309, v29 T{_Smi}) T{bool} goto (56, 60)
B56
ParallelMove rax <- fp[-1]
v298 <- LoadField(v15 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v303 <- LoadField(v15 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v304 <- LoadField(v303 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v549 <- UnboxInt64([non-speculative], v298 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-3] <- rcx
ParallelMove rbx <- rbx
v550 <- UnboxInt64([non-speculative], v304 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v549 T{_Smi} == v550 T{_Smi}) T{bool} goto (64, 65)
B64
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v15 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B66
B65
B66
ParallelMove rax <- rcx
v86 <- BinaryInt64Op(+ [tr], v549 T{_Smi}, v560 T{_Smi}) [1, 576460752303423488] int64
v551 <- BoxInt64(v86) [1, 576460752303423488] T{_Smi}
StoreField(v15 T{_GrowableList} . GrowableObjectArray.length = v551, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:40(v86 T{_Smi}, v549 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v89 <- LoadField(v15 T{_GrowableList} . GrowableObjectArray.data) T{_List}
StoreIndexed:40([_List] v89, v549 T{_Smi}, v20 T{_OneByteString}, NoStoreBarrier)
ParallelMove  goto:446 B61
B60
ParallelMove rsi <- fp[-1]
ParallelMove  goto:442 B57
B59
ParallelMove rsi <- rax
ParallelMove  goto:438 B57
B58
ParallelMove rsi <- fp[-1]
ParallelMove  goto:434 B57
B57
B61
ParallelMove rdi <- C, rsi <- rsi
v16 <- StaticCall:450( _Uri@0150898.<0> v0, v15 T{_GrowableList}, result_type = T{_Uri}) T{_Uri}
ParallelMove rax <- rax
DartReturn:452(v16)
B9
B10
B11
B8
v69 <- AllocateObject:84(cls=ArgumentError, <not-aliased>) T{ArgumentError}
ParallelMove rcx <- rax, rax <- C
StoreField(v69 T{ArgumentError} . name = v56 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v69 T{ArgumentError} . message = v70 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-6]
StoreField(v69 T{ArgumentError} . invalidValue = v61 T{String}, NoStoreBarrier)
ParallelMove rdx <- C
StoreField(v69 T{ArgumentError} . _hasValue@0150898 = v6 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:88(v69)
B20
ParallelMove rdx <- C, rdi <- fp[-4], rax <- C
ParallelMove  goto:162 B19
B21
ParallelMove rdx <- C, rdi <- rax, rax <- C
ParallelMove  goto:166 B19
B19
v55 <- AllocateObject:168(cls=ArgumentError, <not-aliased>) T{ArgumentError}
ParallelMove rcx <- rax, rax <- C
StoreField(v55 T{ArgumentError} . name = v56 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v55 T{ArgumentError} . message = v57 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-4]
StoreField(v55 T{ArgumentError} . invalidValue = v10 T{String}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v55 T{ArgumentError} . _hasValue@0150898 = v6 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:172(v55)
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rsi, fp[-1] <- rsi
v6 <- LoadField(v4 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v8 <- BinarySmiOp:4(- [tr], v6, v7) [-2, 4611686018427387901] T{_Smi}
Branch if RelationalOp:6(<=, v9, v8) T{bool} goto (2, 3)
B2
v28 <- LoadIndexedUnsafe(rbp[v8 T{_Smi} + 8]) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdx <- rdx
v150 <- UnboxInt64([non-speculative], v28) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rdx goto:20 B5
B3
ParallelMove rsi <- C goto:18 B5
B5
CheckStackOverflow:26(stack=0, loop=0)
ParallelMove rdi <- rdi, rsi <- rsi
v14 <- StaticCall:28( skip<0> v2, v13, using unchecked entrypoint, result_type = T{SubListIterable}) T{SubListIterable}
ParallelMove rdi <- rax
v15 <- StaticCall:30( get:iterator<0> v14, result_type = T{ListIterator}) T{ListIterator}
ParallelMove rax <- rax
ParallelMove fp[-5] <- rax
v69 <- LoadField:88(v15 T{ListIterator} . _iterable@9040228 {final}) T{Iterable<X0>}
ParallelMove fp[-4] <- rdi
v71 <- LoadField:88(v15 T{ListIterator} . _length@9040228 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- rdx
v50 <- LoadField:88(v15 T{ListIterator} . :type_arguments {final}) T{TypeArguments}
ParallelMove fp[-2] <- rbx
ParallelMove  goto:88 B12
B12
  Loop 0
CheckStackOverflow:92(stack=0, loop=1)
v179 <- LoadClassId(<non-smi> v69) int64
MoveArgument(sp[0] <- v69)
ParallelMove rcx <- rcx
v70 <- DispatchTableCall( cid=v179 Iterable.length<0>, v69) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v152 <- UnboxInt64([non-speculative], v70 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-3]
Branch if EqualityCompare(v71 != v152 T{int}) T{bool} goto (32, 33)
B33
  Loop 0
ParallelMove rbx <- fp[-5]
v74 <- LoadField(v15 T{ListIterator} . _index@9040228) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v74, v152 T{int}) T{bool} goto (7, 6)
B6
  Loop 0
ParallelMove rax <- fp[-4]
v180 <- LoadClassId(<non-smi> v69 T{Iterable<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- rsi
v78 <- DispatchTableCall( cid=v180 Iterable.elementAt<0>, v69 T{Iterable<X0>}, v74 T{int}) T{*?}
ParallelMove rax <- rax, rsi <- rax, rbx <- fp[-5]
ParallelMove fp[-6] <- rsi
StoreField(v15 T{ListIterator} . _current@9040228 = v78 T{X0?})
v79 <- LoadField(v15 T{ListIterator} . _index@9040228) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v81 <- BinaryInt64Op(+ [tr], v79, v156 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v15 T{ListIterator} . _index@9040228 = v81 T{int} <int64>)
Branch if StrictCompare:12(===, v78 T{X0?}, v0 T{Null?}) goto (25, 26)
B25
  Loop 0
ParallelMove rax <- rsi, rdx <- fp[-2], rcx <- C
t0 <- AssertAssignable:18(v78 T{X0?}, v56 T{_TypeParameter}, ' in type cast', instantiator_type_args(v50), function_type_args(v0 T{Null?})) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove  goto:24 B27
B26
B27
  Loop 0
MoveArgument(sp[5] <- v0 T{Null?})
MoveArgument(sp[4] <- v19 T{_OneByteString})
MoveArgument(sp[3] <- v41 T{bool})
MoveArgument(sp[2] <- v11 T{bool})
MoveArgument(sp[1] <- v41 T{bool})
MoveArgument(sp[0] <- v41 T{bool})
v64 <- StaticCall:10( _RegExp@0150898.<0> v0 T{Null?}, v19 T{_OneByteString}, v41 T{bool}, v11 T{bool}, v41 T{bool}, v41 T{bool}, result_type = T{_RegExp}) T{_RegExp}
ParallelMove rcx <- rax, rax <- fp[-6]
v181 <- LoadClassId(<non-smi> v78 T{X0}) int64
ParallelMove rcx <- rdx, rdi <- rax, rsi <- rcx
v21 <- DispatchTableCall( cid=v181 String.contains<0>, v78 T{X0}, v64) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:52(===, v21 T{bool}, v11) goto (8, 11)
BoolTest
B11
  Loop 0
ParallelMove rax <- fp[-5], rbx <- fp[-2], rdi <- fp[-4], rdx <- fp[-3] goto:90 B12
B7
ParallelMove rcx <- C, rax <- rbx
StoreField(v15 T{ListIterator} . _current@9040228 = v0 T{Null?})
ParallelMove rax <- rcx
DartReturn:94(v0)
B8
ParallelMove rcx <- C, rax <- fp[-1]
Branch if StrictCompare:60(===, v3 T{bool}, v11) goto (9, 10)
BoolTest
B9
v26 <- AllocateObject:66(cls=ArgumentError, <not-aliased>) T{ArgumentError}
ParallelMove rcx <- rax, rax <- C
StoreField(v26 T{ArgumentError} . message = v27 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v26 T{ArgumentError} . _hasValue@0150898 = v41 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:70(v26)
B10
ParallelMove rax <- fp[-6]
ParallelMove rbx <- rcx, r10 <- C
v23 <- CreateArray:76(v0, v7) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v23, v12, v24, NoStoreBarrier)
ParallelMove rcx <- fp[-6]
StoreIndexed([_List] v23, v9, v78 T{X0}, NoStoreBarrier)
MoveArgument(sp[0] <- v23)
v25 <- StaticCall:78( _interpolate@0150898<0> v23, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v22 <- AllocateObject:74(cls=UnsupportedError, <not-aliased>) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v22 T{UnsupportedError} . message = v25 T{String}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:82(v22)
B32
ParallelMove rax <- fp[-4]
v83 <- AllocateObject:26(cls=ConcurrentModificationError, <not-aliased>) T{ConcurrentModificationError}
ParallelMove rcx <- rax, rax <- fp[-4]
StoreField(v83 T{ConcurrentModificationError} . modifiedObject = v69 T{Iterable<X0>}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:32(v83)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v4 <- LoadField(v2 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6 <- BinarySmiOp:4(- [tr], v4, v5) [-2, 4611686018427387901] T{_Smi}
v7 <- LoadIndexedUnsafe(rbp[v6 + 24]) T{*?}
v8 <- LoadIndexedUnsafe(rbp[v6 + 16]) T{String}
v13 <- LoadIndexed([_List] v2, v11 T{_Smi}) T{*?}
Branch if StrictCompare:16(===, v13, v14) goto (2, 3)
B2
ParallelMove rax <- C goto:26 B4
B3
ParallelMove rax <- C goto:28 B4
B4
v70 <- BoxInt64(v16) [0, 1] T{_Smi}
ParallelMove rsi <- rbx
v57 <- BinarySmiOp:30(<< [tr], v70 T{_Smi}, v39) [0, 2] T{_Smi}
ParallelMove rsi <- rsi
v18 <- BinarySmiOp:38(+ [tr], v57 T{_Smi}, v11) [4, 6] T{_Smi}
v19 <- LoadIndexed([_List] v2, v18) T{*?}
Branch if StrictCompare:40(===, v19, v20) goto (5, 6)
B5
ParallelMove rbx <- rbx
v50 <- BinarySmiOp:36(+ [tr], v70 T{_Smi}, v39) [1, 2] T{_Smi}
ParallelMove rbx <- rbx
v72 <- UnboxInt64([non-speculative], v50) [1, 2] int64
ParallelMove rax <- rbx goto:50 B7
B6
B7
v73 <- BoxInt64(v22) [0, 2] T{_Smi}
ParallelMove rbx <- rbx
v58 <- BinarySmiOp:54(<< [tr], v73 T{_Smi}, v39) [0, 4] T{_Smi}
ParallelMove rbx <- rbx
v24 <- BinarySmiOp:62(+ [tr], v58 T{_Smi}, v11) [4, 8] T{_Smi}
v25 <- LoadIndexed([_List] v2, v24) T{*?}
Branch if StrictCompare:64(===, v25, v26) goto (8, 9)
B8
B9
B14
MoveArgument(sp[6] <- v7)
MoveArgument(sp[5] <- v8)
MoveArgument(sp[4] <- v21)
MoveArgument(sp[3] <- v15)
MoveArgument(sp[2] <- v21)
MoveArgument(sp[1] <- v21)
MoveArgument(sp[0] <- v0)
v32 <- NativeCall(RegExp_factory) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:106(v32, v33, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{_RegExp}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:108(v32 T{_RegExp})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rsi <- rdi, rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx
v5 <- AllocateObject:10(cls=SubListIterable, v4) T{SubListIterable}
ParallelMove rdi <- rax, rsi <- fp[-1], rdx <- fp[-2], rbx <- C, rax <- rax
ParallelMove fp[-1] <- rax
StaticCall:12( SubListIterable.<0> v5, v2, v3, v0)
ParallelMove rax <- fp[-1]
DartReturn:14(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi
CheckStackOverflow:8(stack=0, loop=0)
Branch if RelationalOp(<=, v66 T{_Smi}, v2) T{bool} goto (3, 6)
B3
Branch if RelationalOp(<=, v2, v67 T{_Smi}) T{bool} goto (9, 7)
B9
B7
B6
B5
Branch if RelationalOp(<=, v68 T{_Smi}, v2) T{bool} goto (4, 12)
B4
Branch if RelationalOp(<=, v2, v69 T{_Smi}) T{bool} goto (10, 13)
B10
B8
ParallelMove rax <- C
DartReturn:66(v0)
B13
B12
B11
Branch if StrictCompare:80(===, v3 T{bool}, v6) goto (14, 15)
BoolTest
B14
ParallelMove rdi <- C, rsi <- rax
v14 <- StaticCall:88( String.fromCharCode<0> v0, v2, result_type = T{!null}) T{String}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v10)
MoveArgument(sp[0] <- v14)
v15 <- StaticCall:90( +<0> v10, v14, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v13 <- AllocateObject:86(cls=ArgumentError) T{ArgumentError}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v13 T{ArgumentError} . message = v15 T{String}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v13 T{ArgumentError} . _hasValue@0150898 = v32 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:94(v13)
B15
ParallelMove rdi <- C, rsi <- rax
v11 <- StaticCall:100( String.fromCharCode<0> v0, v2, result_type = T{!null}) T{String}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v10)
MoveArgument(sp[0] <- v11)
v12 <- StaticCall:102( +<0> v10, v11, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v9 <- AllocateObject:98(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v9 T{UnsupportedError} . message = v12 T{String}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:106(v9)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, rcx <- rsi, rax <- rdx, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- C, rsi <- C
v6 <- StaticCall:10( _GrowableList@0150898.<0> v0, v241 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rcx <- rax, rax <- fp[-3]
ParallelMove fp[-4] <- rcx
v141 <- LoadField(v4 T{_OneByteString} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v221 <- UnboxInt64([non-speculative], v141 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-11] <- rdx
Branch if EqualityCompare(v221 T{_Smi} == v241 T{_Smi}) T{bool} goto (3, 7)
B3
ParallelMove rdi <- fp[-2], rsi <- fp[-1]
v35 <- StaticCall:24( allMatches<0> v3, v2, using unchecked entrypoint, result_type = T{_StringAllMatchesIterable}) T{_StringAllMatchesIterable}
ParallelMove rax <- rax
v133 <- LoadField(v35 T{_StringAllMatchesIterable} . _input@0150898 {final}) T{String}
ParallelMove fp[-6] <- rcx
v134 <- LoadField(v35 T{_StringAllMatchesIterable} . _pattern@0150898 {final}) T{String}
ParallelMove fp[-5] <- rdx
v136 <- AllocateObject:16(cls=_StringAllMatchesIterator) T{_StringAllMatchesIterator}
ParallelMove rcx <- rax, rax <- fp[-6]
ParallelMove fp[-9] <- rcx
StoreField(v136 T{_StringAllMatchesIterator} . _input@0150898 = v133 T{String}, NoStoreBarrier)
ParallelMove rax <- fp[-5]
StoreField(v136 T{_StringAllMatchesIterator} . _pattern@0150898 = v134 T{String}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v136 T{_StringAllMatchesIterator} . _index@0150898 = v241 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rsi <- C, rax <- C goto:52 B6
B6
  Loop 1
ParallelMove fp[-7] <- rsi, fp[-8] <- rax
CheckStackOverflow:56(stack=0, loop=1)
ParallelMove rdi <- rcx
v39 <- StaticCall:28( moveNext<0> v136, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:32(===, v39 T{bool}, v9) goto (4, 5)
BoolTest
B4
  Loop 1
ParallelMove rbx <- fp[-9]
v113 <- LoadField(v136 T{_StringAllMatchesIterator} . _current@0150898) T{_StringMatch?}
ParallelMove fp[-5] <- rsi
Branch if StrictCompare:12(===, v113, v0 T{Null?}) goto (50, 51)
B50
  Loop 1
ParallelMove rax <- rsi, rdx <- C, rcx <- C
t0 <- AssertAssignable:18(v113 T{_StringMatch?}, v80 T{_Type}, ' in type cast', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) T{Match}
AssertAssignable for compile-time type
TTSCall
ParallelMove  goto:24 B52
B51
B52
  Loop 1
v41 <- LoadField(v113 T{_StringMatch} . start {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-4], rsi <- fp[-7], rdx <- rcx, fp[-10] <- rcx
v42 <- StaticCall:44( _addReplaceSlice@0150898<0> v6, v37, v41, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
ParallelMove rcx <- fp[-8]
v43 <- BinaryInt64Op(+ [tr], v38, v42) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-5]
v126 <- LoadField(v113 T{_StringMatch} . pattern {final}) T{String}
v162 <- LoadField(v126 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rax <- rax
v222 <- UnboxInt64([non-speculative], v162 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdx <- fp[-10]
v128 <- BinaryInt64Op(+ [tr], v41 T{int}, v222 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rdx, rax <- rcx, rcx <- fp[-9] goto:54 B6
B5
ParallelMove rsi <- fp[-7], rax <- fp[-8], rcx <- fp[-4] goto:100 B11
B7
ParallelMove rdi <- fp[-2], rsi <- fp[-1]
v10 <- StaticCall:60( allMatches<0> v3, v2, using unchecked entrypoint, result_type = T{_StringAllMatchesIterable}) T{_StringAllMatchesIterable}
ParallelMove rdi <- rax
v11 <- StaticCall:62( get:iterator<0> v10, result_type = T{_StringAllMatchesIterator}) T{_StringAllMatchesIterator}
ParallelMove rax <- rax
ParallelMove fp[-2] <- rax
ParallelMove rsi <- C, rbx <- C, rdx <- fp[-4], rcx <- fp[-11] goto:92 B10
B10
  Loop 0
ParallelMove fp[-7] <- rsi, fp[-8] <- rbx
CheckStackOverflow:96(stack=0, loop=1)
ParallelMove rdi <- rax
v14 <- StaticCall:64( moveNext<0> v11, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:68(===, v14 T{bool}, v9) goto (8, 9)
BoolTest
B8
  Loop 0
ParallelMove rbx <- fp[-2]
v72 <- LoadField(v11 T{_StringAllMatchesIterator} . _current@0150898) T{_StringMatch?}
ParallelMove fp[-5] <- rsi
Branch if StrictCompare:12(===, v72, v0 T{Null?}) goto (34, 35)
B34
  Loop 0
ParallelMove rax <- rsi, rdx <- C, rcx <- C
t0 <- AssertAssignable:18(v72 T{_StringMatch?}, v80 T{_Type}, ' in type cast', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) T{Match}
AssertAssignable for compile-time type
TTSCall
ParallelMove  goto:24 B36
B35
B36
  Loop 0
v16 <- LoadField(v72 T{_StringMatch} . start {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rcx, rsi <- fp[-7], rdx <- rbx, fp[-10] <- rbx
v17 <- StaticCall:80( _addReplaceSlice@0150898<0> v6, v12, v16, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
ParallelMove rcx <- fp[-8]
v18 <- BinaryInt64Op(+ [tr], v13, v17) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-4], fp[-13] <- rcx
v146 <- LoadField(v6 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v151 <- LoadField(v6 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v152 <- LoadField(v151 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v225 <- UnboxInt64([non-speculative], v146 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-12] <- rdx
ParallelMove rsi <- rsi
v226 <- UnboxInt64([non-speculative], v152 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v225 T{_Smi} == v226 T{_Smi}) T{bool} goto (39, 40)
B39
  Loop 0
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v6 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B41
B40
B41
  Loop 0
ParallelMove rax <- rsi
v92 <- BinaryInt64Op(+ [tr], v225 T{_Smi}, v242 T{_Smi}) [1, 576460752303423488] int64
v227 <- BoxInt64(v92) [1, 576460752303423488] T{_Smi}
StoreField(v6 T{_GrowableList} . GrowableObjectArray.length = v227, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v92 T{_Smi}, v225 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v95 <- LoadField(v6 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-3]
StoreIndexed:40([_List] v95, v225 T{_Smi}, v4 T{_OneByteString})
ParallelMove rax <- fp[-13]
v19 <- BinaryInt64Op(+ [tr], v18, v221 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v106 <- LoadField(v72 T{_StringMatch} . pattern {final}) T{String}
v157 <- LoadField(v106 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rbx <- rbx
v230 <- UnboxInt64([non-speculative], v157 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdx <- fp[-10]
v108 <- BinaryInt64Op(+ [tr], v16 T{int}, v230 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rdx, rbx <- rax, rdx <- rcx, rax <- fp[-2], rcx <- r8 goto:94 B10
B9
ParallelMove rcx <- fp[-4]
ParallelMove rsi <- fp[-7], rax <- fp[-8] goto:102 B11
B11
ParallelMove fp[-7] <- rax
Branch if EqualityCompare(v21 == v241 T{_Smi}) T{bool} goto (12, 15)
B12
Branch if EqualityCompare(v22 == v241 T{_Smi}) T{bool} goto (13, 16)
B13
ParallelMove rax <- fp[-1]
DartReturn:124(v2)
B16
B15
B17
v58 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v231 <- UnboxInt64([non-speculative], v58 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdi <- rcx, rsi <- rsi, rdx <- rdx
v26 <- StaticCall:138( _addReplaceSlice@0150898<0> v6, v21, v231 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
ParallelMove rcx <- fp[-7]
v27 <- BinaryInt64Op(+ [tr], v22, v26) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v27, v243 T{_Smi}) T{bool} goto (18, 22)
B18
ParallelMove rdi <- fp[-1]
v52 <- LoadClassId(v2 T{_StringBase}) [93, 94] T{_Smi}
Branch if StrictCompare(===, v52 T{_Smi}, v53 T{_Smi}) T{bool} goto (19, 23)
B19
ParallelMove rdi <- rdi, rsi <- fp[-4], rdx <- rcx
v33 <- StaticCall:172( _joinReplaceAllOneByteResult@0150898<0> v2, v6, v27, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove rax <- rax
DartReturn:174(v33)
B23
B22
ParallelMove rdi <- fp[-1]
ParallelMove  goto:184 B20
B20
v232 <- BoxInt64(v27) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v6)
MoveArgument(sp[1] <- v232 T{int})
MoveArgument(sp[0] <- v9 T{bool})
v29 <- StaticCall:190( _joinReplaceAllResult@0150898<0> v2, v6, v232 T{int}, v9 T{bool}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:192(v29)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[4] <- v2)
MoveArgument(sp[3] <- v3)
MoveArgument(sp[2] <- v4)
MoveArgument(sp[1] <- v5)
MoveArgument(sp[0] <- v0)
v6 <- NativeCall(StringBase_joinReplaceAllResult) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v6, v7, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v6 T{String})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v167 <- BoxInt64(v4 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v167 T{int})
v132 <- StaticCall:10( allocateOneByteString<0> v167 T{int}, recognized_kind = AllocateOneByteString, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove rsi <- rax, rax <- fp[-2]
ParallelMove fp[-11] <- rsi
v127 <- LoadField:142(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rdi <- rcx
v168 <- UnboxInt64:142([non-speculative], v127 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-10] <- rdi
v57 <- LoadField:142(v3 . GrowableObjectArray.data) T{_List}
ParallelMove r9 <- fp[-1], fp[-9] <- r8
v104 <- LoadField:142(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove r10 <- rax
v178 <- UnboxInt64:142([non-speculative], v104) [0, 2305843009213693951] int64
ParallelMove fp[-8] <- r10
v106 <- LoadClassId:142(v2 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove fp[-7] <- r12
ParallelMove rdx <- C, rcx <- C goto:142 B17
B17
  Loop 2
ParallelMove fp[-3] <- rcx, fp[-6] <- rdx
CheckStackOverflow:146(stack=0, loop=1)
Branch if RelationalOp(<, v8, v168 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 2
ParallelMove rax <- rdi, rbx <- rcx
GenericCheckBound:28(v168 T{_Smi}, v8) [-9223372036854775808, 9223372036854775807] int64
v193 <- LoadIndexed:28([_List] v57, v8 T{int}) T{*?}
ParallelMove fp[-12] <- rbx
v65 <- LoadClassId(v193 T{*?}) [1, 617] int64
Branch if EqualityCompare(v65 == v66) T{bool} goto (5, 12)
B5
  Loop 2
ParallelMove rax <- rbx
v172 <- UnboxInt64([non-speculative], v193 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove fp[-4] <- rax
Branch if RelationalOp(<, v172 T{_Smi}, v192 T{_Smi}) T{bool} goto (6, 7)
B6
  Loop 2
ParallelMove rax <- rax
v49 <- UnaryInt64Op(unary-, v172 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rax
v234 <- IntConverter(int64->uint32[tr], v49) uint32
ParallelMove rbx <- rbx
v51 <- BinaryUint32Op(& [tr], v234 T{int}, v236 T{_Smi}) [0, 2047] uint32
ParallelMove rax <- rax
v53 <- ShiftInt64Op(>> [tr], v49, v195 T{_Smi}) [-4503599627370496, 4503599627370495] int64
ParallelMove rbx <- rbx
v235 <- IntConverter(uint32->int64, v51) int64
ParallelMove rcx <- rax
v54 <- BinaryInt64Op(+ [tr], v53, v235 T{_Smi}) [-4503599627370496, 4503599627372542] int64
ParallelMove rdx <- fp[-3], rax <- rax, rcx <- rcx goto:68 B8
B7
  Loop 2
ParallelMove rcx <- fp[-3]
v36 <- BinaryInt64Op(+ [tr], v8 T{int}, v196 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rdi, rbx <- rcx, fp[-5] <- rcx
GenericCheckBound:62(v168 T{_Smi}, v36) [-9223372036854775808, 9223372036854775807] int64
v197 <- LoadIndexed:62([_List] v57 T{_List}, v36 T{int}) T{*?}
ParallelMove rax <- rbx, rdx <- C, rcx <- C, fp[-2] <- rbx
t0 <- AssertAssignable:64(v197 T{*?}, v38, '', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-2]
v176 <- UnboxInt64([non-speculative], v197 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-5], rax <- fp[-4], rcx <- rax goto:70 B8
B8
  Loop 2
ParallelMove r10 <- fp[-6], r9 <- rax, rdi <- fp[-1], r8 <- fp[-7], rsi <- fp[-11] goto:94 B11
B11
  Loop 1
  Loop 2
CheckStackOverflow:98(stack=0, loop=2)
Branch if RelationalOp(<, v44, v42) T{bool} goto (9, 10)
B9
  Loop 1
  Loop 2
ParallelMove r12 <- r10
v46 <- BinaryInt64Op(+ [tr], v43, v196 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-8], rbx <- r9
t0 <- GenericCheckBound:88(v178 T{_Smi}, v44 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:88(===, v106, v83 T{_Smi}) goto (33, 34)
B33
  Loop 1
  Loop 2
v110 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v44 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:88 B32
B34
  Loop 1
  Loop 2
v108 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v44 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:88 B32
B32
  Loop 1
  Loop 2
ParallelMove rax <- rax
StoreIndexed:10([_OneByteString] v132 T{_OneByteString}, v43 T{int}, v109, NoStoreBarrier)
ParallelMove r9 <- r9
v48 <- BinaryInt64Op(+ [tr], v44 T{int}, v196 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- r12, r9 <- r9 goto:96 B11
B10
  Loop 2
ParallelMove rdx <- r10, rax <- rdx goto:136 B16
B12
  Loop 2
ParallelMove rdi <- r9, r8 <- r12
ParallelMove rax <- rbx, rdx <- C, rcx <- C, r9 <- fp[-3]
t0 <- AssertAssignable:102(v193 T{*?}, v19, '', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[-12]
v97 <- LoadField:128(v193 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v181 <- UnboxInt64:128([non-speculative], v97 T{_Smi}) [0, 2305843009213693951] int64
v75 <- LoadClassId:128(v193 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove r8 <- fp[-6], rdi <- C, rsi <- fp[-11] goto:128 B15
B15
  Loop 0
  Loop 2
CheckStackOverflow:132(stack=0, loop=2)
Branch if RelationalOp(<, v22, v181 T{_Smi}) T{bool} goto (13, 14)
B13
  Loop 0
  Loop 2
ParallelMove r9 <- r8
v26 <- BinaryInt64Op(+ [tr], v21, v196 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:122(===, v75, v83 T{_Smi}) goto (23, 24)
B23
  Loop 0
  Loop 2
v79 <- LoadIndexed([_OneByteString] v193 T{_OneByteString}, v22 T{int}) [0, 255] int64
ParallelMove rax <- r10 goto:122 B22
B24
  Loop 0
  Loop 2
v77 <- LoadIndexed([_TwoByteString] v193 T{_StringBase}, v22 T{int}) [0, 65535] int64
ParallelMove rax <- r10 goto:122 B22
B22
  Loop 0
  Loop 2
ParallelMove rax <- rax
StoreIndexed:10([_OneByteString] v132 T{_OneByteString}, v21 T{int}, v78, NoStoreBarrier)
ParallelMove rdi <- rdi
v28 <- BinaryInt64Op(+ [tr], v22 T{int}, v196 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- r9, rdi <- rdi goto:130 B15
B14
  Loop 2
ParallelMove rdx <- r8, rax <- fp[-3] goto:138 B16
B16
  Loop 2
ParallelMove rax <- rax
v34 <- BinaryInt64Op(+ [tr], v30, v196 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx, rcx <- rax, r9 <- fp[-1], r8 <- fp[-9], r12 <- fp[-7], rdi <- fp[-10], r10 <- fp[-8] goto:144 B17
B4
ParallelMove rax <- rsi
DartReturn:148(v132 T{_OneByteString})
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-4] <- rdi, fp[-5] <- rsi, fp[-6] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rcx <- rdx
v5 <- BinaryInt64Op(- [tr], v4, v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- rcx
Branch if RelationalOp(>, v5, v165 T{_Smi}) T{bool} goto (3, 10)
B3
Branch if RelationalOp(<=, v5, v166 T{_Smi}) T{bool} goto (4, 7)
B4
Branch if RelationalOp(<=, v3, v167 T{_Smi}) T{bool} goto (5, 8)
B5
ParallelMove rdx <- rsi
v14 <- ShiftInt64Op(<< [tr], v3, v168 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v15 <- BinaryInt64Op(| [tr], v14, v5) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v16 <- UnaryInt64Op(unary-, v15) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-2] <- rdx
v101 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v106 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v107 <- LoadField(v106 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rbx <- rbx
v144 <- UnboxInt64([non-speculative], v101 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-1] <- rbx
ParallelMove rdi <- rdi
v145 <- UnboxInt64([non-speculative], v107 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v144 T{_Smi} == v145 T{_Smi}) T{bool} goto (32, 33)
B32
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v2 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B34
B33
B34
ParallelMove rax <- rsi
v67 <- BinaryInt64Op(+ [tr], v144 T{_Smi}, v169 T{_Smi}) [1, 576460752303423488] int64
v146 <- BoxInt64(v67) [1, 576460752303423488] T{_Smi}
StoreField(v2 T{_GrowableList} . GrowableObjectArray.length = v146, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v67 T{_Smi}, v144 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v70 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v141 <- BoxInt64(v16 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdx <- rdi, rax <- rax
StoreIndexed:40([_List] v70, v144 T{_Smi}, v141 T{int})
ParallelMove  goto:66 B9
B8
ParallelMove rcx <- rax
ParallelMove  goto:58 B6
B7
ParallelMove rcx <- rax
ParallelMove  goto:54 B6
B6
v79 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v84 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v85 <- LoadField(v84 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v151 <- UnboxInt64([non-speculative], v79 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-1] <- rax
ParallelMove rdi <- rdi
v152 <- UnboxInt64([non-speculative], v85 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v151 T{_Smi} == v152 T{_Smi}) T{bool} goto (14, 15)
B14
ParallelMove rdi <- rcx
StaticCall:26( _growToNextCapacity@0150898<0> v2 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B16
B15
B16
ParallelMove r8 <- rdi
v28 <- BinaryInt64Op(+ [tr], v151 T{_Smi}, v169 T{_Smi}) [1, 576460752303423488] int64
ParallelMove fp[-2] <- r8
v153 <- BoxInt64(v28) [1, 576460752303423488] T{_Smi}
StoreField(v2 T{_GrowableList} . GrowableObjectArray.length = v153, NoStoreBarrier)
ParallelMove rax <- r8, rbx <- rdi
GenericCheckBound:40(v28 T{_Smi}, v151 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v31 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v139 <- BoxInt64(v3 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdx <- r9, rax <- rax
StoreIndexed:40([_List] v31, v151 T{_Smi}, v139 T{int})
v96 <- LoadField(v31 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v159 <- UnboxInt64([non-speculative], v96 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v28 T{_Smi} == v159 T{_Smi}) T{bool} goto (23, 24)
B23
ParallelMove rdi <- rsi
StaticCall:26( _growToNextCapacity@0150898<0> v2 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B25
B24
B25
ParallelMove rax <- rsi
v48 <- BinaryInt64Op(+ [tr], v28 T{_Smi}, v169 T{_Smi}) [2, 576460752303423489] int64
v160 <- BoxInt64(v48) [2, 576460752303423489] T{_Smi}
StoreField(v2 T{_GrowableList} . GrowableObjectArray.length = v160, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v48 T{_Smi}, v28 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v51 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v140 <- BoxInt64(v4 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdx <- rdx, rax <- rax
StoreIndexed:40([_List] v51, v28 T{_Smi}, v140 T{int})
ParallelMove  goto:68 B9
B9
B10
B11
ParallelMove rax <- fp[-3]
DartReturn:78(v5)
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rdi, rcx <- rsi, rsi <- rdx, rax <- rbx, fp[-2] <- rdi, fp[-3] <- rsi, fp[-4] <- rbx
CheckStackOverflow:8(stack=0, loop=0)
v144 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove r8 <- rdx
v301 <- UnboxInt64([non-speculative], v144 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdi <- rcx, rsi <- rsi, rdx <- r8, fp[-1] <- r8
v7 <- StaticCall:12( checkValidRange<0> v3, v4, v301 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rcx <- fp[-4]
ParallelMove fp[-8] <- rdx
v152 <- LoadClassId(v5 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove fp[-7] <- rsi
v332 <- StrictCompare(===, v152 T{_Smi}, v134 T{_Smi}) T{bool}
ParallelMove rdi <- fp[-3], fp[-10] <- rax
Branch if EqualityCompare(v3 == v333 T{_Smi}) T{bool} goto (3, 6)
B3
ParallelMove r8 <- fp[-1]
Branch if EqualityCompare(v7 == v301 T{_Smi}) T{bool} goto (4, 7)
B4
ParallelMove rax <- rcx
DartReturn:36(v5)
B7
B6
ParallelMove r8 <- fp[-1]
ParallelMove  goto:42 B5
B5
v139 <- LoadField(v5 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove r9 <- r8
v13 <- BinaryInt64Op(- [tr], v301 T{_Smi}, v7) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- rdi
v14 <- BinaryInt64Op(+ [tr], v3, v13) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- rbx
v304 <- UnboxInt64([non-speculative], v139 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-6] <- r9
ParallelMove r10 <- r10
v15 <- BinaryInt64Op(+ [tr], v14, v304 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-9] <- r10
Branch if StrictCompare:58(===, v332 T{bool}, v11) goto (8, 11)
BoolTest
B8
ParallelMove r12 <- fp[-2]
v133 <- LoadClassId(v2 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove fp[-5] <- r13
Branch if StrictCompare(===, v133 T{_Smi}, v134 T{_Smi}) T{bool} goto (9, 12)
B9
v305 <- BoxInt64(v15 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v305 T{int})
v54 <- StaticCall:10( allocateOneByteString<0> v305 T{int}, recognized_kind = AllocateOneByteString, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove rcx <- rax
ParallelMove r9 <- C, rdi <- C, r8 <- fp[-2], rdx <- fp[-3], rsi <- fp[-5] goto:32 B33
B33
  Loop 2
CheckStackOverflow:36(stack=0, loop=1)
Branch if RelationalOp(<, v67, v3 T{int}) T{bool} goto (31, 32)
B31
  Loop 2
ParallelMove rax <- fp[-1], rbx <- rdi
t0 <- GenericCheckBound:24(v301 T{_Smi}, v67 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:24(===, v133 T{_Smi}, v134 T{_Smi}) goto (61, 62)
B61
  Loop 2
v176 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v67 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:24 B60
B62
  Loop 2
v174 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v67 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:24 B60
B60
  Loop 2
ParallelMove rax <- rax
StoreIndexed:10([_OneByteString] v54 T{_OneByteString}, v66 T{int}, v175, NoStoreBarrier)
ParallelMove r9 <- r9
v72 <- BinaryInt64Op(+ [tr], v66, v335 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi
v73 <- BinaryInt64Op(+ [tr], v67 T{int}, v335 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- r9, rdi <- rdi goto:34 B33
B32
ParallelMove r10 <- rdx, rdi <- C, rbx <- fp[-4], rdx <- fp[-7], r9 <- fp[-6] goto:32 B38
B38
  Loop 1
CheckStackOverflow:36(stack=0, loop=1)
Branch if RelationalOp(<, v91, v304 T{_Smi}) T{bool} goto (36, 37)
B36
  Loop 1
Branch if StrictCompare:24(===, v152 T{_Smi}, v134 T{_Smi}) goto (69, 70)
B69
  Loop 1
v201 <- LoadIndexed([_OneByteString] v5 T{_OneByteString}, v91 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:24 B68
B70
  Loop 1
v199 <- LoadIndexed([_TwoByteString] v5 T{_StringBase}, v91 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:24 B68
B68
  Loop 1
ParallelMove rax <- rax
StoreIndexed:10([_OneByteString] v54 T{_OneByteString}, v90 T{int}, v200, NoStoreBarrier)
ParallelMove r10 <- r10
v96 <- BinaryInt64Op(+ [tr], v90, v335 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi
v97 <- BinaryInt64Op(+ [tr], v91 T{int}, v335 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- r10, rdi <- rdi goto:34 B38
B37
ParallelMove rdi <- r10, rdx <- fp[-8], r12 <- fp[-1] goto:32 B43
B43
  Loop 0
CheckStackOverflow:36(stack=0, loop=1)
Branch if RelationalOp(<, v115, v301 T{_Smi}) T{bool} goto (41, 42)
B41
  Loop 0
ParallelMove rax <- r12, rbx <- rdx
t0 <- GenericCheckBound:24(v301 T{_Smi}, v115 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:24(===, v133 T{_Smi}, v134 T{_Smi}) goto (77, 78)
B77
  Loop 0
v226 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v115 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:24 B76
B78
  Loop 0
v224 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v115 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:24 B76
B76
  Loop 0
ParallelMove rax <- rax
StoreIndexed:10([_OneByteString] v54 T{_OneByteString}, v114 T{int}, v225, NoStoreBarrier)
ParallelMove rdi <- rdi
v120 <- BinaryInt64Op(+ [tr], v114, v335 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v121 <- BinaryInt64Op(+ [tr], v115 T{int}, v335 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi, rdx <- rdx goto:34 B43
B42
ParallelMove rax <- rcx
DartReturn:82(v54 T{_OneByteString})
B12
ParallelMove r8 <- r12, rdx <- rdi, rbx <- rcx, r12 <- r8
ParallelMove  goto:92 B10
B11
ParallelMove r8 <- fp[-2], rdx <- rdi, rbx <- rcx, r12 <- r8
ParallelMove  goto:88 B10
B10
ParallelMove rdi <- C, rsi <- C
v16 <- StaticCall:94( _GrowableList@0150898.<0> v0, v333 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rdi <- rax, rsi <- C, rdx <- fp[-3], rax <- rax
ParallelMove fp[-5] <- rax
StaticCall:96( _addReplaceSlice@0150898<0> v16, v333 T{_Smi}, v3) int64
ParallelMove rax <- fp[-6]
Branch if RelationalOp(>, v304 T{_Smi}, v333 T{_Smi}) T{bool} goto (13, 14)
B13
ParallelMove rax <- fp[-5]
v157 <- LoadField(v16 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v162 <- LoadField(v16 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v163 <- LoadField(v162 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v320 <- UnboxInt64([non-speculative], v157 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-3] <- rcx
ParallelMove rbx <- rbx
v321 <- UnboxInt64([non-speculative], v163 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v320 T{_Smi} == v321 T{_Smi}) T{bool} goto (18, 19)
B18
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v16 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B20
B19
B20
ParallelMove rax <- rsi
v36 <- BinaryInt64Op(+ [tr], v320 T{_Smi}, v335 T{_Smi}) [1, 576460752303423488] int64
v322 <- BoxInt64(v36) [1, 576460752303423488] T{_Smi}
StoreField(v16 T{_GrowableList} . GrowableObjectArray.length = v322, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v36 T{_Smi}, v320 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v39 <- LoadField(v16 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-4]
StoreIndexed:40([_List] v39, v320 T{_Smi}, v5 T{String})
ParallelMove  goto:116 B15
B14
ParallelMove rcx <- fp[-5]
ParallelMove  goto:118 B15
B15
ParallelMove rdi <- rcx, rsi <- fp[-8], rdx <- fp[-1]
StaticCall:120( _addReplaceSlice@0150898<0> v16, v7, v301 T{_Smi}) int64
ParallelMove rcx <- fp[-9]
v306 <- BoxInt64(v15) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v16)
MoveArgument(sp[1] <- v306 T{int})
MoveArgument(sp[0] <- v332 T{bool})
v19 <- StaticCall:122( _joinReplaceAllResult@0150898<0> v2, v16, v306 T{int}, v332 T{bool}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:124(v19)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:4(stack=0, loop=0)
v2 <- StaticCall:6( get:_isWindowsPlatform@0150898<0> , result_type = T{bool}) T{bool}
ParallelMove rax <- rax
DartReturn:8(v2)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[0] <- v0)
v2 <- NativeCall(Uri_isWindowsPlatform) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v2, v3, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{bool}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v2 T{bool})
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(Directory_Current) T{*?}
ParallelMove rax <- rax
DartReturn:8(v3)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v13 <- StaticCall:12( _toNullTerminatedUtf8Array@15069316<0> v3, result_type = T{!null}) T{Uint8List}
ParallelMove rdi <- fp[2]
v14 <- StaticCall:14( _toStringFromUtf8Array@15069316<0> v3 T{Uint8List}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v4 <- AllocateObject:10(cls=_Directory) T{_Directory}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v4 T{_Directory} . _path@15069316 = v14, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v68 <- LoadClassId(<non-smi> v2) int64
ParallelMove rcx <- rcx, rdi <- rax
v3 <- DispatchTableCall( cid=v68 Iterable.last<0>, v2) T{*?}
ParallelMove rax <- rax
Branch if StrictCompare(===, v3 T{_Smi}, v4 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- fp[-1]
v69 <- LoadClassId(<non-smi> v2) int64
ParallelMove rcx <- rcx, rdi <- rax
v10 <- DispatchTableCall( cid=v69 TypedData.buffer<0>, v2) T{ByteBuffer}
ParallelMove rdx <- rax, rax <- fp[-1]
ParallelMove fp[-2] <- rdx
v70 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[0] <- v2)
ParallelMove rcx <- rcx
v11 <- DispatchTableCall( cid=v70 TypedData.offsetInBytes<0>, v2) T{int}
ParallelMove rcx <- rax, rax <- fp[-1]
v39 <- LoadField(v2 T{Uint8List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v58 <- UnboxInt64([non-speculative], v39 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdx <- rdx
v14 <- BinaryInt64Op(- [tr], v58 T{_Smi}, v61 T{_Smi}) [v58-1, v58-1] int64
ParallelMove rcx <- rcx
v57 <- UnboxInt64([non-speculative], v11 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rdi <- fp[-2]
v71 <- LoadClassId(<non-smi> v10 T{ByteBuffer}) int64
ParallelMove rcx <- rax, rdi <- rdi, rsi <- rcx, rdx <- rdx
v49 <- DispatchTableCall( cid=v71 ByteBuffer.asUint8List<0>, v10 T{ByteBuffer}, v57 T{_Smi}, v14 T{int}) T{Uint8List}
ParallelMove rax <- rax
ParallelMove rsi <- rax goto:36 B5
B4
ParallelMove rax <- fp[-1]
ParallelMove rsi <- rax goto:38 B5
B5
ParallelMove rdi <- C, rsi <- rsi
v27 <- StaticCall:68( convert<0> v33 T{Utf8Decoder}, v7 T{Uint8List}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:42(v27 T{String})
CheckStackOverflowSlowPath
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- rbx, rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v3, v4, 'codeUnits', instantiator_type_args(v0), function_type_args(v0)) T{List<int>}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
v7 <- LoadField(v2 . _allowMalformed@10003594 {final}) T{bool}
ParallelMove fp[-3] <- rcx
v6 <- AllocateObject:12(cls=_Utf8Decoder) T{_Utf8Decoder}
ParallelMove rax <- rax, rdx <- C
StoreField(v6 T{_Utf8Decoder} . _scanFlags@10003594 = v21 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v6 T{_Utf8Decoder} . _charOrIndex@10003594 = v21 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rcx <- fp[-3]
StoreField(v6 T{_Utf8Decoder} . allowMalformed = v7 T{bool}, NoStoreBarrier)
StoreField(v6 T{_Utf8Decoder} . _state@10003594 = v21 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rdi <- rax, rsi <- fp[-2], rdx <- rdx
v9 <- StaticCall:18( convertSingle<0> v6, v3 T{List<int>}, v21 T{_Smi}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:20(v9)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v573 <- LoadClassId(<non-smi> v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v6 <- DispatchTableCall( cid=v573 List.length<0>, v3) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v458 <- UnboxInt64([non-speculative], v6 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- C, rdx <- rax
v7 <- StaticCall:12( checkValidRange<0> v478 T{_Smi}, v0, v458 T{_Smi}, result_type = T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rcx <- rax, rax <- fp[-2]
ParallelMove fp[-3] <- rcx
v43 <- LoadClassId(v3) [89, 564] int64
Branch if TestRange(v43 in [115-118]) T{bool} goto (3, 4)
B3
ParallelMove rsi <- rax goto:32 B5
B4
ParallelMove rdi <- rax, rsi <- rcx
v11 <- StaticCall:26( _makeUint8List@10003594<0> v3, v7, result_type = T{_Uint8List}) T{_Uint8List}
ParallelMove rax <- rax
ParallelMove rsi <- rax, rcx <- fp[-3] goto:34 B5
B5
ParallelMove fp[-6] <- rsi
Branch if RelationalOp(>=, v7, v277 T{_Smi}) T{bool} goto (78, 83)
B78
v420 <- LoadField(v14 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rax
v460 <- UnboxInt64([non-speculative], v420) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- C
GenericCheckBound(v460, v478) [-4611686018427387904, 4611686018427387903] int64
v575 <- LoadField(v14 . PointerBase.data, MayLoadInnerPointer) untagged
v479 <- LoadIndexed:20([_Uint8List] v575 T{Uint8List}, v478 T{_Smi}) [0, 255] int64
Branch if EqualityCompare(v479 T{_Smi} == v480 T{_Smi}) T{bool} goto (79, 84)
B79
ParallelMove rax <- rdx, rbx <- C
GenericCheckBound(v460 T{int}, v275) [-4611686018427387904, 4611686018427387903] int64
v576 <- LoadField(v14 . PointerBase.data, MayLoadInnerPointer) untagged
v481 <- LoadIndexed:34([_Uint8List] v576 T{Uint8List}, v275 T{_Smi}) [0, 255] int64
Branch if EqualityCompare(v481 T{_Smi} == v482 T{_Smi}) T{bool} goto (80, 85)
B80
ParallelMove rax <- rdx, rbx <- C
GenericCheckBound(v460 T{int}, v276) [-4611686018427387904, 4611686018427387903] int64
v577 <- LoadField(v14 . PointerBase.data, MayLoadInnerPointer) untagged
v483 <- LoadIndexed:48([_Uint8List] v577 T{Uint8List}, v276 T{_Smi}) [0, 255] int64
Branch if EqualityCompare(v483 T{_Smi} == v484 T{_Smi}) T{bool} goto (81, 86)
B81
ParallelMove rdx <- C goto:64 B87
B86
B85
B84
B83
B82
ParallelMove rdx <- C goto:84 B87
B87
ParallelMove fp[-5] <- rdx
Branch if EqualityCompare(v278 == v7) T{bool} goto (6, 7)
B6
ParallelMove rax <- C
DartReturn:48(v41)
B7
ParallelMove rax <- fp[-1], r9 <- C
StoreField(v2 T{_Utf8Decoder} . _scanFlags@10003594 = v478 T{_Smi} <int64>)
ParallelMove r8 <- C, rdi <- rdx, rbx <- C goto:36 B74
B74
  Loop 0
CheckStackOverflow:34(stack=0, loop=1)
ParallelMove r10 <- fp[-3]
v209 <- BinaryInt64Op(- [tr], v7, v208) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v209, v485 T{_Smi}) T{bool} goto (73, 75)
B73
  Loop 0
ParallelMove r10 <- rdi
v216 <- BinaryInt64Op(+ [tr], v208, v485 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- rsi, rcx <- rdi, r13 <- r10
v313 <- Utf8Scan(v2 T{_Utf8Decoder}, v14 T{Uint8List}, v208 T{int}, v216 T{int}, v224 T{_OneByteString}) [0, 4611686018427387903] int64 [_scanFlags@10003594]
ParallelMove r8 <- r8
v218 <- BinaryInt64Op(+ [tr], v207, v313 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- r8, rdi <- r10 goto:32 B74
B75
ParallelMove r12 <- rsi, r10 <- rdi, r9 <- fp[-3]
v295 <- Utf8Scan(v2 T{_Utf8Decoder}, v14 T{Uint8List}, v208 T{int}, v7, v224 T{_OneByteString}) [0, 4611686018427387903] int64 [_scanFlags@10003594]
ParallelMove r8 <- r8
v215 <- BinaryInt64Op(+ [tr], v207, v295 T{int}) [-9223372036854775808, 9223372036854775807] int64
v19 <- LoadField(v2 . _scanFlags@10003594) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v19 == v478 T{_Smi}) T{bool} goto (8, 9)
B8
v473 <- BoxInt64(v215 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-4] <- rax
MoveArgument(sp[0] <- v473 T{int})
v40 <- StaticCall:66( allocateOneByteString<0> v473 T{int}, recognized_kind = AllocateOneByteString, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove rax <- rax, r9 <- fp[-5]
v466 <- BoxInt64(v278) [0, 3] T{_Smi}
ParallelMove r10 <- fp[-6]
v578 <- LoadField(v14 T{Uint8List} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- fp[-4]
ParallelMove rdx <- rdx
MemoryCopy(v578 T{Uint8List}, v40 T{_OneByteString}, v466 T{_Smi}, v5 T{_Smi}, v473 T{int}, dest_cid=_OneByteString (93), src_cid=_Uint8List (115) [untagged])
ParallelMove rax <- rax
DartReturn:70(v40)
B9
ParallelMove r10 <- rsi, r9 <- rdx
Branch if EqualityCompare(v19 == v321) T{bool} goto (10, 11)
B10
ParallelMove rdi <- rax, rsi <- r10, rdx <- r9, rbx <- fp[-3], r8 <- r8
v39 <- StaticCall:86( decode8<0> v2, v14, v278, v7, v215 T{int}, using unchecked entrypoint, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:94 B12
B11
ParallelMove rdi <- fp[-1], rsi <- fp[-6], rdx <- fp[-5], rbx <- fp[-3], r8 <- r8
v25 <- StaticCall:90( decode16<0> v2, v14, v278, v7, v215 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:96 B12
B12
v27 <- LoadField(v2 . _state@10003594) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v27 == v478 T{_Smi}) T{bool} goto (13, 14)
B13
ParallelMove rax <- rax
DartReturn:110(v26)
B14
v29 <- LoadField(v2 . allowMalformed {final}) T{bool}
Branch if StrictCompare:118(!==, v29 T{bool}, v10) goto (15, 19)
BoolTest
B19
ParallelMove rax <- C
StoreField(v2 T{_Utf8Decoder} . _state@10003594 = v478 T{_Smi} <int64>)
ParallelMove rdi <- rdi, rsi <- fp[-6], rdx <- fp[-5], rbx <- fp[-3]
v30 <- StaticCall:166( decodeGeneral<0> v2, v14, v278, v7, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:168(v30)
B15
ParallelMove rax <- C
ParallelMove rdx <- rcx
v569 <- IntConverter(int64->uint32[tr], v27 T{int}) uint32
ParallelMove rdx <- rdx
v179 <- BinaryUint32Op(& [tr], v569 T{int}, v574 T{_Smi}) [0, 1] uint32
ParallelMove rdx <- rdx
v570 <- IntConverter(uint32->int64, v179) int64
Branch if EqualityCompare(v570 T{_Smi} == v478 T{_Smi}) T{bool} goto (16, 17)
B16
ParallelMove rax <- fp[-3], rcx <- C
StoreField(v2 T{_Utf8Decoder} . _state@10003594 = v486 T{_Smi} <int64>)
StoreField(v2 T{_Utf8Decoder} . _charOrIndex@10003594 = v7 <int64>)
ParallelMove rcx <- C goto:144 B18
B17
B18
Branch if RelationalOp:28(<=, v477 T{int}, v487 T{_Smi}) T{bool} goto (24, 25)
B24
Branch if RelationalOp:50(<=, v477 T{int}, v488 T{_Smi}) T{bool} goto (28, 29)
B28
Branch if RelationalOp:72(<=, v477 T{int}, v489 T{_Smi}) T{bool} goto (32, 33)
B32
v572 <- BoxInt64(v477 T{int})
ParallelMove rax <- rax
Branch if StrictCompare:94(===, v572 T{int}, v150 T{_Smi}) T{bool} goto (36, 37)
B36
ParallelMove rcx <- C goto:10 B52
B37
B33
Branch if RelationalOp:82(>=, v477 T{int}, v488 T{_Smi}) T{bool} goto (34, 35)
B34
ParallelMove rcx <- C goto:12 B52
B35
B29
Branch if RelationalOp:60(>=, v477 T{int}, v490 T{_Smi}) T{bool} goto (30, 31)
B30
Branch if RelationalOp:106(<=, v477 T{int}, v490 T{_Smi}) T{bool} goto (38, 39)
B38
ParallelMove rcx <- C goto:14 B52
B39
Branch if RelationalOp:116(>=, v477 T{int}, v487 T{_Smi}) T{bool} goto (40, 41)
B40
ParallelMove rcx <- C goto:16 B52
B41
B31
B25
Branch if RelationalOp:38(>=, v477 T{int}, v491 T{_Smi}) T{bool} goto (26, 27)
B26
Branch if RelationalOp:128(<=, v477 T{int}, v492 T{_Smi}) T{bool} goto (42, 43)
B42
Branch if RelationalOp:150(<=, v477 T{int}, v491 T{_Smi}) T{bool} goto (46, 47)
B46
ParallelMove rcx <- C goto:18 B52
B47
Branch if RelationalOp:160(>=, v477 T{int}, v492 T{_Smi}) T{bool} goto (48, 49)
B48
ParallelMove rcx <- C goto:20 B52
B49
B43
Branch if RelationalOp:138(>=, v477 T{int}, v486 T{_Smi}) T{bool} goto (44, 45)
B44
v571 <- BoxInt64(v477 T{int})
ParallelMove rax <- rax
Branch if StrictCompare:172(===, v571 T{int}, v38 T{_Smi}) T{bool} goto (50, 51)
B50
ParallelMove rcx <- C goto:22 B52
B51
B45
B27
B23
ParallelMove rcx <- C goto:24 B52
B52
ParallelMove fp[-4] <- rcx
v36 <- LoadField(v2 . _charOrIndex@10003594) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- rdx
v35 <- AllocateObject:152(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- fp[-4]
StoreField(v35 T{FormatException} . message = v153, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreField(v35 T{FormatException} . source = v3 T{List<int>}, NoStoreBarrier)
ParallelMove rdx <- fp[-3]
v476 <- BoxInt64(v36 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v35 T{FormatException} . offset = v476 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:160(v35)
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rdi <- rsi, rax <- rdx, fp[-3] <- rdi, fp[-4] <- rsi, fp[-5] <- rdx, fp[-6] <- rbx
CheckStackOverflow:8(stack=0, loop=0)
v8 <- LoadField(v2 . _state@10003594) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-2] <- rdx
v9 <- LoadField(v2 . _charOrIndex@10003594) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-1] <- rsi
v10 <- AllocateObject:14(cls=StringBuffer) T{StringBuffer}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-7] <- rax
StaticCall:16( StringBuffer.<0> v10)
ParallelMove rcx <- fp[-5]
v12 <- BinaryInt64Op(+ [tr], v4, v372 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-4]
v289 <- LoadField(v3 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r8 <- rax
v337 <- UnboxInt64([non-speculative], v289) [0, 4611686018427387903] int64
ParallelMove rax <- r8, rbx <- fp[-5], fp[-8] <- r8
GenericCheckBound(v337, v4) [-9223372036854775808, 9223372036854775807] int64
v466 <- LoadField(v3 . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rbx <- fp[-5]
v373 <- LoadIndexed:20([_Uint8List] v466 T{Uint8List}, v4 T{int}) [0, 255] int64
ParallelMove r9 <- fp[-3]
v100 <- LoadField:406(v2 . allowMalformed {final}) T{bool}
ParallelMove fp[-9] <- r10
ParallelMove fp[-2] <- fp[-2], fp[-1] <- fp[-1], rbx <- rcx, rcx <- rsi, r12 <- fp[-6] goto:406 B54
B54
  Loop 3
CheckStackOverflow:404(stack=0, loop=1)
ParallelMove r8 <- fp[-2], rcx <- fp[-1], rbx <- rbx, rdx <- rcx goto:262 B34
B34
  Loop 2
  Loop 3
ParallelMove fp[-1] <- rbx
CheckStackOverflow:260(stack=0, loop=2)
v375 <- LoadIndexed:34([_OneByteString] v6, v45 T{_Smi}) [0, 255] int64
ParallelMove r9 <- r9
v455 <- IntConverter(int64->uint32[tr], v375) uint32
ParallelMove r9 <- r9
v81 <- BinaryUint32Op(& [tr], v455 T{_Smi}, v462 T{_Smi}) [0, 31] uint32
Branch if RelationalOp(<=, v42, v377 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 2
  Loop 3
ParallelMove rcx <- r9
v456 <- IntConverter(uint32->int64, v81) int64
ParallelMove rcx <- rcx
ParallelMove r12 <- C
v115 <- ShiftUint32Op(>> [tr], v463 T{_Smi}, v456 T{_Smi}) [0, 61694] uint32
ParallelMove rcx <- rdx
v454 <- IntConverter(int64->uint32[tr], v45 T{_Smi}) uint32
ParallelMove rcx <- rcx
v116 <- BinaryUint32Op(& [tr], v454 T{_Smi}, v115) [0, 61694] uint32
ParallelMove rcx <- rcx
v458 <- IntConverter(uint32->int64, v116) int64
ParallelMove rcx <- rcx goto:62 B5
B4
  Loop 2
  Loop 3
ParallelMove r12 <- rdx
v453 <- IntConverter(int64->uint32[tr], v45 T{_Smi}) uint32
ParallelMove r12 <- r12
v84 <- BinaryUint32Op(& [tr], v453 T{_Smi}, v464 T{_Smi}) [0, 63] uint32
ParallelMove rcx <- rcx
v86 <- ShiftInt64Op(<< [tr], v43, v380 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- r12
v459 <- IntConverter(uint32->int64, v84) int64
ParallelMove r12 <- r12
v87 <- BinaryInt64Op(| [tr], v459 T{_Smi}, v86) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- r12 goto:64 B5
B5
  Loop 2
  Loop 3
ParallelMove fp[-2] <- rcx
ParallelMove r9 <- r9
v457 <- IntConverter(uint32->int64, v81) int64
ParallelMove r8 <- r8
v89 <- BinaryInt64Op(+ [tr], v42, v457 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C, rbx <- r8, r9 <- C, rdx <- rbx
GenericCheckBound:68(v381 T{_Smi}, v89) [-9223372036854775808, 9223372036854775807] int64
v382 <- LoadIndexed:68([_OneByteString] v7, v89 T{int}) [0, 255] int64
ParallelMove fp[-5] <- rax
v124 <- BoxInt64(v382 T{_Smi}) [0, 255] T{_Smi}
Branch if EqualityCompare(v382 == v383 T{_Smi}) T{bool} goto (6, 11)
B11
  Loop 2
  Loop 3
ParallelMove r8 <- rax
v460 <- IntConverter(int64->uint32[tr], v382) uint32
ParallelMove r8 <- r8
v189 <- BinaryUint32Op(& [tr], v460 T{_Smi}, v465 T{_Smi}) [0, 1] uint32
ParallelMove r8 <- r8
v461 <- IntConverter(uint32->int64, v189) int64
Branch if EqualityCompare(v461 T{_Smi} != v383 T{_Smi}) T{bool} goto (12, 30)
B12
  Loop 2
  Loop 3
Branch if StrictCompare:118(===, v100 T{bool}, v23 T{bool}) goto (13, 29)
BoolTest
B13
  Loop 2
  Loop 3
Branch if RelationalOp:146(<=, v382, v389 T{_Smi}) T{bool} goto (17, 18)
B17
  Loop 2
  Loop 3
Branch if RelationalOp:168(<=, v382, v390 T{_Smi}) T{bool} goto (21, 22)
B21
  Loop 2
  Loop 3
Branch if StrictCompare:190(===, v124, v108) T{bool} goto (25, 26)
B25
  Loop 2
  Loop 3
ParallelMove rdi <- fp[-7], rsi <- C
StaticCall:132( writeCharCode<0> v10, v391 T{_Smi}, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
v112 <- BinaryInt64Op(- [tr], v44, v372 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax goto:136 B14
B26
B22
  Loop 2
  Loop 3
Branch if RelationalOp:178(>=, v382, v389 T{_Smi}) T{bool} goto (23, 24)
B23
B24
B18
  Loop 2
  Loop 3
Branch if RelationalOp:156(>=, v382, v392 T{_Smi}) T{bool} goto (19, 20)
B19
  Loop 2
  Loop 3
Branch if StrictCompare:204(===, v124, v104) T{bool} goto (27, 28)
B27
B15
  Loop 2
  Loop 3
ParallelMove rdi <- fp[-7], rsi <- C
StaticCall:124( writeCharCode<0> v10, v391 T{_Smi}, using unchecked entrypoint)
ParallelMove rax <- fp[-1] goto:128 B14
B28
B20
B16
  Loop 2
  Loop 3
ParallelMove rdi <- fp[-7], rsi <- C
StaticCall:138( writeCharCode<0> v10, v391 T{_Smi}, using unchecked entrypoint)
ParallelMove rdi <- fp[-7], rsi <- C
StaticCall:140( writeCharCode<0> v10, v391 T{_Smi}, using unchecked entrypoint)
ParallelMove rax <- fp[-1] goto:142 B14
B14
  Loop 2
  Loop 3
ParallelMove r8 <- C, rsi <- rax, rcx <- fp[-3] goto:232 B31
B29
ParallelMove rcx <- fp[-3]
StoreField(v2 T{_Utf8Decoder} . _state@10003594 = v382 <int64>)
ParallelMove rax <- fp[-1]
v101 <- BinaryInt64Op(- [tr], v44, v372 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Decoder} . _charOrIndex@10003594 = v101 T{int} <int64>)
ParallelMove rax <- C
DartReturn:226(v38)
B30
  Loop 2
  Loop 3
ParallelMove rcx <- fp[-3]
ParallelMove r8 <- rax, rsi <- fp[-1] goto:234 B31
B31
  Loop 2
  Loop 3
Branch if EqualityCompare(v96 == v5) T{bool} goto (32, 33)
B33
  Loop 2
  Loop 3
ParallelMove r10 <- fp[-4]
ParallelMove rdi <- rsi
v98 <- BinaryInt64Op(+ [tr], v96, v372 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-8], rbx <- rsi
GenericCheckBound(v337 T{int}, v96) [-9223372036854775808, 9223372036854775807] int64
v470 <- LoadField(v3 . PointerBase.data, MayLoadInnerPointer) untagged
v394 <- LoadIndexed:252([_Uint8List] v470 T{Uint8List}, v96 T{int}) [0, 255] int64
ParallelMove r8 <- r8, rcx <- fp[-2], rbx <- rdi, rdx <- rdx, r9 <- rcx, r12 <- r9, rax <- C, r10 <- fp[-9], rdi <- C, rsi <- C, r13 <- C goto:258 B34
B32
ParallelMove rax <- r8, rdx <- r9 goto:246 B57
B6
  Loop 3
ParallelMove rcx <- fp[-3], r10 <- fp[-4], r9 <- fp[-6], rbx <- rdx
ParallelMove rdi <- fp[-7], rsi <- fp[-2]
StaticCall:80( writeCharCode<0> v10, v88, using unchecked entrypoint)
ParallelMove rcx <- fp[-6], rdx <- fp[-1]
Branch if EqualityCompare(v44 == v5) T{bool} goto (7, 10)
B10
  Loop 3
ParallelMove r8 <- fp[-4]
ParallelMove rsi <- rdx
v51 <- BinaryInt64Op(+ [tr], v44, v372 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-8], rbx <- rdx
GenericCheckBound(v337 T{int}, v44) [-9223372036854775808, 9223372036854775807] int64
v467 <- LoadField(v3 . PointerBase.data, MayLoadInnerPointer) untagged
v384 <- LoadIndexed:270([_Uint8List] v467 T{Uint8List}, v44 T{int}) [0, 255] int64
Branch if RelationalOp(<, v384 T{_Smi}, v385 T{_Smi}) T{bool} goto (37, 52)
B37
  Loop 3
ParallelMove rsi <- rsi, rax <- rdi goto:320 B42
B42
  Loop 1
  Loop 3
CheckStackOverflow:318(stack=0, loop=2)
Branch if RelationalOp(<, v59, v5) T{bool} goto (41, 43)
B41
  Loop 1
  Loop 3
ParallelMove rdi <- rsi
v75 <- BinaryInt64Op(+ [tr], v59, v372 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-8], rbx <- rsi
GenericCheckBound(v337 T{int}, v59) [-9223372036854775808, 9223372036854775807] int64
v468 <- LoadField(v3 . PointerBase.data, MayLoadInnerPointer) untagged
v386 <- LoadIndexed:292([_Uint8List] v468 T{Uint8List}, v59 T{int}) [0, 255] int64
Branch if RelationalOp(>=, v386 T{_Smi}, v385 T{_Smi}) T{bool} goto (38, 40)
B40
  Loop 1
  Loop 3
ParallelMove rsi <- rdi, rax <- rbx goto:316 B42
B38
  Loop 3
ParallelMove rax <- rdi
v78 <- BinaryInt64Op(- [tr], v75, v372 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- rdi, r10 <- rbx, r9 <- rax goto:308 B39
B43
  Loop 3
ParallelMove r12 <- rsi, r10 <- rax, r9 <- rcx goto:324 B39
B39
  Loop 3
ParallelMove fp[-11] <- r12, fp[-12] <- r10, fp[-13] <- r9
ParallelMove rax <- r9
v65 <- BinaryInt64Op(- [tr], v64, v44 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v65, v387 T{_Smi}) T{bool} goto (44, 48)
B44
B47
  Loop 0
  Loop 3
ParallelMove fp[-10] <- rdx
CheckStackOverflow:362(stack=0, loop=2)
Branch if RelationalOp(<, v71, v64) T{bool} goto (45, 46)
B45
  Loop 0
  Loop 3
ParallelMove rax <- fp[-8], rbx <- rdx
GenericCheckBound(v337 T{int}, v71) [-9223372036854775808, 9223372036854775807] int64
v469 <- LoadField(v3 . PointerBase.data, MayLoadInnerPointer) untagged
v388 <- LoadIndexed:352([_Uint8List] v469 T{Uint8List}, v71 T{int}) [0, 255] int64
ParallelMove rdi <- fp[-7], rsi <- rsi
StaticCall:354( writeCharCode<0> v10, v388 T{_Smi}, using unchecked entrypoint)
ParallelMove rax <- fp[-10]
v74 <- BinaryInt64Op(+ [tr], v71 T{int}, v372 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, r8 <- fp[-4], rcx <- fp[-6], r12 <- fp[-11], r10 <- fp[-12], r9 <- fp[-13] goto:360 B47
B46
B48
  Loop 3
ParallelMove rcx <- r9
v358 <- BoxInt64(v64 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- fp[-4], rsi <- rdx, rdx <- rax
v157 <- StaticCall:44( createFromCharCodes<0> v3 T{Uint8List}, v44 T{int}, v358 T{int?}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-14] <- rax
v206 <- LoadField(v157 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v206, v91 T{_Smi}) T{bool} goto (81, 82)
B81
B82
  Loop 3
ParallelMove rdi <- fp[-7]
StaticCall:26( _consumeBuffer@0150898<0> v10 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-7], rsi <- fp[-14]
StaticCall:28( _addPart@0150898<0> v10 T{StringBuffer}, v157 T{String}, using unchecked entrypoint)
ParallelMove  goto:30 B83
B83
B49
  Loop 3
Branch if EqualityCompare(v64 == v5) T{bool} goto (50, 51)
B51
  Loop 3
ParallelMove rbx <- fp[-11], rcx <- fp[-12] goto:394 B53
B50
ParallelMove rax <- fp[-5] goto:386 B57
B52
  Loop 3
ParallelMove rdx <- rcx
ParallelMove rbx <- rsi, rcx <- rdi goto:396 B53
B53
  Loop 3
ParallelMove fp[-2] <- fp[-5], fp[-1] <- fp[-2], rbx <- rbx, rcx <- rcx, r9 <- fp[-3], rdx <- fp[-4], r12 <- rdx, r10 <- fp[-9], r8 <- fp[-8] goto:402 B54
B7
ParallelMove rdx <- rcx
ParallelMove rax <- fp[-5] goto:94 B57
B57
ParallelMove fp[-1] <- rax
Branch if RelationalOp(>, v26, v377 T{_Smi}) T{bool} goto (58, 61)
B58
ParallelMove rcx <- fp[-9]
Branch if StrictCompare:434(===, v100 T{bool}, v23 T{bool}) goto (59, 60)
BoolTest
B59
ParallelMove rdi <- fp[-7], rsi <- C
StaticCall:440( writeCharCode<0> v10, v391 T{_Smi}, using unchecked entrypoint)
ParallelMove rax <- fp[-3] goto:462 B64
B60
ParallelMove rax <- fp[-3], rcx <- C
StoreField(v2 T{_Utf8Decoder} . _state@10003594 = v393 T{_Smi} <int64>)
StoreField(v2 T{_Utf8Decoder} . _charOrIndex@10003594 = v5 T{int} <int64>)
ParallelMove rax <- C
DartReturn:448(v38)
B61
ParallelMove rax <- fp[-3]
ParallelMove  goto:464 B64
B64
StoreField(v2 T{_Utf8Decoder} . _state@10003594 = v26 <int64>)
StoreField(v2 T{_Utf8Decoder} . _charOrIndex@10003594 = v88 T{int} <int64>)
MoveArgument(sp[0] <- v10)
v33 <- StaticCall:470( toString<0> v10, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:472(v33)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path uint32 shift operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rbx, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx, fp[-4] <- rbx
CheckStackOverflow:8(stack=0, loop=0)
v252 <- BoxInt64(v6) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v252 T{int})
v9 <- StaticCall:10( allocateTwoByteString<0> v252 T{int}, recognized_kind = AllocateTwoByteString, result_type = T{_TwoByteString}) T{_TwoByteString}
ParallelMove rsi <- rax, rdx <- fp[-1]
ParallelMove fp[-7] <- rsi
v11 <- LoadField(v2 . _state@10003594) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- fp[-3]
v13 <- BinaryInt64Op(+ [tr], v4, v283 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- fp[-2]
v204 <- LoadField(v3 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r10 <- r10
v253 <- UnboxInt64([non-speculative], v204) [0, 4611686018427387903] int64
ParallelMove rax <- r10, rbx <- fp[-3], fp[-5] <- r10
GenericCheckBound(v253, v4) [-9223372036854775808, 9223372036854775807] int64
v368 <- LoadField(v3 . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove r13 <- fp[-3]
v284 <- LoadIndexed:16([_Uint8List] v368 T{Uint8List}, v4 T{int}) [0, 255] int64
ParallelMove r12 <- C
v286 <- LoadIndexed:18([_OneByteString] v7, v284 T{_Smi}) [0, 255] int64
ParallelMove r13 <- r13
v341 <- IntConverter(int64->uint32[tr], v286) uint32
ParallelMove rbx <- C
ParallelMove r13 <- r13
v17 <- BinaryUint32Op(& [tr], v341 T{_Smi}, v363 T{_Smi}) [0, 31] uint32
Branch if EqualityCompare(v11 == v288 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rdi <- C
ParallelMove rcx <- r13
v342 <- IntConverter(uint32->int64, v17) int64
ParallelMove rcx <- rcx
ParallelMove r10 <- C
v83 <- ShiftUint32Op(>> [tr], v364 T{_Smi}, v342 T{_Smi}) [0, 61694] uint32
ParallelMove rax <- rax
v340 <- IntConverter(int64->uint32[tr], v284 T{_Smi}) uint32
ParallelMove rax <- rax
v84 <- BinaryUint32Op(& [tr], v340 T{_Smi}, v83) [0, 61694] uint32
ParallelMove r10 <- r13
v343 <- IntConverter(uint32->int64, v17) int64
v291 <- LoadIndexed:36([_OneByteString] v8, v343 T{_Smi}) [0, 255] int64
ParallelMove rax <- rax
v345 <- IntConverter(uint32->int64, v84) int64
ParallelMove rax <- rcx, rdi <- rax, r10 <- rdi, r13 <- rbx goto:54 B5
B4
ParallelMove r10 <- C, rcx <- C
ParallelMove rax <- rax
v339 <- IntConverter(int64->uint32[tr], v284 T{_Smi}) uint32
ParallelMove rax <- rax
v21 <- BinaryUint32Op(& [tr], v339 T{_Smi}, v365 T{_Smi}) [0, 63] uint32
v22 <- LoadField(v2 . _charOrIndex@10003594) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v24 <- ShiftInt64Op(<< [tr], v22, v293 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v346 <- IntConverter(uint32->int64, v21) int64
ParallelMove rax <- rax
v25 <- BinaryInt64Op(| [tr], v346 T{_Smi}, v24) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r13 <- r13
v344 <- IntConverter(uint32->int64, v17) int64
ParallelMove rdi <- rdi
v26 <- BinaryInt64Op(+ [tr], v11, v344 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C, rbx <- rdi, rcx <- rax, r13 <- rbx
GenericCheckBound:50(v290 T{_Smi}, v26) [-9223372036854775808, 9223372036854775807] int64
v294 <- LoadIndexed:50([_OneByteString] v8, v26 T{int}) [0, 255] int64
ParallelMove rax <- rax, rdi <- rcx goto:56 B5
B5
ParallelMove r8 <- r8, rdx <- C, rbx <- rax, rax <- rdi goto:174 B15
B15
  Loop 0
ParallelMove fp[-6] <- rdx
CheckStackOverflow:172(stack=0, loop=1)
Branch if RelationalOp(<, v30, v5) T{bool} goto (14, 16)
B14
  Loop 0
ParallelMove r10 <- r8
v54 <- BinaryInt64Op(+ [tr], v30, v283 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-5], rbx <- r8, rdi <- rbx, r10 <- rax, fp[-3] <- r10
GenericCheckBound(v253 T{int}, v30) [-9223372036854775808, 9223372036854775807] int64
v369 <- LoadField(v3 . PointerBase.data, MayLoadInnerPointer) untagged
v295 <- LoadIndexed:68([_Uint8List] v369 T{Uint8List}, v30 T{int}) [0, 255] int64
v296 <- LoadIndexed:70([_OneByteString] v7, v295 T{_Smi}) [0, 255] int64
ParallelMove r8 <- r8
v353 <- IntConverter(int64->uint32[tr], v296) uint32
ParallelMove r8 <- r8
v57 <- BinaryUint32Op(& [tr], v353 T{_Smi}, v363 T{_Smi}) [0, 31] uint32
Branch if EqualityCompare(v32 == v288 T{_Smi}) T{bool} goto (6, 10)
B6
  Loop 0
Branch if RelationalOp(>=, v33, v297 T{_Smi}) T{bool} goto (7, 8)
B7
  Loop 0
ParallelMove rdi <- rdx
v77 <- BinaryInt64Op(+ [tr], v31, v283 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r10
v78 <- ShiftInt64Op(>> [tr], v33, v298 T{_Smi}) [-9007199254740992, 9007199254740991] int64
ParallelMove rax <- rax
v79 <- BinaryInt64Op(+ [tr], v78, v299 T{_Smi}) [-9007199254685760, 9007199254796223] int64
StoreIndexed:100([_TwoByteString] v9, v31, v79 T{int}, NoStoreBarrier)
ParallelMove rdx <- rdi
v80 <- BinaryInt64Op(+ [tr], v77, v283 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r10
v350 <- IntConverter(int64->uint32[tr], v33) uint32
ParallelMove rax <- rax
v81 <- BinaryUint32Op(& [tr], v350 T{int}, v366 T{_Smi}) [0, 1023] uint32
ParallelMove rax <- rax
v357 <- IntConverter(uint32->int64, v81) int64
ParallelMove rax <- rax
v82 <- BinaryInt64Op(+ [tr], v357 T{_Smi}, v301 T{_Smi}) [56320, 57343] int64
StoreIndexed:108([_TwoByteString] v9, v77, v82 T{int}, NoStoreBarrier)
ParallelMove rdx <- rdx goto:118 B9
B8
  Loop 0
ParallelMove rdi <- rdx
v71 <- BinaryInt64Op(+ [tr], v31, v283 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:114([_TwoByteString] v9, v31, v33 T{int}, NoStoreBarrier)
ParallelMove rdx <- rdi goto:120 B9
B9
  Loop 0
ParallelMove rdi <- r8
v354 <- IntConverter(uint32->int64, v57) int64
ParallelMove rcx <- rdi
ParallelMove rdi <- C
v74 <- ShiftUint32Op(>> [tr], v364 T{_Smi}, v354 T{_Smi}) [0, 61694] uint32
ParallelMove rcx <- rbx
v352 <- IntConverter(int64->uint32[tr], v295 T{_Smi}) uint32
ParallelMove rcx <- rcx
v75 <- BinaryUint32Op(& [tr], v352 T{_Smi}, v74) [0, 61694] uint32
ParallelMove rbx <- r8
v355 <- IntConverter(uint32->int64, v57) int64
v302 <- LoadIndexed:126([_OneByteString] v8, v355 T{_Smi}) [0, 255] int64
ParallelMove rcx <- rcx
v358 <- IntConverter(uint32->int64, v75) int64
ParallelMove rsi <- rdx, rbx <- rdi, rax <- rcx, r10 <- rax, rcx <- C, rdx <- C goto:162 B13
B10
  Loop 0
ParallelMove rax <- C, rcx <- C, rdx <- C
ParallelMove rsi <- rdi
v348 <- IntConverter(int64->uint32[tr], v32) uint32
ParallelMove rsi <- rsi
v166 <- BinaryUint32Op(& [tr], v348 T{_Smi}, v367 T{_Smi}) [0, 1] uint32
ParallelMove rsi <- rsi
v359 <- IntConverter(uint32->int64, v166) int64
Branch if EqualityCompare(v359 T{_Smi} != v288 T{_Smi}) T{bool} goto (11, 12)
B12
  Loop 0
ParallelMove rsi <- rbx
v351 <- IntConverter(int64->uint32[tr], v295 T{_Smi}) uint32
ParallelMove rsi <- rsi
v60 <- BinaryUint32Op(& [tr], v351 T{_Smi}, v365 T{_Smi}) [0, 63] uint32
ParallelMove rbx <- r10
v61 <- ShiftInt64Op(<< [tr], v33, v293 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v360 <- IntConverter(uint32->int64, v60) int64
ParallelMove rsi <- rsi
v62 <- BinaryInt64Op(| [tr], v360 T{_Smi}, v61) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- r8
v356 <- IntConverter(uint32->int64, v57) int64
ParallelMove rdi <- rdi
v63 <- BinaryInt64Op(+ [tr], v32, v356 T{_Smi}) [0, 286] int64
ParallelMove rax <- C, rbx <- rdi, r10 <- rax
GenericCheckBound:158(v290 T{_Smi}, v63) [-9223372036854775808, 9223372036854775807] int64
v304 <- LoadIndexed:158([_OneByteString] v8, v63 T{int}) [0, 255] int64
ParallelMove rsi <- fp[-6], rbx <- rbx, rax <- rsi goto:164 B13
B13
  Loop 0
ParallelMove r8 <- fp[-3], rdx <- rsi, rbx <- rbx, rax <- rax, rsi <- fp[-7] goto:170 B15
B11
ParallelMove rcx <- fp[-1]
StoreField(v2 T{_Utf8Decoder} . _state@10003594 = v32 <int64>)
ParallelMove rbx <- fp[-3]
v66 <- BinaryInt64Op(- [tr], v54, v303 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Decoder} . _charOrIndex@10003594 = v66 T{int} <int64>)
ParallelMove rax <- C
DartReturn:146(v40)
B16
ParallelMove rcx <- fp[-1], rdi <- rbx, r10 <- rax, rdx <- C
Branch if EqualityCompare(v32 == v288 T{_Smi}) T{bool} goto (17, 21)
B17
Branch if RelationalOp(>=, v33, v297 T{_Smi}) T{bool} goto (18, 19)
B18
ParallelMove rax <- fp[-7], rbx <- fp[-6], rsi <- C
ParallelMove r8 <- rbx
v44 <- BinaryInt64Op(+ [tr], v31, v283 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- r10
v47 <- ShiftInt64Op(>> [tr], v33, v298 T{_Smi}) [-9007199254740992, 9007199254740991] int64
ParallelMove r9 <- r9
v48 <- BinaryInt64Op(+ [tr], v47, v299 T{_Smi}) [-9007199254685760, 9007199254796223] int64
StoreIndexed:204([_TwoByteString] v9, v31, v48 T{int}, NoStoreBarrier)
ParallelMove r9 <- r10
v349 <- IntConverter(int64->uint32[tr], v33) uint32
ParallelMove r9 <- r9
v52 <- BinaryUint32Op(& [tr], v349 T{int}, v366 T{_Smi}) [0, 1023] uint32
ParallelMove r9 <- r9
v361 <- IntConverter(uint32->int64, v52) int64
ParallelMove r9 <- r9
v53 <- BinaryInt64Op(+ [tr], v361 T{_Smi}, v301 T{_Smi}) [56320, 57343] int64
StoreIndexed:212([_TwoByteString] v9, v44, v53 T{int}, NoStoreBarrier)
ParallelMove  goto:222 B20
B19
ParallelMove rax <- fp[-7], rbx <- fp[-6]
StoreIndexed:218([_TwoByteString] v9, v31, v33 T{int}, NoStoreBarrier)
ParallelMove  goto:224 B20
B20
B21
ParallelMove rax <- fp[-7]
ParallelMove rbx <- rdi
v347 <- IntConverter(int64->uint32[tr], v32) uint32
ParallelMove rbx <- rbx
v145 <- BinaryUint32Op(& [tr], v347 T{_Smi}, v367 T{_Smi}) [0, 1] uint32
ParallelMove rbx <- rbx
v362 <- IntConverter(uint32->int64, v145) int64
Branch if EqualityCompare(v362 T{_Smi} != v288 T{_Smi}) T{bool} goto (22, 23)
B22
StoreField(v2 T{_Utf8Decoder} . _state@10003594 = v32 <int64>)
ParallelMove rdx <- fp[-4]
v39 <- BinaryInt64Op(- [tr], v5, v283 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Decoder} . _charOrIndex@10003594 = v39 T{int} <int64>)
ParallelMove rax <- C
DartReturn:244(v40)
B23
B24
StoreField(v2 T{_Utf8Decoder} . _state@10003594 = v32 <int64>)
StoreField(v2 T{_Utf8Decoder} . _charOrIndex@10003594 = v33 T{int} <int64>)
ParallelMove rax <- rax
DartReturn:258(v9)
CheckStackOverflowSlowPath
slow path check bound operation
slow path uint32 shift operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path uint32 shift operation
slow path check bound operation
B0
B1
Intrinsic
Enter frame
PrologueOffset = 130
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(Internal_allocateTwoByteString) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{String})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rbx, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx, fp[-4] <- rbx
CheckStackOverflow:8(stack=0, loop=0)
v172 <- BoxInt64(v6) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v172 T{int})
v7 <- StaticCall:10( allocateOneByteString<0> v172 T{int}, recognized_kind = AllocateOneByteString, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove rdx <- rax, rcx <- fp[-1]
ParallelMove fp[-5] <- rdx
v9 <- LoadField(v2 . _state@10003594) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v9 == v185 T{_Smi}) T{bool} goto (3, 6)
B3
ParallelMove rdi <- fp[-2], rsi <- fp[-3]
ParallelMove r8 <- rsi
v50 <- BinaryInt64Op(+ [tr], v4, v115 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v140 <- LoadField(v3 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r9 <- r9
v173 <- UnboxInt64([non-speculative], v140) [0, 4611686018427387903] int64
ParallelMove rax <- r9, rbx <- rsi
GenericCheckBound(v173, v4) [-9223372036854775808, 9223372036854775807] int64
v216 <- LoadField(v3 . PointerBase.data, MayLoadInnerPointer) untagged
v186 <- LoadIndexed:26([_Uint8List] v216 T{Uint8List}, v4 T{int}) [0, 255] int64
ParallelMove r10 <- r10
v52 <- BinaryInt64Op(^ [tr], v186 T{_Smi}, v187 T{_Smi}) [0, 255] int64
Branch if RelationalOp(>=, v52, v188 T{_Smi}) T{bool} goto (4, 5)
B4
ParallelMove r9 <- C
StoreField(v2 T{_Utf8Decoder} . _state@10003594 = v189 T{_Smi} <int64>)
ParallelMove r12 <- r8
v58 <- BinaryInt64Op(- [tr], v50, v115 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Decoder} . _charOrIndex@10003594 = v58 T{int} <int64>)
ParallelMove rax <- C
DartReturn:46(v45)
B5
ParallelMove r9 <- C, r12 <- C
v55 <- LoadField(v2 . _charOrIndex@10003594) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r13 <- r13
v56 <- ShiftInt64Op(<< [tr], v55, v190 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r13 <- r13
v57 <- BinaryInt64Op(| [tr], v56, v52) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r13
StoreIndexed:58([_OneByteString] v7, v8, v57 T{int}, NoStoreBarrier)
StoreField(v2 T{_Utf8Decoder} . _state@10003594 = v191 T{_Smi} <int64>)
ParallelMove r8 <- r8, rsi <- C goto:66 B7
B6
ParallelMove rdi <- fp[-2], rsi <- fp[-3], r9 <- C
ParallelMove r8 <- rsi, rsi <- C goto:68 B7
B7
v143 <- LoadField:184(v3 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r10 <- r10
v176 <- UnboxInt64:184([non-speculative], v143) [0, 4611686018427387903] int64
ParallelMove fp[-3] <- r10
ParallelMove rbx <- r8, rax <- rsi, rsi <- fp[-4], r13 <- C, r12 <- C, r8 <- C goto:184 B19
B19
  Loop 0
ParallelMove fp[-6] <- rax
CheckStackOverflow:182(stack=0, loop=1)
Branch if RelationalOp(<, v16, v5) T{bool} goto (18, 20)
B18
  Loop 0
ParallelMove r10 <- rbx
v24 <- BinaryInt64Op(+ [tr], v16, v115 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-3], rbx <- rbx, rdx <- rbx
GenericCheckBound(v176, v16) [-9223372036854775808, 9223372036854775807] int64
v217 <- LoadField(v3 . PointerBase.data, MayLoadInnerPointer) untagged
v192 <- LoadIndexed:80([_Uint8List] v217 T{Uint8List}, v16 T{int}) [0, 255] int64
ParallelMove fp[-7] <- rbx
Branch if RelationalOp(>=, v192 T{_Smi}, v187 T{_Smi}) T{bool} goto (8, 16)
B8
  Loop 0
Branch if RelationalOp(<, v192 T{_Smi}, v193 T{_Smi}) T{bool} goto (9, 10)
B10
  Loop 0
Branch if EqualityCompare(v24 == v5) T{bool} goto (11, 13)
B13
  Loop 0
ParallelMove rdx <- r10
v35 <- BinaryInt64Op(+ [tr], v24, v115 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-3], rbx <- r10
GenericCheckBound(v176 T{int}, v24) [-9223372036854775808, 9223372036854775807] int64
v218 <- LoadField(v3 . PointerBase.data, MayLoadInnerPointer) untagged
v196 <- LoadIndexed:136([_Uint8List] v218 T{Uint8List}, v24 T{int}) [0, 255] int64
ParallelMove rax <- rax
v37 <- BinaryInt64Op(^ [tr], v196 T{_Smi}, v187 T{_Smi}) [0, 255] int64
Branch if RelationalOp(>=, v37, v188 T{_Smi}) T{bool} goto (14, 15)
B15
  Loop 0
ParallelMove r10 <- fp[-7]
v41 <- ShiftInt64Op(<< [tr], v192 T{_Smi}, v190 T{_Smi}) [0, 16320] int64
ParallelMove r10 <- r10
v42 <- BinaryInt64Op(| [tr], v41, v37) [0, 16383] int64
ParallelMove rbx <- rdx, rax <- r10 goto:168 B17
B14
StoreField(v2 T{_Utf8Decoder} . _state@10003594 = v189 T{_Smi} <int64>)
ParallelMove rdx <- rdx
v44 <- BinaryInt64Op(- [tr], v35, v115 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Decoder} . _charOrIndex@10003594 = v44 T{int} <int64>)
ParallelMove rax <- C
DartReturn:156(v45)
B11
StoreField(v2 T{_Utf8Decoder} . _state@10003594 = v185 T{_Smi} <int64>)
ParallelMove rdx <- fp[-7]
v213 <- IntConverter(int64->uint32[tr], v192 T{_Smi}) uint32
ParallelMove rdx <- rdx
v47 <- BinaryUint32Op(& [tr], v213 T{_Smi}, v215 T{_Smi}) [0, 31] uint32
ParallelMove rdx <- rdx
v214 <- IntConverter(uint32->int64, v47) int64
StoreField(v2 T{_Utf8Decoder} . _charOrIndex@10003594 = v214 T{_Smi} <int64>)
ParallelMove r10 <- fp[-5] goto:130 B12
B9
StoreField(v2 T{_Utf8Decoder} . _state@10003594 = v194 T{_Smi} <int64>)
ParallelMove rdx <- r10
v49 <- BinaryInt64Op(- [tr], v24, v115 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Utf8Decoder} . _charOrIndex@10003594 = v49 T{int} <int64>)
ParallelMove rax <- C
DartReturn:108(v45)
B16
  Loop 0
ParallelMove rbx <- r10, rax <- fp[-7] goto:170 B17
B17
  Loop 0
ParallelMove rcx <- rdx
v31 <- BinaryInt64Op(+ [tr], v17, v115 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
StoreIndexed:174([_OneByteString] v7, v17, v29 T{int}, NoStoreBarrier)
ParallelMove rbx <- rbx, rax <- rcx, rcx <- fp[-1], rdx <- r10 goto:180 B19
B20
ParallelMove r10 <- rdx
ParallelMove  goto:188 B12
B12
ParallelMove rax <- r10
DartReturn:190(v7)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v42 <- BoxInt64(v3) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v28 <- AllocateTypedData:10(v42 T{_Smi}, <not-aliased>) T{_Uint8List}
ParallelMove rdx <- rax
ParallelMove fp[-4] <- rdx
ParallelMove r8 <- C goto:58 B8
B8
  Loop 0
ParallelMove fp[-3] <- r8
CheckStackOverflow:62(stack=0, loop=1)
Branch if RelationalOp(<, v7, v3) T{bool} goto (3, 4)
B3
  Loop 0
v43 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v55 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v43 T{int})
ParallelMove rcx <- rcx
v12 <- DispatchTableCall( cid=v55 List.[]<0>, v2, v43 T{int}) T{*?}
ParallelMove rax <- rax
ParallelMove rax <- rax
v44 <- UnboxInt64([non-speculative], v12 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
v15 <- BinaryInt64Op(& [tr], v44 T{int}, v33) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v15 != v48 T{_Smi}) T{bool} goto (5, 6)
B5
  Loop 0
ParallelMove rax <- C goto:50 B7
B6
B7
  Loop 0
ParallelMove rax <- rax
StoreIndexed:54([_Uint8List] v28 T{_Uint8List}, v7 T{int}, v17 T{int}, NoStoreBarrier)
ParallelMove rdx <- rdx
v19 <- BinaryInt64Op(+ [tr], v7 T{int}, v50 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rdx, rdx <- rcx goto:60 B8
B4
ParallelMove rcx <- rdx
ParallelMove rax <- rcx
DartReturn:64(v28 T{_Uint8List})
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-4] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v110 <- LoadField(v2 T{Uint8List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove fp[-3] <- rsi
ParallelMove rdx <- rsi
v215 <- UnboxInt64([non-speculative], v110 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove fp[-2] <- rdx
v49 <- EqualityCompare(v215 T{_Smi} == v226 T{_Smi}) T{bool}
ParallelMove fp[-1] <- rcx
Branch if StrictCompare:14(===, v49 T{bool}, v4) goto (6, 4)
BoolTest
B6
B4
ParallelMove rdi <- rax
v5 <- StaticCall:18( get:isNotEmpty<0> v2, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:22(===, v5 T{bool}, v4) goto (3, 9)
BoolTest
B3
ParallelMove rax <- fp[-4]
v251 <- LoadClassId(<non-smi> v2) int64
ParallelMove rcx <- rcx, rdi <- rax
v6 <- DispatchTableCall( cid=v251 Iterable.last<0>, v2) T{*?}
ParallelMove rax <- rax
Branch if StrictCompare(!==, v6 T{_Smi}, v7 T{_Smi}) T{bool} goto (7, 10)
B7
ParallelMove rdx <- fp[-2] goto:48 B5
B5
ParallelMove rcx <- rdx
v11 <- BinaryInt64Op(+ [tr], v215 T{_Smi}, v228 T{_Smi}) [v215+1, v215+1] int64
ParallelMove fp[-5] <- rcx
v218 <- BoxInt64(v11 T{int}) [v215+1, v215+1] T{int}
ParallelMove rax <- rax
v24 <- AllocateTypedData:10(v218 T{int}) T{_Uint8List}
ParallelMove rcx <- rax, rax <- fp[-2]
ParallelMove fp[-6] <- rcx
Branch if RelationalOp(>, v226 T{_Smi}, v215 T{_Smi}) T{bool} goto (30, 27)
B30
ParallelMove rdx <- fp[-5] goto:48 B28
B27
ParallelMove rdx <- fp[-5]
Branch if RelationalOp(>, v215 T{_Smi}, v11 T{_Smi}) T{bool} goto (31, 32)
B31
B28
ParallelMove rdi <- C, rsi <- fp[-3], rdx <- rdx
StaticCall:56( checkValidRange<0> v226 T{_Smi}, v110 T{_Smi}, v11 T{_Smi}) int64
ParallelMove  goto:62 B36
B32
B36
v252 <- LoadClassId(<non-smi> v2) int64
ParallelMove rcx <- rcx, rdi <- rax
v70 <- DispatchTableCall( cid=v252 _TypedListBase.elementSizeInBytes<0>, v2) int64
ParallelMove rax <- rax
Branch if EqualityCompare(v70 T{_Smi} == v228 T{_Smi}) T{bool} goto (37, 44)
B37
ParallelMove rdx <- fp[-2]
Branch if RelationalOp(<, v215 T{_Smi}, v215 T{_Smi}) T{bool} goto (38, 39)
B39
ParallelMove rax <- fp[-1]
Branch if StrictCompare:134(===, v49 T{bool}, v4 T{bool}) goto (40, 41)
BoolTest
B40
B41
ParallelMove rcx <- fp[-3]
Branch if RelationalOp:10(<, v110 T{_Smi}, v175 T{_Smi}) T{bool} goto (61, 62)
B61
ParallelMove rbx <- fp[-4], r12 <- fp[-6]
v253 <- LoadField(v2 . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- rcx
MemoryCopy(v253 T{Uint8List}, v24 T{_Uint8List}, v7 T{_Smi}, v7 T{_Smi}, v110 T{_Smi}, dest_cid=_Int8List (111), src_cid=_Int8List (111) [untagged], can_overlap)
Copying backwards
Copying forwards
ParallelMove  goto:10 B60
B62
ParallelMove rbx <- fp[-4], r12 <- fp[-6]
v162 <- LoadField(v24 T{_Uint8List} . PointerBase.data, MayLoadInnerPointer) untagged
v165 <- LoadField(v2 . PointerBase.data, MayLoadInnerPointer) untagged
v168 <- LoadThread() untagged
v169 <- LoadUntagged(v168, 1512) untagged
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx, rax <- rcx
CCall(target_address=v169, v162 T{Object}, v165 T{Object}, v215 T{int}) untagged
ParallelMove  goto:10 B60
B60
B44
ParallelMove rbx <- fp[-4], r12 <- fp[-6], rdx <- fp[-2]
ParallelMove rdi <- r12, rsi <- C, rdx <- rdx, rbx <- rbx, r8 <- C
StaticCall:158( _slowSetRange@7027147<0> v24 T{_Uint8List}, v226 T{_Smi}, v215 T{_Smi}, v2 T{Uint8List}, v226 T{_Smi}, using unchecked entrypoint, result_type = T{Null?})
ParallelMove  goto:160 B45
B45
ParallelMove rax <- fp[-6]
DartReturn:60(v24 T{_Uint8List})
B10
ParallelMove rbx <- fp[-4]
ParallelMove  goto:70 B8
B9
ParallelMove rbx <- fp[-4]
ParallelMove  goto:66 B8
B8
ParallelMove rax <- rbx
DartReturn:72(v2)
B38
v79 <- StaticCall:124( tooFew<0> ) T{StateError}
ParallelMove rax <- rax
Throw:126(v79)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v44 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
v24 <- LoadStaticField:4(_ioOverridesToken@15069316, CallsInitializer) T{Object}
v4 <- AllocateObject:12(cls=_Directory, <not-aliased>) T{_Directory}
ParallelMove rax <- rax, rdi <- fp[2]
ParallelMove fp[-1] <- rax
StoreField(v4 T{_Directory} . _path@15069316 = v3, NoStoreBarrier)
ParallelMove rdi <- rdi
v17 <- StaticCall:12( _toUtf8Array@15069316<0> v3 T{String}, result_type = T{_Uint8List}) T{_Uint8List}
ParallelMove rax <- fp[-1]
DartReturn:16(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rsi <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- C, rsi <- rsi
v13 <- StaticCall:10( convert<0> v14 T{Utf8Encoder}, v2 T{String}, using unchecked entrypoint, result_type = T{_Uint8List}) T{_Uint8List}
ParallelMove rdi <- rax
v5 <- StaticCall:12( _toNullTerminatedUtf8Array@15069316<0> v13 T{_Uint8List}, result_type = T{_Uint8List}) T{_Uint8List}
ParallelMove rax <- rax
DartReturn:14(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v2 <- AllocateObject:6(cls=Object) T{Object}
ParallelMove rax <- rax
DartReturn:10(v2)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v2 <- LoadStaticField(_cachedNamespace@15069316) T{_NamespaceImpl?}
Branch if StrictCompare:10(===, v2, v0) goto (3, 4)
B3
v5 <- StaticCall:20( _getDefault@15069316<0> , result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v4 <- AllocateObject:16(cls=_NamespaceImpl) T{_NamespaceImpl}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v5)
v6 <- StaticCall:22( _create@15069316<0> v4, v5, result_type = T{_NamespaceImpl}) T{_NamespaceImpl}
ParallelMove rax <- rax, rcx <- rax
StoreStaticField(_cachedNamespace@15069316, v6)
ParallelMove rax <- rcx goto:28 B5
B4
B5
ParallelMove rax <- rax
DartReturn:34(v23 T{_NamespaceImpl})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[0] <- v0)
v2 <- NativeCall(Namespace_GetDefault) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v2, v3, 'function result', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v2 T{int})
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v18 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
v9 <- LoadStaticField:4(_ioOverridesToken@15069316, CallsInitializer) T{Object}
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- C
StoreStaticField(eventHandlerSendData, v2)
ParallelMove rax <- C
StoreStaticField(timerMillisecondClock, v3)
ParallelMove rax <- C
DartReturn:10(v0)
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v5)
v7 <- StaticCall:10( _sendData@15069316<0> v3, v4, v5) T{void?}
ParallelMove rax <- rax
DartReturn:12(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v0)
v5 <- NativeCall(EventHandler_SendData) T{*?}
ParallelMove rax <- rax
DartReturn:8(v5)
Checking for concrete finalized classes:
 * 111 (_Int8List)
 * 112 (_Int8ArrayView)
 * 113 (_ExternalInt8Array)
 * 114 (_UnmodifiableInt8ArrayView)
 * 115 (_Uint8List)
 * 116 (_Uint8ArrayView)
 * 117 (_ExternalUint8Array)
 * 118 (_UnmodifiableUint8ArrayView)
 * 119 (_Uint8ClampedList)
 * 120 (_Uint8ClampedArrayView)
 * 121 (_ExternalUint8ClampedArray)
 * 122 (_UnmodifiableUint8ClampedArrayView)
 * 123 (_Int16List)
 * 124 (_Int16ArrayView)
 * 125 (_ExternalInt16Array)
 * 126 (_UnmodifiableInt16ArrayView)
 * 127 (_Uint16List)
 * 128 (_Uint16ArrayView)
 * 129 (_ExternalUint16Array)
 * 130 (_UnmodifiableUint16ArrayView)
 * 131 (_Int32List)
 * 132 (_Int32ArrayView)
 * 133 (_ExternalInt32Array)
 * 134 (_UnmodifiableInt32ArrayView)
 * 135 (_Uint32List)
 * 136 (_Uint32ArrayView)
 * 137 (_ExternalUint32Array)
 * 138 (_UnmodifiableUint32ArrayView)
 * 139 (_Int64List)
 * 140 (_Int64ArrayView)
 * 141 (_ExternalInt64Array)
 * 142 (_UnmodifiableInt64ArrayView)
 * 143 (_Uint64List)
 * 144 (_Uint64ArrayView)
 * 145 (_ExternalUint64Array)
 * 146 (_UnmodifiableUint64ArrayView)
 * 564 (CodeUnits)
Checking for concrete finalized classes:
 * 89 (_List)
 * 90 (_ImmutableList)
 * 91 (_GrowableList)
Not checking the following concrete implementors of List:
 * 147(_Float32List): List<double> is not a subtype of List<int>?
 * 148(_Float32ArrayView): List<double> is not a subtype of List<int>?
 * 149(_ExternalFloat32Array): List<double> is not a subtype of List<int>?
 * 150(_UnmodifiableFloat32ArrayView): List<double> is not a subtype of List<int>?
 * 151(_Float64List): List<double> is not a subtype of List<int>?
 * 152(_Float64ArrayView): List<double> is not a subtype of List<int>?
 * 153(_ExternalFloat64Array): List<double> is not a subtype of List<int>?
 * 154(_UnmodifiableFloat64ArrayView): List<double> is not a subtype of List<int>?
 * 155(_Float32x4List): List<Float32x4> is not a subtype of List<int>?
 * 156(_Float32x4ArrayView): List<Float32x4> is not a subtype of List<int>?
 * 157(_ExternalFloat32x4Array): List<Float32x4> is not a subtype of List<int>?
 * 158(_UnmodifiableFloat32x4ArrayView): List<Float32x4> is not a subtype of List<int>?
 * 159(_Int32x4List): List<Int32x4> is not a subtype of List<int>?
 * 160(_Int32x4ArrayView): List<Int32x4> is not a subtype of List<int>?
 * 161(_ExternalInt32x4Array): List<Int32x4> is not a subtype of List<int>?
 * 162(_UnmodifiableInt32x4ArrayView): List<Int32x4> is not a subtype of List<int>?
 * 163(_Float64x2List): List<Float64x2> is not a subtype of List<int>?
 * 164(_Float64x2ArrayView): List<Float64x2> is not a subtype of List<int>?
 * 165(_ExternalFloat64x2Array): List<Float64x2> is not a subtype of List<int>?
 * 166(_UnmodifiableFloat64x2ArrayView): List<Float64x2> is not a subtype of List<int>?
Generating check for type argument 0: int
Checks for Type
Checking for concrete finalized classes:
 * 59 (_Smi)
 * 60 (_Mint)
B0
B1
ParallelMove rax <- rsi
StoreField(v2 . end = v3)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
v3 <- LoadField(v2 . end) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
DartReturn:4(v3)
B0
B1
ParallelMove rax <- rsi
StoreField(v2 . start = v3)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
ParallelMove rax <- rsi
StoreField(v2 . data = v3)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
Enter frame
PrologueOffset = 0
v4 <- LoadField(v2 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v6 <- BinarySmiOp:4(- [tr], v4, v5) [-1, 4611686018427387902] T{_Smi}
v7 <- LoadIndexedUnsafe(rbp[v6 + 16]) T{*?}
Branch if RelationalOp:6(<=, v5, v6) T{bool} goto (2, 3)
B2
v15 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 8]) T{String}
Branch if RelationalOp:20(<=, v16, v6 T{_Smi}) T{bool} goto (5, 6)
B5
v18 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 0]) T{OSError??}
ParallelMove rax <- rbx, rbx <- rsi goto:36 B8
B6
ParallelMove rcx <- rbx goto:30 B4
B3
ParallelMove rcx <- C goto:18 B4
B4
ParallelMove rax <- rcx, rbx <- C goto:34 B8
B8
StoreField(v7 T{TlsException} . type = v14 T{_OneByteString})
ParallelMove rax <- rax
StoreField(v7 T{TlsException} . message = v12 T{String})
ParallelMove rax <- rbx
StoreField(v7 T{TlsException} . osError = v13 T{OSError?})
ParallelMove rax <- C
DartReturn:46(v0)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- C, rax <- C
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdx <- fp[4]
StoreField(v2 . _asyncDispatched@15069316 = v5, NoStoreBarrier)
StoreField(v2 . _resourceInfo@15069316 = v6, NoStoreBarrier)
StoreField(v2 . closed = v5, NoStoreBarrier)
ParallelMove rax <- fp[2]
StoreField(v2 . path = v4)
ParallelMove rax <- fp[3]
v25 <- UnboxInt64([non-speculative], v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- C, rsi <- rax
v14 <- StaticCall:10( _RandomAccessFileOpsImpl@15069316.<0> v0 T{Null?}, v25 T{int}, result_type = T{_RandomAccessFileOpsImpl}) T{_RandomAccessFileOpsImpl}
ParallelMove rax <- rax, rcx <- fp[4]
StoreField(v2 . _ops@15069316 = v14)
v8 <- AllocateObject:14(cls=_FileResourceInfo) T{_FileResourceInfo}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-1] <- rax
StaticCall:16( _FileResourceInfo@15069316.<0> v8)
ParallelMove rax <- fp[-1], rcx <- fp[4]
StoreField(v2 T{_RandomAccessFile} . _resourceInfo@15069316 = v8 T{_FileResourceInfo})
ParallelMove rax <- C
DartReturn:22(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
CheckStackOverflow:8(stack=0, loop=0)
StoreField(v2 T{_FileResourceInfo} . readBytes = v26 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v2 T{_FileResourceInfo} . readCount = v26 T{_Smi} <int64>, NoStoreBarrier)
v16 <- LoadStaticField(_count@15069316) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- rax
v24 <- UnboxInt64([non-speculative], v16) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rcx
v18 <- BinaryInt64Op(+ [tr], v24 T{int}, v27 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v25 <- BoxInt64(v18) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreStaticField(_count@15069316, v25 T{int})
StoreField(v2 T{_FileResourceInfo} . id = v24 T{int} <int64>)
ParallelMove rdi <- rdi
StaticCall:12( fileOpened<0> v2)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
Checking for cid 190 (_FileResourceInfo)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v7 <- LoadStaticField:4(openFiles, CallsInitializer) T{_Map}
ParallelMove rcx <- rax, rdx <- fp[-1]
v4 <- LoadField(v2 . id {final}) [-9223372036854775808, 9223372036854775807] int64
v8 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- rcx, rsi <- rax, rdx <- rdx
StaticCall:14( []=<0> v7, v8 T{int}, v2, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:4(stack=0, loop=0)
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v3)
v4 <- StaticCall:6( Map._fromLiteral@0150898<0> v2, v3) T{Map<X0, X1>}
ParallelMove rax <- rax
DartReturn:8(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v48 <- LoadStaticField:4(_uninitializedIndex@3220832, CallsInitializer) T{_Uint32List}
ParallelMove rdx <- fp[3], rax <- rax
ParallelMove fp[-1] <- rax
v4 <- AllocateObject:10(cls=_Map, v2) T{_Map}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-2] <- rcx
StoreField(v4 T{_Map} . LinkedHashBase.index = v48 T{_Uint32List}, NoStoreBarrier)
StoreField(v4 T{_Map} . LinkedHashBase.hash_mask = v41 T{_Smi}, NoStoreBarrier)
v63 <- LoadStaticField:4(_uninitializedData@3220832, CallsInitializer) T{_List}
ParallelMove rax <- rax, rdi <- fp[-2]
StoreField(v4 T{_Map} . LinkedHashBase.data = v63 T{_List}, NoStoreBarrier)
StoreField(v4 T{_Map} . LinkedHashBase.used_data = v41 T{_Smi}, NoStoreBarrier)
StoreField(v4 T{_Map} . LinkedHashBase.deleted_keys = v41 T{_Smi}, NoStoreBarrier)
ParallelMove rax <- fp[2]
v111 <- LoadClassId(<non-smi> v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v5 <- DispatchTableCall( cid=v111 List.length<0>, v3) T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rax
v105 <- UnboxInt64:44([non-speculative], v5 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove fp[-4] <- rdx
ParallelMove rdi <- C goto:44 B5
B5
  Loop 0
ParallelMove fp[-3] <- rdi
CheckStackOverflow:48(stack=0, loop=1)
Branch if RelationalOp(<, v7, v105 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
ParallelMove rcx <- rdi
v10 <- BinaryInt64Op(- [tr], v7, v109 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v107 <- BoxInt64(v10) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v112 <- LoadClassId(<non-smi> v3) int64
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v107 T{int})
ParallelMove rcx <- rcx
v11 <- DispatchTableCall( cid=v112 List.[]<0>, v3, v107 T{int}) T{*?}
ParallelMove rax <- rax, rdx <- fp[3], rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
t1 <- AssertAssignable:34(v11 T{X0?}, v12, '', instantiator_type_args(v2), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdx <- fp[-3]
v106 <- BoxInt64(v7) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- rax, rax <- fp[2]
v113 <- LoadClassId(<non-smi> v3) int64
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v106 T{int})
ParallelMove rcx <- rbx
v14 <- DispatchTableCall( cid=v113 List.[]<0>, v3, v106 T{int}) T{*?}
ParallelMove rax <- rax, rdx <- fp[3], rcx <- C, rbx <- rax
ParallelMove fp[-5] <- rbx
t2 <- AssertAssignable:38(v14 T{X0?}, v15, '', instantiator_type_args(v2), function_type_args(v0)) T{X1?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-2], rsi <- fp[-1]
v33 <- StaticCall:14( _hashCode@3220832<0> v4 T{_Map}, v11 T{X0?}, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-2], rsi <- fp[-1], rdx <- fp[-5], rbx <- rax
StaticCall:16( _set@3220832<0> v4 T{_Map}, v11 T{X0?}, v14 T{X1?}, v33, using unchecked entrypoint)
ParallelMove rcx <- fp[-3]
v18 <- BinaryInt64Op(+ [tr], v7, v110 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rcx, rdx <- fp[-4] goto:46 B5
B4
ParallelMove rax <- fp[-2]
DartReturn:50(v4)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v13 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v4 <- AllocateObject:10(cls=_RandomAccessFileOpsImpl) T{_RandomAccessFileOpsImpl}
ParallelMove rax <- rax
ParallelMove fp[-2] <- rax
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v13 T{int})
StaticCall:14( _setPointer@15069316<0> v4, v13 T{int}, using unchecked entrypoint)
ParallelMove rax <- fp[-2]
DartReturn:16(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(File_SetPointer) T{*?}
ParallelMove rax <- rax
DartReturn:8(v4)
B0
B1
ParallelMove rax <- C
DartReturn:8(v7 T{_Smi})
B0
B1
ParallelMove rax <- C
DartReturn:8(v7 T{_Smi})
B0
B1
Enter frame
PrologueOffset = 0
v2 <- LoadStaticField:4(ENCRYPTED_SIZE, CallsInitializer) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
DartReturn:6(v2)
B0
B1
Enter frame
PrologueOffset = 0
v2 <- LoadStaticField:4(SIZE, CallsInitializer) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
DartReturn:6(v2)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v11 <- StaticCall:10( _toNullTerminatedUtf8Array@15069316<0> v3 T{Uint8List}, result_type = T{!null}) T{Uint8List}
ParallelMove rdi <- fp[2]
v12 <- StaticCall:12( _toStringFromUtf8Array@15069316<0> v3 T{Uint8List}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v4 <- AllocateObject:10(cls=_Link) T{_Link}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v4 T{_Link} . _path@15069316 = v12, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v34 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
v21 <- LoadStaticField:4(_ioOverridesToken@15069316, CallsInitializer) T{Object}
v4 <- AllocateObject:12(cls=_Link, <not-aliased>) T{_Link}
ParallelMove rax <- rax, rdi <- fp[2]
ParallelMove fp[-1] <- rax
StoreField(v4 T{_Link} . _path@15069316 = v3 T{String}, NoStoreBarrier)
ParallelMove rdi <- rdi
v15 <- StaticCall:10( _toUtf8Array@15069316<0> v3 T{String}, result_type = T{_Uint8List}) T{_Uint8List}
ParallelMove rax <- fp[-1]
DartReturn:16(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v3 <- AllocateObject:10(cls=_X509CertificateImpl) T{_X509CertificateImpl}
ParallelMove rax <- rax
DartReturn:14(v3)
B0
B1
ParallelMove rax <- sp[1], rcx <- sp[2]
StoreField(v2 . _instantiator_type_arguments@0150898 = v3)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
Enter frame
PrologueOffset = 0
v4 <- LoadField(v2 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v6 <- BinarySmiOp:4(- [tr], v4, v5) [-1, 4611686018427387902] T{_Smi}
v7 <- LoadIndexedUnsafe(rbp[v6 + 16]) T{*?}
Branch if RelationalOp:6(<=, v5, v6) T{bool} goto (2, 3)
B2
v15 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 8]) T{String}
Branch if RelationalOp:20(<=, v16, v6 T{_Smi}) T{bool} goto (5, 6)
B5
v18 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 0]) T{OSError??}
ParallelMove rax <- rbx, rbx <- rsi goto:36 B8
B6
ParallelMove rcx <- rbx goto:30 B4
B3
ParallelMove rcx <- C goto:18 B4
B4
ParallelMove rax <- rcx, rbx <- C goto:34 B8
B8
StoreField(v7 T{TlsException} . type = v14 T{_OneByteString})
ParallelMove rax <- rax
StoreField(v7 T{TlsException} . message = v12 T{String})
ParallelMove rax <- rbx
StoreField(v7 T{TlsException} . osError = v13 T{OSError?})
ParallelMove rax <- C
DartReturn:46(v0)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v13 <- StaticCall:12( _toNullTerminatedUtf8Array@15069316<0> v3, result_type = T{!null}) T{Uint8List}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v4 <- AllocateObject:10(cls=_File) T{_File}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-2] <- rcx
StoreField(v4 T{_File} . _rawPath@15069316 = v13, NoStoreBarrier)
ParallelMove rdi <- fp[2]
v14 <- StaticCall:14( _toStringFromUtf8Array@15069316<0> v3 T{Uint8List}, result_type = T{!null}) T{String}
ParallelMove rax <- rax, rcx <- fp[-2]
StoreField(v4 T{_File} . _path@15069316 = v14)
ParallelMove rax <- rcx
DartReturn:14(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v44 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
v24 <- LoadStaticField:4(_ioOverridesToken@15069316, CallsInitializer) T{Object}
v4 <- AllocateObject:12(cls=_File, <not-aliased>) T{_File}
ParallelMove rax <- rax, rdi <- fp[2]
ParallelMove fp[-1] <- rax
StoreField(v4 T{_File} . _path@15069316 = v3, NoStoreBarrier)
ParallelMove rdi <- rdi
v17 <- StaticCall:12( _toUtf8Array@15069316<0> v3 T{String}, result_type = T{_Uint8List}) T{_Uint8List}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v4 T{_File} . _rawPath@15069316 = v17)
ParallelMove rax <- rcx
DartReturn:16(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v2 <- AllocateObject:6(cls=_ResourceHandleImpl, <not-aliased>) T{_ResourceHandleImpl}
ParallelMove rax <- rax, rcx <- C
StoreField(v2 T{_ResourceHandleImpl} . _handle@15069316 = v11 <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:12(v2)
B0
B1
ParallelMove rcx <- sp[1]
v4 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[2]
StoreField(v2 . _handle@15069316 = v4 T{int} <int64>)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
Enter frame
PrologueOffset = 0
v2 <- LoadStaticField:4(_sentinel@15069316, CallsInitializer) T{_ResourceHandleImpl}
ParallelMove rax <- rax
DartReturn:6(v2)
B0
B1
ParallelMove rcx <- sp[1]
v3 <- LoadField(v2 . level {final}) [-9223372036854775808, 9223372036854775807] int64
v4 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
PrologueOffset = 21
ParallelMove rax <- rax
DartReturn:4(v4 T{int})
B0
B1
Enter frame
PrologueOffset = 0
v4 <- LoadField(v2 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v6 <- BinarySmiOp:4(- [tr], v4, v5) [-1, 4611686018427387902] T{_Smi}
v7 <- LoadIndexedUnsafe(rbp[v6 + 16]) T{*?}
Branch if RelationalOp:6(<=, v5, v6) T{bool} goto (2, 3)
B2
v15 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 8]) T{String}
Branch if RelationalOp:20(<=, v16, v6 T{_Smi}) T{bool} goto (5, 6)
B5
v18 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 0]) T{OSError??}
ParallelMove rax <- rbx, rbx <- rsi goto:36 B8
B6
ParallelMove rcx <- rbx goto:30 B4
B3
ParallelMove rcx <- C goto:18 B4
B4
ParallelMove rax <- rcx, rbx <- C goto:34 B8
B8
StoreField(v7 T{TlsException} . type = v14 T{_OneByteString})
ParallelMove rax <- rax
StoreField(v7 T{TlsException} . message = v12 T{String})
ParallelMove rax <- rbx
StoreField(v7 T{TlsException} . osError = v13 T{OSError?})
ParallelMove rax <- C
DartReturn:46(v0)
B0
B1
ParallelMove rcx <- sp[3]
v6 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[4]
StoreField(v2 . level = v6 T{int} <int64>)
ParallelMove rcx <- sp[2]
v7 <- UnboxInt64([non-speculative], v4) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 . type = v7 T{int} <int64>)
ParallelMove rax <- sp[1]
StoreField(v2 . data = v5)
ParallelMove rax <- C
DartReturn:12(v0)
B0
B1
ParallelMove rcx <- sp[1]
v3 <- LoadField(v2 . _delayed_type_arguments@0150898) T{*?}
ParallelMove rax <- rax
DartReturn:4(v3)
B0
B1
ParallelMove rcx <- sp[1]
v3 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
v4 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
PrologueOffset = 21
ParallelMove rax <- rax
DartReturn:4(v4 T{int})
B0
B11
Enter frame
PrologueOffset = 0
v5 <- LoadField(v2 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rax
v7 <- BinarySmiOp:4(- [tr], v5, v6) [-2, 4611686018427387901] T{_Smi}
v8 <- LoadIndexedUnsafe(rbp[v7 + 24]) T{*?}
ParallelMove fp[-3] <- rsi
v9 <- LoadIndexedUnsafe(rbp[v7 + 16]) T{Duration}
ParallelMove fp[-2] <- rdx
v13 <- LoadIndexed([_List] v2, v11 T{_Smi}) T{*?}
Branch if StrictCompare:16(===, v13, v14) goto (2, 3)
B2
v51 <- LoadIndexed([_List] v2, v49 T{_Smi}) T{*?}
ParallelMove rax <- rax
v52 <- BinarySmiOp:10(- [tr], v5, v51) [-4611686018427387903, 4611686018427387903] T{_Smi}
v53 <- LoadIndexedUnsafe(rbp[v52 + 8]) T{*?}
ParallelMove rax <- rcx goto:26 B15
B3
ParallelMove rax <- C goto:28 B15
B15
ParallelMove fp[-1] <- rax
CheckStackOverflow:34(stack=0, loop=0)
v16 <- AllocateContext:36(num_variables=6) T{Context}
ParallelMove rbx <- rax, rsi <- fp[-3]
ParallelMove fp[-4] <- rbx
StoreField(v16 . this = v8, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreField(v16 . timeLimit = v9, NoStoreBarrier)
v18 <- LoadField(v8 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- fp[-1], rdx <- rdi, rcx <- C, fp[-2] <- rdi
t0 <- AssertAssignable:38(v15, v17, 'onTimeout', instantiator_type_args(v18), function_type_args(v0)) T{_Closure?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rsi <- fp[-3]
v88 <- LoadField(v8 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v129 <- IntConverter(int64->uint32[tr], v88) uint32
ParallelMove rcx <- C
ParallelMove rax <- rax
v92 <- BinaryUint32Op(& [tr], v129 T{int}, v131 T{_Smi}) [0, 24] uint32
ParallelMove rax <- rax
v130 <- IntConverter(uint32->int64, v92) int64
Branch if EqualityCompare(v130 T{_Smi} != v120 T{_Smi}) T{bool} goto (6, 7)
B6
ParallelMove rdx <- fp[-2]
v47 <- AllocateObject:50(cls=_Future, v18 T{TypeArguments}) T{_Future}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-5] <- rcx
StoreField(v47 T{_Future} . _state@4048458 = v120 T{_Smi} <int64>, NoStoreBarrier)
v106 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rcx <- rax, rax <- fp[-5]
StoreField(v47 T{_Future} . _zone@4048458 = v106, NoStoreBarrier)
ParallelMove rdi <- rax, rsi <- fp[-3]
StaticCall:14( _asyncComplete@4048458<0> v47 T{_Future}, v8 T{FutureOr<X0>?}, using unchecked entrypoint)
ParallelMove rax <- fp[-5]
DartReturn:54(v47)
B7
ParallelMove rbx <- fp[-1], rcx <- fp[-4], rax <- C
ParallelMove rdx <- fp[-2]
v24 <- AllocateObject:58(cls=_Future, v18 T{TypeArguments}) T{_Future}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-5] <- rcx
StoreField(v24 T{_Future} . _state@4048458 = v120 T{_Smi} <int64>, NoStoreBarrier)
v103 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rcx <- rax, rax <- fp[-5]
StoreField(v24 T{_Future} . _zone@4048458 = v103, NoStoreBarrier)
ParallelMove rsi <- fp[-4]
StoreField(v16 . _future = v24, NoStoreBarrier)
ParallelMove rdi <- C
StoreField(v16 . timer = v0, NoStoreBarrier)
ParallelMove rax <- fp[-1]
Branch if StrictCompare:62(===, v15 T{_Closure?}, v0) goto (8, 9)
B8
v42 <- LoadField(v16 . timeLimit) T{Duration}
ParallelMove rbx <- C, rdx <- rsi, fp[-5] <- rax
v44 <- AllocateClosure:68(v43, v16) T{_Closure}
ParallelMove rdi <- C, rsi <- fp[-5], rdx <- rax
v45 <- StaticCall:70( Timer.<0> v0, v42, v44, result_type = T{_Timer}) T{_Timer}
ParallelMove rax <- rax, rsi <- fp[-4]
StoreField(v16 . timer = v45)
ParallelMove  goto:86 B10
B9
StoreField(v16 . zone = v103 T{_RootZone}, NoStoreBarrier)
StoreField(v16 . onTimeoutHandler = v15 T{_Closure}, NoStoreBarrier)
v31 <- LoadField(v16 . timeLimit) T{Duration}
ParallelMove rbx <- C, rdx <- rsi, fp[-1] <- rax
v33 <- AllocateClosure:80(v32, v16) T{_Closure}
ParallelMove rdi <- C, rsi <- fp[-1], rdx <- rax
v34 <- StaticCall:82( Timer.<0> v0, v31, v33, result_type = T{_Timer}) T{_Timer}
ParallelMove rax <- rax, rsi <- fp[-4]
StoreField(v16 . timer = v34)
ParallelMove  goto:88 B10
B10
ParallelMove rbx <- C, rdx <- rsi, rcx <- fp[-2]
v38 <- AllocateClosure:90(v36, v16, v18 T{TypeArguments}) T{_Closure}
ParallelMove rbx <- C, rdx <- fp[-4], rax <- rax
ParallelMove fp[-1] <- rax
v40 <- AllocateClosure:92(v39, v16) T{_Closure}
ParallelMove rax <- rax
MoveArgument(sp[3] <- v35)
MoveArgument(sp[2] <- v8)
MoveArgument(sp[1] <- v38)
MoveArgument(sp[0] <- v40)
StaticCall:94( then<1> v35, v8, v38, v40, using unchecked entrypoint)
ParallelMove rcx <- fp[-4]
v41 <- LoadField(v16 . _future) T{_Future}
ParallelMove rax <- rax
DartReturn:96(v41)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v4 <- LoadField(v2 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rax
v6 <- BinarySmiOp:4(- [tr], v4, v5) [-2, 4611686018427387901] T{_Smi}
v7 <- LoadIndexedUnsafe(rbp[v6 + 24]) T{*?}
ParallelMove fp[-4] <- rdi
v8 <- LoadIndexedUnsafe(rbp[v6 + 16]) T{_Closure}
ParallelMove fp[-3] <- rdx
v13 <- LoadIndexed([_List] v2, v11 T{_Smi}) T{*?}
Branch if StrictCompare:16(===, v13, v14) goto (2, 3)
B2
v44 <- LoadIndexed([_List] v2, v42 T{_Smi}) T{*?}
ParallelMove rax <- rax
v45 <- BinarySmiOp:10(- [tr], v4, v44) [-4611686018427387903, 4611686018427387903] T{_Smi}
v46 <- LoadIndexedUnsafe(rbp[v45 + 8]) T{Function??}
ParallelMove rax <- rcx goto:26 B4
B3
ParallelMove rax <- C goto:28 B4
B4
ParallelMove fp[-2] <- rax
v16 <- LoadField(v2 . ArgumentsDescriptor.type_args_len {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare:30(===, v16, v9) goto (5, 6)
B5
ParallelMove rcx <- C goto:40 B8
B6
v17 <- LoadField(v2 . ArgumentsDescriptor.size {final}) [0, 4611686018427387903] T{_Smi}
v18 <- LoadIndexedUnsafe(rbp[v17 + 16]) T{TypeArguments?}
ParallelMove rcx <- rbx goto:42 B8
B8
ParallelMove fp[-1] <- rcx
CheckStackOverflow:48(stack=0, loop=0)
v106 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rax <- rax
Branch if StrictCompare:52(===, v106, v21) goto (9, 17)
B9
ParallelMove rbx <- fp[-2]
Branch if StrictCompare:58(!==, v15, v0) goto (10, 14)
B10
ParallelMove rax <- rbx, rdx <- C, rcx <- fp[-1]
v36 <- InstanceOf:62(v15 T{_Closure} IS (dynamic, Object, StackTrace) => dynamic, instantiator_type_args(v0), function_type_args(v19)) T{bool}
InlineInstanceof
FunctionTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:66(!==, v36 T{bool}, v37) goto (11, 15)
BoolTest
B11
ParallelMove rax <- fp[-2], rdx <- C, rcx <- fp[-1]
v39 <- InstanceOf:72(v15 T{_Closure} IS (dynamic, Object) => dynamic, instantiator_type_args(v0), function_type_args(v19)) T{bool}
InlineInstanceof
FunctionTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:76(!==, v39 T{bool}, v37) goto (12, 16)
BoolTest
B16
B15
B14
B13
ParallelMove rcx <- fp[-2] goto:128 B29
B17
ParallelMove rdi <- fp[-2]
Branch if StrictCompare:110(!==, v15, v0) goto (18, 19)
B18
ParallelMove rdi <- rdi, rsi <- rax
v27 <- StaticCall:116( _registerErrorHandler@4048458<0> v15 T{_Closure}, v106, result_type = T{!null}) T{_Closure}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:122 B20
B19
ParallelMove rax <- rdi goto:124 B20
B20
ParallelMove rcx <- rax goto:130 B29
B29
ParallelMove rdx <- fp[-1], fp[-5] <- rcx
v30 <- AllocateObject:132(cls=_Future, v19) T{_Future}
ParallelMove rsi <- rax, rax <- C
ParallelMove fp[-6] <- rsi
StoreField(v30 T{_Future} . _state@4048458 = v136 T{_Smi} <int64>, NoStoreBarrier)
v99 <- LoadStaticField:4(_current@4048458) T{_RootZone}
StoreField(v30 T{_Future} . _zone@4048458 = v99, NoStoreBarrier)
ParallelMove rdi <- fp[-4]
v31 <- LoadField(v7 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx, rcx <- fp[-1], rbx <- C
v33 <- InstantiateTypeArguments:136(v32, instantiator_type_args(v31), function_type_args(v19), instantiator_class(Library:'dart:async' Class: _Future@4048458)) T{*?}
ParallelMove rdx <- rax
v34 <- AllocateObject:138(cls=_FutureListener, v33) T{_FutureListener}
ParallelMove rcx <- rax, rax <- fp[-6]
StoreField(v34 T{_FutureListener} . result = v30 T{_Future}, NoStoreBarrier)
ParallelMove rdx <- fp[-3]
StoreField(v34 T{_FutureListener} . callback = v8 T{_Closure}, NoStoreBarrier)
ParallelMove rbx <- fp[-5]
StoreField(v34 T{_FutureListener} . errorCallback = v29 T{_Closure?}, NoStoreBarrier)
v113 <- IfThenElse(===, v29, v0 ? 1 : 3) [1, 3] T{_Smi}
ParallelMove rdx <- rdx
ParallelMove rdx <- rdx
v135 <- UnboxInt64([non-speculative], v113 T{_Smi}) [1, 3] int64
StoreField(v34 T{_FutureListener} . state = v135 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rdi <- fp[-4], rsi <- rcx
StaticCall:142( _addListener@4048458<0> v7, v34, using unchecked entrypoint)
ParallelMove rax <- fp[-6]
DartReturn:144(v30)
B12
ParallelMove rdi <- fp[-2]
v40 <- AllocateObject:84(cls=ArgumentError, <not-aliased>) T{ArgumentError}
ParallelMove rcx <- rax, rax <- C
StoreField(v40 T{ArgumentError} . name = v14 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v40 T{ArgumentError} . message = v41 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreField(v40 T{ArgumentError} . invalidValue = v15 T{_Closure}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v40 T{ArgumentError} . _hasValue@0150898 = v37 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:88(v40)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- AllocateContext:10(num_variables=2) T{Context}
ParallelMove rbx <- rax, rdi <- fp[-1]
ParallelMove fp[-4] <- rbx
StoreField(v4 . this = v2, NoStoreBarrier)
ParallelMove rsi <- fp[-2]
StoreField(v4 . listener = v3, NoStoreBarrier)
v71 <- LoadField(v2 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<=, v71, v77 T{_Smi}) T{bool} goto (3, 4)
B3
v17 <- LoadField(v2 . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- rbx, rdx <- C, rcx <- C, fp[-3] <- rbx
t2 <- AssertAssignable:24(v17, v18, '', instantiator_type_args(v0), function_type_args(v0)) T{_FutureListener?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-3], rsi <- fp[-2]
StoreField(v3 T{_FutureListener} . _nextListener@4048458 = v17 T{_FutureListener?})
ParallelMove rax <- rsi, rdi <- fp[-1]
StoreField(v2 T{_Future} . _resultOrListeners@4048458 = v3 T{_FutureListener})
ParallelMove  goto:78 B10
B4
ParallelMove rcx <- C
ParallelMove rax <- rax
v97 <- IntConverter(int64->uint32[tr], v71 T{int}) uint32
ParallelMove rax <- rax
v50 <- BinaryUint32Op(& [tr], v97 T{int}, v101 T{_Smi}) [0, 4] uint32
ParallelMove rax <- rax
v98 <- IntConverter(uint32->int64, v50) int64
Branch if EqualityCompare(v98 T{_Smi} != v90 T{_Smi}) T{bool} goto (5, 8)
B5
v25 <- LoadField(v2 T{_Future} . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- r8, rdx <- C, rcx <- C, fp[-3] <- r8
t0 <- AssertAssignable:12(v25, v28 T{_Type}, '', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) T{_Future}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-3]
v33 <- LoadField(v25 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v99 <- IntConverter(int64->uint32[tr], v33) uint32
ParallelMove rcx <- C
ParallelMove rax <- rax
v37 <- BinaryUint32Op(& [tr], v99 T{int}, v102 T{_Smi}) [0, 24] uint32
ParallelMove rax <- rax
v100 <- IntConverter(uint32->int64, v37) int64
Branch if EqualityCompare(v100 T{_Smi} == v90 T{_Smi}) T{bool} goto (6, 7)
B6
ParallelMove rdi <- rdi, rsi <- fp[-2]
StaticCall:54( _addListener@4048458<0> v25 T{_Future}, v3 T{_FutureListener}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:56(v0)
B7
ParallelMove rdi <- fp[-1], rsi <- rdi
StaticCall:60( _cloneResult@4048458<0> v2, v25 T{_Future}, using unchecked entrypoint)
ParallelMove  goto:66 B9
B8
B9
v9 <- LoadField(v2 . _zone@4048458 {final}) T{_RootZone}
ParallelMove rbx <- C, rdx <- fp[-4], fp[-2] <- rdi
v11 <- AllocateClosure:72(v10, v4) T{_Closure}
ParallelMove rdi <- fp[-2], rsi <- rax
StaticCall:74( scheduleMicrotask<0> v9, v11, using unchecked entrypoint)
ParallelMove  goto:80 B10
B10
ParallelMove rax <- C
DartReturn:82(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, rbx <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- C, rsi <- C, rdx <- rdx, rbx <- rbx
StaticCall:10( _rootScheduleMicrotask@4048458<0> v0, v0, v2, v3)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdx, fp[-1] <- rdx, fp[-2] <- rbx
CheckStackOverflow:8(stack=0, loop=0)
Branch if StrictCompare:10(!==, v6, v4) goto (3, 7)
B3
ParallelMove rdi <- C, rsi <- rax
v8 <- StaticCall:16( inSameErrorZone<0> v6, v4, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax
v9 <- BooleanNegate(v8 T{bool}) T{bool}
Branch if StrictCompare:22(===, v9 T{bool}, v10) goto (4, 5)
BoolTest
B4
ParallelMove rcx <- fp[-1], rax <- fp[-2]
v34 <- AllocateContext:10(num_variables=2) T{Context}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v34 . this = v4 T{_RootZone}, NoStoreBarrier)
ParallelMove rdx <- fp[-2]
StoreField(v34 . f = v5 T{_Closure}, NoStoreBarrier)
ParallelMove rbx <- C, rdx <- rcx
v36 <- AllocateClosure:12(v37 T{Function}, v34) T{_Closure}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:36 B6
B5
ParallelMove rax <- fp[-1], rdx <- fp[-2]
v23 <- AllocateContext:24(num_variables=2) T{Context}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v23 . this = v4 T{_RootZone}, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreField(v23 . f = v5 T{_Closure}, NoStoreBarrier)
ParallelMove rbx <- C, rdx <- rcx
v25 <- AllocateClosure:26(v26 T{Function}, v23) T{_Closure}
ParallelMove rcx <- rax, rax <- C
StoreField(v25 . Closure.function_type_arguments = v11 T{TypeArguments}, NoStoreBarrier)
ParallelMove rax <- rcx goto:38 B6
B6
ParallelMove rdi <- rax goto:44 B8
B7
ParallelMove rax <- rbx
ParallelMove rdi <- rax goto:46 B8
B8
ParallelMove rdi <- rdi
StaticCall:48( _scheduleAsyncCallback@4048458<0> v7)
ParallelMove rax <- C
DartReturn:50(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v64 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
Branch if StrictCompare:12(===, v4, v64) goto (3, 5)
B3
ParallelMove rdi <- fp[2]
StaticCall:48( _scheduleAsyncCallback@4048458<0> v2 T{_Closure})
ParallelMove rax <- C
DartReturn:20(v0)
B5
ParallelMove rdi <- C, rsi <- rax
v10 <- StaticCall:32( inSameErrorZone<0> v4, v64, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:36(===, v10 T{bool}, v11) goto (6, 7)
BoolTest
B6
ParallelMove rdi <- C, rsi <- C, rdx <- fp[-1], rbx <- fp[2]
StaticCall:46( _rootScheduleMicrotask@4048458<0> v0, v0, v64, v2 T{_Closure})
ParallelMove rax <- C
DartReturn:48(v0)
B7
ParallelMove rax <- fp[2]
v67 <- LoadStaticField:4(_current@4048458) T{_RootZone}
ParallelMove fp[-1] <- rdi
v26 <- AllocateContext:10(num_variables=2) T{Context}
ParallelMove rax <- rax, rdi <- fp[-1]
StoreField(v26 . this = v67 T{_RootZone}, NoStoreBarrier)
ParallelMove rcx <- fp[2]
StoreField(v26 . f = v2 T{_Closure}, NoStoreBarrier)
ParallelMove rbx <- C, rdx <- rax
v28 <- AllocateClosure:12(v29 T{Function}, v26) T{_Closure}
ParallelMove rdi <- fp[-1], rsi <- rax
StaticCall:66( scheduleMicrotask<0> v67, v28 T{_Closure}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:68(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
StaticCall:10( _scheduleImmediate@4048458<0> )
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v2 <- LoadStaticField(_closure@4048458) T{_Closure?}
Branch if StrictCompare:10(===, v2, v0) goto (3, 4)
B4
MoveArgument(sp[1] <- v2 T{_Closure})
MoveArgument(sp[0] <- v3)
ParallelMove rax <- rax
v4 <- ClosureCall:26( closure=v2 T{_Closure}<0>, v2 T{_Closure}, v3) T{*?}
ParallelMove rax <- C
DartReturn:28(v0)
B3
v5 <- AllocateObject:16(cls=UnsupportedError, <not-aliased>) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v5 T{UnsupportedError} . message = v6 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:20(v5)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v4 <- StaticCall:10( _startMicrotaskLoop@4048458<0> ) T{void?}
ParallelMove rax <- rax
DartReturn:12(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- C
StoreStaticField(_isInCallbackLoop@4048458, v8)
ParallelMove  goto:12 B3
B3
StaticCall:16( _microtaskLoop@4048458<0> )
ParallelMove  goto:20 B5
B5
ParallelMove rax <- C
StoreStaticField(_lastPriorityCallback@4048458, v0)
ParallelMove rax <- C
StoreStaticField(_isInCallbackLoop@4048458, v6)
v9 <- LoadStaticField(_nextCallback@4048458) T{_AsyncCallbackEntry?}
Branch if StrictCompare:22(!==, v9, v0) goto (6, 7)
B6
StaticCall:28( _scheduleImmediate@4048458<0> )
ParallelMove  goto:34 B4
B7
B4
ParallelMove rax <- C
DartReturn:60(v0)
B9
ParallelMove rax <- C, rcx <- rax, rbx <- rdx, fp[-5] <- rax, fp[-6] <- rdx
StoreStaticField(_lastPriorityCallback@4048458, v0)
ParallelMove rax <- C
StoreStaticField(_isInCallbackLoop@4048458, v6)
v7 <- LoadStaticField(_nextCallback@4048458) T{_AsyncCallbackEntry?}
Branch if StrictCompare:42(!==, v7, v0) goto (10, 11)
B10
StaticCall:48( _scheduleImmediate@4048458<0> )
ParallelMove  goto:54 B12
B11
B12
ParallelMove rax <- fp[-5], rbx <- fp[-6]
ReThrow:58(v4, v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v2 <- LoadStaticField(_nextCallback@4048458) T{_AsyncCallbackEntry?}
ParallelMove rcx <- rax goto:42 B8
B8
  Loop 0
CheckStackOverflow:46(stack=0, loop=1)
Branch if StrictCompare:10(!==, v3, v0) goto (3, 4)
B3
  Loop 0
ParallelMove rax <- C
StoreStaticField(_lastPriorityCallback@4048458, v0)
v4 <- LoadField(v3 T{_AsyncCallbackEntry} . next) T{_AsyncCallbackEntry?}
ParallelMove rax <- rdx
StoreStaticField(_nextCallback@4048458, v4)
Branch if StrictCompare:20(===, v4, v0) goto (5, 6)
B5
  Loop 0
ParallelMove rax <- C
StoreStaticField(_lastCallback@4048458, v0)
ParallelMove  goto:30 B7
B6
B7
  Loop 0
v5 <- LoadField(v3 T{_AsyncCallbackEntry} . callback {final}) T{(dynamic) => void}
MoveArgument(sp[0] <- v5)
ParallelMove rax <- rax
v6 <- ClosureCall:38( closure=v5<0>, v5) T{*?}
v7 <- LoadStaticField(_nextCallback@4048458) T{_AsyncCallbackEntry?}
ParallelMove rcx <- rcx goto:44 B8
B4
ParallelMove rax <- C
DartReturn:48(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- sp[1]
StoreStaticField(_closure@4048458, v2)
ParallelMove rax <- C
DartReturn:10(v0)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- AllocateObject:10(cls=_AsyncCallbackEntry) T{_AsyncCallbackEntry}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v3 T{_AsyncCallbackEntry} . callback = v2 T{_Closure}, NoStoreBarrier)
v4 <- LoadStaticField(_lastCallback@4048458) T{_AsyncCallbackEntry?}
Branch if StrictCompare:14(===, v4, v0) goto (3, 7)
B3
ParallelMove rax <- rcx
StoreStaticField(_lastCallback@4048458, v3)
ParallelMove rax <- rcx
StoreStaticField(_nextCallback@4048458, v3)
v5 <- LoadStaticField(_isInCallbackLoop@4048458) T{bool}
Branch if StrictCompare:22(!==, v5 T{bool}, v6) goto (4, 5)
BoolTest
B4
StaticCall:28( _scheduleImmediate@4048458<0> )
ParallelMove  goto:34 B6
B5
B6
B7
ParallelMove rax <- rcx
StoreField(v4 T{_AsyncCallbackEntry} . next = v3 T{_AsyncCallbackEntry})
ParallelMove rax <- rcx
StoreStaticField(_lastCallback@4048458, v3)
ParallelMove  goto:46 B8
B8
ParallelMove rax <- C
DartReturn:48(v0)
CheckStackOverflowSlowPath
B0
B1
Branch if StrictCompare:12(===, v2, v3) goto (5, 4)
B5
ParallelMove rax <- C goto:28 B3
B4
v6 <- StrictCompare:22(===, v2 T{_RootZone}, v3 T{_RootZone}) T{bool}
ParallelMove rax <- rcx goto:24 B3
B3
ParallelMove rax <- rax
DartReturn:30(v7)
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . Closure.function_type_arguments {final}) T{TypeArguments?}
v5 <- LoadField(v3 . this) T{_RootZone}
v6 <- LoadField(v3 . f) T{(dynamic) => Y0}
MoveArgument(sp[2] <- v4)
MoveArgument(sp[1] <- v5)
MoveArgument(sp[0] <- v6)
v7 <- StaticCall:10( run<1> v4, v5, v6, using unchecked entrypoint) T{Y0?}
ParallelMove rax <- rax
DartReturn:12(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v5 <- LoadField(v4 . ArgumentsDescriptor.type_args_len {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare:4(===, v5, v6) goto (2, 3)
B2
ParallelMove rax <- C goto:14 B5
B3
v7 <- LoadField(v4 . ArgumentsDescriptor.size {final}) [0, 4611686018427387903] T{_Smi}
v8 <- LoadIndexedUnsafe(rbp[v7 + 16]) T{TypeArguments?}
ParallelMove rax <- rcx goto:16 B5
B5
ParallelMove fp[-1] <- rax
CheckStackOverflow:22(stack=0, loop=0)
v16 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rax <- rax
Branch if StrictCompare:26(===, v16, v11) goto (6, 7)
B6
MoveArgument(sp[0] <- v3)
ParallelMove rax <- fp[2]
v13 <- ClosureCall:34( closure=v3<0>, v3) T{*?}
ParallelMove rax <- rax
DartReturn:36(v13)
B7
MoveArgument(sp[2] <- v9)
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v3)
v12 <- StaticCall:40( _rootRun@4048458<1> v9, v2, v3) T{Y0?}
ParallelMove rax <- rax
DartReturn:42(v12)
CheckStackOverflowSlowPath
B0
B5
Enter frame
PrologueOffset = 0
CheckStackOverflow:22(stack=0, loop=0)
v39 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rcx <- rax, rax <- fp[3]
ParallelMove fp[-9] <- rcx
Branch if StrictCompare:26(===, v39, v12) goto (6, 7)
B6
MoveArgument(sp[0] <- v13)
ParallelMove rax <- fp[2]
v23 <- ClosureCall:34( closure=v13<0>, v13) T{*?}
ParallelMove rax <- rax
DartReturn:36(v23)
B7
ParallelMove rax <- rax
StoreStaticField(_current@4048458, v12 T{_RootZone})
ParallelMove  goto:44 B8
B8
MoveArgument(sp[0] <- v13)
ParallelMove rax <- fp[2]
v22 <- ClosureCall:50( closure=v13<0>, v13) T{*?}
ParallelMove rcx <- rax
ParallelMove  goto:54 B10
B10
ParallelMove rax <- fp[-9]
StoreStaticField(_current@4048458, v39 T{_RootZone})
ParallelMove rax <- rcx
DartReturn:58(v22)
B11
ParallelMove rax <- fp[-8], rcx <- rax, rbx <- rdx
StoreStaticField(_current@4048458, v11 T{_RootZone})
ParallelMove rax <- rcx, rbx <- rbx
ReThrow:64(v9, v10)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rdx <- C, rcx <- C
v4 <- LoadField(v3 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v30 <- IntConverter(int64->uint32[tr], v4) uint32
ParallelMove rbx <- rbx
v6 <- BinaryUint32Op(& [tr], v30 T{int}, v34 T{_Smi}) [0, 30] uint32
v7 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v32 <- IntConverter(int64->uint32[tr], v7) uint32
ParallelMove rdx <- rdx
v9 <- BinaryUint32Op(& [tr], v32 T{int}, v35 T{_Smi}) [0, 1] uint32
ParallelMove rbx <- rbx
v31 <- IntConverter(uint32->int64, v6) int64
ParallelMove rdx <- rdx
v33 <- IntConverter(uint32->int64, v9) int64
ParallelMove rbx <- rbx
v10 <- BinaryInt64Op(| [tr], v31 T{_Smi}, v33 T{_Smi}) [0, 31] int64
StoreField(v2 T{_Future} . _state@4048458 = v10 T{int} <int64>)
v11 <- LoadField(v3 . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- rax
StoreField(v2 T{_Future} . _resultOrListeners@4048458 = v11 T{*?})
ParallelMove rax <- C
DartReturn:26(v0)
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v3 . this) T{_Future}
v5 <- LoadField(v3 . listeners) T{_FutureListener?}
ParallelMove rdi <- rdi, rsi <- rsi
StaticCall:10( _propagateToListeners@4048458<0> v4, v5)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- AllocateContext:10(num_variables=2) T{Context}
ParallelMove rbx <- rax, rdi <- fp[-1]
ParallelMove fp[-4] <- rbx
StoreField(v4 . this = v2, NoStoreBarrier)
ParallelMove rsi <- fp[-2]
StoreField(v4 . listeners = v3, NoStoreBarrier)
Branch if StrictCompare:12(===, v3 T{_FutureListener?}, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v0)
B4
v87 <- LoadField(v2 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<=, v87, v93 T{_Smi}) T{bool} goto (5, 12)
B5
v21 <- LoadField(v2 . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- rbx, rdx <- C, rcx <- C, fp[-3] <- rbx
t0 <- AssertAssignable:34(v21, v22, '', instantiator_type_args(v0), function_type_args(v0)) T{_FutureListener?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-2], rdi <- fp[-1]
StoreField(v2 T{_Future} . _resultOrListeners@4048458 = v3 T{_FutureListener})
ParallelMove rax <- fp[-3]
Branch if StrictCompare:38(!==, v21 T{_FutureListener?}, v0) goto (6, 10)
B6
ParallelMove rsi <- fp[-2]
v28 <- LoadField(v3 T{_FutureListener} . _nextListener@4048458) T{_FutureListener?}
ParallelMove rdx <- rsi, rcx <- rcx goto:62 B8
B8
  Loop 0
CheckStackOverflow:60(stack=0, loop=1)
Branch if StrictCompare:48(!==, v30, v0) goto (7, 9)
B7
  Loop 0
v31 <- LoadField(v30 T{_FutureListener} . _nextListener@4048458) T{_FutureListener?}
ParallelMove rdx <- rcx, rcx <- rdx goto:58 B8
B9
ParallelMove rax <- rax
StoreField(v29 T{_FutureListener} . _nextListener@4048458 = v21 T{_FutureListener})
ParallelMove  goto:72 B11
B10
B11
B12
ParallelMove rcx <- C
ParallelMove rax <- rax
v161 <- IntConverter(int64->uint32[tr], v87 T{int}) uint32
ParallelMove rax <- rax
v66 <- BinaryUint32Op(& [tr], v161 T{int}, v165 T{_Smi}) [0, 4] uint32
ParallelMove rax <- rax
v162 <- IntConverter(uint32->int64, v66) int64
Branch if EqualityCompare(v162 T{_Smi} != v125 T{_Smi}) T{bool} goto (13, 16)
B13
v41 <- LoadField(v2 T{_Future} . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- r8, rdx <- C, rcx <- C, fp[-3] <- r8
t0 <- AssertAssignable:12(v41, v44 T{_Type}, '', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) T{_Future}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-3]
v49 <- LoadField(v41 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v163 <- IntConverter(int64->uint32[tr], v49) uint32
ParallelMove rcx <- C
ParallelMove rax <- rax
v53 <- BinaryUint32Op(& [tr], v163 T{int}, v166 T{_Smi}) [0, 24] uint32
ParallelMove rax <- rax
v164 <- IntConverter(uint32->int64, v53) int64
Branch if EqualityCompare(v164 T{_Smi} == v125 T{_Smi}) T{bool} goto (14, 15)
B14
ParallelMove rdi <- rdi, rsi <- fp[-2]
StaticCall:100( _prependListeners@4048458<0> v41 T{_Future}, v3 T{_FutureListener}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:102(v0)
B15
ParallelMove rdi <- fp[-1], rsi <- rdi
StaticCall:106( _cloneResult@4048458<0> v2, v41 T{_Future}, using unchecked entrypoint)
ParallelMove  goto:112 B17
B16
B17
v10 <- LoadField(v4 . listeners) T{_FutureListener?}
ParallelMove rdi <- rax, rsi <- rsi
v11 <- StaticCall:116( _reverseListeners@4048458<0> v2, v10, using unchecked entrypoint, result_type = T{_FutureListener?}) T{_FutureListener?}
ParallelMove rax <- rax, rdx <- fp[-4]
StoreField(v4 . listeners = v11)
ParallelMove rax <- fp[-1]
v12 <- LoadField(v2 . _zone@4048458 {final}) T{_RootZone}
ParallelMove rbx <- C, rdx <- rdx, fp[-2] <- rdi
v14 <- AllocateClosure:120(v13, v4) T{_Closure}
ParallelMove rdi <- fp[-2], rsi <- rax
StaticCall:122( scheduleMicrotask<0> v12, v14, using unchecked entrypoint)
ParallelMove  goto:128 B18
B18
ParallelMove rax <- C
DartReturn:130(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- C, rcx <- rsi goto:26 B4
B4
  Loop 0
CheckStackOverflow:24(stack=0, loop=1)
Branch if StrictCompare:10(!==, v5, v0) goto (3, 5)
B3
  Loop 0
v6 <- LoadField(v5 T{_FutureListener} . _nextListener@4048458) T{_FutureListener?}
ParallelMove rax <- rax
StoreField(v5 T{_FutureListener} . _nextListener@4048458 = v4 T{_FutureListener?})
ParallelMove rax <- rcx, rcx <- rdx goto:22 B4
B5
ParallelMove rax <- rax
DartReturn:30(v4)
CheckStackOverflowSlowPath
PrologueOffset = 67
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- AllocateContext:10(num_variables=1) T{Context}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-3] <- rcx
StoreField(v4 . source = v2, NoStoreBarrier)
ParallelMove rax <- fp[-2], rdi <- rax goto:426 B59
B59
  Loop 1
ParallelMove fp[-1] <- rax, fp[-2] <- rdi
CheckStackOverflow:424(stack=0, loop=1)
v17 <- AllocateContext:18(num_variables=5) T{Context}
ParallelMove rcx <- rax, rax <- fp[-3]
ParallelMove fp[-4] <- rcx
StoreField(v17 . Context.parent = v4, NoStoreBarrier)
ParallelMove rdi <- fp[-2]
v315 <- LoadField(v495 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v574 <- IntConverter(int64->uint32[tr], v315) uint32
ParallelMove rbx <- C
ParallelMove rdx <- rdx
v317 <- BinaryUint32Op(& [tr], v574 T{int}, v594 T{_Smi}) [0, 16] uint32
ParallelMove rdx <- rdx
v575 <- IntConverter(uint32->int64, v317) int64
v319 <- EqualityCompare(v575 T{_Smi} != v480 T{_Smi}) T{bool}
StoreField(v17 . hasError = v319 T{bool}, NoStoreBarrier)
ParallelMove rdx <- fp[-1]
Branch if StrictCompare:22(===, v5, v0) goto (3, 10)
B10
  Loop 1
StoreField(v17 . listener = v5 T{_FutureListener}, NoStoreBarrier)
v22 <- LoadField(v5 T{_FutureListener} . _nextListener@4048458) T{_FutureListener?}
ParallelMove r8 <- rsi, rsi <- rdx goto:96 B12
B12
  Loop 0
  Loop 1
ParallelMove fp[-1] <- r8
CheckStackOverflow:94(stack=0, loop=2)
Branch if StrictCompare:78(!==, v23, v0) goto (11, 13)
B11
  Loop 0
  Loop 1
StoreField(v476 T{_FutureListener} . _nextListener@4048458 = v0 T{Null?})
v109 <- LoadField(v4 . source) T{_Future}
ParallelMove rdi <- rdi, rsi <- rsi
StaticCall:84( _propagateToListeners@4048458<0> v109, v476 T{_FutureListener})
ParallelMove rax <- fp[-1], rdx <- fp[-4]
StoreField(v17 . listener = v23 T{_FutureListener})
ParallelMove rsi <- fp[-1]
v112 <- LoadField(v23 T{_FutureListener} . _nextListener@4048458) T{_FutureListener?}
ParallelMove r8 <- r8, rsi <- rsi, rax <- fp[-3], rcx <- rdx, rbx <- C goto:92 B12
B13
  Loop 1
ParallelMove rcx <- rax, rdx <- rcx
v25 <- LoadField(v4 . source) T{_Future}
v26 <- LoadField(v25 . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- rbx
StoreField(v17 . sourceResult = v26)
v27 <- LoadField(v17 . hasError) T{bool}
StoreField(v17 . listenerHasError = v27)
ParallelMove rax <- rbx
StoreField(v17 . listenerValueOrError = v26 T{*?})
Branch if StrictCompare:104(===, v27 T{bool}, v16 T{bool}) goto (17, 14)
BoolTest
B17
  Loop 1
ParallelMove rax <- C, r9 <- C goto:132 B16
B14
  Loop 1
ParallelMove rax <- C
v300 <- LoadField(v476 T{_FutureListener} . state {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- rbx
v577 <- IntConverter(int64->uint32[tr], v300) uint32
ParallelMove r9 <- r9
v302 <- BinaryUint32Op(& [tr], v577 T{int}, v595 T{_Smi}) [0, 1] uint32
ParallelMove r9 <- r9
v578 <- IntConverter(uint32->int64, v302) int64
Branch if EqualityCompare(v578 T{_Smi} != v480 T{_Smi}) T{bool} goto (18, 15)
B18
  Loop 1
ParallelMove r9 <- C goto:136 B16
B15
  Loop 1
ParallelMove r9 <- C
ParallelMove rbx <- rbx
v576 <- IntConverter(int64->uint32[tr], v300 T{int}) uint32
ParallelMove rbx <- rbx
v293 <- BinaryUint32Op(& [tr], v576 T{int}, v596 T{_Smi}) [0, 15] uint32
ParallelMove rbx <- rbx
v579 <- IntConverter(uint32->int64, v293) int64
Branch if EqualityCompare(v579 T{_Smi} == v483 T{_Smi}) T{bool} goto (19, 54)
B19
B16
  Loop 1
v285 <- LoadField(v476 T{_FutureListener} . result {final}) T{_Future}
v286 <- LoadField(v285 . _zone@4048458 {final}) T{_RootZone}
ParallelMove fp[-1] <- rsi
Branch if StrictCompare:146(===, v27 T{bool}, v16 T{bool}) goto (20, 23)
BoolTest
B20
  Loop 1
v97 <- LoadField(v25 T{_Future} . _zone@4048458 {final}) T{_RootZone}
Branch if StrictCompare:12(===, v97 T{_RootZone}, v286 T{_RootZone}) goto (122, 95)
B122
B95
  Loop 1
Branch if StrictCompare:22(!==, v97, v286) T{bool} goto (21, 120)
B120
B24
B21
ParallelMove rdi <- rdi
v101 <- StaticCall:164( get:_error@4048458<0> v25 T{_Future}, result_type = T{AsyncError}) T{AsyncError}
ParallelMove rax <- rax, rcx <- fp[-3]
v103 <- LoadField(v4 . source) T{_Future}
v104 <- LoadField(v103 . _zone@4048458 {final}) T{_RootZone}
v105 <- LoadField(v101 . error {final}) T{Object}
v106 <- LoadField(v101 . stackTrace {final}) T{StackTrace}
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx
StaticCall:172( handleUncaughtError<0> v104, v105, v106, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:174(v0)
B23
B22
  Loop 1
v269 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rcx <- rax, rax <- fp[-1]
Branch if StrictCompare:188(!==, v269, v286 T{_RootZone}) goto (25, 26)
B25
  Loop 1
ParallelMove rax <- rax
StoreStaticField(_current@4048458, v286 T{_RootZone})
ParallelMove rcx <- rcx goto:200 B27
B26
  Loop 1
ParallelMove rcx <- C goto:202 B27
B27
  Loop 1
ParallelMove rbx <- C, rdx <- rax, fp[-1] <- rcx
v65 <- AllocateClosure:204(v64, v17) T{_Closure}
ParallelMove rbx <- C, rdx <- fp[-4], rax <- rax
ParallelMove fp[-5] <- rax
v67 <- AllocateClosure:206(v66, v17) T{_Closure}
ParallelMove rbx <- C, rdx <- fp[-4], rax <- rax
ParallelMove fp[-6] <- rax
v69 <- AllocateClosure:208(v68, v17) T{_Closure}
ParallelMove rax <- rax, rcx <- fp[-4]
v70 <- LoadField(v17 . listener) T{_FutureListener}
v256 <- LoadField(v70 T{_FutureListener} . state {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rbx
v582 <- IntConverter(int64->uint32[tr], v256) uint32
ParallelMove rsi <- C
ParallelMove rdx <- rdx
v258 <- BinaryUint32Op(& [tr], v582 T{int}, v596 T{_Smi}) [0, 15] uint32
ParallelMove rdx <- rdx
v583 <- IntConverter(uint32->int64, v258) int64
Branch if EqualityCompare(v583 T{_Smi} == v483 T{_Smi}) T{bool} goto (28, 29)
B28
  Loop 1
MoveArgument(sp[0] <- v65)
ParallelMove rax <- fp[-5]
ClosureCall:220( closure=v65<0>, v65)
ParallelMove  goto:282 B39
B29
  Loop 1
v72 <- LoadField(v17 . hasError) T{bool}
Branch if StrictCompare:226(!==, v72 T{bool}, v16 T{bool}) goto (30, 34)
BoolTest
B30
  Loop 1
ParallelMove rdx <- C
ParallelMove rax <- rbx
v581 <- IntConverter(int64->uint32[tr], v256 T{int}) uint32
ParallelMove rax <- rax
v248 <- BinaryUint32Op(& [tr], v581 T{int}, v595 T{_Smi}) [0, 1] uint32
ParallelMove rax <- rax
v584 <- IntConverter(uint32->int64, v248) int64
Branch if EqualityCompare(v584 T{_Smi} != v480 T{_Smi}) T{bool} goto (31, 32)
B31
  Loop 1
MoveArgument(sp[0] <- v67)
ParallelMove rax <- fp[-6]
ClosureCall:242( closure=v67<0>, v67)
ParallelMove  goto:248 B33
B32
B33
B34
  Loop 1
ParallelMove rcx <- C
ParallelMove rbx <- rbx
v580 <- IntConverter(int64->uint32[tr], v256 T{int}) uint32
ParallelMove rbx <- rbx
v237 <- BinaryUint32Op(& [tr], v580 T{int}, v597 T{_Smi}) [0, 2] uint32
ParallelMove rbx <- rbx
v585 <- IntConverter(uint32->int64, v237) int64
Branch if EqualityCompare(v585 T{_Smi} != v480 T{_Smi}) T{bool} goto (35, 36)
B35
  Loop 1
MoveArgument(sp[0] <- v69)
ParallelMove rax <- rax
ClosureCall:264( closure=v69<0>, v69)
ParallelMove  goto:270 B37
B36
B37
B38
B39
  Loop 1
Branch if StrictCompare:286(!==, v63, v0) goto (40, 41)
B40
  Loop 1
ParallelMove rax <- rax
StoreStaticField(_current@4048458, v63 T{_RootZone})
ParallelMove  goto:298 B42
B41
B42
  Loop 1
v77 <- LoadField(v17 . listenerValueOrError) T{*?}
ParallelMove fp[-5] <- rsi
v131 <- LoadClassId(v77) [1, 617] int64
Branch if EqualityCompare(v131 == v126) T{bool} goto (43, 52)
B43
  Loop 1
v80 <- LoadField(v17 . listener) T{_FutureListener}
ParallelMove rax <- rsi, rdx <- C, rcx <- C, fp[-1] <- rdi
t1 <- AssertAssignable:310(v77 T{*?}, v78, '', instantiator_type_args(v0), function_type_args(v0)) T{_Future}
AssertAssignable for compile-time type
TTSCall
ParallelMove rbx <- fp[-1]
v211 <- LoadField(v80 T{_FutureListener} . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- fp[-5], rdx <- rsi, rcx <- C, fp[-6] <- rsi
v213 <- InstanceOf:12(v77 T{_Future} IS Future<X1>, instantiator_type_args(v211), function_type_args(v0 T{Null?})) T{bool}
InlineInstanceof
UninstantiatedTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:16(===, v213, v16 T{bool}) goto (125, 79)
BoolTest
B125
B79
  Loop 1
ParallelMove rax <- fp[-5], rdx <- fp[-6], rcx <- C
v217 <- InstanceOf:22(v77 T{_Future} IS X1, instantiator_type_args(v211 T{TypeArguments}), function_type_args(v0 T{Null?})) T{bool}
InlineInstanceof
UninstantiatedTypeTest
BoolTest
ParallelMove rax <- rax
ParallelMove rax <- rax
v218 <- BooleanNegate(v217) T{bool}
Branch if StrictCompare:316(===, v218, v16) goto (123, 53)
BoolTest
B123
B45
  Loop 1
v87 <- LoadField(v80 T{_FutureListener} . result {final}) T{_Future}
ParallelMove fp[-6] <- rdi
v194 <- LoadField(v77 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v586 <- IntConverter(int64->uint32[tr], v194) uint32
ParallelMove rax <- rax
v198 <- BinaryUint32Op(& [tr], v586 T{int}, v598 T{_Smi}) [0, 24] uint32
ParallelMove rax <- rax
v587 <- IntConverter(uint32->int64, v198) int64
Branch if EqualityCompare(v587 T{_Smi} != v480 T{_Smi}) T{bool} goto (46, 50)
B46
  Loop 1
ParallelMove r9 <- C, r8 <- fp[-3]
v171 <- LoadField(v87 T{_Future} . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- r10, rdx <- r9, rcx <- r9, fp[-1] <- r10
t0 <- AssertAssignable:12(v171, v166 T{_Type}, '', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) T{_FutureListener?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- C, rax <- fp[-6]
StoreField(v87 T{_Future} . _resultOrListeners@4048458 = v0 T{Null?})
ParallelMove rdi <- rax, rsi <- fp[-1]
v174 <- StaticCall:16( _reverseListeners@4048458<0> v87 T{_Future}, v171 T{_FutureListener?}, using unchecked entrypoint, result_type = T{_FutureListener?}) T{_FutureListener?}
ParallelMove rdx <- rax, rcx <- fp[-5]
v181 <- LoadField(v77 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v588 <- IntConverter(int64->uint32[tr], v181) uint32
ParallelMove rbx <- C
ParallelMove rax <- rax
v183 <- BinaryUint32Op(& [tr], v588 T{int}, v599 T{_Smi}) [0, 30] uint32
ParallelMove rsi <- fp[-6]
v184 <- LoadField(v87 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi
v590 <- IntConverter(int64->uint32[tr], v184) uint32
ParallelMove r8 <- C
ParallelMove rdi <- rdi
v186 <- BinaryUint32Op(& [tr], v590 T{int}, v595 T{_Smi}) [0, 1] uint32
ParallelMove rax <- rax
v589 <- IntConverter(uint32->int64, v183) int64
ParallelMove rdi <- rdi
v591 <- IntConverter(uint32->int64, v186) int64
ParallelMove rax <- rax
v187 <- BinaryInt64Op(| [tr], v589 T{_Smi}, v591 T{_Smi}) [0, 31] int64
StoreField(v87 T{_Future} . _state@4048458 = v187 T{int} <int64>)
v188 <- LoadField(v77 T{_Future} . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- rax
StoreField(v87 T{_Future} . _resultOrListeners@4048458 = v188 T{*?})
ParallelMove rax <- rcx, rsi <- fp[-3]
StoreField(v4 . source = v77 T{_Future})
ParallelMove rax <- rdx, rdi <- rcx, rbx <- rsi, rdx <- r8 goto:354 B47
B50
ParallelMove rcx <- rbx, rsi <- rdi
ParallelMove rdi <- rcx, rsi <- rsi
StaticCall:358( _chainCoreFutureSync@4048458<0> v77 T{_Future}, v87)
ParallelMove rax <- C
DartReturn:370(v0)
B53
  Loop 1
ParallelMove rsi <- fp[-3], r8 <- C, rbx <- C
ParallelMove  goto:380 B51
B52
  Loop 1
ParallelMove rsi <- fp[-3], r8 <- C, rbx <- C
ParallelMove  goto:376 B51
B51
B54
  Loop 1
ParallelMove rsi <- rcx, r8 <- rax, rbx <- C
ParallelMove  goto:388 B55
B55
  Loop 1
v39 <- LoadField(v17 . listener) T{_FutureListener}
v40 <- LoadField(v39 . result {final}) T{_Future}
ParallelMove fp[-5] <- r10
v162 <- LoadField(v40 T{_Future} . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- r12, rdx <- rdi, rcx <- rdi, fp[-1] <- r12
t0 <- AssertAssignable:12(v162, v166 T{_Type}, '', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) T{_FutureListener?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- C, rax <- fp[-5]
StoreField(v40 T{_Future} . _resultOrListeners@4048458 = v0 T{Null?})
ParallelMove rdi <- rax, rsi <- fp[-1]
v165 <- StaticCall:16( _reverseListeners@4048458<0> v40 T{_Future}, v162 T{_FutureListener?}, using unchecked entrypoint, result_type = T{_FutureListener?}) T{_FutureListener?}
ParallelMove rbx <- rax, rax <- fp[-4]
ParallelMove fp[-6] <- rbx
v42 <- LoadField(v17 . listenerHasError) T{bool}
Branch if StrictCompare:396(!==, v42 T{bool}, v16 T{bool}) goto (56, 57)
BoolTest
B56
  Loop 1
ParallelMove rsi <- fp[-5]
v48 <- LoadField(v17 . listenerValueOrError) T{*?}
ParallelMove fp[-1] <- rdi
v153 <- LoadField(v40 T{_Future} . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rdi, rdx <- rdx, rcx <- C
t0 <- AssertAssignable:10(v48 T{*?}, v156 T{_TypeParameter}, 'value', instantiator_type_args(v153), function_type_args(v0 T{Null?})) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rbx <- fp[-5], rsi <- C
StoreField(v40 T{_Future} . _state@4048458 = v483 T{_Smi} <int64>)
ParallelMove rax <- fp[-1]
StoreField(v40 T{_Future} . _resultOrListeners@4048458 = v48 T{X0?})
ParallelMove rcx <- rbx, rdx <- C goto:412 B58
B57
  Loop 1
ParallelMove rbx <- fp[-5], rsi <- C
v43 <- LoadField(v17 . listenerValueOrError) T{*?}
ParallelMove rax <- rdi, rdx <- C, rcx <- C, fp[-1] <- rdi
t0 <- AssertAssignable:406(v43, v44, '', instantiator_type_args(v0), function_type_args(v0)) T{AsyncError}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[-5]
v140 <- LoadField(v40 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v592 <- IntConverter(int64->uint32[tr], v140) uint32
ParallelMove rdx <- C
ParallelMove rax <- rax
v142 <- BinaryUint32Op(& [tr], v592 T{int}, v595 T{_Smi}) [0, 1] uint32
ParallelMove rax <- rax
v593 <- IntConverter(uint32->int64, v142) int64
ParallelMove rax <- rax
v143 <- BinaryInt64Op(| [tr], v593 T{_Smi}, v479 T{_Smi}) [0, 31] int64
StoreField(v40 T{_Future} . _state@4048458 = v143 T{int} <int64>)
ParallelMove rax <- fp[-1]
StoreField(v40 T{_Future} . _resultOrListeners@4048458 = v43 T{AsyncError})
ParallelMove  goto:414 B58
B58
  Loop 1
ParallelMove rax <- rcx
StoreField(v4 . source = v40)
ParallelMove rax <- fp[-6], rdi <- rcx goto:416 B47
B47
  Loop 1
ParallelMove rax <- rax, rdi <- rdi, rcx <- rbx goto:422 B59
B3
ParallelMove rbx <- rax
Branch if StrictCompare:30(===, v319 T{bool}, v16 T{bool}) goto (4, 7)
BoolTest
B4
ParallelMove rdi <- rdi
v116 <- StaticCall:34( get:_ignoreError@4048458<0> v495 T{_Future}, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:38(!==, v116 T{bool}, v16 T{bool}) goto (5, 8)
BoolTest
B5
ParallelMove rax <- fp[-3]
v118 <- LoadField(v4 . source) T{_Future}
ParallelMove rdi <- rdi
v119 <- StaticCall:46( get:_error@4048458<0> v118, result_type = T{AsyncError}) T{AsyncError}
ParallelMove rcx <- rax, rax <- fp[-3]
v121 <- LoadField(v4 . source) T{_Future}
v122 <- LoadField(v121 . _zone@4048458 {final}) T{_RootZone}
v123 <- LoadField(v119 . error {final}) T{Object}
v124 <- LoadField(v119 . stackTrace {final}) T{StackTrace}
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx
StaticCall:54( handleUncaughtError<0> v122, v123, v124, using unchecked entrypoint)
ParallelMove  goto:68 B9
B8
B7
B6
B9
ParallelMove rax <- C
DartReturn:72(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
t0 <- AssertAssignable:10(v3, v4, 'value', instantiator_type_args(v5), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdx <- fp[-1], rcx <- C
StoreField(v2 T{_Future} . _state@4048458 = v21 T{_Smi} <int64>)
ParallelMove rax <- fp[-2]
StoreField(v2 T{_Future} . _resultOrListeners@4048458 = v3 T{X0?})
ParallelMove rax <- C
DartReturn:16(v0)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- C
ParallelMove fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- rsi, rdx <- rbx, rcx <- rbx, fp[-1] <- rsi
t0 <- AssertAssignable:12(v3, v4, '', instantiator_type_args(v0), function_type_args(v0)) T{_FutureListener?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- C, rdi <- fp[-2]
StoreField(v2 T{_Future} . _resultOrListeners@4048458 = v0 T{Null?})
ParallelMove rdi <- rdi, rsi <- fp[-1]
v6 <- StaticCall:16( _reverseListeners@4048458<0> v2, v3 T{_FutureListener?}, using unchecked entrypoint, result_type = T{_FutureListener?}) T{_FutureListener?}
ParallelMove rax <- rax
DartReturn:18(v6)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rcx <- sp[1]
v3 <- LoadField(v2 . _context@0150898) T{*?}
ParallelMove rax <- rax
DartReturn:4(v3)
B0
B1
ParallelMove rcx <- sp[1]
v3 <- LoadField(v2 . state {final}) [-9223372036854775808, 9223372036854775807] int64
v4 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
PrologueOffset = 21
ParallelMove rax <- rax
DartReturn:4(v4 T{int})
B0
B1
ParallelMove rcx <- C
v3 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v14 <- IntConverter(int64->uint32[tr], v3) uint32
ParallelMove rdx <- rdx
v5 <- BinaryUint32Op(& [tr], v14 T{int}, v16 T{_Smi}) [0, 1] uint32
ParallelMove rdx <- rdx
v15 <- IntConverter(uint32->int64, v5) int64
v7 <- EqualityCompare(v15 T{_Smi} != v12 T{_Smi}) T{bool}
ParallelMove rax <- rax
DartReturn:18(v7 T{bool})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rsi <- rax goto:28 B4
B4
  Loop 0
ParallelMove fp[-3] <- rsi
CheckStackOverflow:26(stack=0, loop=1)
v51 <- LoadField(v4 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
v80 <- IntConverter(int64->uint32[tr], v51) uint32
ParallelMove rcx <- rcx
v53 <- BinaryUint32Op(& [tr], v80 T{int}, v86 T{_Smi}) [0, 4] uint32
ParallelMove rcx <- rcx
v81 <- IntConverter(uint32->int64, v53) int64
Branch if EqualityCompare(v81 T{_Smi} != v71 T{_Smi}) T{bool} goto (3, 5)
B3
  Loop 0
v43 <- LoadField(v4 T{_Future} . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- r8, rdx <- C, rcx <- C, fp[-1] <- r8
t0 <- AssertAssignable:12(v43, v46 T{_Type}, '', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) T{_Future}
AssertAssignable for compile-time type
TTSCall
ParallelMove rsi <- fp[-1], rdi <- fp[-2] goto:24 B4
B5
ParallelMove rcx <- rdi, rbx <- C, rdx <- C
v8 <- LoadField(v3 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi
v82 <- IntConverter(int64->uint32[tr], v8) uint32
ParallelMove rdi <- rdi
v10 <- BinaryUint32Op(& [tr], v82 T{int}, v87 T{_Smi}) [0, 1] uint32
ParallelMove rdi <- rdi
v83 <- IntConverter(uint32->int64, v10) int64
ParallelMove rax <- rax
v11 <- BinaryInt64Op(| [tr], v51 T{int}, v83 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v4 T{_Future} . _state@4048458 = v11 T{int} <int64>)
ParallelMove rax <- rax
v84 <- IntConverter(int64->uint32[tr], v11 T{int}) uint32
ParallelMove rax <- rax
v32 <- BinaryUint32Op(& [tr], v84 T{int}, v88 T{_Smi}) [0, 24] uint32
ParallelMove rax <- rax
v85 <- IntConverter(uint32->int64, v32) int64
Branch if EqualityCompare(v85 T{_Smi} != v71 T{_Smi}) T{bool} goto (6, 7)
B6
ParallelMove rdi <- rcx
v16 <- StaticCall:52( _removeListeners@4048458<0> v3, using unchecked entrypoint, result_type = T{_FutureListener?}) T{_FutureListener?}
ParallelMove rdi <- fp[-2], rsi <- fp[-3], rax <- rax
ParallelMove fp[-1] <- rax
StaticCall:54( _cloneResult@4048458<0> v3, v4, using unchecked entrypoint)
ParallelMove rdi <- fp[-2], rsi <- fp[-1]
StaticCall:56( _propagateToListeners@4048458<0> v3, v16)
ParallelMove  goto:70 B8
B7
ParallelMove rdi <- rcx
v13 <- LoadField(v3 . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- rbx, rdx <- C, rcx <- C, fp[-1] <- rbx
t0 <- AssertAssignable:62(v13, v14, '', instantiator_type_args(v0), function_type_args(v0)) T{_FutureListener?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-2], rsi <- fp[-3]
StaticCall:64( _setChained@4048458<0> v3, v4, using unchecked entrypoint)
ParallelMove rdi <- fp[-3], rsi <- fp[-1]
StaticCall:66( _prependListeners@4048458<0> v4, v13 T{_FutureListener?}, using unchecked entrypoint)
ParallelMove  goto:72 B8
B8
ParallelMove rax <- C
DartReturn:74(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
ParallelMove rcx <- C
ParallelMove rax <- rsi
v5 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v26 <- IntConverter(int64->uint32[tr], v5) uint32
ParallelMove rdx <- rdx
v7 <- BinaryUint32Op(& [tr], v26 T{int}, v28 T{_Smi}) [0, 1] uint32
ParallelMove rdx <- rdx
v27 <- IntConverter(uint32->int64, v7) int64
ParallelMove rdx <- rdx
v8 <- BinaryInt64Op(| [tr], v27 T{_Smi}, v24 T{_Smi}) [0, 7] int64
StoreField(v2 T{_Future} . _state@4048458 = v8 T{int} <int64>)
ParallelMove rax <- rax
StoreField(v2 T{_Future} . _resultOrListeners@4048458 = v3 T{_Future})
ParallelMove rax <- C
DartReturn:20(v0)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi, rsi <- rdx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi, rsi <- rsi
StaticCall:10( _rootHandleError@4048458<0> v3, v4)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- AllocateContext:10(num_variables=2) T{Context}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v4 . error = v2, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreField(v4 . stackTrace = v3, NoStoreBarrier)
ParallelMove rbx <- C, rdx <- rcx
v6 <- AllocateClosure:12(v5, v4) T{_Closure}
ParallelMove rdi <- rax
StaticCall:14( _schedulePriorityAsyncCallback@4048458<0> v6)
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadStaticField(_nextCallback@4048458) T{_AsyncCallbackEntry?}
ParallelMove fp[-1] <- rax
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rdi <- rdi
StaticCall:16( _scheduleAsyncCallback@4048458<0> v2)
v8 <- LoadStaticField(_lastCallback@4048458) T{_AsyncCallbackEntry?}
ParallelMove rax <- rax
StoreStaticField(_lastPriorityCallback@4048458, v8)
ParallelMove rax <- C
DartReturn:18(v0)
B4
v4 <- AllocateObject:22(cls=_AsyncCallbackEntry) T{_AsyncCallbackEntry}
ParallelMove rdx <- rax, rcx <- fp[-2]
StoreField(v4 T{_AsyncCallbackEntry} . callback = v2 T{_Closure}, NoStoreBarrier)
v5 <- LoadStaticField(_lastPriorityCallback@4048458) T{_AsyncCallbackEntry?}
Branch if StrictCompare:26(===, v5, v0) goto (5, 6)
B5
ParallelMove rbx <- fp[-1]
StoreField(v4 T{_AsyncCallbackEntry} . next = v3 T{_AsyncCallbackEntry}, NoStoreBarrier)
ParallelMove rax <- rdx
StoreStaticField(_lastPriorityCallback@4048458, v4)
ParallelMove rax <- rdx
StoreStaticField(_nextCallback@4048458, v4)
ParallelMove  goto:58 B10
B6
v6 <- LoadField(v5 T{_AsyncCallbackEntry} . next) T{_AsyncCallbackEntry?}
StoreField(v4 T{_AsyncCallbackEntry} . next = v6 T{_AsyncCallbackEntry?}, NoStoreBarrier)
ParallelMove rax <- rdx
StoreField(v5 T{_AsyncCallbackEntry} . next = v4 T{_AsyncCallbackEntry})
ParallelMove rax <- rdx
StoreStaticField(_lastPriorityCallback@4048458, v4)
Branch if StrictCompare:42(===, v6, v0) goto (7, 8)
B7
ParallelMove rax <- rdx
StoreStaticField(_lastCallback@4048458, v4)
ParallelMove  goto:52 B9
B8
B9
B10
ParallelMove rax <- C
DartReturn:62(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v3 . error) T{Object}
v5 <- LoadField(v3 . stackTrace) T{StackTrace}
ParallelMove rdi <- rdi, rsi <- rsi
v6 <- StaticCall:10( throwWithStackTrace<0> v4, v5) T{Never}
v7 <- AllocateObject:12(cls=ReachabilityError, <not-aliased>) T{ReachabilityError}
ParallelMove rcx <- rax, rax <- C
StoreField(v7 T{ReachabilityError} . _message@9040228 = v13 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v7)
CheckStackOverflowSlowPath
B0
B18
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v3)
v6 <- StaticCall:14( _throw@0150898<0> v2, v3) T{Never}
v7 <- AllocateObject:16(cls=ReachabilityError) T{ReachabilityError}
ParallelMove rcx <- rax, rax <- C
StoreField(v7 T{ReachabilityError} . _message@9040228 = v36 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:20(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(Error_throwWithStackTrace) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{Never}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{Never})
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- rbx, rdx <- C, rcx <- C, fp[-1] <- rbx
t0 <- AssertAssignable:12(v3, v4, '', instantiator_type_args(v0), function_type_args(v0)) T{AsyncError}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:14(v3 T{AsyncError})
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v28 <- LoadField(v27 . Closure.context {final}) T{*}
ParallelMove fp[-10] <- rbx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove  goto:12 B3
B3
v29 <- LoadField(v28 . Context.parent {final}) T{Context?}
v30 <- LoadField(v29 . source) T{_Future}
ParallelMove fp[-9] <- rsi
v85 <- LoadField(v30 T{_Future} . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- rdi, rdx <- C, rcx <- C, fp[-8] <- rdi
t0 <- AssertAssignable:12(v85, v73 T{_Type}, '', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) T{AsyncError}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-10]
v32 <- LoadField(v28 . listener) T{_FutureListener}
ParallelMove rdi <- rdi, rsi <- fp[-8]
v33 <- StaticCall:18( matchesErrorTest<0> v32, v85 T{AsyncError}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:22(===, v33 T{bool}, v15) goto (5, 8)
BoolTest
B5
ParallelMove rax <- fp[-10]
v50 <- LoadField(v28 . listener) T{_FutureListener}
ParallelMove rdi <- rdi
v51 <- StaticCall:26( get:hasErrorCallback<0> v50, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:30(===, v51 T{bool}, v15) goto (6, 9)
BoolTest
B6
ParallelMove rax <- fp[-10]
v52 <- LoadField(v28 . listener) T{_FutureListener}
ParallelMove rdi <- rdi, rsi <- fp[-8]
v53 <- StaticCall:38( handleError<0> v52, v85 T{AsyncError}, using unchecked entrypoint) T{FutureOr<X1>?}
ParallelMove rax <- rax, rcx <- fp[-10]
StoreField(v28 . listenerValueOrError = v53)
ParallelMove rax <- C
StoreField(v28 . listenerHasError = v54)
ParallelMove  goto:52 B10
B9
B8
B7
B10
B11
ParallelMove rdi <- fp[-2], rsi <- rax, rbx <- rdx, fp[-10] <- rax, fp[-11] <- rdx
v10 <- LoadField(v4 . Context.parent {final}) T{Context?}
v11 <- LoadField(v10 . source) T{_Future}
ParallelMove fp[-9] <- r8
v78 <- LoadField(v11 T{_Future} . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- r9, rdx <- C, rcx <- C, fp[-8] <- r9
t0 <- AssertAssignable:12(v78, v73 T{_Type}, '', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) T{AsyncError}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-8]
v13 <- LoadField(v78 T{AsyncError} . error {final}) T{Object}
ParallelMove rax <- rcx, rcx <- fp[-10]
Branch if StrictCompare:64(===, v13, v5, with number check) goto (12, 31)
B12
ParallelMove rbx <- fp[-2], rax <- fp[-9]
v70 <- LoadField(v11 T{_Future} . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- rsi, rdx <- C, rcx <- C, fp[-8] <- rsi
t0 <- AssertAssignable:12(v70, v73 T{_Type}, '', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) T{AsyncError}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-8], rcx <- fp[-2]
StoreField(v4 . listenerValueOrError = v70 T{AsyncError})
ParallelMove  goto:80 B14
B31
ParallelMove rcx <- fp[-2], rdx <- fp[-10], rax <- fp[-11]
v14 <- AllocateObject:74(cls=AsyncError) T{AsyncError}
ParallelMove rax <- rax, rcx <- fp[-10]
StoreField(v14 T{AsyncError} . error = v5 T{Y0}, NoStoreBarrier)
ParallelMove rcx <- fp[-11]
StoreField(v14 T{AsyncError} . stackTrace = v6 T{StackTrace?}, NoStoreBarrier)
ParallelMove rax <- rax, rcx <- fp[-2]
StoreField(v4 . listenerValueOrError = v14)
ParallelMove  goto:82 B14
B14
StoreField(v4 . listenerHasError = v15)
ParallelMove  goto:84 B4
B4
ParallelMove rax <- C
DartReturn:86(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-12] <- rdi, fp[-13] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v23 <- LoadField(v21 . errorCallback {final}) T{Function??}
ParallelMove rax <- rbx, rdx <- C, rcx <- C, fp[-11] <- rbx
v25 <- InstanceOf:12(v23 IS (dynamic, Object, StackTrace) => dynamic, instantiator_type_args(v0), function_type_args(v0)) T{bool}
InlineInstanceof
FunctionTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:16(===, v25 T{bool}, v14) goto (3, 4)
BoolTest
B3
ParallelMove rax <- fp[-12], rbx <- fp[-13]
v81 <- LoadField(v21 T{_FutureListener} . result {final}) T{_Future}
v82 <- LoadField(v81 . _zone@4048458 {final}) T{_RootZone}
v38 <- LoadField(v22 . error {final}) T{Object}
v39 <- LoadField(v22 . stackTrace {final}) T{StackTrace}
MoveArgument(sp[4] <- v36)
MoveArgument(sp[3] <- v82 T{_RootZone})
MoveArgument(sp[2] <- v23 T{_Closure})
MoveArgument(sp[1] <- v38)
MoveArgument(sp[0] <- v39)
v40 <- StaticCall:28( runBinary<3> v36, v82 T{_RootZone}, v23 T{_Closure}, v38, v39, using unchecked entrypoint) T{Y0?}
ParallelMove rax <- rax
ParallelMove rbx <- rax goto:42 B5
B4
ParallelMove rsi <- fp[-12], rbx <- fp[-13]
v75 <- LoadField(v21 T{_FutureListener} . result {final}) T{_Future}
v76 <- LoadField(v75 . _zone@4048458 {final}) T{_RootZone}
ParallelMove rax <- fp[-11], rdx <- C, rcx <- C, fp[-14] <- rdi
t2 <- AssertAssignable:34(v23, v28, '', instantiator_type_args(v0), function_type_args(v0)) T{_Closure}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-13]
v30 <- LoadField(v22 . error {final}) T{Object}
MoveArgument(sp[3] <- v26)
MoveArgument(sp[2] <- v76 T{_RootZone})
MoveArgument(sp[1] <- v23 T{_Closure})
MoveArgument(sp[0] <- v30)
v31 <- StaticCall:38( runUnary<2> v26, v76 T{_RootZone}, v23 T{_Closure}, v30, using unchecked entrypoint) T{Y0?}
ParallelMove rax <- rax
ParallelMove rbx <- rax goto:44 B5
B5
ParallelMove fp[-13] <- rbx
ParallelMove rsi <- fp[-12] goto:48 B6
B6
v34 <- LoadField(v21 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdi, rcx <- C, fp[-11] <- rdi
t0 <- AssertAssignable:52(v32, v33, '', instantiator_type_args(v34), function_type_args(v0)) T{FutureOr<X1>?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-13]
DartReturn:54(v32 T{FutureOr<X1>?})
B8
ParallelMove rax <- rax, rdx <- C, rcx <- C, rsi <- rax, rbx <- rdx, fp[-11] <- rax, fp[-12] <- rdx
v13 <- InstanceOf:84(v6 IS TypeError, instantiator_type_args(v0), function_type_args(v0)) T{bool}
InlineInstanceof
InstantiatedTypeNoArgumentsTest
ParallelMove rax <- rax
Branch if StrictCompare:86(===, v13, v14) goto (11, 12)
BoolTest
B11
ParallelMove rcx <- fp[-9], rax <- C
v63 <- LoadField(v2 T{_FutureListener} . state {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v134 <- IntConverter(int64->uint32[tr], v63) uint32
ParallelMove rdx <- rdx
v65 <- BinaryUint32Op(& [tr], v134 T{int}, v136 T{_Smi}) [0, 1] uint32
ParallelMove rdx <- rdx
v135 <- IntConverter(uint32->int64, v65) int64
Branch if EqualityCompare(v135 T{_Smi} != v111 T{_Smi}) T{bool} goto (9, 10)
B9
v19 <- AllocateObject:70(cls=ArgumentError, <not-aliased>) T{ArgumentError}
ParallelMove rcx <- rax, rax <- C
StoreField(v19 T{ArgumentError} . message = v20 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v19 T{ArgumentError} . name = v18 T{_OneByteString}, NoStoreBarrier)
ParallelMove rdx <- C
StoreField(v19 T{ArgumentError} . _hasValue@0150898 = v50 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:74(v19)
B10
ParallelMove rax <- C, rdx <- C
v16 <- AllocateObject:78(cls=ArgumentError, <not-aliased>) T{ArgumentError}
ParallelMove rcx <- rax, rax <- C
StoreField(v16 T{ArgumentError} . message = v17 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v16 T{ArgumentError} . name = v18 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v16 T{ArgumentError} . _hasValue@0150898 = v50 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:82(v16)
B12
ParallelMove rax <- fp[-11], rbx <- fp[-12]
ReThrow:94(v6, v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v6 <- LoadField(v5 . ArgumentsDescriptor.type_args_len {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare:4(===, v6, v7) goto (2, 3)
B2
ParallelMove rax <- C goto:14 B5
B3
v8 <- LoadField(v5 . ArgumentsDescriptor.size {final}) [0, 4611686018427387903] T{_Smi}
v9 <- LoadIndexedUnsafe(rbp[v8 + 16]) T{TypeArguments?}
ParallelMove rax <- rcx goto:16 B5
B5
ParallelMove fp[-1] <- rax
CheckStackOverflow:22(stack=0, loop=0)
v17 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rax <- rax
Branch if StrictCompare:26(===, v17, v12) goto (6, 7)
B6
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v4)
ParallelMove rax <- fp[3]
v14 <- ClosureCall:34( closure=v3<0>, v3, v4) T{*?}
ParallelMove rax <- rax
DartReturn:36(v14)
B7
MoveArgument(sp[3] <- v10)
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v4)
v13 <- StaticCall:40( _rootRunUnary@4048458<2> v10, v2, v3, v4) T{Y0?}
ParallelMove rax <- rax
DartReturn:42(v13)
CheckStackOverflowSlowPath
B0
B5
Enter frame
PrologueOffset = 0
CheckStackOverflow:22(stack=0, loop=0)
v41 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rcx <- rax, rax <- fp[4]
ParallelMove fp[-9] <- rcx
Branch if StrictCompare:26(===, v41, v13) goto (6, 7)
B6
MoveArgument(sp[1] <- v14)
MoveArgument(sp[0] <- v15)
ParallelMove rax <- fp[3]
v25 <- ClosureCall:34( closure=v14<0>, v14, v15) T{*?}
ParallelMove rax <- rax
DartReturn:36(v25)
B7
ParallelMove rax <- rax
StoreStaticField(_current@4048458, v13 T{_RootZone})
ParallelMove  goto:44 B8
B8
MoveArgument(sp[1] <- v14)
MoveArgument(sp[0] <- v15)
ParallelMove rax <- fp[3]
v24 <- ClosureCall:50( closure=v14<0>, v14, v15) T{*?}
ParallelMove rcx <- rax
ParallelMove  goto:54 B10
B10
ParallelMove rax <- fp[-9]
StoreStaticField(_current@4048458, v41 T{_RootZone})
ParallelMove rax <- rcx
DartReturn:58(v24)
B11
ParallelMove rax <- fp[-8], rcx <- rax, rbx <- rdx
StoreStaticField(_current@4048458, v12 T{_RootZone})
ParallelMove rax <- rcx, rbx <- rbx
ReThrow:64(v10, v11)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v7 <- LoadField(v6 . ArgumentsDescriptor.type_args_len {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare:4(===, v7, v8) goto (2, 3)
B2
ParallelMove rax <- C goto:14 B5
B3
v9 <- LoadField(v6 . ArgumentsDescriptor.size {final}) [0, 4611686018427387903] T{_Smi}
v10 <- LoadIndexedUnsafe(rbp[v9 + 16]) T{TypeArguments?}
ParallelMove rax <- rcx goto:16 B5
B5
ParallelMove fp[-1] <- rax
CheckStackOverflow:22(stack=0, loop=0)
v18 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rax <- rax
Branch if StrictCompare:26(===, v18, v13) goto (6, 7)
B6
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v5)
ParallelMove rax <- fp[4]
v15 <- ClosureCall:34( closure=v3<0>, v3, v4, v5) T{*?}
ParallelMove rax <- rax
DartReturn:36(v15)
B7
MoveArgument(sp[4] <- v11)
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v5)
v14 <- StaticCall:40( _rootRunBinary@4048458<3> v11, v2, v3, v4, v5) T{Y0?}
ParallelMove rax <- rax
DartReturn:42(v14)
CheckStackOverflowSlowPath
B0
B5
Enter frame
PrologueOffset = 0
CheckStackOverflow:22(stack=0, loop=0)
v43 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rcx <- rax, rax <- fp[5]
ParallelMove fp[-9] <- rcx
Branch if StrictCompare:26(===, v43, v14) goto (6, 7)
B6
MoveArgument(sp[2] <- v15)
MoveArgument(sp[1] <- v16)
MoveArgument(sp[0] <- v17)
ParallelMove rax <- fp[4]
v27 <- ClosureCall:34( closure=v15<0>, v15, v16, v17) T{*?}
ParallelMove rax <- rax
DartReturn:36(v27)
B7
ParallelMove rax <- rax
StoreStaticField(_current@4048458, v14 T{_RootZone})
ParallelMove  goto:44 B8
B8
MoveArgument(sp[2] <- v15)
MoveArgument(sp[1] <- v16)
MoveArgument(sp[0] <- v17)
ParallelMove rax <- fp[4]
v26 <- ClosureCall:50( closure=v15<0>, v15, v16, v17) T{*?}
ParallelMove rcx <- rax
ParallelMove  goto:54 B10
B10
ParallelMove rax <- fp[-9]
StoreStaticField(_current@4048458, v43 T{_RootZone})
ParallelMove rax <- rcx
DartReturn:58(v26)
B11
ParallelMove rax <- fp[-8], rcx <- rax, rbx <- rdx
StoreStaticField(_current@4048458, v13 T{_RootZone})
ParallelMove rax <- rcx, rbx <- rbx
ReThrow:64(v11, v12)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
CheckStackOverflow:8(stack=0, loop=0)
v26 <- LoadField(v2 T{_FutureListener} . state {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v44 <- IntConverter(int64->uint32[tr], v26) uint32
ParallelMove rcx <- rcx
v28 <- BinaryUint32Op(& [tr], v44 T{int}, v46 T{_Smi}) [0, 15] uint32
ParallelMove rcx <- rcx
v45 <- IntConverter(uint32->int64, v28) int64
Branch if EqualityCompare(v45 T{_Smi} != v40 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:20(v5)
B4
v15 <- LoadField(v2 T{_FutureListener} . result {final}) T{_Future}
v16 <- LoadField(v15 . _zone@4048458 {final}) T{_RootZone}
v21 <- LoadField(v2 T{_FutureListener} . callback {final}) T{Function??}
v9 <- LoadField(v3 . error {final}) T{Object}
MoveArgument(sp[3] <- v6)
MoveArgument(sp[2] <- v16 T{_RootZone})
MoveArgument(sp[1] <- v21 T{_Closure})
MoveArgument(sp[0] <- v9)
v10 <- StaticCall:30( runUnary<2> v6, v16 T{_RootZone}, v21 T{_Closure}, v9, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
DartReturn:32(v10)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v19 <- LoadField(v18 . Closure.context {final}) T{*}
ParallelMove fp[-7] <- rcx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove  goto:12 B3
B3
v20 <- LoadField(v19 . listener) T{_FutureListener}
v21 <- LoadField(v19 . sourceResult {final}) T{*?}
MoveArgument(sp[1] <- v20)
MoveArgument(sp[0] <- v21)
v22 <- StaticCall:16( handleValue<0> v20, v21, recognized_kind = FutureListenerHandleValue) T{FutureOr<X1>?}
ParallelMove rax <- rax, rcx <- fp[-7]
StoreField(v19 . listenerValueOrError = v22)
ParallelMove  goto:18 B4
B16
ParallelMove fp[-7] <- rax, fp[-8] <- rdx
v9 <- AllocateObject:22(cls=AsyncError) T{AsyncError}
ParallelMove rax <- rax, rcx <- fp[-7]
StoreField(v9 T{AsyncError} . error = v5 T{Y0}, NoStoreBarrier)
ParallelMove rcx <- fp[-8]
StoreField(v9 T{AsyncError} . stackTrace = v6 T{StackTrace?}, NoStoreBarrier)
ParallelMove rax <- rax, rcx <- fp[-2]
StoreField(v4 . listenerValueOrError = v9)
ParallelMove rdx <- C
StoreField(v4 . listenerHasError = v10)
ParallelMove  goto:26 B4
B4
ParallelMove rax <- C
DartReturn:28(v0)
CheckStackOverflowSlowPath
B0
B3
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- fp[3]
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- fp[2], rdx <- rsi, rcx <- C, fp[-1] <- rsi
t0 <- AssertAssignable:10(v3, v4, 'sourceResult', instantiator_type_args(v5), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdx <- fp[-1], rcx <- C, rbx <- C
v9 <- InstantiateTypeArguments:12(v8, instantiator_type_args(v5 T{TypeArguments}), function_type_args(v0), instantiator_class(Library:'dart:async' Class: _FutureListener@4048458)) T{*?}
ParallelMove rcx <- rax, rax <- fp[3]
v17 <- LoadField(v2 T{_FutureListener} . result {final}) T{_Future}
v18 <- LoadField(v17 . _zone@4048458 {final}) T{_RootZone}
v23 <- LoadField(v2 T{_FutureListener} . callback {final}) T{Function??}
MoveArgument(sp[3] <- v9)
MoveArgument(sp[2] <- v18 T{_RootZone})
MoveArgument(sp[1] <- v23 T{_Closure})
MoveArgument(sp[0] <- v3 T{X0?})
v12 <- StaticCall:18( runUnary<2> v9, v18 T{_RootZone}, v23 T{_Closure}, v3 T{X0?}, using unchecked entrypoint) T{Y0?}
ParallelMove rax <- rax
DartReturn:20(v12)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v22 <- LoadField(v21 . Closure.context {final}) T{*}
ParallelMove fp[-9] <- rcx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove  goto:12 B3
B3
v23 <- LoadField(v22 . listener) T{_FutureListener}
ParallelMove rdi <- rdi
v24 <- StaticCall:16( handleWhenComplete<0> v23, using unchecked entrypoint) T{*?}
ParallelMove rax <- rax
ParallelMove fp[-11] <- rax
ParallelMove  goto:18 B4
B4
v45 <- LoadClassId(v24) [1, 617] int64
Branch if EqualityCompare(v45 == v46) T{bool} goto (12, 18)
B12
ParallelMove rdx <- C
v97 <- LoadField(v24 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rbx
v163 <- IntConverter(int64->uint32[tr], v97) uint32
ParallelMove rsi <- rsi
v101 <- BinaryUint32Op(& [tr], v163 T{int}, v166 T{_Smi}) [0, 24] uint32
ParallelMove rsi <- rsi
v164 <- IntConverter(uint32->int64, v101) int64
Branch if EqualityCompare(v164 T{_Smi} != v139 T{_Smi}) T{bool} goto (13, 19)
B13
ParallelMove rcx <- C
ParallelMove rbx <- rbx
v162 <- IntConverter(int64->uint32[tr], v97 T{int}) uint32
ParallelMove rbx <- rbx
v87 <- BinaryUint32Op(& [tr], v162 T{int}, v167 T{_Smi}) [0, 16] uint32
ParallelMove rbx <- rbx
v165 <- IntConverter(uint32->int64, v87) int64
Branch if EqualityCompare(v165 T{_Smi} != v139 T{_Smi}) T{bool} goto (14, 15)
B14
ParallelMove rbx <- fp[-9]
v78 <- LoadField(v24 T{_Future} . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- rsi, rdx <- C, rcx <- C, fp[-10] <- rsi
t0 <- AssertAssignable:12(v78, v66 T{_Type}, '', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) T{AsyncError}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-10], rdx <- fp[-9]
StoreField(v22 . listenerValueOrError = v78 T{AsyncError})
ParallelMove rbx <- C
StoreField(v22 . listenerHasError = v12)
ParallelMove  goto:100 B16
B15
B16
ParallelMove rax <- C
DartReturn:104(v0)
B19
ParallelMove rdx <- fp[-9]
ParallelMove  goto:114 B17
B18
ParallelMove rdx <- fp[-9]
ParallelMove  goto:110 B17
B17
Branch if EqualityCompare(v45 T{_Smi} == v46) T{bool} goto (20, 21)
B20
v29 <- AllocateContext:126(num_variables=1) T{Context}
ParallelMove rcx <- rax, rax <- fp[-9]
StoreField(v29 . Context.parent = v22, NoStoreBarrier)
v31 <- LoadField(v22 T{Context} . Context.parent {final}) T{Context?}
v32 <- LoadField(v31 . source) T{_Future}
StoreField(v29 . originalSource = v32, NoStoreBarrier)
ParallelMove rbx <- C, rdx <- rcx
v34 <- AllocateClosure:128(v33, v29) T{_Closure}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v0)
MoveArgument(sp[1] <- v24 T{_Future})
MoveArgument(sp[0] <- v34)
v35 <- StaticCall:130( then<1> v0, v24 T{_Future}, v34, using unchecked entrypoint, result_type = T{_Future}) T{_Future}
ParallelMove rax <- rax, rcx <- fp[-9]
StoreField(v22 T{Context} . listenerValueOrError = v35)
ParallelMove rax <- C
StoreField(v22 T{Context} . listenerHasError = v37)
ParallelMove  goto:136 B22
B21
B22
ParallelMove rax <- C
DartReturn:140(v0)
B5
ParallelMove r8 <- fp[-2], rdi <- rax, rsi <- rdx, fp[-11] <- rax, fp[-12] <- rdx
v11 <- LoadField(v4 . hasError) T{bool}
Branch if StrictCompare:24(===, v11 T{bool}, v12) goto (6, 9)
BoolTest
B6
v14 <- LoadField(v4 . Context.parent {final}) T{Context?}
v15 <- LoadField(v14 . source) T{_Future}
ParallelMove fp[-10] <- r9
v71 <- LoadField(v15 T{_Future} . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- r10, rdx <- C, rcx <- C, fp[-9] <- r10
t0 <- AssertAssignable:12(v71, v66 T{_Type}, '', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) T{AsyncError}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-9]
v17 <- LoadField(v71 T{AsyncError} . error {final}) T{Object}
ParallelMove rax <- rcx, rcx <- fp[-11]
Branch if StrictCompare:32(===, v17, v5, with number check) goto (7, 10)
B7
ParallelMove rbx <- fp[-2], rax <- fp[-10]
v63 <- LoadField(v15 T{_Future} . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- rsi, rdx <- C, rcx <- C, fp[-9] <- rsi
t0 <- AssertAssignable:12(v63, v66 T{_Type}, '', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) T{AsyncError}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-9], rcx <- fp[-2]
StoreField(v4 . listenerValueOrError = v63 T{AsyncError})
ParallelMove  goto:58 B11
B10
ParallelMove rcx <- fp[-2]
ParallelMove  goto:50 B43
B9
ParallelMove rcx <- r8
ParallelMove  goto:46 B43
B43
v13 <- AllocateObject:52(cls=AsyncError) T{AsyncError}
ParallelMove rax <- rax, rcx <- fp[-11]
StoreField(v13 T{AsyncError} . error = v5 T{Y0}, NoStoreBarrier)
ParallelMove rcx <- fp[-12]
StoreField(v13 T{AsyncError} . stackTrace = v6 T{StackTrace?}, NoStoreBarrier)
ParallelMove rax <- rax, rcx <- fp[-2]
StoreField(v4 . listenerValueOrError = v13)
ParallelMove  goto:60 B11
B11
StoreField(v4 . listenerHasError = v12)
ParallelMove rax <- C
DartReturn:62(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v10 <- LoadField(v2 T{_FutureListener} . result {final}) T{_Future}
v11 <- LoadField(v10 . _zone@4048458 {final}) T{_RootZone}
v16 <- LoadField(v2 T{_FutureListener} . callback {final}) T{Function??}
MoveArgument(sp[2] <- v0)
MoveArgument(sp[1] <- v11 T{_RootZone})
MoveArgument(sp[0] <- v16 T{_Closure})
v5 <- StaticCall:14( run<1> v0, v11 T{_RootZone}, v16 T{_Closure}, using unchecked entrypoint) T{Y0?}
ParallelMove rax <- rax
DartReturn:16(v5)
CheckStackOverflowSlowPath
B0
B2
ParallelMove rcx <- sp[2]
v4 <- LoadField(v2 . Closure.context {final}) T{*}
v5 <- LoadField(v4 . originalSource) T{_Future}
ParallelMove rax <- rax
DartReturn:10(v5)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdx <- C, rcx <- C, rbx <- rdi, fp[-1] <- rdi
v5 <- InstanceOf:10(v2 IS (dynamic, Object, StackTrace) => dynamic, instantiator_type_args(v0), function_type_args(v0)) T{bool}
InlineInstanceof
FunctionTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v5, v6) goto (3, 4)
BoolTest
B3
ParallelMove rax <- fp[-1]
DartReturn:22(v2 T{_Closure})
B4
ParallelMove rax <- fp[-1], rdx <- C, rcx <- C
v8 <- InstanceOf:26(v2 IS (dynamic, Object) => dynamic, instantiator_type_args(v0), function_type_args(v0)) T{bool}
InlineInstanceof
FunctionTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:30(===, v8, v6) goto (5, 6)
BoolTest
B5
ParallelMove rax <- fp[-1]
DartReturn:38(v2 T{_Closure})
B6
ParallelMove rax <- fp[-1]
v9 <- AllocateObject:42(cls=ArgumentError) T{ArgumentError}
ParallelMove rcx <- rax, rax <- C
StoreField(v9 T{ArgumentError} . name = v10 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v9 T{ArgumentError} . message = v11 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v9 T{ArgumentError} . invalidValue = v2 T{_Closure}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v9 T{ArgumentError} . _hasValue@0150898 = v6 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:46(v9)
B0
B5
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rsi, fp[-2] <- rdi, fp[-3] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rsi, rcx <- C, fp[-1] <- rsi
t0 <- AssertAssignable:10(v3, v4, 'value', instantiator_type_args(v5), function_type_args(v0)) T{FutureOr<X0>?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-3], rdx <- fp[-1], rcx <- C
v9 <- InstanceOf:12(v3 T{FutureOr<X0>?} IS Future<X0>, instantiator_type_args(v5 T{TypeArguments}), function_type_args(v0)) T{bool}
InlineInstanceof
UninstantiatedTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:16(===, v9 T{bool}, v10) goto (3, 4)
BoolTest
B3
ParallelMove rdi <- fp[-2], rsi <- fp[-3]
StaticCall:22( _chainFuture@4048458<0> v2, v3 T{_Future}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:24(v0)
B4
ParallelMove rdi <- fp[-2], rsi <- fp[-3]
StaticCall:28( _asyncCompleteWithValue@4048458<0> v2, v3 T{FutureOr<X0>?}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:30(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- AllocateContext:10(num_variables=2) T{Context}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-3] <- rcx
StoreField(v4 . this = v2, NoStoreBarrier)
ParallelMove rdx <- fp[-2]
StoreField(v4 . value = v3, NoStoreBarrier)
ParallelMove rdi <- rax
StaticCall:12( _setPendingComplete@4048458<0> v2, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
v5 <- LoadField(v2 . _zone@4048458 {final}) T{_RootZone}
ParallelMove rbx <- C, rdx <- fp[-3], fp[-2] <- rdi
v7 <- AllocateClosure:16(v6, v4) T{_Closure}
ParallelMove rdi <- fp[-2], rsi <- rax
StaticCall:18( scheduleMicrotask<0> v5, v7, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:20(v0)
CheckStackOverflowSlowPath
B0
B1
v3 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v7 <- BinaryInt64Op(^ [tr], v3, v14) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_Future} . _state@4048458 = v7 T{int} <int64>)
ParallelMove rax <- C
DartReturn:18(v0)
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v3 . this) T{_Future}
v5 <- LoadField(v3 . value) T{X0?}
ParallelMove rdi <- rdi, rsi <- rsi
StaticCall:10( _completeWithValue@4048458<0> v4, v5, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
t0 <- AssertAssignable:10(v3, v4, 'value', instantiator_type_args(v5), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-1]
v7 <- StaticCall:12( _removeListeners@4048458<0> v2, using unchecked entrypoint, result_type = T{_FutureListener?}) T{_FutureListener?}
ParallelMove rdi <- fp[-1], rsi <- fp[-2], rax <- rax
ParallelMove fp[-2] <- rax
StaticCall:14( _setValue@4048458<0> v2, v3 T{X0?}, using unchecked entrypoint)
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
StaticCall:16( _propagateToListeners@4048458<0> v2, v7)
ParallelMove rax <- C
DartReturn:18(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rsi <- rdi, rbx <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
v6 <- InstanceOf:10(v3 IS _Future@4048458<X0>, instantiator_type_args(v4), function_type_args(v0)) T{bool}
InlineInstanceof
UninstantiatedTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v6, v7) goto (3, 4)
BoolTest
B3
ParallelMove rdi <- fp[-2], rsi <- fp[-1]
StaticCall:20( _chainCoreFutureAsync@4048458<0> v3, v2)
ParallelMove rax <- C
DartReturn:22(v0)
B4
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
StaticCall:26( _chainForeignFuture@4048458<0> v2, v3, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:28(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-8] <- rdi, fp[-9] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v20 <- AllocateContext:10(num_variables=3) T{Context}
ParallelMove rax <- rax, rdi <- fp[-8]
ParallelMove fp[-10] <- rax
StoreField(v20 . this = v18, NoStoreBarrier)
ParallelMove rdi <- rdi
StaticCall:12( _setPendingComplete@4048458<0> v18, using unchecked entrypoint)
ParallelMove  goto:16 B3
B3
ParallelMove rbx <- C, rdx <- fp[-10]
v23 <- AllocateClosure:20(v22, v20) T{_Closure}
ParallelMove rbx <- C, rdx <- fp[-10], rax <- rax
ParallelMove fp[-8] <- rax
v25 <- AllocateClosure:22(v24, v20) T{_Closure}
ParallelMove rax <- rax
MoveArgument(sp[3] <- v21)
MoveArgument(sp[2] <- v19)
MoveArgument(sp[1] <- v23)
MoveArgument(sp[0] <- v25)
StaticCall:24( then<1> v21, v19, v23, v25, using unchecked entrypoint)
ParallelMove  goto:26 B4
B5
ParallelMove rax <- rax, rdx <- fp[-2], rcx <- rdx
StoreField(v5 . e = v6)
ParallelMove rax <- rcx
StoreField(v5 . s = v7)
ParallelMove rbx <- C, rdx <- rdx
v10 <- AllocateClosure:30(v9, v5) T{_Closure}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v10)
StaticCall:32( scheduleMicrotask<0> v10)
ParallelMove  goto:34 B4
B4
ParallelMove rax <- C
DartReturn:36(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v3 . this) T{_Future}
v5 <- LoadField(v3 . e {final}) T{Object}
v6 <- LoadField(v3 . s {final}) T{StackTrace}
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx
StaticCall:10( _completeError@4048458<0> v4, v5, v6, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax
v5 <- StaticCall:10( _removeListeners@4048458<0> v2, using unchecked entrypoint, result_type = T{_FutureListener?}) T{_FutureListener?}
ParallelMove rdi <- fp[-1], rsi <- fp[-2], rdx <- fp[-3], rax <- rax
ParallelMove fp[-2] <- rax
StaticCall:12( _setError@4048458<0> v2, v3, v4, using unchecked entrypoint)
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
StaticCall:14( _propagateToListeners@4048458<0> v2, v5)
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B13
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v5 <- AllocateObject:10(cls=AsyncError) T{AsyncError}
ParallelMove rcx <- rax, rax <- fp[-2]
StoreField(v5 T{AsyncError} . error = v3 T{Y0}, NoStoreBarrier)
ParallelMove rax <- fp[-3]
StoreField(v5 T{AsyncError} . stackTrace = v4 T{StackTrace}, NoStoreBarrier)
ParallelMove rdi <- fp[-1], rsi <- rcx
StaticCall:14( _setErrorObject@4048458<0> v2, v5, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rcx <- C
ParallelMove rax <- rsi
v5 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v26 <- IntConverter(int64->uint32[tr], v5) uint32
ParallelMove rdx <- rdx
v7 <- BinaryUint32Op(& [tr], v26 T{int}, v28 T{_Smi}) [0, 1] uint32
ParallelMove rdx <- rdx
v27 <- IntConverter(uint32->int64, v7) int64
ParallelMove rdx <- rdx
v8 <- BinaryInt64Op(| [tr], v27 T{_Smi}, v24 T{_Smi}) [0, 31] int64
StoreField(v2 T{_Future} . _state@4048458 = v8 T{int} <int64>)
ParallelMove rax <- rax
StoreField(v2 T{_Future} . _resultOrListeners@4048458 = v3 T{AsyncError})
ParallelMove rax <- C
DartReturn:20(v0)
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[4]
v5 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v6 <- LoadField(v5 . this) T{_Future}
ParallelMove rdi <- rdi, rsi <- fp[3], rdx <- fp[2]
StaticCall:10( _completeError@4048458<0> v6, v3, v4, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[3]
v23 <- LoadField(v21 . Closure.context {final}) T{*}
ParallelMove fp[-8] <- rcx
CheckStackOverflow:8(stack=0, loop=0)
v24 <- LoadField(v23 . this) T{_Future}
ParallelMove rdi <- rdi
StaticCall:10( _clearPendingComplete@4048458<0> v24, using unchecked entrypoint)
ParallelMove rbx <- fp[-8] goto:14 B3
B3
v25 <- LoadField(v23 . this) T{_Future}
ParallelMove fp[-10] <- rdi
v28 <- LoadField(v25 T{_Future} . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- fp[2], rdx <- rsi, rcx <- C, fp[-9] <- rsi
t1 <- AssertAssignable:18(v22, v26, ' in type cast', instantiator_type_args(v28), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-10], rsi <- fp[2]
StaticCall:20( _completeWithValue@4048458<0> v25, v22 T{X0?}, using unchecked entrypoint)
ParallelMove  goto:22 B4
B5
ParallelMove rax <- fp[-2], rsi <- rax
v11 <- LoadField(v5 . this) T{_Future}
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx
StaticCall:26( _completeError@4048458<0> v11, v6, v7, using unchecked entrypoint)
ParallelMove  goto:28 B4
B4
ParallelMove rax <- C
DartReturn:30(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- AllocateContext:10(num_variables=2) T{Context}
ParallelMove rbx <- rax, rax <- fp[-1]
ParallelMove fp[-3] <- rbx
StoreField(v4 . source = v2, NoStoreBarrier)
ParallelMove rdi <- fp[-2]
StoreField(v4 . target = v3, NoStoreBarrier)
ParallelMove r8 <- rax goto:30 B4
B4
  Loop 0
ParallelMove fp[-4] <- r8
CheckStackOverflow:28(stack=0, loop=1)
v70 <- LoadField(v100 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
v125 <- IntConverter(int64->uint32[tr], v70) uint32
ParallelMove rcx <- rcx
v72 <- BinaryUint32Op(& [tr], v125 T{int}, v129 T{_Smi}) [0, 4] uint32
ParallelMove rcx <- rcx
v126 <- IntConverter(uint32->int64, v72) int64
Branch if EqualityCompare(v126 T{_Smi} != v103 T{_Smi}) T{bool} goto (3, 5)
B3
  Loop 0
v62 <- LoadField(v100 T{_Future} . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- r9, rdx <- C, rcx <- C, fp[-1] <- r9
t0 <- AssertAssignable:12(v62, v65 T{_Type}, '', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) T{_Future}
AssertAssignable for compile-time type
TTSCall
ParallelMove rbx <- fp[-3], r8 <- fp[-1]
StoreField(v4 . source = v62 T{_Future}, NoStoreBarrier)
ParallelMove r8 <- r8, rdi <- fp[-2] goto:26 B4
B5
ParallelMove rcx <- C
ParallelMove rdx <- rax
v124 <- IntConverter(int64->uint32[tr], v70 T{int}) uint32
ParallelMove rdx <- rdx
v52 <- BinaryUint32Op(& [tr], v124 T{int}, v130 T{_Smi}) [0, 24] uint32
ParallelMove rdx <- rdx
v127 <- IntConverter(uint32->int64, v52) int64
Branch if EqualityCompare(v127 T{_Smi} == v103 T{_Smi}) T{bool} goto (6, 7)
B6
ParallelMove rdi <- fp[-2]
v22 <- LoadField(v3 T{_Future} . _resultOrListeners@4048458) T{*?}
ParallelMove rax <- rsi, rdx <- C, rcx <- C, fp[-1] <- rsi
t0 <- AssertAssignable:46(v22, v23, '', instantiator_type_args(v0), function_type_args(v0)) T{_FutureListener?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-2], rsi <- fp[-4]
StaticCall:48( _setChained@4048458<0> v3 T{_Future}, v100 T{_Future}, using unchecked entrypoint)
ParallelMove rdx <- fp[-3]
v27 <- LoadField(v4 . source) T{_Future}
ParallelMove rdi <- rdi, rsi <- fp[-1]
StaticCall:50( _prependListeners@4048458<0> v27, v22 T{_FutureListener?}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:52(v0)
B7
ParallelMove rdx <- rbx, rcx <- C
ParallelMove rax <- rax
v123 <- IntConverter(int64->uint32[tr], v70 T{int}) uint32
ParallelMove rax <- rax
v38 <- BinaryUint32Op(& [tr], v123 T{int}, v131 T{_Smi}) [0, 16] uint32
ParallelMove rax <- rax
v128 <- IntConverter(uint32->int64, v38) int64
Branch if EqualityCompare(v128 T{_Smi} == v103 T{_Smi}) T{bool} goto (8, 11)
B8
ParallelMove rdi <- fp[-2]
v18 <- LoadField(v3 T{_Future} . _resultOrListeners@4048458) T{*?}
Branch if StrictCompare:66(===, v18, v0) goto (9, 12)
B9
ParallelMove rdi <- rdi, rsi <- fp[-4]
StaticCall:74( _cloneResult@4048458<0> v3 T{_Future}, v100 T{_Future}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:76(v0)
B12
B11
ParallelMove rdi <- fp[-2]
ParallelMove  goto:82 B10
B10
ParallelMove rdi <- rdi
StaticCall:88( _setPendingComplete@4048458<0> v3 T{_Future}, using unchecked entrypoint)
ParallelMove rdx <- fp[-3]
v13 <- LoadField(v4 . target) T{_Future}
v14 <- LoadField(v13 . _zone@4048458 {final}) T{_RootZone}
ParallelMove rbx <- C, rdx <- rdx, fp[-1] <- rdi
v16 <- AllocateClosure:92(v15, v4) T{_Closure}
ParallelMove rdi <- fp[-1], rsi <- rax
StaticCall:94( scheduleMicrotask<0> v14, v16, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:96(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v3 . source) T{_Future}
v5 <- LoadField(v3 . target) T{_Future}
ParallelMove rdi <- rdi, rsi <- rsi
StaticCall:10( _chainCoreFutureSync@4048458<0> v4, v5)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[4]
v5 <- LoadField(v2 . Closure.context {final}) T{*}
ParallelMove fp[-1] <- rcx
CheckStackOverflow:8(stack=0, loop=0)
v6 <- LoadField(v5 . timer) T{_Timer}
v15 <- LoadField(v6 T{_Timer} . _callback@1026248) T{((dynamic, Timer) => void)??}
Branch if StrictCompare:12(!==, v15, v0 T{Null?}) T{bool} goto (3, 4)
B3
ParallelMove rdi <- rdi
StaticCall:20( cancel<0> v6 T{_Timer}, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
v10 <- LoadField(v5 . _future) T{_Future}
ParallelMove rdi <- rdi, rsi <- fp[3], rdx <- fp[2]
StaticCall:22( _completeError@4048458<0> v10, v3, v4, using unchecked entrypoint)
ParallelMove  goto:28 B5
B4
B5
ParallelMove rax <- C
DartReturn:32(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove rsi <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
StoreField(v2 T{_Timer} . _callback@1026248 = v0 T{Null?})
v23 <- LoadField(v2 T{_Timer} . _indexOrNext@1026248) T{Object??}
v26 <- LoadClassId(v23) [1, 617] int64
Branch if TestRange(v26 not in [59-60]) T{bool} goto (3, 4)
B3
ParallelMove rax <- rax
DartReturn:22(v0)
B4
v10 <- LoadStaticField:4(_heap@1026248, CallsInitializer) T{_TimerHeap}
ParallelMove rdi <- rax, rsi <- fp[-1], rax <- rax
ParallelMove fp[-2] <- rax
v6 <- StaticCall:28( isFirst<0> v10 T{_TimerHeap}, v2, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rdi <- fp[-2], rsi <- fp[-1], rax <- rax
ParallelMove fp[-1] <- rax
StaticCall:32( remove<0> v10 T{_TimerHeap}, v2, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
Branch if StrictCompare:36(===, v6 T{bool}, v4) goto (5, 6)
BoolTest
B5
StaticCall:42( _notifyEventHandler@1026248<0> )
ParallelMove  goto:48 B7
B6
B7
ParallelMove rax <- C
DartReturn:52(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v2 <- LoadStaticField(_handlingCallbacks@1026248) T{bool}
Branch if StrictCompare:12(===, v2 T{bool}, v3) goto (3, 4)
BoolTest
B3
ParallelMove rax <- C
DartReturn:18(v0)
B4
v4 <- LoadStaticField(_firstZeroTimer@1026248) T{_Timer?}
Branch if StrictCompare:22(===, v4, v0) goto (5, 11)
B5
v47 <- LoadStaticField:4(_heap@1026248, CallsInitializer) T{_TimerHeap}
ParallelMove rax <- rax
v52 <- LoadField(v47 T{_TimerHeap} . _used@1026248) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v52 == v93 T{_Smi}) T{bool} goto (6, 12)
B6
v17 <- LoadStaticField(_sendPort@1026248) T{_SendPort?}
Branch if StrictCompare:40(!==, v17, v0) goto (7, 8)
B7
StaticCall:46( _cancelWakeup@1026248<0> )
StaticCall:48( _shutdownTimerHandler@1026248<0> )
ParallelMove  goto:54 B9
B8
B9
ParallelMove rax <- C
DartReturn:58(v0)
B12
B11
B10
v37 <- LoadStaticField:4(_heap@1026248, CallsInitializer) T{_TimerHeap}
ParallelMove rax <- rax
v42 <- LoadField(v37 T{_TimerHeap} . _used@1026248) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v42 == v93 T{_Smi}) T{bool} goto (13, 14)
B13
StaticCall:82( _cancelWakeup@1026248<0> )
ParallelMove rax <- C
DartReturn:84(v0)
B14
v29 <- LoadField(v37 T{_TimerHeap} . _list@1026248) T{_List}
v32 <- LoadField(v29 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v89 <- UnboxInt64([non-speculative], v32) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v89 T{_Smi}, v93 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v94 <- LoadIndexed:12([_List] v29, v93 T{_Smi}) T{_Timer}
v9 <- LoadField(v94 T{_Timer} . _wakeupTime@1026248) [-9223372036854775808, 9223372036854775807] int64
v10 <- LoadStaticField(_scheduledWakeupTime@1026248) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v91 <- UnboxInt64([non-speculative], v10) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v91 T{int} == v93 T{_Smi}) T{bool} goto (17, 15)
B17
B15
Branch if EqualityCompare(v9 != v91 T{int}) T{bool} goto (18, 19)
B18
B16
ParallelMove rdi <- rdi
StaticCall:122( _scheduleWakeup@1026248<0> v9)
ParallelMove  goto:128 B20
B19
B20
ParallelMove rax <- C
DartReturn:132(v0)
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadStaticField(_receivePortActive@1026248) T{bool}
Branch if StrictCompare:12(!==, v3 T{bool}, v4) goto (3, 4)
BoolTest
B3
StaticCall:18( _createTimerHandler@1026248<0> )
ParallelMove  goto:24 B5
B4
B5
v11 <- LoadStaticField:4(eventHandlerSendData, CallsInitializer) T{(dynamic, Object?, SendPort, int) => void}
v6 <- LoadStaticField(_sendPort@1026248) T{_SendPort?}
CheckNull:30(v6, CastError) T{_SendPort}
v27 <- BoxInt64(v2 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-2] <- rax
MoveArgument(sp[2] <- v0 T{Null?})
MoveArgument(sp[1] <- v6 T{_SendPort})
MoveArgument(sp[0] <- v27 T{int})
v22 <- StaticCall:10( _sendData@15069316<0> v0 T{Null?}, v6 T{_SendPort}, v27 T{int}) T{void?}
ParallelMove rax <- fp[-2]
StoreStaticField(_scheduledWakeupTime@1026248, v27 T{int})
ParallelMove rax <- C
DartReturn:36(v0)
CheckStackOverflowSlowPath
slow path late initialization error operation
slow path check null (cast) operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v2 <- LoadStaticField(_receivePort@1026248) T{_RawReceivePort?}
Branch if StrictCompare:10(===, v2, v0) goto (3, 4)
B3
ParallelMove rdi <- C, rsi <- C
v5 <- StaticCall:16( _RawReceivePort@1026248.<0> v0, v4, result_type = T{_RawReceivePort}) T{_RawReceivePort}
ParallelMove rcx <- rax, rax <- C
StoreField(v5 T{_RawReceivePort} . ReceivePort.handler = v6 T{_Closure})
v20 <- LoadField(v5 T{_RawReceivePort} . ReceivePort.send_port {final}) T{_SendPort?}
ParallelMove rax <- rax
StoreStaticField(_sendPort@1026248, v20 T{_SendPort})
ParallelMove rax <- rcx
StoreStaticField(_receivePort@1026248, v5)
ParallelMove rax <- C
StoreStaticField(_scheduledWakeupTime@1026248, v8)
ParallelMove  goto:28 B5
B4
MoveArgument(sp[1] <- v2 T{_RawReceivePort})
MoveArgument(sp[0] <- v3)
StaticCall:24( _setActive@1026248<0> v2 T{_RawReceivePort}, v3, using unchecked entrypoint)
ParallelMove  goto:30 B5
B5
ParallelMove rax <- C
StoreStaticField(_receivePortActive@1026248, v3)
ParallelMove rax <- C
DartReturn:32(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(RawReceivePort_setActive) T{*?}
ParallelMove rax <- rax
DartReturn:8(v4)
Checking for cid 74 (_RawReceivePort)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v19 <- LoadStaticField:4(_portMap@1026248, CallsInitializer) T{_Map}
ParallelMove rdi <- rax, rsi <- fp[3]
v5 <- StaticCall:12( []<0> v19, v2, using unchecked entrypoint, result_type = T{_RawReceivePort?}) T{_RawReceivePort?}
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v5, v0) goto (3, 4)
B3
ParallelMove rax <- C goto:26 B5
B4
v16 <- LoadField(v5 T{_RawReceivePort} . ReceivePort.handler) T{_Closure?}
ParallelMove rax <- rcx goto:28 B5
B5
ParallelMove fp[-1] <- rax
Branch if StrictCompare:30(===, v7, v0) goto (6, 7)
B6
ParallelMove rax <- C
DartReturn:36(v0)
B7
MoveArgument(sp[1] <- v7 T{_Closure})
MoveArgument(sp[0] <- v3)
v8 <- InstanceCall:40( dyn:call<0>, v7 T{_Closure}, v3 IC[0: ]) T{*?}
InstanceCallAOT (non-smi)
StaticCall:42( _runPendingImmediateCallback@1026248<0> )
ParallelMove rax <- fp[-1]
DartReturn:44(v7 T{_Closure})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v2 <- LoadStaticField(_pendingImmediateCallback@1026248) T{_Closure?}
Branch if StrictCompare:10(!==, v2, v0) goto (3, 4)
B3
ParallelMove rax <- C
StoreStaticField(_pendingImmediateCallback@1026248, v0)
MoveArgument(sp[0] <- v2 T{_Closure})
ParallelMove rax <- rcx
v3 <- ClosureCall:18( closure=v2 T{_Closure}<0>, v2 T{_Closure}) T{*?}
ParallelMove  goto:24 B5
B4
B5
ParallelMove rax <- C
DartReturn:28(v0)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- C
StoreStaticField(timerFactory, v2)
ParallelMove rax <- C
DartReturn:10(v0)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[5], rsi <- fp[4], rdx <- fp[3], rbx <- fp[2]
StaticCall:10( _delayEntrypointInvocation@1026248<0> v2, v3, v4, v5)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx, fp[-4] <- rbx
CheckStackOverflow:8(stack=0, loop=0)
v6 <- AllocateContext:10(num_variables=5) T{Context}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-5] <- rcx
StoreField(v6 . entryPoint = v2, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreField(v6 . args = v3, NoStoreBarrier)
ParallelMove rax <- fp[-3]
StoreField(v6 . message = v4, NoStoreBarrier)
ParallelMove rax <- fp[-4]
StoreField(v6 . allowZeroOneOrTwoArgs = v5, NoStoreBarrier)
ParallelMove rdi <- C
v7 <- StaticCall:12( RawReceivePort.<0> v0, result_type = T{_RawReceivePort}) T{_RawReceivePort}
ParallelMove rax <- rax, rcx <- rax, rdx <- fp[-5]
ParallelMove fp[-1] <- rcx
StoreField(v6 . port = v7)
ParallelMove rbx <- C, rdx <- rdx
v10 <- AllocateClosure:14(v9, v6) T{_Closure}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v7 T{_RawReceivePort} . ReceivePort.handler = v10 T{_Closure})
v23 <- LoadField(v7 T{_RawReceivePort} . ReceivePort.send_port {final}) T{_SendPort?}
MoveArgument(sp[1] <- v23 T{_SendPort})
MoveArgument(sp[0] <- v0 T{Null?})
StaticCall:10( _sendInternal@1026248<0> v23 T{_SendPort}, v0 T{Null?}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:22(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v3)
StaticCall:10( _sendInternal@1026248<0> v2, v3, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(SendPort_sendInternal_) T{*?}
ParallelMove rax <- rax
DartReturn:8(v4)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax, rsi <- C
v4 <- StaticCall:10( _RawReceivePort@1026248.<0> v0, v3, result_type = T{_RawReceivePort}) T{_RawReceivePort}
ParallelMove rax <- rax, rcx <- C
StoreField(v4 T{_RawReceivePort} . ReceivePort.handler = v0 T{Null?})
ParallelMove rax <- rax
DartReturn:14(v4)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[3]
v4 <- LoadField(v2 . Closure.context {final}) T{*}
ParallelMove fp[-1] <- rcx
CheckStackOverflow:8(stack=0, loop=0)
v5 <- LoadField(v4 . port {final}) T{_RawReceivePort}
ParallelMove rdi <- rdi
StaticCall:10( close<0> v5, using unchecked entrypoint)
ParallelMove rbx <- fp[-1]
v6 <- LoadField(v4 . allowZeroOneOrTwoArgs) T{bool}
Branch if StrictCompare:14(===, v6 T{bool}, v7) goto (3, 10)
BoolTest
B3
v11 <- LoadField(v4 . entryPoint) T{Function}
ParallelMove rax <- rsi, rdx <- C, rcx <- C, fp[-2] <- rsi
v13 <- InstanceOf:20(v11 IS (dynamic, Never, Never) => dynamic, instantiator_type_args(v0), function_type_args(v0)) T{bool}
InlineInstanceof
FunctionTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:24(===, v13 T{bool}, v7) goto (4, 5)
BoolTest
B4
ParallelMove rbx <- fp[-1]
v26 <- LoadField(v4 . args) T{List<String>??}
v27 <- LoadField(v4 . message) T{Object??}
MoveArgument(sp[2] <- v11 T{_Closure})
MoveArgument(sp[1] <- v26)
MoveArgument(sp[0] <- v27)
v28 <- InstanceCall:32( dyn:call<0>, v11 T{_Closure}, v26, v27 IC[0: ]) T{*?}
InstanceCallAOT (non-smi)
ParallelMove  goto:62 B9
B5
ParallelMove rbx <- fp[-1]
ParallelMove rax <- fp[-2], rdx <- C, rcx <- C
v16 <- InstanceOf:36(v11 T{Function} IS (dynamic, Never) => dynamic, instantiator_type_args(v0), function_type_args(v0)) T{bool}
InlineInstanceof
FunctionTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:40(===, v16 T{bool}, v7) goto (6, 7)
BoolTest
B6
ParallelMove rax <- fp[-1]
v22 <- LoadField(v4 . args) T{List<String>??}
MoveArgument(sp[1] <- v11 T{_Closure})
MoveArgument(sp[0] <- v22)
v23 <- InstanceCall:48( dyn:call<0>, v11 T{_Closure}, v22 IC[0: ]) T{*?}
InstanceCallAOT (non-smi)
ParallelMove  goto:56 B8
B7
MoveArgument(sp[0] <- v11 T{Function})
v18 <- InstanceCall:52( dyn:call<0>, v11 T{Function} IC[0: ]) T{*?}
InstanceCallAOT (non-smi)
ParallelMove  goto:58 B8
B8
B9
B10
ParallelMove rax <- rbx
v8 <- LoadField(v4 . entryPoint) T{Function}
v9 <- LoadField(v4 . message) T{Object??}
MoveArgument(sp[1] <- v8)
MoveArgument(sp[0] <- v9)
v10 <- InstanceCall:68( dyn:call<0>, v8, v9 IC[0: ]) T{*?}
InstanceCallAOT (non-smi)
ParallelMove  goto:74 B11
B11
ParallelMove rax <- C
DartReturn:76(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v7 <- LoadStaticField:4(_portMap@1026248, CallsInitializer) T{_Map}
ParallelMove rax <- rax
ParallelMove fp[-2] <- rax
MoveArgument(sp[0] <- v2)
v4 <- StaticCall:12( _closeInternal@1026248<0> v2, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- fp[-2], rsi <- rax
StaticCall:14( remove<0> v7, v4, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rsi, fp[-3] <- rdi, fp[-4] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v148 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.index) T{_Uint32List}
v153 <- LoadField(v148 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rbx <- rbx
v229 <- UnboxInt64([non-speculative], v153 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdx <- rbx
v7 <- BinaryInt64Op(- [tr], v229 T{_Smi}, v253 T{_Smi}) [v229-1, v229-1] int64
ParallelMove fp[-2] <- rdx
ParallelMove rbx <- rbx
v8 <- ShiftInt64Op(>> [tr], v229 T{_Smi}, v253 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdi <- rcx, rsi <- rax, fp[-1] <- rbx
v9 <- StaticCall:18( _hashCode@3220832<0> v2, v3, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax, rdx <- fp[-3]
v158 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.hash_mask) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v230 <- UnboxInt64([non-speculative], v158 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rax
v167 <- BinaryInt64Op(& [tr], v9 T{int}, v230 T{_Smi}) [0, 4611686018427387903] int64
Branch if EqualityCompare(v167 == v254 T{_Smi}) T{bool} goto (53, 54)
B53
ParallelMove r8 <- fp[-1], rsi <- fp[-1] goto:32 B55
B54
ParallelMove rsi <- fp[-1]
ParallelMove rbx <- rbx
v173 <- BinaryInt64Op(* [tr], v167, v8 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rbx goto:34 B55
B55
ParallelMove fp[-7] <- r8
ParallelMove rax <- rax
v186 <- BinaryInt64Op(& [tr], v9 T{int}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
v188 <- ShiftInt64Op(<< [tr], v186, v253 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v189 <- BinaryInt64Op(+ [tr], v188, v186) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v190 <- BinaryInt64Op(& [tr], v189, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v195 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.index) T{_Uint32List}
v47 <- LoadField(v195 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v231 <- UnboxInt64([non-speculative], v47) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:28(v231 T{_Smi}, v190 T{int}) [-9223372036854775808, 9223372036854775807] int64
v255 <- LoadIndexed:28([_Uint32List] v195 T{_Uint32List}, v190 T{int}) [0, 4294967295] uint32
ParallelMove r10 <- rcx, rax <- rax goto:138 B12
B12
  Loop 0
ParallelMove fp[-6] <- r10
CheckStackOverflow:136(stack=0, loop=1)
ParallelMove rax <- rax
v235 <- IntConverter(uint32->int64, v16) [0, 4294967295] int64
Branch if EqualityCompare(v235 T{_Smi} != v254 T{_Smi}) T{bool} goto (11, 13)
B11
  Loop 0
Branch if EqualityCompare(v235 T{_Smi} != v253 T{_Smi}) T{bool} goto (3, 9)
B3
  Loop 0
ParallelMove rcx <- r8
v28 <- BinaryInt64Op(^ [tr], v174 T{int}, v235 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v28, v8) T{bool} goto (4, 7)
B4
  Loop 0
ParallelMove r12 <- rcx
v31 <- ShiftInt64Op(<< [tr], v28, v253 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-5] <- r12
v134 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.data) T{_List}
v50 <- LoadField(v134 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v236 <- UnboxInt64([non-speculative], v50) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- r12
GenericCheckBound:64(v236 T{_Smi}, v31) [-9223372036854775808, 9223372036854775807] int64
v256 <- LoadIndexed:64([_List] v134 T{_List}, v31 T{int}) T{*?}
v287 <- LoadClassId(v3 T{Object?}) int64
MoveArgument(sp[1] <- v3 T{Object?})
MoveArgument(sp[0] <- v256 T{Object??})
ParallelMove rcx <- rcx
v143 <- DispatchTableCall( cid=v287 Object.==<0>, v3 T{Object?}, v256 T{Object??}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:70(===, v143 T{bool}, v21) goto (5, 6)
BoolTest
B6
  Loop 0
ParallelMove rsi <- fp[-3], rdx <- fp[-6], rcx <- C goto:112 B8
B5
ParallelMove rsi <- fp[-3], rdx <- fp[-6], rdi <- fp[-5], rcx <- C
v80 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.index) T{_Uint32List}
v53 <- LoadField(v80 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v238 <- UnboxInt64([non-speculative], v53) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdx
GenericCheckBound:78(v238 T{_Smi}, v15) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:78([_Uint32List] v80 T{_Uint32List}, v15 T{int}, v196 T{_Smi}, NoStoreBarrier)
v85 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.data) T{_List}
ParallelMove fp[-8] <- rbx
v92 <- LoadField(v85 T{_List} . Array.type_arguments {final}) T{TypeArguments?}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
AssertAssignable:10(v85 T{_List}, v97 T{_TypeParameter}, 'value', instantiator_type_args(v92), function_type_args(v0 T{Null?})) T{X0}
AssertAssignable for compile-time type
TTSCall
ParallelMove rsi <- fp[-8]
v95 <- LoadField(v85 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rax
v240 <- UnboxInt64([non-speculative], v95) [0, 576460752303423487] int64
ParallelMove rax <- rcx, rbx <- fp[-5]
GenericCheckBound:10(v240 T{_Smi}, v31 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-5]
StoreIndexed:10([_List] v85, v31 T{int}, v85, NoStoreBarrier)
ParallelMove rdi <- rax
v38 <- BinaryInt64Op(+ [tr], v31 T{int}, v253 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx, rbx <- rdi, fp[-5] <- rdi
GenericCheckBound:88(v240 T{_Smi}, v38) [-9223372036854775808, 9223372036854775807] int64
v257 <- LoadIndexed:88([_List] v85 T{_List}, v38 T{int}) T{*?}
ParallelMove r8 <- fp[-3], fp[-9] <- rbx
v41 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
t0 <- AssertAssignable:90(v257 T{*?}, v40, ' in type cast', instantiator_type_args(v41), function_type_args(v0)) T{X1?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-5], rsi <- fp[-8]
StoreIndexed:10([_List] v85, v38 T{int}, v85, NoStoreBarrier)
ParallelMove rsi <- fp[-3]
v123 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.deleted_keys) [0, 4611686018427387903] T{_Smi}
ParallelMove rdi <- rdi
v246 <- UnboxInt64([non-speculative], v123 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- rdi
v46 <- BinaryInt64Op(+ [tr], v246 T{_Smi}, v253 T{_Smi}) [1, 4611686018427387904] int64
v247 <- BoxInt64(v46 T{int}) [1, 4611686018427387904] T{int}
ParallelMove rax <- rax
StoreField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.deleted_keys = v247 T{int}, NoStoreBarrier)
ParallelMove rax <- fp[-9]
DartReturn:104(v257 T{X1?})
B7
  Loop 0
ParallelMove rsi <- rdx, rdx <- r10, rcx <- C
ParallelMove  goto:114 B8
B8
B9
  Loop 0
ParallelMove rsi <- rdx, rdx <- r10, rcx <- C
ParallelMove  goto:122 B10
B10
  Loop 0
ParallelMove rdx <- rdx
v69 <- BinaryInt64Op(+ [tr], v15 T{int}, v253 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v70 <- BinaryInt64Op(& [tr], v69, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v75 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.index) T{_Uint32List}
v59 <- LoadField(v75 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r9 <- r9
v248 <- UnboxInt64([non-speculative], v59) [0, 4611686018427387903] int64
ParallelMove rax <- r9, rbx <- rdx
GenericCheckBound:128(v248 T{_Smi}, v70 T{int}) [-9223372036854775808, 9223372036854775807] int64
v258 <- LoadIndexed:128([_Uint32List] v75 T{_Uint32List}, v70 T{int}) [0, 4294967295] uint32
ParallelMove r10 <- rdx, rax <- rax, rdx <- rsi, rsi <- fp[-1], r8 <- fp[-7] goto:134 B12
B13
ParallelMove rax <- C
DartReturn:142(v0)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(RawReceivePort_closeInternal) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{int})
B0
B1
ParallelMove rax <- C
DartReturn:10(v2)
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v4)
v6 <- StaticCall:10( _startMainIsolate@1026248<0> v3, v4) T{void?}
ParallelMove rax <- rax
DartReturn:12(v6)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[3], rsi <- fp[2], rdx <- C, rbx <- C
StaticCall:10( _delayEntrypointInvocation@1026248<0> v2, v3, v0, v4)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- C
DartReturn:10(v2)
B0
B2
ParallelMove rax <- sp[1]
StoreStaticField(_pendingImmediateCallback@1026248, v3 T{_Closure})
ParallelMove rax <- C
DartReturn:12(v0)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:4(stack=0, loop=0)
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v3)
v4 <- StaticCall:6( Map._fromLiteral@0150898<0> v2, v3) T{Map<X0, X1>}
ParallelMove rax <- rax
DartReturn:8(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v7 <- LoadStaticField:4(_portMap@1026248, CallsInitializer) T{_Map}
ParallelMove rdi <- rax
v3 <- StaticCall:12( get:values<0> v7, result_type = T{_CompactIterable}) T{_CompactIterable}
ParallelMove rax <- rax
v12 <- LoadField(v3 T{_CompactIterable} . :type_arguments {final}) T{TypeArguments}
ParallelMove rdi <- rdi, rsi <- rax
v26 <- StaticCall:18( _GrowableList@0150898.of<0> v12 T{TypeArguments}, v3 T{_CompactIterable}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
DartReturn:16(v26)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
v3 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx, rcx <- C, rbx <- C
v5 <- InstantiateTypeArguments:10(v4, instantiator_type_args(v3), function_type_args(v0), instantiator_class(Library:'dart:collection' Class: __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin@3220832)) T{*?}
ParallelMove rdx <- rax
v6 <- AllocateObject:12(cls=_CompactIterable, v5, <not-aliased>) T{_CompactIterable}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v6 T{_CompactIterable} . _table@3220832 = v2 T{_Map}, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v6 T{_CompactIterable} . _offset@3220832 = v23 <int64>, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v6 T{_CompactIterable} . _step@3220832 = v25 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:18(v6)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v15 <- LoadStaticField:4(_portMap@1026248, CallsInitializer) T{_Map}
ParallelMove rdi <- rax, rsi <- fp[2], rax <- rax
ParallelMove fp[-1] <- rax
v22 <- StaticCall:10( _getValueOrData@3220832<0> v15 T{_Map}, v2 T{int}, using unchecked entrypoint) T{Object??}
ParallelMove rax <- rax, rcx <- fp[-1]
v29 <- LoadField(v15 T{_Map} . LinkedHashBase.data) T{_List}
Branch if StrictCompare:14(===, v29 T{_List}, v22) goto (11, 12)
B11
ParallelMove rcx <- C goto:24 B13
B12
ParallelMove rcx <- rax goto:26 B13
B13
Branch if StrictCompare:14(===, v24 T{_RawReceivePort?}, v0) goto (3, 4)
B3
ParallelMove rax <- C goto:26 B5
B4
v12 <- LoadField(v24 T{_RawReceivePort} . ReceivePort.handler) T{_Closure?}
ParallelMove rax <- rdx goto:28 B5
B5
ParallelMove rax <- rax
DartReturn:30(v6)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[1] <- v0)
MoveArgument(sp[0] <- v3)
v4 <- StaticCall:10( _RawReceivePort@1026248._@1026248<0> v0, v3, result_type = T{_RawReceivePort}) T{_RawReceivePort}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v9 <- LoadStaticField:4(_portMap@1026248, CallsInitializer) T{_Map}
ParallelMove rax <- rax
ParallelMove fp[-2] <- rax
MoveArgument(sp[0] <- v4)
v6 <- StaticCall:14( _get_id@1026248<0> v4, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- fp[-2], rsi <- rax, rdx <- fp[-1]
StaticCall:16( []=<0> v9, v6, v4, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
DartReturn:18(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(RawReceivePort_get_id) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{int})
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(RawReceivePort_factory) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{_RawReceivePort}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{_RawReceivePort})
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v5 <- StaticCall:10( _handleMessage@1026248<0> v3) T{void?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v18 <- LoadClassId(v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v4 <- DispatchTableCall( cid=v18 Object.==<0>, v2, v3) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v4 T{bool}, v5) goto (3, 4)
BoolTest
B3
v9 <- StaticCall:20( _queueFromZeroEvent@1026248<0> , result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
ParallelMove rdi <- rax goto:28 B5
B4
ParallelMove rax <- C
StoreStaticField(_scheduledWakeupTime@1026248, v6)
v7 <- StaticCall:24( _queueFromTimeoutEvent@1026248<0> , result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
ParallelMove rdi <- rax goto:30 B5
B5
ParallelMove rdi <- rdi
StaticCall:32( _runTimers@1026248<0> v8)
StaticCall:34( _notifyEventHandler@1026248<0> )
ParallelMove rax <- C
DartReturn:36(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-14] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v258 <- LoadStaticField:4(_heap@1026248, CallsInitializer) T{_TimerHeap}
ParallelMove rax <- rax
v263 <- LoadField(v258 T{_TimerHeap} . _used@1026248) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v263 == v398 T{_Smi}) T{bool} goto (3, 6)
B3
v152 <- LoadStaticField(_firstZeroTimer@1026248) T{_Timer?}
Branch if StrictCompare:20(===, v152, v0) goto (4, 7)
B4
ParallelMove rax <- C
StoreStaticField(_idCount@1026248, v28)
ParallelMove  goto:40 B8
B7
B6
B5
B8
v255 <- LoadField(v24 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
Branch if StrictCompare(===, v255 T{_Smi}, v28 T{_Smi}) T{bool} goto (9, 10)
B9
ParallelMove rax <- C
DartReturn:56(v0)
B10
ParallelMove rax <- C
StoreStaticField(_handlingCallbacks@1026248, v21)
ParallelMove rax <- C goto:62 B11
B11
v306 <- LoadField:240(v84 T{_Closure} . Closure.context {final}) T{!null}
ParallelMove fp[-21] <- rdx
v270 <- LoadField:240(v84 T{_Closure} . Closure.context {final}) T{!null}
ParallelMove fp[-20] <- rdi
ParallelMove r9 <- C goto:240 B33
B33
  Loop 2
ParallelMove fp[-19] <- r9
CheckStackOverflow:244(stack=0, loop=1)
v250 <- LoadField(v24 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v377 <- UnboxInt64([non-speculative], v250 T{_Smi}) [0, 576460752303423487] int64
Branch if RelationalOp(<, v36, v377 T{_Smi}) T{bool} goto (13, 14)
B13
  Loop 2
ParallelMove rax <- rax, rbx <- r9
GenericCheckBound:82(v377 T{_Smi}, v36) [-9223372036854775808, 9223372036854775807] int64
v155 <- LoadField(v24 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v400 <- LoadIndexed:82([_List] v155, v36 T{int}) T{_Timer}
ParallelMove fp[-18] <- rbx
StoreField(v400 T{_Timer} . _indexOrNext@1026248 = v0 T{Null?})
v52 <- LoadField(v400 T{_Timer} . _callback@1026248) T{((dynamic, Timer) => void)??}
ParallelMove fp[-17] <- r10
Branch if StrictCompare:88(!==, v52, v0) goto (15, 31)
B15
  Loop 2
v67 <- LoadField(v400 T{_Timer} . _repeating@1026248 {final}) T{bool}
ParallelMove fp[-16] <- r12
Branch if StrictCompare:98(!==, v67 T{bool}, v21) goto (16, 17)
BoolTest
B16
  Loop 2
StoreField(v400 T{_Timer} . _callback@1026248 = v0 T{Null?})
ParallelMove rcx <- r12, rdi <- rbx goto:176 B24
B17
  Loop 2
v68 <- LoadField(v400 T{_Timer} . _milliSeconds@1026248 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-15] <- r13
Branch if RelationalOp(>, v68, v398 T{_Smi}) T{bool} goto (18, 22)
B18
  Loop 2
v235 <- LoadStaticField:4(timerMillisecondClock, CallsInitializer) T{(dynamic) => int}
v271 <- StaticCall:10( _timerMillisecondClock@15069316<0> ) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdi <- fp[-18]
v86 <- LoadField(v400 T{_Timer} . _wakeupTime@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v381 <- UnboxInt64([non-speculative], v271 T{int?}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rax
v87 <- BinaryInt64Op(- [tr], v381 T{int?}, v86) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- fp[-15]
Branch if RelationalOp(>, v87, v68 T{int}) T{bool} goto (19, 20)
B19
  Loop 2
ParallelMove rax <- rbx
v102 <- BinaryInt64Op(~/ [tr], v87, v68 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
ParallelMove rdx <- rax
v104 <- BinaryInt64Op(* [tr], v102, v68 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v105 <- BinaryInt64Op(+ [tr], v86 T{int}, v104) [-9223372036854775808, 9223372036854775807] int64
StoreField(v400 T{_Timer} . _wakeupTime@1026248 = v105 T{int} <int64>)
v106 <- LoadField(v400 T{_Timer} . _tick@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v107 <- BinaryInt64Op(+ [tr], v106, v102) [-9223372036854775808, 9223372036854775807] int64
StoreField(v400 T{_Timer} . _tick@1026248 = v107 T{int} <int64>)
ParallelMove  goto:162 B21
B20
B21
B22
  Loop 2
ParallelMove rdi <- rbx
ParallelMove  goto:172 B23
B23
  Loop 2
ParallelMove rcx <- fp[-16] goto:178 B24
B24
  Loop 2
v121 <- LoadField(v400 T{_Timer} . _tick@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v122 <- BinaryInt64Op(+ [tr], v121, v401 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v400 T{_Timer} . _tick@1026248 = v122 T{int} <int64>)
MoveArgument(sp[1] <- v52 T{_Closure})
MoveArgument(sp[0] <- v400 T{_Timer})
ParallelMove rax <- fp[-17]
v123 <- ClosureCall:188( closure=v52 T{_Closure}<0>, v52 T{_Closure}, v400 T{_Timer}) T{*?}
ParallelMove rax <- fp[-16]
Branch if StrictCompare:194(===, v67 T{bool}, v21) goto (25, 28)
BoolTest
B25
  Loop 2
ParallelMove rdi <- fp[-18]
v151 <- LoadField(v400 T{_Timer} . _callback@1026248) T{((dynamic, Timer) => void)??}
Branch if StrictCompare:200(!==, v151, v0) goto (26, 29)
B26
  Loop 2
ParallelMove rdx <- C, rcx <- C
v289 <- LoadStaticField(_idCount@1026248) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rbx <- rax
v385 <- UnboxInt64([non-speculative], v289 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rbx
v455 <- IntConverter(int64->uint32[tr], v385 T{int}) uint32
ParallelMove rax <- rax
v292 <- BinaryUint32Op(+ [tr], v455 T{int}, v456 T{_Smi}) [0, 4294967295] uint32
ParallelMove rax <- rax
v294 <- BinaryUint32Op(& [tr], v292, v457 T{_Smi}) [0, 536870911] uint32
v386 <- BoxUint32(v294) [0, 536870911] T{_Smi}
ParallelMove rax <- rsi
StoreStaticField(_idCount@1026248, v386)
StoreField(v400 T{_Timer} . _id@1026248 = v385 T{int} <int64>)
v199 <- LoadField(v400 T{_Timer} . _milliSeconds@1026248 {final}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v199, v398 T{_Smi}) T{bool} goto (56, 57)
B56
  Loop 2
v208 <- LoadField(v400 T{_Timer} . _wakeupTime@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v210 <- BinaryInt64Op(+ [tr], v208, v199 T{int}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v400 T{_Timer} . _wakeupTime@1026248 = v210 T{int} <int64>)
ParallelMove  goto:46 B58
B57
  Loop 2
v274 <- LoadStaticField:4(timerMillisecondClock, CallsInitializer) T{(dynamic) => int}
v307 <- StaticCall:10( _timerMillisecondClock@15069316<0> ) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v387 <- UnboxInt64([non-speculative], v307 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-18]
StoreField(v400 T{_Timer} . _wakeupTime@1026248 = v387 T{int} <int64>)
ParallelMove  goto:48 B58
B58
  Loop 2
ParallelMove rdi <- rdi
StaticCall:210( _enqueue@1026248<0> v400 T{_Timer}, using unchecked entrypoint)
ParallelMove  goto:224 B30
B29
B28
B27
B30
  Loop 2
v187 <- LoadStaticField(_pendingImmediateCallback@1026248) T{_Closure?}
ParallelMove fp[-16] <- rcx
Branch if StrictCompare:10(!==, v187, v0 T{Null?}) goto (51, 52)
B51
  Loop 2
ParallelMove rax <- C
StoreStaticField(_pendingImmediateCallback@1026248, v0 T{Null?})
MoveArgument(sp[0] <- v187 T{_Closure})
ParallelMove rax <- rcx
v190 <- ClosureCall:18( closure=v187 T{_Closure}<0>, v187 T{_Closure}) T{*?}
ParallelMove  goto:24 B53
B52
B53
B31
B32
  Loop 2
ParallelMove rax <- fp[-19]
v66 <- BinaryInt64Op(+ [tr], v36 T{int}, v401 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- rax, rcx <- fp[-14], rdi <- fp[-20], rdx <- fp[-21] goto:242 B33
B14
B34
ParallelMove rax <- C
StoreStaticField(_handlingCallbacks@1026248, v15)
ParallelMove rax <- fp[-19]
v45 <- BinaryInt64Op(+ [tr], v36, v401 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax goto:274 B37
B37
  Loop 1
ParallelMove fp[-15] <- rdx
CheckStackOverflow:278(stack=0, loop=1)
v184 <- LoadField(v24 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v388 <- UnboxInt64([non-speculative], v184 T{_Smi}) [0, 576460752303423487] int64
Branch if RelationalOp(<, v46, v388 T{_Smi}) T{bool} goto (35, 12)
B35
  Loop 1
ParallelMove rax <- rax, rbx <- rdx
GenericCheckBound:268(v388 T{_Smi}, v46) [-9223372036854775808, 9223372036854775807] int64
v160 <- LoadField(v24 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v403 <- LoadIndexed:268([_List] v160, v46 T{int}) T{_Timer}
ParallelMove rdi <- rdi
StaticCall:270( _enqueue@1026248<0> v403 T{_Timer}, using unchecked entrypoint)
ParallelMove rax <- fp[-15]
v50 <- BinaryInt64Op(+ [tr], v46 T{int}, v401 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax goto:276 B37
B12
StaticCall:280( _notifyEventHandler@1026248<0> )
ParallelMove rax <- C
DartReturn:320(v0)
B38
ParallelMove rax <- C, rdx <- rax, rcx <- rdx, fp[-14] <- rax, fp[-16] <- rdx
StoreStaticField(_handlingCallbacks@1026248, v15)
ParallelMove rax <- fp[-6]
CheckNull:286(v8 T{int??}, NoSuchMethodError) [-9223372036854775808, 9223372036854775807] T{int?}
ParallelMove rax <- rax
v391 <- UnboxInt64([non-speculative], v8 T{int?}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v17 <- BinaryInt64Op(+ [tr], v391 T{int?}, v401 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rax goto:310 B41
B41
  Loop 0
ParallelMove fp[-15] <- r8
CheckStackOverflow:314(stack=0, loop=1)
v179 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v392 <- UnboxInt64([non-speculative], v179 T{_Smi}) [0, 576460752303423487] int64
Branch if RelationalOp(<, v18, v392 T{_Smi}) T{bool} goto (39, 40)
B39
  Loop 0
ParallelMove rax <- rax, rbx <- r8
GenericCheckBound:304(v392 T{_Smi}, v18) [-9223372036854775808, 9223372036854775807] int64
v165 <- LoadField(v2 . GrowableObjectArray.data) T{_List}
v404 <- LoadIndexed:304([_List] v165, v18 T{int}) T{_Timer}
ParallelMove rdi <- rdi
StaticCall:306( _enqueue@1026248<0> v404 T{_Timer}, using unchecked entrypoint)
ParallelMove rax <- fp[-15]
v23 <- BinaryInt64Op(+ [tr], v18 T{int}, v401 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rax, rdx <- fp[-14], rcx <- fp[-16] goto:312 B41
B40
StaticCall:316( _notifyEventHandler@1026248<0> )
ParallelMove rax <- fp[-14], rbx <- fp[-16]
ReThrow:318(v5, v6)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path late initialization error operation
slow path int64 divide operation
slow path late initialization error operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check null (nsm) operation
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- C, rsi <- C
v4 <- StaticCall:10( _GrowableList@0150898.<0> v2, v267 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
ParallelMove fp[-2] <- rax
v5 <- LoadStaticField(_firstZeroTimer@1026248) T{_Timer?}
ParallelMove fp[-1] <- rcx
Branch if StrictCompare:12(!==, v5, v0) goto (3, 10)
B3
B6
  Loop 1
CheckStackOverflow:56(stack=0, loop=1)
v143 <- LoadStaticField:4(_heap@1026248, CallsInitializer) T{_TimerHeap}
ParallelMove rcx <- rax
v148 <- LoadField(v143 T{_TimerHeap} . _used@1026248) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v148 != v267 T{_Smi}) T{bool} goto (4, 8)
B4
  Loop 1
ParallelMove rdx <- fp[-1]
v115 <- LoadField(v143 T{_TimerHeap} . _list@1026248) T{_List}
v118 <- LoadField(v115 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v240 <- UnboxInt64([non-speculative], v118) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v240 T{_Smi}, v267 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v268 <- LoadIndexed:12([_List] v115, v267 T{_Smi}) T{_Timer}
ParallelMove fp[-3] <- rax
v127 <- LoadField(v268 T{_Timer} . _wakeupTime@1026248) [-9223372036854775808, 9223372036854775807] int64
v128 <- LoadField(v5 T{_Timer} . _wakeupTime@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v129 <- BinaryInt64Op(- [tr], v127, v128) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v129 != v267 T{_Smi}) T{bool} goto (56, 57)
B56
B57
  Loop 1
v133 <- LoadField(v268 T{_Timer} . _id@1026248) [-9223372036854775808, 9223372036854775807] int64
v134 <- LoadField(v5 T{_Timer} . _id@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v135 <- BinaryInt64Op(- [tr], v133, v134) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx goto:36 B58
B58
  Loop 1
Branch if RelationalOp(<, v140 T{int}, v267 T{_Smi}) T{bool} goto (5, 9)
B5
  Loop 1
ParallelMove rbx <- fp[-2]
ParallelMove rdi <- rcx, rsi <- rax
StaticCall:12( remove<0> v143 T{_TimerHeap}, v268 T{_Timer}, using unchecked entrypoint)
ParallelMove rax <- fp[-2]
v192 <- LoadField(v4 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v197 <- LoadField(v4 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v198 <- LoadField(v197 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v246 <- UnboxInt64([non-speculative], v192 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-4] <- rcx
ParallelMove rbx <- rbx
v247 <- UnboxInt64([non-speculative], v198 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v246 T{_Smi} == v247 T{_Smi}) T{bool} goto (43, 44)
B43
  Loop 1
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v4 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B45
B44
B45
  Loop 1
ParallelMove rax <- rcx
v100 <- BinaryInt64Op(+ [tr], v246 T{_Smi}, v270 T{_Smi}) [1, 576460752303423488] int64
v248 <- BoxInt64(v100) [1, 576460752303423488] T{_Smi}
StoreField(v4 T{_GrowableList} . GrowableObjectArray.length = v248, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:40(v100 T{_Smi}, v246 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v103 <- LoadField(v4 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-3]
StoreIndexed:40([_List] v103, v246 T{_Smi}, v268 T{_Timer})
ParallelMove rax <- rdi, rcx <- fp[-1] goto:54 B6
B9
ParallelMove rdi <- fp[-2]
ParallelMove  goto:68 B7
B8
ParallelMove rdi <- fp[-2]
ParallelMove  goto:64 B7
B7
ParallelMove rcx <- rdi goto:132 B17
B10
ParallelMove rdi <- rax
v80 <- LoadStaticField:4(timerMillisecondClock, CallsInitializer) T{(dynamic) => int}
v156 <- StaticCall:10( _timerMillisecondClock@15069316<0> ) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v251 <- UnboxInt64:118([non-speculative], v156) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-4] <- rax
ParallelMove rdi <- fp[-2] goto:118 B13
B13
  Loop 0
CheckStackOverflow:116(stack=0, loop=1)
v70 <- LoadStaticField:4(_heap@1026248, CallsInitializer) T{_TimerHeap}
ParallelMove rcx <- rax
v75 <- LoadField(v70 T{_TimerHeap} . _used@1026248) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v75 != v267 T{_Smi}) T{bool} goto (11, 15)
B11
  Loop 0
ParallelMove rdx <- fp[-4]
v62 <- LoadField(v70 T{_TimerHeap} . _list@1026248) T{_List}
v65 <- LoadField(v62 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v252 <- UnboxInt64([non-speculative], v65) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v252 T{_Smi}, v267 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v271 <- LoadIndexed:12([_List] v62, v267 T{_Smi}) T{_Timer}
ParallelMove fp[-1] <- rax
v13 <- LoadField(v271 T{_Timer} . _wakeupTime@1026248) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<=, v13, v251 T{int}) T{bool} goto (12, 16)
B12
  Loop 0
ParallelMove rbx <- fp[-2]
ParallelMove rdi <- rcx, rsi <- rax
StaticCall:12( remove<0> v70 T{_TimerHeap}, v271 T{_Timer}, using unchecked entrypoint)
ParallelMove rax <- fp[-2]
v171 <- LoadField(v4 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v176 <- LoadField(v4 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v177 <- LoadField(v176 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v258 <- UnboxInt64([non-speculative], v171 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-5] <- rcx
ParallelMove rbx <- rbx
v259 <- UnboxInt64([non-speculative], v177 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v258 T{_Smi} == v259 T{_Smi}) T{bool} goto (23, 24)
B23
  Loop 0
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v4 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B25
B24
B25
  Loop 0
ParallelMove rax <- rsi
v46 <- BinaryInt64Op(+ [tr], v258 T{_Smi}, v270 T{_Smi}) [1, 576460752303423488] int64
v260 <- BoxInt64(v46) [1, 576460752303423488] T{_Smi}
StoreField(v4 T{_GrowableList} . GrowableObjectArray.length = v260, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v46 T{_Smi}, v258 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v49 <- LoadField(v4 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-1]
StoreIndexed:40([_List] v49, v258 T{_Smi}, v271 T{_Timer})
ParallelMove rdi <- rcx, rax <- fp[-4] goto:114 B13
B16
ParallelMove rcx <- fp[-2]
ParallelMove  goto:128 B14
B15
ParallelMove rcx <- fp[-2]
ParallelMove  goto:124 B14
B14
B17
ParallelMove rax <- rcx
DartReturn:136(v4)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path late initialization error operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- C, rsi <- C
v4 <- StaticCall:10( _GrowableList@0150898.<0> v2, v195 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
ParallelMove fp[-2] <- rax
v5 <- LoadStaticField(_firstZeroTimer@1026248) T{_Timer?}
ParallelMove fp[-1] <- rcx
Branch if StrictCompare:12(!==, v5, v0) goto (3, 10)
B3
B6
  Loop 0
CheckStackOverflow:56(stack=0, loop=1)
v106 <- LoadStaticField:4(_heap@1026248, CallsInitializer) T{_TimerHeap}
ParallelMove rcx <- rax
v111 <- LoadField(v106 T{_TimerHeap} . _used@1026248) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v111 != v195 T{_Smi}) T{bool} goto (4, 8)
B4
  Loop 0
ParallelMove rdx <- fp[-1]
v78 <- LoadField(v106 T{_TimerHeap} . _list@1026248) T{_List}
v81 <- LoadField(v78 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v176 <- UnboxInt64([non-speculative], v81) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v176 T{_Smi}, v195 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v196 <- LoadIndexed:12([_List] v78, v195 T{_Smi}) T{_Timer}
ParallelMove fp[-3] <- rax
v90 <- LoadField(v196 T{_Timer} . _wakeupTime@1026248) [-9223372036854775808, 9223372036854775807] int64
v91 <- LoadField(v5 T{_Timer} . _wakeupTime@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v92 <- BinaryInt64Op(- [tr], v90, v91) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v92 != v195 T{_Smi}) T{bool} goto (40, 41)
B40
B41
  Loop 0
v96 <- LoadField(v196 T{_Timer} . _id@1026248) [-9223372036854775808, 9223372036854775807] int64
v97 <- LoadField(v5 T{_Timer} . _id@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v98 <- BinaryInt64Op(- [tr], v96, v97) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx goto:36 B42
B42
  Loop 0
Branch if RelationalOp(<, v103 T{int}, v195 T{_Smi}) T{bool} goto (5, 9)
B5
  Loop 0
ParallelMove rbx <- fp[-2]
ParallelMove rdi <- rcx, rsi <- rax
StaticCall:12( remove<0> v106 T{_TimerHeap}, v196 T{_Timer}, using unchecked entrypoint)
ParallelMove rax <- fp[-2]
v139 <- LoadField(v4 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v144 <- LoadField(v4 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v145 <- LoadField(v144 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v182 <- UnboxInt64([non-speculative], v139 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-4] <- rcx
ParallelMove rbx <- rbx
v183 <- UnboxInt64([non-speculative], v145 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v182 T{_Smi} == v183 T{_Smi}) T{bool} goto (27, 28)
B27
  Loop 0
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v4 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B29
B28
B29
  Loop 0
ParallelMove rax <- rcx
v63 <- BinaryInt64Op(+ [tr], v182 T{_Smi}, v198 T{_Smi}) [1, 576460752303423488] int64
v184 <- BoxInt64(v63) [1, 576460752303423488] T{_Smi}
StoreField(v4 T{_GrowableList} . GrowableObjectArray.length = v184, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:40(v63 T{_Smi}, v182 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v66 <- LoadField(v4 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-3]
StoreIndexed:40([_List] v66, v182 T{_Smi}, v196 T{_Timer})
ParallelMove rax <- rdi, rcx <- fp[-1] goto:54 B6
B9
ParallelMove rdi <- fp[-2]
ParallelMove  goto:68 B7
B8
ParallelMove rdi <- fp[-2]
ParallelMove  goto:64 B7
B7
v9 <- LoadField(v5 T{_Timer} . _indexOrNext@1026248) T{Object??}
ParallelMove rax <- r8, rdx <- rsi, rcx <- rsi, fp[-3] <- r8
t0 <- AssertAssignable:72(v9, v10, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) T{_Timer?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-3]
StoreStaticField(_firstZeroTimer@1026248, v9 T{_Timer?})
ParallelMove rcx <- C, rax <- fp[-1]
StoreField(v5 T{_Timer} . _indexOrNext@1026248 = v0 T{Null?})
ParallelMove rcx <- fp[-2]
v118 <- LoadField(v4 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v123 <- LoadField(v4 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v124 <- LoadField(v123 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v189 <- UnboxInt64([non-speculative], v118 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-4] <- rdx
ParallelMove rsi <- rsi
v190 <- UnboxInt64([non-speculative], v124 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v189 T{_Smi} == v190 T{_Smi}) T{bool} goto (15, 16)
B15
ParallelMove rdi <- rcx
StaticCall:26( _growToNextCapacity@0150898<0> v4 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B17
B16
B17
ParallelMove rax <- rsi
v35 <- BinaryInt64Op(+ [tr], v189 T{_Smi}, v198 T{_Smi}) [1, 576460752303423488] int64
v191 <- BoxInt64(v35) [1, 576460752303423488] T{_Smi}
StoreField(v4 T{_GrowableList} . GrowableObjectArray.length = v191, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v35 T{_Smi}, v189 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v38 <- LoadField(v4 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-1]
StoreIndexed:40([_List] v38, v189 T{_Smi}, v5 T{_Timer})
ParallelMove  goto:82 B11
B10
ParallelMove rcx <- rax
ParallelMove  goto:84 B11
B11
ParallelMove rax <- rcx
DartReturn:86(v4)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- C
StoreStaticField(_scheduledWakeupTime@1026248, v2)
v3 <- LoadStaticField(_receivePort@1026248) T{_RawReceivePort?}
CheckNull:10(v3, CastError) T{_RawReceivePort}
MoveArgument(sp[1] <- v3 T{_RawReceivePort})
MoveArgument(sp[0] <- v4)
StaticCall:12( _setActive@1026248<0> v3 T{_RawReceivePort}, v4, using unchecked entrypoint)
ParallelMove rax <- C
StoreStaticField(_receivePortActive@1026248, v4)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
slow path check null (cast) operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v2 <- LoadStaticField(_sendPort@1026248) T{_SendPort?}
Branch if StrictCompare:10(!==, v2, v0) goto (3, 4)
B3
v13 <- LoadStaticField:4(eventHandlerSendData, CallsInitializer) T{(dynamic, Object?, SendPort, int) => void}
MoveArgument(sp[2] <- v0 T{Null?})
MoveArgument(sp[1] <- v2 T{_SendPort})
MoveArgument(sp[0] <- v5 T{_Smi})
v24 <- StaticCall:10( _sendData@15069316<0> v0 T{Null?}, v2 T{_SendPort}, v5 T{_Smi}) T{void?}
ParallelMove rax <- C
StoreStaticField(_scheduledWakeupTime@1026248, v7)
ParallelMove  goto:28 B5
B4
B5
ParallelMove rax <- C
DartReturn:32(v0)
CheckStackOverflowSlowPath
slow path late initialization error operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-2] <- rsi, fp[-6] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . _used@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
v6 <- BinaryInt64Op(- [tr], v4, v114 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_TimerHeap} . _used@1026248 = v6 T{int} <int64>)
Branch if EqualityCompare(v6 T{int} == v115 T{_Smi}) T{bool} goto (3, 4)
B3
v22 <- LoadField(v2 . _list@1026248) T{_List}
ParallelMove fp[-1] <- rdx
v69 <- LoadStaticField:4(_sentinelTimer@1026248, CallsInitializer) T{_Timer}
ParallelMove rcx <- rax, rdx <- fp[-1]
v24 <- LoadField(v22 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v105 <- UnboxInt64([non-speculative], v24) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:30(v105 T{_Smi}, v115 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rdx <- rdx, rax <- rcx
StoreIndexed:30([_List] v22, v115 T{_Smi}, v69 T{_Timer})
ParallelMove r8 <- C, rsi <- fp[-2]
StoreField(v3 T{_Timer} . _indexOrNext@1026248 = v0 T{Null?})
ParallelMove rax <- r8
DartReturn:34(v0)
B4
ParallelMove r8 <- C
v9 <- LoadField(v2 . _list@1026248) T{_List}
ParallelMove fp[-5] <- r9
v26 <- LoadField(v9 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove r10 <- rax
v107 <- UnboxInt64([non-speculative], v26) [0, 576460752303423487] int64
ParallelMove rax <- r10, rbx <- rcx, fp[-4] <- r10
GenericCheckBound:42(v107 T{_Smi}, v6 T{int}) [-9223372036854775808, 9223372036854775807] int64
v116 <- LoadIndexed:42([_List] v9, v6 T{int}) T{_Timer}
ParallelMove fp[-3] <- rbx
Branch if StrictCompare:44(!==, v116 T{_Timer}, v3) goto (5, 9)
B5
v15 <- LoadField(v3 . _indexOrNext@1026248) T{Object??}
ParallelMove rax <- r12, rdx <- r8, rcx <- r8, fp[-1] <- r12
t0 <- AssertAssignable:52(v15, v16, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1], rcx <- fp[-3]
StoreField(v116 T{_Timer} . _indexOrNext@1026248 = v15 T{int})
ParallelMove rsi <- fp[-1]
v109 <- UnboxInt64([non-speculative], v15 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-4], rbx <- rsi
GenericCheckBound:58(v107 T{_Smi}, v109 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-5], rax <- rcx
StoreIndexed:58([_List] v9 T{_List}, v109 T{int}, v116 T{_Timer})
v53 <- LoadField(v116 T{_Timer} . _wakeupTime@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-2]
v54 <- LoadField(v3 T{_Timer} . _wakeupTime@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v55 <- BinaryInt64Op(- [tr], v53, v54) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v55 != v115 T{_Smi}) T{bool} goto (20, 21)
B20
B21
v59 <- LoadField(v116 T{_Timer} . _id@1026248) [-9223372036854775808, 9223372036854775807] int64
v60 <- LoadField(v3 T{_Timer} . _id@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v61 <- BinaryInt64Op(- [tr], v59, v60) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax goto:36 B22
B22
Branch if RelationalOp(<, v66 T{int}, v115 T{_Smi}) T{bool} goto (6, 7)
B6
ParallelMove rdi <- fp[-6], rsi <- rcx
StaticCall:72( _bubbleUp@1026248<0> v2, v116 T{_Timer}, using unchecked entrypoint)
ParallelMove  goto:80 B8
B7
ParallelMove rdi <- fp[-6], rsi <- rcx
StaticCall:76( _bubbleDown@1026248<0> v2, v116 T{_Timer}, using unchecked entrypoint)
ParallelMove  goto:82 B8
B8
B9
B10
v12 <- LoadField(v2 . _list@1026248) T{_List}
ParallelMove fp[-1] <- rdx
v13 <- LoadField(v2 . _used@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-4] <- rbx
v35 <- LoadStaticField:4(_sentinelTimer@1026248, CallsInitializer) T{_Timer}
ParallelMove rcx <- rax, rdx <- fp[-1]
v31 <- LoadField(v12 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rsi <- rsi
v112 <- UnboxInt64([non-speculative], v31) [0, 576460752303423487] int64
ParallelMove rax <- rsi, rbx <- fp[-4]
GenericCheckBound:98(v112 T{_Smi}, v13) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx, rax <- rcx, rcx <- fp[-4]
StoreIndexed:98([_List] v12, v13 T{int}, v35 T{_Timer})
ParallelMove rax <- C, rcx <- fp[-2]
StoreField(v3 T{_Timer} . _indexOrNext@1026248 = v0 T{Null?})
ParallelMove rax <- rax
DartReturn:102(v0)
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-9] <- rsi
v18 <- LoadField:146(v2 . _used@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-8] <- rbx
v62 <- LoadField:146(v2 T{_TimerHeap} . _list@1026248) T{_List}
ParallelMove fp[-7] <- r8
v64 <- LoadField:146(v62 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdi <- rax
v176 <- UnboxInt64:146([non-speculative], v64) [0, 576460752303423487] int64
ParallelMove fp[-6] <- rdi
ParallelMove r9 <- rax
v170 <- UnboxInt64:146([non-speculative], v64 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-5] <- r9
ParallelMove r10 <- rax
v166 <- UnboxInt64:146([non-speculative], v64 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-4] <- r10
v95 <- LoadField:146(v3 T{_Timer} . _wakeupTime@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- r12
v101 <- LoadField:146(v3 T{_Timer} . _id@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-2] <- r13
ParallelMove  goto:146 B18
B18
  Loop 0
CheckStackOverflow:144(stack=0, loop=1)
v11 <- LoadField(v3 . _indexOrNext@1026248) T{Object??}
ParallelMove rax <- rax, rdx <- C, rcx <- C, fp[-1] <- rax
t0 <- AssertAssignable:18(v11, v12, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rsi <- fp[-1]
v164 <- UnboxInt64([non-speculative], v11 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-12] <- rsi
ParallelMove rax <- rsi
v117 <- ShiftInt64Op(<< [tr], v164 T{int}, v120) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
v115 <- BinaryInt64Op(+ [tr], v117 T{int}, v120 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax
v127 <- BinaryInt64Op(+ [tr], v117 T{int}, v180 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-8]
Branch if RelationalOp(<, v115 T{int}, v18) T{bool} goto (3, 6)
B3
  Loop 0
ParallelMove r8 <- fp[-7], r9 <- fp[-3]
ParallelMove rax <- fp[-4], rbx <- rcx
GenericCheckBound:40(v166 T{_Smi}, v115 T{int}) [-9223372036854775808, 9223372036854775807] int64
v181 <- LoadIndexed:40([_List] v62 T{_List}, v115 T{int}) T{_Timer}
v94 <- LoadField(v181 T{_Timer} . _wakeupTime@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rcx
v96 <- BinaryInt64Op(- [tr], v94, v95) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v96 != v182 T{_Smi}) T{bool} goto (36, 37)
B36
  Loop 0
ParallelMove rbx <- rbx, r10 <- fp[-2] goto:26 B38
B37
  Loop 0
ParallelMove r10 <- fp[-2]
v100 <- LoadField(v181 T{_Timer} . _id@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v102 <- BinaryInt64Op(- [tr], v100, v101) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx goto:36 B38
B38
  Loop 0
Branch if RelationalOp(<, v107 T{int}, v182 T{_Smi}) T{bool} goto (4, 7)
B4
  Loop 0
ParallelMove r12 <- rax, rcx <- rcx goto:72 B8
B7
B6
  Loop 0
ParallelMove r8 <- fp[-7], r9 <- fp[-3], r10 <- fp[-2]
ParallelMove  goto:64 B5
B5
  Loop 0
ParallelMove r12 <- fp[-9], rcx <- r9 goto:74 B8
B8
  Loop 0
Branch if RelationalOp(<, v127 T{int}, v18 T{int}) T{bool} goto (9, 12)
B9
  Loop 0
ParallelMove rax <- fp[-5], rbx <- rdx
GenericCheckBound:88(v170 T{_Smi}, v127 T{int}) [-9223372036854775808, 9223372036854775807] int64
v184 <- LoadIndexed:88([_List] v62 T{_List}, v127 T{int}) T{_Timer}
v74 <- LoadField(v184 T{_Timer} . _wakeupTime@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v76 <- BinaryInt64Op(- [tr], v74, v198 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v76 != v182 T{_Smi}) T{bool} goto (31, 32)
B31
  Loop 0
ParallelMove rcx <- rdx goto:26 B33
B32
  Loop 0
v80 <- LoadField(v184 T{_Timer} . _id@1026248) [-9223372036854775808, 9223372036854775807] int64
v81 <- LoadField(v20 T{_Timer} . _id@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v82 <- BinaryInt64Op(- [tr], v80, v81) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx goto:36 B33
B33
  Loop 0
Branch if RelationalOp(<, v87 T{int}, v182 T{_Smi}) T{bool} goto (10, 13)
B10
  Loop 0
ParallelMove r12 <- rax goto:120 B14
B13
B12
B11
B14
  Loop 0
ParallelMove fp[-11] <- r12
Branch if StrictCompare:124(===, v23, v3) goto (16, 17)
B17
  Loop 0
v60 <- LoadField(v23 T{_Timer} . _indexOrNext@1026248) T{Object??}
ParallelMove rax <- r13, rdx <- C, rcx <- C, fp[-10] <- r13
t0 <- AssertAssignable:16(v60, v12 T{_Type}, ' in type cast', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1], rcx <- fp[-11]
StoreField(v23 T{_Timer} . _indexOrNext@1026248 = v11 T{int})
ParallelMove rax <- fp[-10], rsi <- fp[-9]
StoreField(v3 T{_Timer} . _indexOrNext@1026248 = v60 T{int})
ParallelMove rax <- fp[-6], rbx <- fp[-12]
GenericCheckBound:24(v176 T{_Smi}, v164 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-7], rax <- rcx, rcx <- fp[-12]
StoreIndexed:24([_List] v62, v164 T{int}, v23 T{_Timer})
ParallelMove rcx <- fp[-10]
v175 <- UnboxInt64([non-speculative], v60 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-6], rbx <- rcx
GenericCheckBound:28(v176 T{_Smi}, v175 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-7], rax <- rsi
StoreIndexed:28([_List] v62 T{_List}, v175 T{int}, v3 T{_Timer})
ParallelMove rbx <- fp[-8], r8 <- fp[-7], r12 <- fp[-3], r13 <- fp[-2], r10 <- fp[-4], r9 <- fp[-5], rdi <- fp[-6] goto:142 B18
B16
ParallelMove rax <- C
DartReturn:152(v0)
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove  goto:48 B7
B7
  Loop 0
CheckStackOverflow:46(stack=0, loop=1)
v73 <- LoadField(v3 T{_Timer} . _indexOrNext@1026248) T{Object??}
v139 <- LoadClassId(v73) int64
MoveArgument(sp[1] <- v73)
MoveArgument(sp[0] <- v10 T{_Smi})
ParallelMove rcx <- rdx
v75 <- DispatchTableCall( cid=v139 Object.==<0>, v73, v10 T{_Smi}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:14(!==, v75 T{bool}, v6) goto (6, 8)
BoolTest
B6
  Loop 0
ParallelMove rsi <- fp[-1], rbx <- fp[-2]
v38 <- LoadField(v2 T{_TimerHeap} . _list@1026248) T{_List}
ParallelMove fp[-4] <- rdi
v39 <- LoadField(v3 T{_Timer} . _indexOrNext@1026248) T{Object??}
ParallelMove rax <- r8, rdx <- C, rcx <- C, fp[-3] <- r8
t1 <- AssertAssignable:14(v39, v31 T{_Type}, ' in type cast', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rsi <- fp[-3]
v114 <- UnboxInt64([non-speculative], v39 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-8] <- rsi
ParallelMove rax <- rsi
v93 <- BinaryInt64Op(- [tr], v114 T{int}, v123 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax, rdi <- C
v95 <- BinaryInt64Op(~/ [tr], v93, v124 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax, r8 <- fp[-4]
v44 <- LoadField(v38 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove r9 <- rax
v115 <- UnboxInt64([non-speculative], v44) [0, 576460752303423487] int64
ParallelMove rax <- r9, rbx <- rcx, fp[-7] <- r9
GenericCheckBound:18(v115 T{_Smi}, v95 T{int}) [-9223372036854775808, 9223372036854775807] int64
v125 <- LoadIndexed:18([_List] v38, v95 T{int}) T{_Timer}
ParallelMove r10 <- fp[-2], fp[-6] <- rbx
v53 <- LoadField(v3 T{_Timer} . _wakeupTime@1026248) [-9223372036854775808, 9223372036854775807] int64
v54 <- LoadField(v125 T{_Timer} . _wakeupTime@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v55 <- BinaryInt64Op(- [tr], v53, v54) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v55 != v126 T{_Smi}) T{bool} goto (18, 19)
B18
B19
  Loop 0
v59 <- LoadField(v3 T{_Timer} . _id@1026248) [-9223372036854775808, 9223372036854775807] int64
v60 <- LoadField(v125 T{_Timer} . _id@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v61 <- BinaryInt64Op(- [tr], v59, v60) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax goto:36 B20
B20
  Loop 0
Branch if RelationalOp(<, v66 T{int}, v126 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
v20 <- LoadField(v125 T{_Timer} . _indexOrNext@1026248) T{Object??}
ParallelMove rax <- r12, rdx <- C, rcx <- C, fp[-5] <- r12
t0 <- AssertAssignable:12(v20, v31 T{_Type}, ' in type cast', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-5], rcx <- fp[-2]
StoreField(v3 T{_Timer} . _indexOrNext@1026248 = v20 T{int})
ParallelMove rax <- fp[-3], rsi <- fp[-6]
StoreField(v125 T{_Timer} . _indexOrNext@1026248 = v39 T{int})
ParallelMove rdi <- fp[-5]
v117 <- UnboxInt64([non-speculative], v20 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-7], rbx <- rdi
GenericCheckBound:24(v115 T{_Smi}, v117 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-4], rax <- rcx
StoreIndexed:24([_List] v38 T{_List}, v117 T{int}, v3 T{_Timer})
ParallelMove rax <- fp[-7], rbx <- fp[-8]
GenericCheckBound:28(v115 T{_Smi}, v114 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-4], rax <- rsi, rbx <- fp[-8]
StoreIndexed:28([_List] v38 T{_List}, v114 T{int}, v125 T{_Timer})
ParallelMove rdi <- fp[-1], rax <- rcx goto:44 B7
B4
B8
B5
ParallelMove rax <- C
DartReturn:54(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
v2 <- AllocateObject:6(cls=_Timer, <not-aliased>) T{_Timer}
ParallelMove rax <- rax, rcx <- C
StoreField(v2 T{_Timer} . _tick@1026248 = v18 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v2 T{_Timer} . _wakeupTime@1026248 = v18 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v2 T{_Timer} . _milliSeconds@1026248 = v18 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v2 T{_Timer} . _repeating@1026248 = v13 T{bool}, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v2 T{_Timer} . _id@1026248 = v14 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:10(v2)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v3 . _indexOrNext@1026248) T{Object??}
v7 <- LoadClassId(v4) int64
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v5)
ParallelMove rcx <- rcx
v6 <- DispatchTableCall( cid=v7 Object.==<0>, v4, v5) T{bool}
ParallelMove rax <- rax
DartReturn:14(v6 T{bool})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:4(stack=0, loop=0)
v2 <- AllocateObject:6(cls=_TimerHeap) T{_TimerHeap}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-1] <- rax
StaticCall:8( _TimerHeap@1026248.<0> v2)
ParallelMove rax <- fp[-1]
DartReturn:10(v2)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
StoreField(v2 . _used@1026248 = v60 T{_Smi} <int64>, NoStoreBarrier)
v10 <- LoadStaticField:4(_sentinelTimer@1026248, CallsInitializer) T{_Timer}
ParallelMove rbx <- C, r10 <- C, rax <- rax
ParallelMove fp[-2] <- rax
v28 <- CreateArray:10(v4 T{TypeArguments}, v5 T{_Smi}) T{_List}
ParallelMove rax <- rax
ParallelMove rdx <- C, rcx <- fp[-2] goto:38 B10
B10
  Loop 0
CheckStackOverflow:42(stack=0, loop=1)
Branch if RelationalOp(<, v22, v61 T{_Smi}) T{bool} goto (8, 12)
B8
  Loop 0
StoreIndexed:34([_List] v28, v22 T{int}, v10, NoStoreBarrier)
ParallelMove rdx <- rdx
v27 <- BinaryInt64Op(+ [tr], v22 T{int}, v63 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:40 B10
B12
ParallelMove rcx <- fp[-1]
ParallelMove rax <- rax
StoreField(v2 . _list@1026248 = v28 T{_List})
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[3]
v4 <- LoadField(v2 . Closure.context {final}) T{*}
ParallelMove fp[-1] <- rcx
CheckStackOverflow:8(stack=0, loop=0)
v5 <- LoadField(v4 . timer) T{_Timer}
v14 <- LoadField(v5 T{_Timer} . _callback@1026248) T{((dynamic, Timer) => void)??}
Branch if StrictCompare:12(!==, v14, v0 T{Null?}) T{bool} goto (3, 4)
B3
ParallelMove rdi <- rdi
StaticCall:20( cancel<0> v5 T{_Timer}, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
v9 <- LoadField(v4 . _future) T{_Future}
ParallelMove rdi <- rdi, rsi <- fp[2]
StaticCall:22( _completeWithValue@4048458<0> v9, v3)
ParallelMove  goto:28 B5
B4
B5
ParallelMove rax <- C
DartReturn:32(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v20 <- LoadField(v19 . Closure.context {final}) T{*}
ParallelMove fp[-10] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove  goto:12 B3
B3
v21 <- LoadField(v20 . _future) T{_Future}
ParallelMove fp[-9] <- rdi
v22 <- LoadField(v20 . this) T{_Future}
v23 <- LoadField(v22 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- r8, rcx <- C, rbx <- C, fp[-8] <- r8
v25 <- InstantiateTypeArguments:16(v24, instantiator_type_args(v23), function_type_args(v0), instantiator_class(Library:'dart:async' Class: _Future@4048458)) T{*?}
ParallelMove rcx <- rax, rax <- fp[-10]
v26 <- LoadField(v20 . zone) T{_RootZone}
v27 <- LoadField(v20 . onTimeoutHandler) T{(dynamic) => FutureOr<X0>}
MoveArgument(sp[2] <- v25)
MoveArgument(sp[1] <- v26)
MoveArgument(sp[0] <- v27)
v28 <- StaticCall:18( run<1> v25, v26, v27, using unchecked entrypoint) T{Y0?}
ParallelMove rdi <- fp[-9], rsi <- rax
StaticCall:20( _complete@4048458<0> v21, v28)
ParallelMove  goto:22 B4
B5
ParallelMove rax <- fp[-2], rsi <- rax
v10 <- LoadField(v4 . _future) T{_Future}
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx
StaticCall:26( _completeError@4048458<0> v10, v5, v6, using unchecked entrypoint)
ParallelMove  goto:28 B4
B4
ParallelMove rax <- C
DartReturn:30(v0)
CheckStackOverflowSlowPath
B0
B9
Enter frame
PrologueOffset = 0
ParallelMove rsi <- rdi, rbx <- rsi, fp[-2] <- rdi, fp[-3] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdi, rcx <- C, fp[-1] <- rdi
t0 <- AssertAssignable:10(v3, v4, 'value', instantiator_type_args(v5), function_type_args(v0)) T{FutureOr<X0>?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-3], rdx <- fp[-1], rcx <- C
v9 <- InstanceOf:12(v3 T{FutureOr<X0>?} IS Future<X0>, instantiator_type_args(v5 T{TypeArguments}), function_type_args(v0)) T{bool}
InlineInstanceof
UninstantiatedTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:16(===, v9 T{bool}, v10) goto (3, 7)
BoolTest
B3
ParallelMove rax <- fp[-3], rdx <- fp[-1], rcx <- C
v14 <- InstanceOf:22(v3 T{_Future} IS _Future@4048458<X0>, instantiator_type_args(v5 T{TypeArguments}), function_type_args(v0)) T{bool}
InlineInstanceof
UninstantiatedTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:26(===, v14 T{bool}, v10) goto (4, 5)
BoolTest
B4
ParallelMove rdi <- fp[-3], rsi <- fp[-2]
StaticCall:32( _chainCoreFutureSync@4048458<0> v3 T{_Future}, v2)
ParallelMove  goto:40 B6
B5
ParallelMove rdi <- fp[-2], rsi <- fp[-3]
StaticCall:36( _chainForeignFuture@4048458<0> v2, v3 T{_Future}, using unchecked entrypoint)
ParallelMove  goto:42 B6
B6
B7
ParallelMove rdi <- fp[-2]
v11 <- StaticCall:46( _removeListeners@4048458<0> v2, using unchecked entrypoint, result_type = T{_FutureListener?}) T{_FutureListener?}
ParallelMove rdi <- fp[-2], rsi <- fp[-3], rax <- rax
ParallelMove fp[-1] <- rax
StaticCall:48( _setValue@4048458<0> v2, v3 T{FutureOr<X0>?}, using unchecked entrypoint)
ParallelMove rdi <- fp[-2], rsi <- fp[-1]
StaticCall:50( _propagateToListeners@4048458<0> v2, v11)
ParallelMove  goto:56 B8
B8
ParallelMove rax <- C
DartReturn:58(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v3 . _future) T{_Future}
ParallelMove fp[-2] <- rdi
v6 <- LoadField(v3 . timeLimit) T{Duration}
ParallelMove fp[-1] <- rax
v5 <- AllocateObject:10(cls=TimeoutException) T{TimeoutException}
ParallelMove rcx <- rax, rax <- C
StoreField(v5 T{TimeoutException} . message = v15 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v5 T{TimeoutException} . duration = v6 T{Duration}, NoStoreBarrier)
ParallelMove rdi <- fp[-2], rsi <- rcx, rdx <- C
StaticCall:14( _completeError@4048458<0> v4, v5, v7, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v4 <- LoadField(v2 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rax
v6 <- BinarySmiOp:4(- [tr], v4, v5) [-2, 4611686018427387901] T{_Smi}
v7 <- LoadIndexedUnsafe(rbp[v6 + 24]) T{*?}
v8 <- LoadIndexedUnsafe(rbp[v6 + 16]) T{Duration}
v13 <- LoadIndexed([_List] v2, v11 T{_Smi}) T{*?}
Branch if StrictCompare:16(===, v13, v14) goto (2, 3)
B2
v21 <- LoadIndexed([_List] v2, v19 T{_Smi}) T{*?}
ParallelMove rax <- rax
v22 <- BinarySmiOp:10(- [tr], v4, v21) [-4611686018427387903, 4611686018427387903] T{_Smi}
v23 <- LoadIndexedUnsafe(rbp[v22 + 8]) T{*?}
ParallelMove rax <- rcx goto:26 B5
B3
ParallelMove rax <- C goto:28 B5
B5
v16 <- LoadField(v7 . Closure.context {final}) T{*}
CheckStackOverflow:34(stack=0, loop=0)
MoveArgument(sp[2] <- v16 T{*})
MoveArgument(sp[1] <- v8)
MoveArgument(sp[0] <- v15)
v18 <- StaticCall:36( timeout<0> v16 T{*}, v8, v15) T{_Future}
ParallelMove rax <- rax
DartReturn:38(v18)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- sp[1], rcx <- sp[2]
StoreField(v2 . _function@0150898 = v3)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
ParallelMove rcx <- sp[1]
v4 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[2]
StoreField(v2 . _state@4048458 = v4 T{int} <int64>)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _milliSeconds@1026248 {final}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v3 == v43 T{_Smi}) T{bool} goto (3, 7)
B3
v10 <- LoadStaticField(_firstZeroTimer@1026248) T{_Timer?}
Branch if StrictCompare:22(===, v10, v0) goto (4, 5)
B4
ParallelMove rax <- rcx
StoreStaticField(_lastZeroTimer@1026248, v2)
ParallelMove rax <- rcx
StoreStaticField(_firstZeroTimer@1026248, v2)
ParallelMove  goto:36 B6
B5
v22 <- LoadStaticField:4(_lastZeroTimer@1026248, CallsInitializer) T{_Timer}
ParallelMove rax <- fp[-1], rcx <- rax
StoreField(v22 T{_Timer} . _indexOrNext@1026248 = v2 T{_Timer})
ParallelMove rax <- fp[-1]
StoreStaticField(_lastZeroTimer@1026248, v2)
ParallelMove  goto:38 B6
B6
StaticCall:40( _notifyZeroHandler@1026248<0> )
ParallelMove  goto:72 B11
B7
v16 <- LoadStaticField:4(_heap@1026248, CallsInitializer) T{_TimerHeap}
ParallelMove rdi <- rax, rsi <- fp[-1], rax <- rax
ParallelMove fp[-2] <- rax
StaticCall:46( add<0> v16 T{_TimerHeap}, v2, using unchecked entrypoint)
ParallelMove rdi <- fp[-2], rsi <- fp[-1]
v9 <- StaticCall:50( isFirst<0> v16 T{_TimerHeap}, v2, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:54(===, v9 T{bool}, v6) goto (8, 9)
BoolTest
B8
StaticCall:60( _notifyEventHandler@1026248<0> )
ParallelMove  goto:66 B10
B9
B10
B11
ParallelMove rax <- C
DartReturn:76(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . _used@1026248) [-9223372036854775808, 9223372036854775807] int64
v5 <- LoadField(v2 . _list@1026248) T{_List}
v31 <- LoadField(v5 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rsi <- rsi
v37 <- UnboxInt64([non-speculative], v31 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v4 == v37 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rdi <- rcx
StaticCall:26( _resize@1026248<0> v2, using unchecked entrypoint)
ParallelMove  goto:32 B5
B4
B5
v9 <- LoadField(v2 . _used@1026248) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rsi
v11 <- BinaryInt64Op(+ [tr], v9, v41 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_TimerHeap} . _used@1026248 = v11 T{int} <int64>)
v38 <- BoxInt64(v9 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v3 T{_Timer} . _indexOrNext@1026248 = v38 T{int})
v12 <- LoadField(v2 . _list@1026248) T{_List}
v13 <- LoadField(v12 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v39 <- UnboxInt64([non-speculative], v13) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:46(v39 T{_Smi}, v9) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx, rax <- rcx
StoreIndexed:46([_List] v12, v9 T{int}, v3)
ParallelMove rdi <- rdi, rsi <- rcx
StaticCall:48( _bubbleUp@1026248<0> v2, v3, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:50(v0)
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . _list@1026248) T{_List}
v19 <- LoadField(v4 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v81 <- UnboxInt64([non-speculative], v19 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rcx <- rcx
v72 <- ShiftInt64Op(<< [tr], v81 T{_Smi}, v71) [0, 1152921504606846974] int64
ParallelMove rcx <- rcx
v9 <- BinaryInt64Op(+ [tr], v72 T{int}, v71 T{_Smi}) [1, 1152921504606846975] int64
ParallelMove fp[-1] <- rcx
v22 <- LoadStaticField:4(_sentinelTimer@1026248, CallsInitializer) T{_Timer}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-3] <- rcx
v82 <- BoxInt64(v9 T{int}) [1, 1152921504606846975] T{_Smi}
ParallelMove rbx <- C, r10 <- r10
v70 <- CreateArray:10(v3 T{TypeArguments}, v82) T{_List}
ParallelMove rcx <- rax
ParallelMove fp[-4] <- rcx
ParallelMove rsi <- C, rbx <- fp[-1] goto:38 B11
B11
  Loop 0
CheckStackOverflow:42(stack=0, loop=1)
Branch if RelationalOp(<, v34, v9 T{_Smi}) T{bool} goto (9, 13)
B9
  Loop 0
ParallelMove rdx <- rcx, rax <- fp[-3]
StoreIndexed:34([_List] v70 T{_List}, v34 T{int}, v22)
ParallelMove rsi <- rsi
v39 <- BinaryInt64Op(+ [tr], v34 T{int}, v71 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:40 B11
B13
ParallelMove rax <- fp[-2]
v13 <- LoadField(v2 . _used@1026248) [-9223372036854775808, 9223372036854775807] int64
v14 <- LoadField(v2 . _list@1026248) T{_List}
ParallelMove rdi <- rcx, rsi <- C, rdx <- rdx, rbx <- rbx
StaticCall:26( setRange<0> v70 T{_List}, v87 T{_Smi}, v13, v14, using unchecked entrypoint)
ParallelMove rax <- fp[-4], rcx <- fp[-2]
StoreField(v2 T{_TimerHeap} . _list@1026248 = v70 T{_List})
ParallelMove rax <- C
DartReturn:30(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B6
Enter frame
PrologueOffset = 0
ParallelMove r8 <- rdi, rax <- rsi, rdi <- rdx, rsi <- rbx, fp[-6] <- rdi, fp[-7] <- rdx, fp[-9] <- rbx
CheckStackOverflow:26(stack=0, loop=0)
v223 <- LoadField(v2 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove fp[-10] <- rax
ParallelMove r9 <- rax
v266 <- UnboxInt64([non-speculative], v223 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-5] <- r9
Branch if RelationalOp(>, v286 T{_Smi}, v266 T{_Smi}) T{bool} goto (7, 10)
B10
Branch if RelationalOp(<, v4, v286 T{_Smi}) T{bool} goto (13, 11)
B11
Branch if RelationalOp(>, v4, v266 T{_Smi}) T{bool} goto (14, 15)
B15
Branch if EqualityCompare(v4 T{int} == v286 T{_Smi}) T{bool} goto (16, 17)
B16
ParallelMove rax <- C
DartReturn:120(v0)
B17
Branch if StrictCompare:124(===, v2, v5) goto (18, 20)
B18
v191 <- LoadField:82(v2 . Array.type_arguments {final}) T{TypeArguments?}
ParallelMove fp[-4] <- rsi
ParallelMove r12 <- C, r10 <- C goto:82 B64
B64
  Loop 1
ParallelMove fp[-2] <- r12, fp[-3] <- r10
CheckStackOverflow:86(stack=0, loop=1)
Branch if RelationalOp(<, v160, v4 T{int}) T{bool} goto (62, 65)
B62
  Loop 1
ParallelMove rax <- r9, rbx <- r12
GenericCheckBound:76(v266 T{_Smi}, v160) [-9223372036854775808, 9223372036854775807] int64
v287 <- LoadIndexed:76([_List] v2, v160 T{int}) T{X0?}
ParallelMove rax <- rbx, rdx <- rsi, rcx <- C, fp[-1] <- rbx
AssertAssignable:78(v287 T{X0?}, v89, 'value', instantiator_type_args(v191), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-5], rbx <- fp[-3]
GenericCheckBound:78(v266 T{_Smi}, v161) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-6], rax <- fp[-1], rcx <- fp[-3]
StoreIndexed:78([_List] v2, v161 T{int}, v287 T{X0?})
ParallelMove rax <- fp[-2]
v166 <- BinaryInt64Op(+ [tr], v160 T{int}, v288 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v167 <- BinaryInt64Op(+ [tr], v161 T{int}, v288 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- rax, r10 <- rcx, r8 <- fp[-6], rdi <- fp[-7], rsi <- fp[-4], r9 <- fp[-5] goto:84 B64
B65
B20
ParallelMove rdi <- r8
v131 <- LoadField:82(v5 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove r8 <- rax
v272 <- UnboxInt64:82([non-speculative], v131) [0, 576460752303423487] int64
ParallelMove fp[-8] <- r8
v134 <- LoadField:82(v2 . Array.type_arguments {final}) T{TypeArguments?}
ParallelMove fp[-4] <- r9
ParallelMove r13 <- C, r12 <- C goto:82 B49
B49
  Loop 0
ParallelMove fp[-2] <- r13, fp[-3] <- r12
CheckStackOverflow:86(stack=0, loop=1)
Branch if RelationalOp(<, v103, v4 T{int}) T{bool} goto (47, 22)
B47
  Loop 0
ParallelMove rax <- r8, rbx <- r13
GenericCheckBound:76(v272 T{_Smi}, v103) [-9223372036854775808, 9223372036854775807] int64
v289 <- LoadIndexed:76([_List] v5 T{_List}, v103 T{int}) T{*?}
ParallelMove rax <- rbx, rdx <- r9, rcx <- C, fp[-1] <- rbx
AssertAssignable:78(v289 T{*?}, v89, 'value', instantiator_type_args(v134), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-5], rbx <- fp[-3]
GenericCheckBound:78(v266 T{_Smi}, v104) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-6], rax <- fp[-1], rcx <- fp[-3]
StoreIndexed:78([_List] v2, v104 T{int}, v289 T{X0?})
ParallelMove rax <- fp[-2]
v109 <- BinaryInt64Op(+ [tr], v103 T{int}, v288 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v110 <- BinaryInt64Op(+ [tr], v104 T{int}, v288 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r13 <- rax, r12 <- rcx, rdi <- fp[-6], rsi <- fp[-9], r9 <- fp[-4], r8 <- fp[-8] goto:84 B49
B22
B23
ParallelMove rax <- C
DartReturn:164(v0)
B7
v28 <- AllocateObject:58(cls=RangeError) T{RangeError}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
MoveArgument(sp[3] <- v28)
MoveArgument(sp[2] <- v14)
MoveArgument(sp[1] <- v14)
MoveArgument(sp[0] <- v223 T{_Smi})
StaticCall:62( RangeError.range<0> v28, v14, v14, v223 T{_Smi})
ParallelMove rax <- fp[-1]
Throw:64(v28)
B13
B14
B12
v265 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v26 <- AllocateObject:98(cls=RangeError) T{RangeError}
ParallelMove rax <- rax
ParallelMove fp[-4] <- rax
MoveArgument(sp[3] <- v26)
MoveArgument(sp[2] <- v265 T{int})
MoveArgument(sp[1] <- v14)
MoveArgument(sp[0] <- v223 T{_Smi})
StaticCall:102( RangeError.range<0> v26, v265 T{int}, v14, v223 T{_Smi})
ParallelMove rax <- fp[-4]
Throw:104(v26)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v2 <- LoadStaticField(_receivePortActive@1026248) T{bool}
Branch if StrictCompare:12(!==, v2 T{bool}, v3) goto (3, 4)
BoolTest
B3
StaticCall:18( _createTimerHandler@1026248<0> )
ParallelMove  goto:24 B5
B4
B5
v4 <- LoadStaticField(_sendPort@1026248) T{_SendPort?}
CheckNull:28(v4, CastError) T{_SendPort}
MoveArgument(sp[1] <- v4 T{_SendPort})
MoveArgument(sp[0] <- v5 T{_Smi})
StaticCall:10( _sendInternal@1026248<0> v4 T{_SendPort}, v5 T{_Smi}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:32(v0)
CheckStackOverflowSlowPath
slow path check null (cast) operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:4(stack=0, loop=0)
v5 <- LoadStaticField:4(_sentinelTimer@1026248, CallsInitializer) T{_Timer}
ParallelMove rax <- rax
DartReturn:8(v5 T{_Timer})
CheckStackOverflowSlowPath
B0
B1
ParallelMove r10 <- C, r9 <- C, rcx <- C
ParallelMove rax <- rsi
StoreField(v2 . _tick@1026248 = v25 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
StoreField(v2 . _callback@1026248 = v3)
StoreField(v2 . _wakeupTime@1026248 = v4 <int64>)
StoreField(v2 . _milliSeconds@1026248 = v5 <int64>)
StoreField(v2 . _repeating@1026248 = v6)
v11 <- LoadStaticField(_idCount@1026248) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdx <- rdx
v23 <- UnboxInt64([non-speculative], v11 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rdx
v30 <- IntConverter(int64->uint32[tr], v23 T{int}) uint32
ParallelMove rbx <- rbx
v14 <- BinaryUint32Op(+ [tr], v30 T{int}, v31 T{_Smi}) [0, 4294967295] uint32
ParallelMove rbx <- rbx
v16 <- BinaryUint32Op(& [tr], v14, v32 T{_Smi}) [0, 536870911] uint32
v24 <- BoxUint32(v16) [0, 536870911] T{_Smi}
ParallelMove rax <- rax
StoreStaticField(_idCount@1026248, v24)
StoreField(v2 . _id@1026248 = v23 T{int} <int64>)
ParallelMove rax <- C
DartReturn:14(v0)
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[0] <- v0)
v2 <- NativeCall(EventHandler_TimerMillisecondClock) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v2, v3, 'function result', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v2 T{int})
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[3]
v4 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v5 <- LoadField(v4 . callback) T{(dynamic) => void}
MoveArgument(sp[0] <- v5)
ParallelMove rax <- rax
v6 <- ClosureCall:12( closure=v5<0>, v5) T{*?}
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v3 . this) T{_RootZone}
v5 <- LoadField(v3 . f) T{(dynamic) => void}
ParallelMove rdi <- rdi, rsi <- rsi
StaticCall:10( runGuarded<0> v4, v5, using unchecked entrypoint, result_type = T{Null?})
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rsi, fp[-10] <- rdi, fp[-11] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove  goto:12 B3
B3
v36 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rax <- rax
Branch if StrictCompare:18(===, v22, v36) goto (5, 6)
B5
MoveArgument(sp[0] <- v21)
ParallelMove rax <- fp[-11]
v25 <- ClosureCall:26( closure=v21<0>, v21) T{*?}
ParallelMove rax <- C
DartReturn:28(v0)
B6
MoveArgument(sp[2] <- v24)
MoveArgument(sp[1] <- v20)
MoveArgument(sp[0] <- v21)
StaticCall:32( _rootRun@4048458<1> v24, v20, v21)
ParallelMove  goto:34 B4
B7
ParallelMove rdi <- rax, rsi <- rdx
StaticCall:10( _rootHandleError@4048458<0> v6 T{Object}, v7 T{StackTrace})
ParallelMove  goto:40 B4
B4
ParallelMove rax <- C
DartReturn:42(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v18 <- LoadField(v17 . Closure.context {final}) T{*}
ParallelMove fp[-9] <- rcx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove  goto:12 B3
B3
v19 <- LoadField(v18 . result) T{_Future}
ParallelMove fp[-8] <- rdi
v20 <- LoadField(v18 . computation) T{(dynamic) => FutureOr<X0>}
ParallelMove fp[-7] <- rdx
MoveArgument(sp[0] <- v20)
ParallelMove rax <- rdx
ClosureCall:18( closure=v20<0>, v20)
ParallelMove rdi <- fp[-8], rsi <- C
StaticCall:20( _complete@4048458<0> v19, v0, using unchecked entrypoint)
ParallelMove  goto:22 B4
B5
ParallelMove rax <- fp[-2], rsi <- rax
v9 <- LoadField(v4 . result) T{_Future}
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx
StaticCall:26( _completeWithErrorCallback@4048458<0> v9, v5, v6)
ParallelMove  goto:28 B4
B4
ParallelMove rax <- C
DartReturn:30(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v15 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rdi <- fp[-1], rsi <- fp[-2], rdx <- fp[-3]
StaticCall:14( _completeError@4048458<0> v2, v3, v4, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- C
DartReturn:6(v2)
PrologueOffset = 11
Allocate SuspendState
Save SuspendState to frame
Copy frame to SuspendState
Call suspend Dart function
SuspendState Allocation slow case
Resize SuspendState
Old gen SuspendState slow case
EnterCallRuntimeFrame
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(LibraryPrefix_issueLoad) T{*?}
ParallelMove rax <- rax
DartReturn:8(v3)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdx <- rax
v13 <- AllocateObject:10(cls=_Future, v2 T{TypeArguments}, <not-aliased>) T{_Future}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-2] <- rcx
StoreField(v13 T{_Future} . _state@4048458 = v25 T{_Smi} <int64>, NoStoreBarrier)
v23 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rcx <- rax, rax <- fp[-2]
StoreField(v13 T{_Future} . _zone@4048458 = v23, NoStoreBarrier)
ParallelMove rdx <- fp[-1]
v3 <- AllocateObject:10(cls=_AsyncCompleter, v2, <not-aliased>) T{_AsyncCompleter}
ParallelMove rax <- rax, rcx <- fp[-2]
StoreField(v3 T{_AsyncCompleter} . future = v13, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v3)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rsi, fp[-3] <- rdi, fp[-4] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v93 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.index) T{_Uint32List}
v98 <- LoadField(v93 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rbx <- rbx
v171 <- UnboxInt64([non-speculative], v98 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdx <- rbx
v7 <- BinaryInt64Op(- [tr], v171 T{_Smi}, v187 T{_Smi}) [v171-1, v171-1] int64
ParallelMove fp[-2] <- rdx
ParallelMove rbx <- rbx
v8 <- ShiftInt64Op(>> [tr], v171 T{_Smi}, v187 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdi <- rcx, rsi <- rax, fp[-1] <- rbx
v9 <- StaticCall:18( _hashCode@3220832<0> v2, v3, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax, rdx <- fp[-3]
v103 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.hash_mask) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v172 <- UnboxInt64([non-speculative], v103 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rax
v112 <- BinaryInt64Op(& [tr], v9 T{int}, v172 T{_Smi}) [0, 4611686018427387903] int64
Branch if EqualityCompare(v112 == v188 T{_Smi}) T{bool} goto (38, 39)
B38
ParallelMove r8 <- fp[-1], rsi <- fp[-1] goto:32 B40
B39
ParallelMove rsi <- fp[-1]
ParallelMove rbx <- rbx
v118 <- BinaryInt64Op(* [tr], v112, v8 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rbx goto:34 B40
B40
ParallelMove fp[-7] <- r8
ParallelMove rax <- rax
v131 <- BinaryInt64Op(& [tr], v9 T{int}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
v133 <- ShiftInt64Op(<< [tr], v131, v187 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v134 <- BinaryInt64Op(+ [tr], v133, v131) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v135 <- BinaryInt64Op(& [tr], v134, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v140 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.index) T{_Uint32List}
v39 <- LoadField(v140 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v173 <- UnboxInt64([non-speculative], v39) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:28(v173 T{_Smi}, v135 T{int}) [-9223372036854775808, 9223372036854775807] int64
v189 <- LoadIndexed:28([_Uint32List] v140 T{_Uint32List}, v135 T{int}) [0, 4294967295] uint32
ParallelMove r10 <- rcx, rax <- rax goto:116 B12
B12
  Loop 0
ParallelMove fp[-6] <- r10
CheckStackOverflow:114(stack=0, loop=1)
ParallelMove rax <- rax
v177 <- IntConverter(uint32->int64, v16) [0, 4294967295] int64
Branch if EqualityCompare(v177 T{_Smi} != v188 T{_Smi}) T{bool} goto (11, 13)
B11
  Loop 0
Branch if EqualityCompare(v177 T{_Smi} != v187 T{_Smi}) T{bool} goto (3, 9)
B3
  Loop 0
ParallelMove rcx <- r8
v29 <- BinaryInt64Op(^ [tr], v119 T{int}, v177 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v29, v8) T{bool} goto (4, 7)
B4
  Loop 0
ParallelMove r12 <- rcx
v32 <- ShiftInt64Op(<< [tr], v29, v187 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-5] <- r12
v79 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.data) T{_List}
v42 <- LoadField(v79 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v178 <- UnboxInt64([non-speculative], v42) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- r12
GenericCheckBound:64(v178 T{_Smi}, v32) [-9223372036854775808, 9223372036854775807] int64
v190 <- LoadIndexed:64([_List] v79 T{_List}, v32 T{int}) T{*?}
v217 <- LoadClassId(v3 T{Object??}) int64
MoveArgument(sp[1] <- v3 T{Object??})
MoveArgument(sp[0] <- v190 T{Object??})
ParallelMove rcx <- rcx
v88 <- DispatchTableCall( cid=v217 Object.==<0>, v3 T{Object??}, v190 T{Object??}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:70(===, v88 T{bool}, v21) goto (5, 6)
BoolTest
B6
  Loop 0
ParallelMove rcx <- fp[-3] goto:90 B8
B5
ParallelMove rcx <- fp[-3]
v74 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.data) T{_List}
ParallelMove rsi <- fp[-5]
v37 <- BinaryInt64Op(+ [tr], v32 T{int}, v187 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v45 <- LoadField(v74 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdi <- rdi
v180 <- UnboxInt64([non-speculative], v45) [0, 576460752303423487] int64
ParallelMove rax <- rdi, rbx <- rsi
GenericCheckBound:80(v180 T{_Smi}, v37) [-9223372036854775808, 9223372036854775807] int64
v191 <- LoadIndexed:80([_List] v74 T{_List}, v37 T{int}) T{*?}
ParallelMove rax <- rax
DartReturn:82(v191 T{*?})
B7
  Loop 0
ParallelMove rcx <- rdx
ParallelMove  goto:92 B8
B8
B9
  Loop 0
ParallelMove rcx <- rdx
ParallelMove  goto:100 B10
B10
  Loop 0
ParallelMove rsi <- fp[-6]
v63 <- BinaryInt64Op(+ [tr], v15 T{int}, v187 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v64 <- BinaryInt64Op(& [tr], v63, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v69 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.index) T{_Uint32List}
v48 <- LoadField(v69 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r8 <- r8
v182 <- UnboxInt64([non-speculative], v48) [0, 4611686018427387903] int64
ParallelMove rax <- r8, rbx <- rsi
GenericCheckBound:106(v182 T{_Smi}, v64 T{int}) [-9223372036854775808, 9223372036854775807] int64
v192 <- LoadIndexed:106([_Uint32List] v69 T{_Uint32List}, v64 T{int}) [0, 4294967295] uint32
ParallelMove r10 <- rsi, rax <- rax, rdx <- rcx, rdi <- rdx, rsi <- fp[-1], r8 <- fp[-7] goto:112 B12
B13
ParallelMove rcx <- rdx
v55 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.data) T{_List}
ParallelMove rax <- rax
DartReturn:122(v55 T{_List})
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(LibraryPrefix_loadingUnit) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{Object}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{Object})
PrologueOffset = 0
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v3 . prefix) T{_LibraryPrefix}
MoveArgument(sp[0] <- v4)
StaticCall:10( _setLoaded@0150898<0> v4, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(LibraryPrefix_setLoaded) T{*?}
ParallelMove rax <- rax
DartReturn:8(v3)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:4(stack=0, loop=0)
ParallelMove rdi <- C
v3 <- StaticCall:6( Map.<0> v2, result_type = T{_Map}) T{_Map}
ParallelMove rax <- rax
DartReturn:8(v3)
CheckStackOverflowSlowPath
Checking for concrete finalized classes:
 * 482 (_SyncCompleter)
 * 483 (_AsyncCompleter)
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v3)
v5 <- StaticCall:10( _loadLibrary@0150898<0> v3) T{_Future}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v2 <- LoadStaticField:4(_uriBaseClosure@0150898, CallsInitializer) T{_Closure}
ParallelMove rax <- rax
DartReturn:6(v2)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v21 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[0] <- v2)
ParallelMove rcx <- rcx
v3 <- DispatchTableCall( cid=v21 List.length<0>, v2) T{int}
ParallelMove rax <- rax
ParallelMove rdx <- rax
v17 <- UnboxInt64:32([non-speculative], v3 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove fp[-2] <- rdx
ParallelMove rdi <- C goto:32 B5
B5
  Loop 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:36(stack=0, loop=1)
Branch if RelationalOp(<, v5, v17 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
v18 <- BoxInt64(v5) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v22 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v18 T{int})
ParallelMove rcx <- rcx
v8 <- DispatchTableCall( cid=v22 List.[]<0>, v2, v18 T{int}) T{*?}
ParallelMove rdi <- rax
StaticCall:28( _rehash@0150898<0> v8 T{X0?}, using unchecked entrypoint)
ParallelMove rcx <- fp[-1]
v10 <- BinaryInt64Op(+ [tr], v5, v20 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rcx, rdx <- fp[-2] goto:34 B5
B4
ParallelMove rax <- C
DartReturn:38(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-3] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . _data@0150898) T{_List}
ParallelMove fp[-2] <- rax
v115 <- LoadField(v4 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v167 <- UnboxInt64:64([non-speculative], v115 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-1] <- rcx
ParallelMove rbx <- C, rdx <- C goto:64 B11
B11
  Loop 1
CheckStackOverflow:68(stack=0, loop=1)
Branch if RelationalOp(<, v7, v167 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 1
v184 <- LoadIndexed:28([_List] v4, v7 T{int}) T{_WeakProperty?}
Branch if StrictCompare:30(!==, v184 T{_WeakProperty?}, v0) goto (5, 8)
B5
  Loop 1
v110 <- LoadField(v184 T{_WeakProperty} . WeakProperty.key) T{*?}
Branch if StrictCompare:36(!==, v110 T{*?}, v0) goto (6, 9)
B6
  Loop 1
ParallelMove rbx <- rbx
v53 <- BinaryInt64Op(+ [tr], v6, v185 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx goto:58 B10
B9
B8
B7
B10
  Loop 1
ParallelMove rdx <- rdx
v51 <- BinaryInt64Op(+ [tr], v7 T{int}, v185 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx, rdx <- rdx goto:66 B11
B4
ParallelMove rdx <- rcx
v13 <- ShiftInt64Op(>> [tr], v167 T{_Smi}, v186 T{_Smi}) [0, 144115188075855871] int64
Branch if RelationalOp(<=, v6, v13) T{bool} goto (12, 13)
B12
ParallelMove rdx <- rcx
v48 <- ShiftInt64Op(>> [tr], v167 T{_Smi}, v185 T{_Smi}) [0, 288230376151711743] int64
ParallelMove rdx <- rdx goto:112 B17
B13
ParallelMove rdx <- rcx
v16 <- ShiftInt64Op(>> [tr], v167 T{_Smi}, v185 T{_Smi}) [0, 288230376151711743] int64
Branch if RelationalOp(>, v6, v16) T{bool} goto (14, 15)
B14
ParallelMove rdx <- rcx
v19 <- ShiftInt64Op(<< [tr], v167 T{_Smi}, v185 T{_Smi}) [0, 1152921504606846974] int64
ParallelMove rdx <- rdx goto:106 B16
B15
ParallelMove rdx <- rcx goto:108 B16
B16
B17
Branch if RelationalOp(<, v20, v187 T{_Smi}) T{bool} goto (18, 19)
B18
ParallelMove rdx <- C goto:130 B20
B19
B20
v175 <- BoxInt64(v23 T{int}) [0, 1152921504606846974] T{_Smi}
ParallelMove rbx <- C, r10 <- r10
v87 <- CreateArray:10(v24 T{TypeArguments}, v175) T{_List}
ParallelMove rax <- rax, rdi <- fp[-3]
StoreField(v2 T{Expando} . _data@0150898 = v87 T{_List})
ParallelMove rax <- C
StoreField(v2 T{Expando} . _used@0150898 = v183 T{_Smi} <int64>)
v46 <- LoadField:210(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove fp[-7] <- rbx
ParallelMove r9 <- C goto:210 B32
B32
  Loop 0
ParallelMove fp[-6] <- r9
CheckStackOverflow:214(stack=0, loop=1)
Branch if RelationalOp(<, v27, v167 T{_Smi}) T{bool} goto (21, 22)
B21
  Loop 0
v188 <- LoadIndexed:156([_List] v4, v27 T{int}) T{_WeakProperty?}
Branch if StrictCompare:158(!==, v188 T{_WeakProperty?}, v0) goto (23, 30)
B23
  Loop 0
v70 <- LoadField(v188 T{_WeakProperty} . WeakProperty.value) T{*?}
ParallelMove fp[-5] <- r10
v75 <- LoadField(v188 T{_WeakProperty} . WeakProperty.key) T{*?}
ParallelMove fp[-4] <- r12
Branch if StrictCompare:168(!==, v75 T{*?}, v0) goto (27, 28)
B27
  Loop 0
ParallelMove rax <- r10, rdx <- rbx, rcx <- C
t2 <- AssertAssignable:188(v70 T{*?}, v45, '', instantiator_type_args(v46), function_type_args(v0)) T{X0??}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-3], rsi <- fp[-4], rdx <- fp[-5]
StaticCall:190( []=<0> v2, v75 T{*}, v70 T{X0??}, using unchecked entrypoint)
ParallelMove  goto:196 B29
B28
B29
B30
B31
  Loop 0
ParallelMove rcx <- fp[-6]
v39 <- BinaryInt64Op(+ [tr], v27 T{int}, v185 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- rcx, rdi <- fp[-3], rbx <- fp[-7] goto:212 B32
B22
ParallelMove rax <- C
DartReturn:216(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, rcx <- rsi, rax <- rdx, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rcx
StaticCall:10( checkValidWeakTarget<0> v3)
ParallelMove rdi <- fp[-1]
v120 <- LoadField(v2 T{Expando} . _data@0150898) T{_List}
v126 <- LoadField(v120 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v158 <- UnboxInt64([non-speculative], v126 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rcx
v7 <- BinaryInt64Op(- [tr], v158 T{_Smi}, v173 T{_Smi}) [v158-1, v158-1] int64
ParallelMove rdx <- fp[-2], fp[-4] <- rax
v220 <- LoadClassId(v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v8 <- DispatchTableCall( cid=v220 Object._identityHashCode<0>, v3) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v159 <- UnboxInt64([non-speculative], v8 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-4]
ParallelMove rcx <- rax
v9 <- BinaryInt64Op(& [tr], v159 T{int}, v7) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-1]
v11 <- LoadField(v2 . _data@0150898) T{_List}
v45 <- LoadField(v11 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- r8
v160 <- UnboxInt64([non-speculative], v45) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:24(v160 T{_Smi}, v9) [-9223372036854775808, 9223372036854775807] int64
v174 <- LoadIndexed:24([_List] v11, v9 T{int}) T{_WeakProperty?}
ParallelMove r8 <- r8
v217 <- UnboxInt64([non-speculative], v45) int64
ParallelMove r10 <- rcx, r9 <- C, r8 <- rax, rsi <- rsi, rbx <- r8 goto:154 B21
B21
  Loop 0
ParallelMove fp[-5] <- r10, fp[-6] <- r9, fp[-7] <- r8, fp[-8] <- rsi, fp[-9] <- rbx
CheckStackOverflow:152(stack=0, loop=1)
Branch if StrictCompare:26(!==, v15, v0) goto (20, 22)
B20
  Loop 0
v115 <- LoadField(v15 T{_WeakProperty} . WeakProperty.key) T{*?}
ParallelMove rax <- rax, rcx <- fp[-2]
Branch if StrictCompare:32(===, v115 T{*?}, v3, with number check) goto (3, 7)
B7
  Loop 0
ParallelMove rax <- fp[-6]
v30 <- RelationalOp(<, v14, v175 T{_Smi}) T{bool}
ParallelMove fp[-10] <- rcx
Branch if StrictCompare:68(===, v30, v18) goto (8, 11)
BoolTest
B8
  Loop 0
ParallelMove rdx <- fp[-7]
v101 <- LoadStaticField:4(_deletedEntry@0150898, CallsInitializer) T{_WeakProperty}
ParallelMove rax <- rax, rcx <- fp[-7]
Branch if StrictCompare:74(===, v15 T{_WeakProperty}, v101 T{_WeakProperty}) goto (9, 12)
B9
  Loop 0
ParallelMove r9 <- fp[-5], rdi <- fp[-5] goto:134 B19
B12
B11
  Loop 0
ParallelMove rcx <- fp[-7]
ParallelMove  goto:86 B10
B10
  Loop 0
v98 <- LoadField(v15 T{_WeakProperty} . WeakProperty.key) T{*?}
Branch if StrictCompare:94(===, v98 T{*?}, v0) goto (13, 17)
B13
  Loop 0
ParallelMove rdi <- fp[-1], rbx <- fp[-5], rax <- fp[-10]
v33 <- LoadField(v2 . _data@0150898) T{_List}
ParallelMove fp[-11] <- rdx
v93 <- LoadStaticField:4(_deletedEntry@0150898, CallsInitializer) T{_WeakProperty}
ParallelMove rcx <- rax, rdx <- fp[-11]
v50 <- LoadField(v33 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v164 <- UnboxInt64([non-speculative], v50) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- fp[-5]
GenericCheckBound:104(v164 T{_Smi}, v13) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx, rax <- rcx, rdi <- fp[-5]
StoreIndexed:104([_List] v33, v13 T{int}, v93 T{_WeakProperty})
ParallelMove rax <- fp[-10]
Branch if StrictCompare:110(===, v30 T{bool}, v18) goto (14, 15)
BoolTest
B14
  Loop 0
ParallelMove rax <- rdi goto:120 B16
B15
  Loop 0
ParallelMove rax <- fp[-6] goto:122 B16
B16
B17
  Loop 0
ParallelMove rdi <- fp[-5]
ParallelMove rax <- fp[-6] goto:130 B18
B18
  Loop 0
ParallelMove r9 <- rax goto:136 B19
B19
  Loop 0
ParallelMove rax <- rdi
v38 <- BinaryInt64Op(+ [tr], v13, v173 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rax
v39 <- BinaryInt64Op(& [tr], v38, v7) [-9223372036854775808, 9223372036854775807] int64
v40 <- LoadField(v2 . _data@0150898) T{_List}
v52 <- LoadField(v40 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- r12
v166 <- UnboxInt64([non-speculative], v52) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound:144(v166 T{_Smi}, v39) [-9223372036854775808, 9223372036854775807] int64
v176 <- LoadIndexed:144([_List] v40, v39 T{int}) T{_WeakProperty?}
ParallelMove r12 <- r12
v219 <- UnboxInt64([non-speculative], v52) int64
ParallelMove r10 <- rdi, r9 <- r9, r8 <- r8, rsi <- rsi, rbx <- r12, rdi <- rcx goto:150 B21
B3
ParallelMove rax <- fp[-3], rdi <- fp[-5], rcx <- fp[-7]
Branch if StrictCompare:38(!==, v4, v0) goto (4, 5)
B4
ParallelMove rax <- rax
StoreField(v15 T{_WeakProperty} . WeakProperty.value = v4 T{X0?})
ParallelMove  goto:56 B6
B5
v104 <- LoadStaticField:4(_deletedEntry@0150898, CallsInitializer) T{_WeakProperty}
ParallelMove rax <- fp[-9], rbx <- fp[-5], rcx <- rax
GenericCheckBound:52(v181 T{_Smi}, v13) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-8], rax <- rcx, rbx <- fp[-5]
StoreIndexed:52([_List] v170 T{_List}, v13 T{int}, v104 T{_WeakProperty})
ParallelMove  goto:58 B6
B6
ParallelMove rax <- C
DartReturn:60(v0)
B22
ParallelMove rcx <- rdi, rax <- fp[-3], rbx <- r10
Branch if StrictCompare:158(===, v4, v0) goto (23, 24)
B23
ParallelMove rax <- C
DartReturn:164(v0)
B24
ParallelMove rdx <- fp[-6]
Branch if RelationalOp(>=, v14, v175 T{_Smi}) T{bool} goto (25, 26)
B25
v27 <- LoadField(v2 . _used@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v28 <- BinaryInt64Op(- [tr], v27, v173 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{Expando} . _used@0150898 = v28 T{int} <int64>)
ParallelMove rbx <- rdx goto:188 B27
B26
B27
ParallelMove fp[-5] <- rbx
v20 <- LoadField(v2 . _used@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rcx, fp[-4] <- rdx
v21 <- StaticCall:194( get:_limit@0150898<0> v2, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax, rax <- fp[-4]
Branch if RelationalOp(<, v20, v21) T{bool} goto (28, 29)
B28
ParallelMove rdi <- fp[-1], rsi <- fp[-2], rdx <- fp[-3], rbx <- fp[-5]
v23 <- AllocateObject:206(cls=_WeakProperty) T{_WeakProperty}
ParallelMove rcx <- rax, rsi <- fp[-2]
StoreField(v23 T{_WeakProperty} . WeakProperty.key = v3 T{Object}, NoStoreBarrier)
ParallelMove rdx <- fp[-3]
StoreField(v23 T{_WeakProperty} . WeakProperty.value = v4 T{X0?}, NoStoreBarrier)
ParallelMove r8 <- fp[-1]
v24 <- LoadField(v2 . _data@0150898) T{_List}
v55 <- LoadField(v24 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v168 <- UnboxInt64([non-speculative], v55) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- fp[-5]
GenericCheckBound:216(v168 T{_Smi}, v19) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx, rax <- rcx, rcx <- fp[-5]
StoreIndexed:216([_List] v24, v19 T{int}, v23)
v25 <- LoadField(v2 . _used@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v26 <- BinaryInt64Op(+ [tr], v25, v173 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{Expando} . _used@0150898 = v26 T{int} <int64>)
ParallelMove rax <- C
DartReturn:224(v0)
B29
ParallelMove r8 <- fp[-1], rsi <- fp[-2], rdx <- fp[-3]
ParallelMove rdi <- r8
StaticCall:228( _rehash@0150898<0> v2, using unchecked entrypoint)
ParallelMove rdi <- fp[-1], rsi <- fp[-2], rdx <- fp[-3]
StaticCall:230( []=<0> v2, v3, v4 T{X0?}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:232(v0)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- C
v12 <- LoadField(v2 T{Expando} . _data@0150898) T{_List}
v18 <- LoadField(v12 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rsi <- rsi
v21 <- UnboxInt64([non-speculative], v18 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rsi
v6 <- BinaryInt64Op(~/ [tr], v21 T{_Smi}, v22 T{_Smi}) [0, 144115188075855871] int64
ParallelMove rax <- rax
ParallelMove rax <- rax
v7 <- BinaryInt64Op(* [tr], v6, v23 T{_Smi}) [0, 432345564227567613] int64
ParallelMove rax <- rax
DartReturn:16(v7)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
v23 <- LoadClassId(v2) [1, 617] int64
Branch if EqualityCompare(v23 == v24) T{bool} goto (10, 3)
B3
Branch if TestRange(v23 T{_Smi} in [59-61]) T{bool} goto (11, 4)
B4
Branch if TestRange(v23 T{_Smi} in [93-94]) T{bool} goto (12, 5)
B5
Branch if EqualityCompare(v23 T{_Smi} == v28) T{bool} goto (13, 6)
B6
Branch if EqualityCompare(v23 T{_Smi} == v30) T{bool} goto (14, 17)
B17
ParallelMove rax <- C
DartReturn:112(v0)
B10
B11
B12
B13
B14
B9
v15 <- AllocateObject:104(cls=ArgumentError) T{ArgumentError}
ParallelMove rcx <- rax, rax <- C
StoreField(v15 T{ArgumentError} . name = v16 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v15 T{ArgumentError} . message = v17 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v15 T{ArgumentError} . invalidValue = v2 T{*}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v15 T{ArgumentError} . _hasValue@0150898 = v5 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:108(v15)
B0
B1
Enter frame
PrologueOffset = 0
v2 <- AllocateObject:6(cls=_WeakProperty) T{_WeakProperty}
ParallelMove rax <- rax
DartReturn:10(v2)
Checking for cid 79 (_WeakProperty)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[3]
v5 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v4 <- DispatchTableCall( cid=v5 List.[]<0>, v2, v3) T{*?}
ParallelMove rax <- rax
DartReturn:12(v4 T{X0?})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[3]
v5 <- LoadClassId(<non-smi> v2) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- fp[2]
v4 <- DispatchTableCall( cid=v5 Map.[]<0>, v2, v3) T{*?}
ParallelMove rax <- rax
DartReturn:12(v4 T{X1??})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[3]
v5 <- LoadClassId(<non-smi> v2) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- fp[2]
v4 <- DispatchTableCall( cid=v5 Map.containsKey<0>, v2, v3) T{bool}
ParallelMove rax <- rax
DartReturn:12(v4 T{bool})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v24 <- LoadClassId(<non-smi> v2) int64
ParallelMove rcx <- rcx, rdi <- rdi
v3 <- DispatchTableCall( cid=v24 Map.keys<0>, v2) T{*?}
ParallelMove rax <- rax
v9 <- LoadField(v3 T{Iterable<X0>} . :type_arguments {final}) T{TypeArguments}
ParallelMove rdi <- rdi, rsi <- rax
v23 <- StaticCall:18( _GrowableList@0150898.of<0> v9 T{TypeArguments}, v3 T{Iterable<X0>}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
DartReturn:14(v23)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v4 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[0] <- v2)
ParallelMove rcx <- rcx
v3 <- DispatchTableCall( cid=v4 List.length<0>, v2) T{int}
ParallelMove rax <- rax
DartReturn:12(v3 T{_Smi})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v31 <- LoadStaticField:4(_loads@0150898, CallsInitializer) T{_Map}
ParallelMove rdi <- rax, rsi <- fp[4], rax <- rax
ParallelMove fp[-1] <- rax
v38 <- StaticCall:10( _getValueOrData@3220832<0> v31 T{_Map}, v2 T{Object}, using unchecked entrypoint) T{Object??}
ParallelMove rcx <- rax, rax <- fp[-1]
v45 <- LoadField(v31 T{_Map} . LinkedHashBase.data) T{_List}
Branch if StrictCompare:14(===, v45 T{_List}, v38) goto (20, 21)
B20
ParallelMove rcx <- C goto:24 B22
B21
B22
Branch if StrictCompare:14(===, v40 T{X1??}, v0) goto (3, 4)
B3
ParallelMove rdi <- C
v13 <- StaticCall:22( Completer.<0> v12, result_type = T{_AsyncCompleter}) T{_AsyncCompleter}
ParallelMove rdi <- fp[-1], rsi <- fp[4], rdx <- rax, rax <- rax
ParallelMove fp[-2] <- rax
StaticCall:24( []=<0> v31 T{_Map}, v2, v13, using unchecked entrypoint)
ParallelMove rcx <- fp[-2] goto:30 B5
B4
B5
ParallelMove fp[-2] <- rcx
Branch if StrictCompare:34(===, v3, v0) goto (6, 7)
B6
v64 <- LoadClassId(<non-smi> v7) int64
ParallelMove rcx <- rax, rdi <- rcx, rsi <- C
DispatchTableCall( cid=v64 Completer.complete<0>, v7, v0)
ParallelMove  goto:72 B11
B7
ParallelMove rdx <- fp[2]
Branch if StrictCompare:46(===, v4 T{bool}, v8) goto (8, 9)
BoolTest
B8
ParallelMove rdi <- fp[-1], rsi <- fp[4]
StaticCall:54( remove<0> v31 T{_Map}, v2, using unchecked entrypoint)
ParallelMove  goto:60 B10
B9
B10
v9 <- AllocateObject:64(cls=DeferredLoadException) T{DeferredLoadException}
ParallelMove rcx <- rax, rax <- fp[3]
StoreField(v9 T{DeferredLoadException} . _message@4048458 = v3 T{String}, NoStoreBarrier)
ParallelMove rdi <- fp[-2], rsi <- rcx
StaticCall:68( completeError<0> v7, v9, using unchecked entrypoint)
ParallelMove  goto:74 B11
B11
ParallelMove rax <- C
DartReturn:76(v0)
CheckStackOverflowSlowPath
B0
B30
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove fp[-2] <- rdi, fp[-3] <- rsi
CheckStackOverflow:26(stack=0, loop=0)
v13 <- LoadField(v2 . future {final}) T{_Future}
ParallelMove fp[-1] <- rcx
v76 <- LoadField(v13 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v109 <- IntConverter(int64->uint32[tr], v76) uint32
ParallelMove rdx <- rdx
v78 <- BinaryUint32Op(& [tr], v109 T{int}, v111 T{_Smi}) [0, 30] uint32
ParallelMove rdx <- rdx
v110 <- IntConverter(uint32->int64, v78) int64
Branch if EqualityCompare(v110 T{_Smi} != v101 T{_Smi}) T{bool} goto (6, 7)
B7
v84 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rax <- fp[-2]
v42 <- LoadClassId(v2) [482, 483] int64
Branch if EqualityCompare:56(v42 == v43) goto (8, 13)
B8
ParallelMove rdi <- fp[-1], rsi <- fp[-3], rdx <- C
StaticCall:12( _completeError@4048458<0> v13 T{_Future}, v3 T{DeferredLoadException}, v16 T{_StringStackTrace}, using unchecked entrypoint)
ParallelMove  goto:14 B14
B13
ParallelMove rdi <- fp[-1], rsi <- fp[-3], rdx <- C
StaticCall:12( _asyncCompleteError@4048458<0> v13 T{_Future}, v3 T{DeferredLoadException}, v16 T{_StringStackTrace}, using unchecked entrypoint)
ParallelMove  goto:14 B14
B14
ParallelMove rax <- C
DartReturn:58(v0)
B6
v17 <- AllocateObject:42(cls=StateError, <not-aliased>) T{StateError}
ParallelMove rcx <- rax, rax <- C
StoreField(v17 T{StateError} . message = v18 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:46(v17)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v5 <- AllocateContext:10(num_variables=3) T{Context}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-4] <- rcx
StoreField(v5 . this = v2, NoStoreBarrier)
ParallelMove rdx <- fp[-2]
StoreField(v5 . error = v3, NoStoreBarrier)
ParallelMove rdx <- fp[-3]
StoreField(v5 . stackTrace = v4, NoStoreBarrier)
ParallelMove rdi <- rax
StaticCall:12( _setPendingComplete@4048458<0> v2, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
v6 <- LoadField(v2 . _zone@4048458 {final}) T{_RootZone}
ParallelMove rbx <- C, rdx <- fp[-4], fp[-2] <- rdi
v8 <- AllocateClosure:16(v7, v5) T{_Closure}
ParallelMove rdi <- fp[-2], rsi <- rax
StaticCall:18( scheduleMicrotask<0> v6, v8, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:20(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v5)
v7 <- StaticCall:10( _completeLoads@0150898<0> v3, v4, v5) T{void?}
ParallelMove rax <- rax
DartReturn:12(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v4 <- LoadClassId(v2) int64
MoveArgument(sp[0] <- v2)
ParallelMove rcx <- rcx
v3 <- DispatchTableCall( cid=v4 Object._identityHashCode<0>, v2) T{int}
ParallelMove rax <- rax
DartReturn:12(v3 T{int})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[4]
v5 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v4)
ParallelMove rcx <- rcx
DispatchTableCall( cid=v5 List.[]=<0>, v2, v3, v4)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v5 <- LoadField(v2 . _name@9040228 {final}) T{String}
v17 <- LoadClassId(<non-smi> v5) int64
MoveArgument(sp[0] <- v5)
ParallelMove rcx <- rax
v6 <- DispatchTableCall( cid=v17 String.hashCode<0>, v5) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v11 <- UnboxUint32([tr], [non-speculative], v6 T{_Smi}) [0, 4294967295] uint32
ParallelMove rcx <- C
ParallelMove rax <- rax
v7 <- BinaryUint32Op(* [tr], v11 T{_Smi}, v18 T{_Smi}) [0, 4294967295] uint32
ParallelMove rcx <- C
ParallelMove rax <- rax
v8 <- BinaryUint32Op(& [tr], v7, v19 T{_Smi}) [0, 536870911] uint32
v12 <- BoxUint32(v8) [0, 536870911] T{_Smi}
ParallelMove rax <- rcx
DartReturn:18(v12)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rcx <- sp[1]
v3 <- LoadField(v2 . TypedDataView.offset_in_bytes {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
DartReturn:10(v3)
B0
B1
ParallelMove rax <- C
DartReturn:10(v3)
B0
B1
ParallelMove rax <- C
DartReturn:10(v3)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . _data@7027147 {final}) T{_TypedList}
MoveArgument(sp[0] <- v3 T{_TypedList})
v9 <- StaticCall:10( _getHash@0150898<0> v3 T{_TypedList}, recognized_kind = Object_getHash, result_type = T{_Smi}) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
DartReturn:14(v9 T{_Smi})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t2 <- AssertAssignable:12(v3, v5, '', instantiator_type_args(v0), function_type_args(v0)) T{_TypedList}
AssertAssignable for compile-time type
TTSCall
v4 <- AllocateObject:10(cls=_ByteBuffer) T{_ByteBuffer}
ParallelMove rax <- rax, rcx <- fp[2]
StoreField(v4 T{_ByteBuffer} . _data@7027147 = v3 T{_TypedList}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:16(v4)
B0
B1
Intrinsic
Enter frame
PrologueOffset = 14
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(String_getHashCode) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{int})
B0
B1
Intrinsic
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v2)
v3 <- StaticCall:10( _get_hashcode@1026248<0> v2, using unchecked entrypoint) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
t0 <- AssertAssignable:12(v3, v4, '', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:14(v3 T{int})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(SendPort_get_hashcode) T{*?}
ParallelMove rax <- rax
DartReturn:8(v3)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v9 <- LoadField(v2 T{_RawReceivePort} . ReceivePort.send_port {final}) T{_SendPort?}
MoveArgument(sp[0] <- v9 T{_SendPort})
v4 <- StaticCall:12( get:hashCode<0> v9 T{_SendPort}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
DartReturn:14(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v2)
v3 <- StaticCall:10( _get_hashcode@1026248<0> v2, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
DartReturn:12(v3)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(Capability_get_hashcode) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{int})
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v2)
v3 <- StaticCall:10( getHandle<0> v2, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v5 <- LoadClassId(v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v4 <- DispatchTableCall( cid=v5 num.hashCode<0>, v3) T{int}
ParallelMove rax <- rax
DartReturn:14(v4 T{int})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(Ffi_dl_getHandle) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{int})
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v10 <- LoadField(v2 T{Pointer} . PointerBase.data {final}) untagged
ParallelMove rcx <- rcx
v11 <- IntConverter(untagged->int64[tr], v10) [-9223372036854775808, 9223372036854775807] int64
v12 <- BoxInt64(v11) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v13 <- LoadClassId(v12 T{int}) int64
MoveArgument(sp[0] <- v12 T{int})
ParallelMove rcx <- rcx
v4 <- DispatchTableCall( cid=v13 num.hashCode<0>, v12 T{int}) T{int}
ParallelMove rax <- rax
DartReturn:14(v4 T{int})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v74 <- LoadField(v2 T{_Record} . Record.shape {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rcx
v81 <- BinarySmiOp:10(& [-o], v74 T{_Smi}, v82 T{_Smi}) [0, 65535] T{_Smi}
ParallelMove rcx <- rcx
v101 <- UnboxInt64([non-speculative], v74) [0, 4611686018427387903] int64
ParallelMove rdx <- rdx
v102 <- UnboxInt64:36([non-speculative], v81) [0, 65535] int64
ParallelMove fp[-3] <- rdx
ParallelMove rsi <- rcx, rbx <- C goto:36 B5
B5
  Loop 0
ParallelMove fp[-1] <- rsi, fp[-2] <- rbx
CheckStackOverflow:40(stack=0, loop=1)
Branch if RelationalOp(<, v7, v102 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
v108 <- LoadIndexed([_Record] v2 T{_Record}, v7 T{int}) T{*?}
v133 <- LoadClassId(v108 T{Object??}) int64
MoveArgument(sp[0] <- v108 T{Object??})
ParallelMove rcx <- rdi
v12 <- DispatchTableCall( cid=v133 Object.hashCode<0>, v108 T{Object??}) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v104 <- UnboxUint32([tr], [non-speculative], v12 T{int}) [0, 4294967295] uint32
ParallelMove rcx <- fp[-1]
v130 <- IntConverter(int64->uint32[tr], v6 T{int}) uint32
ParallelMove rcx <- rcx
v56 <- BinaryUint32Op(+ [tr], v130 T{int}, v104) [0, 4294967295] uint32
ParallelMove rdx <- C
ParallelMove rcx <- rcx
v57 <- BinaryUint32Op(& [tr], v56, v134 T{_Smi}) [0, 536870911] uint32
ParallelMove rax <- C
ParallelMove rbx <- rcx
v59 <- BinaryUint32Op(& [tr], v57, v135 T{_Smi}) [0, 524287] uint32
ParallelMove rbx <- rbx
v61 <- ShiftUint32Op(<< [tr], v59, v111 T{_Smi}) [0, 536869888] uint32
ParallelMove rcx <- rcx
v62 <- BinaryUint32Op(+ [tr], v57, v61) [0, 1073740799] uint32
ParallelMove rcx <- rcx
v63 <- BinaryUint32Op(& [tr], v62, v134 T{_Smi}) [0, 536870911] uint32
ParallelMove rbx <- rcx
v132 <- IntConverter(uint32->int64, v63) int64
ParallelMove rbx <- rbx
v65 <- ShiftInt64Op(>> [tr], v132 T{_Smi}, v112 T{_Smi}) [0, 8388607] int64
ParallelMove rcx <- rcx
v131 <- IntConverter(uint32->int64, v63) int64
ParallelMove rcx <- rcx
v66 <- BinaryInt64Op(^ [tr], v131 T{_Smi}, v65) [0, 536870911] int64
ParallelMove rbx <- fp[-2]
v15 <- BinaryInt64Op(+ [tr], v7, v113 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rcx, rbx <- rbx, rax <- fp[2], rdx <- fp[-3] goto:38 B5
B4
ParallelMove rdx <- C, rbx <- C, rcx <- C
ParallelMove rsi <- fp[-1]
v129 <- IntConverter(int64->uint32[tr], v6 T{int}) uint32
ParallelMove rsi <- rsi
v22 <- BinaryUint32Op(& [tr], v129 T{int}, v136 T{_Smi}) [0, 67108863] uint32
ParallelMove rsi <- rsi
v24 <- ShiftUint32Op(<< [tr], v22, v115 T{_Smi}) [0, 536870904] uint32
ParallelMove rbx <- fp[-1]
v128 <- IntConverter(int64->uint32[tr], v6 T{int}) uint32
ParallelMove rbx <- rbx
v25 <- BinaryUint32Op(+ [tr], v128 T{int}, v24) [0, 4611686018964258807] uint32
ParallelMove rbx <- rbx
v26 <- BinaryUint32Op(& [tr], v25, v134 T{_Smi}) [0, 536870911] uint32
ParallelMove rsi <- rbx
v28 <- ShiftUint32Op(>> [tr], v26, v116 T{_Smi}) [0, 262143] uint32
ParallelMove rbx <- rbx
v29 <- BinaryUint32Op(^ [tr], v26, v28) [0, 536870911] uint32
ParallelMove rsi <- rbx
v31 <- BinaryUint32Op(& [tr], v29, v137 T{_Smi}) [0, 16383] uint32
ParallelMove rsi <- rsi
v33 <- ShiftUint32Op(<< [tr], v31, v118 T{_Smi}) [0, 536838144] uint32
ParallelMove rbx <- rbx
v34 <- BinaryUint32Op(+ [tr], v29, v33) [0, 1073709055] uint32
ParallelMove rbx <- rbx
v35 <- BinaryUint32Op(& [tr], v34, v134 T{_Smi}) [0, 536870911] uint32
v105 <- BoxUint32(v35) [0, 536870911] T{_Smi}
ParallelMove rax <- rax
DartReturn:44(v105)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B5
ParallelMove rcx <- sp[1]
v7 <- IfThenElse(===, v2, v3 ? 1231 : 1237) [1231, 1237] T{_Smi}
BoolTest
ParallelMove rax <- rdx
DartReturn:26(v7 T{_Smi})
B0
B1
ParallelMove rcx <- sp[1]
v3 <- Unbox(v2) double
v4 <- HashDoubleOp(v3) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rax <- rax
v5 <- BoxInt64(v4) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rcx
DartReturn:10(v5)
B0
B1
ParallelMove rax <- sp[1]
v3 <- HashIntegerOp(v2) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
DartReturn:10(v3)
B0
B1
ParallelMove rax <- sp[1]
v3 <- HashIntegerOp(smi v2) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
DartReturn:10(v3)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . _hash@0150898) T{*?}
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
MoveArgument(sp[0] <- v2)
v8 <- StaticCall:18( _computeHash@0150898<0> v2, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rdx <- rax, rcx <- fp[2]
StoreField(v2 T{_Closure} . _hash@0150898 = v8 T{int})
ParallelMove rbx <- rdx goto:26 B5
B4
ParallelMove rbx <- rcx goto:28 B5
B5
ParallelMove rax <- rbx, rdx <- C, rcx <- C, fp[-1] <- rbx
t0 <- AssertAssignable:32(v22 T{*}, v6, '', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:34(v22 T{int})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(Closure_computeHash) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{int})
B0
B1
Intrinsic
Enter frame
PrologueOffset = 15
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(AbstractType_getHashCode) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{int})
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v2)
v3 <- StaticCall:10( _getHash@0150898<0> v2, recognized_kind = Object_getHash, result_type = T{_Smi}) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
DartReturn:12(v3)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v3 <- LoadField(v2 . _url@0150898 {final}) T{String??}
ParallelMove fp[-4] <- rax
Branch if StrictCompare:12(===, v3, v0) goto (3, 6)
B3
v33 <- LoadField(v2 . message {final}) T{Object??}
ParallelMove fp[-1] <- rax
Branch if StrictCompare:20(===, v33, v0) goto (4, 13)
B4
v39 <- LoadField(v2 . _failedAssertion@0150898 {final}) T{String}
ParallelMove rdi <- rax
v40 <- StaticCall:28( trim<0> v39, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:30(v40)
B13
ParallelMove rbx <- C, r10 <- C
v34 <- CreateArray:34(v0, v19) T{_List}
ParallelMove rax <- rax
ParallelMove fp[-2] <- rax
StoreIndexed([_List] v34, v6, v12, NoStoreBarrier)
ParallelMove rdi <- fp[2]
v35 <- LoadField(v2 . _failedAssertion@0150898 {final}) T{String}
ParallelMove rdi <- rcx
v36 <- StaticCall:38( trim<0> v35, using unchecked entrypoint) T{String}
ParallelMove rdx <- fp[-2], rax <- rax
StoreIndexed([_List] v34, v13, v36)
ParallelMove rdx <- fp[-2]
StoreIndexed([_List] v34, v15, v25, NoStoreBarrier)
ParallelMove rax <- fp[-1]
v57 <- LoadClassId(v33 T{Object?}) [1, 617] int64
Branch if TestRange(v57 in [93-94]) T{bool} goto (14, 15)
B14
B15
ParallelMove rdi <- rax
v53 <- StaticCall:36( safeToString<0> v33 T{Object?}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:38 B16
B16
ParallelMove rdx <- fp[-2], rax <- rax
StoreIndexed([_List] v34, v17, v62 T{String})
MoveArgument(sp[0] <- v34)
v38 <- StaticCall:42( _interpolate@0150898<0> v34, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:44(v38)
B6
v5 <- LoadField(v2 . _column@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- rcx
Branch if RelationalOp(>, v5, v83 T{_Smi}) T{bool} goto (7, 8)
B7
ParallelMove rbx <- C, r10 <- C
v29 <- CreateArray:60(v0, v15) T{_List}
ParallelMove rcx <- rax
StoreIndexed([_List] v29, v6, v30, NoStoreBarrier)
ParallelMove rdx <- fp[-3]
v80 <- BoxInt64(v5 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreIndexed([_List] v29, v13, v80 T{int}, NoStoreBarrier)
MoveArgument(sp[0] <- v29)
v32 <- StaticCall:64( _interpolate@0150898<0> v29, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:70 B9
B8
ParallelMove rcx <- C goto:72 B9
B9
ParallelMove rbx <- C, r10 <- C, fp[-1] <- rcx
v11 <- CreateArray:74(v0, v10) T{_List}
ParallelMove rcx <- rax
ParallelMove fp[-2] <- rcx
StoreIndexed([_List] v11, v6, v12, NoStoreBarrier)
ParallelMove rax <- fp[-4]
StoreIndexed([_List] v11, v13, v3 T{String?}, NoStoreBarrier)
StoreIndexed([_List] v11, v15, v16, NoStoreBarrier)
ParallelMove rdi <- fp[2]
v18 <- LoadField(v2 . _line@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v81 <- BoxInt64(v18) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdx <- rcx, rax <- rax
StoreIndexed([_List] v11, v17, v81 T{int})
ParallelMove rdx <- rcx, rax <- fp[-1]
StoreIndexed([_List] v11, v19, v9)
StoreIndexed([_List] v11, v20, v21, NoStoreBarrier)
v23 <- LoadField(v2 . _failedAssertion@0150898 {final}) T{String}
ParallelMove rdx <- rcx, rax <- rax
StoreIndexed([_List] v11, v22, v23)
StoreIndexed([_List] v11, v24, v25, NoStoreBarrier)
ParallelMove rdi <- rdi
v27 <- StaticCall:82( get:_messageString@0150898<0> v2) T{String}
ParallelMove rdx <- fp[-2], rax <- rax
StoreIndexed([_List] v11, v26, v27)
MoveArgument(sp[0] <- v11)
v28 <- StaticCall:84( _interpolate@0150898<0> v11, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:86(v28)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- fp[2]
Branch if StrictCompare:10(===, v2, v3) goto (5, 3)
B5
B3
Branch if StrictCompare:14(===, v2, v4) goto (6, 7)
B6
B4
ParallelMove rax <- rbx
DartReturn:30(v2)
B7
v16 <- LoadClassId(v2) [1, 617] int64
Branch if EqualityCompare(v16 == v17) T{bool} goto (8, 9)
B8
ParallelMove rax <- rbx, rdx <- C, rcx <- C
t0 <- AssertAssignable:44(v2 T{_Closure}, v10, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) T{_Closure}
AssertAssignable for compile-time type
TTSCall
MoveArgument(sp[0] <- v2 T{_Closure})
ParallelMove rax <- fp[2]
v14 <- ClosureCall:48( closure=v2 T{_Closure}<0>, v2 T{_Closure}) T{*?}
ParallelMove rax <- rax
DartReturn:50(v14)
B9
Branch if EqualityCompare(v16 T{_Smi} == v17) T{bool} goto (10, 11)
B10
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:64(v2, v10, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) T{_Closure}
AssertAssignable for compile-time type
TTSCall
MoveArgument(sp[0] <- v2 T{_Closure})
ParallelMove rax <- fp[2]
v12 <- ClosureCall:68( closure=v2 T{_Closure}<0>, v2 T{_Closure}) T{*?}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:74 B12
B11
ParallelMove rax <- fp[2] goto:76 B12
B12
ParallelMove rax <- rax
DartReturn:78(v9)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[5] <- v2)
MoveArgument(sp[4] <- v3)
MoveArgument(sp[3] <- v4)
MoveArgument(sp[2] <- v5)
MoveArgument(sp[1] <- v6)
MoveArgument(sp[0] <- v0)
v7 <- NativeCall(AssertionError_throwNewSource) T{*?}
ParallelMove rax <- rax
DartReturn:8(v7)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v4)
StaticCall:10( _doThrowNew@0150898<0> v2, v3, v4)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v0)
v5 <- NativeCall(AssertionError_throwNew) T{*?}
ParallelMove rax <- rax
DartReturn:8(v5)
B0
B1
ParallelMove rax <- sp[5], rcx <- sp[6]
StoreField(v2 . _failedAssertion@0150898 = v3)
ParallelMove rax <- sp[4]
StoreField(v2 . _url@0150898 = v4)
ParallelMove rdx <- sp[3]
v12 <- UnboxInt64([non-speculative], v5) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 . _line@0150898 = v12 T{int} <int64>)
ParallelMove rdx <- sp[2]
v13 <- UnboxInt64([non-speculative], v6) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 . _column@0150898 = v13 T{int} <int64>)
ParallelMove rax <- sp[1]
StoreField(v2 . message = v7)
ParallelMove rax <- C
DartReturn:12(v0)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . message {final}) T{Object??}
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v8)
B4
v11 <- LoadClassId(v3 T{Object?}) [1, 617] int64
Branch if TestRange(v11 in [93-94]) T{bool} goto (5, 6)
B5
ParallelMove rax <- rax
DartReturn:32(v3 T{String})
B6
ParallelMove rdi <- rax
v7 <- StaticCall:36( safeToString<0> v3 T{Object?}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:38(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v17 <- LoadClassId(v2) [1, 617] int64
Branch if TestRange(v17 in [59-61]) T{bool} goto (6, 3)
B6
B3
Branch if EqualityCompare(v17 T{_Smi} == v19) T{bool} goto (7, 4)
B7
B4
Branch if StrictCompare:28(===, v2, v0) goto (8, 9)
B8
B5
v35 <- LoadClassId(v2) int64
MoveArgument(sp[0] <- v2)
ParallelMove rcx <- rcx
v12 <- DispatchTableCall( cid=v35 Object.toString<0>, v2) T{String}
ParallelMove rax <- rax
DartReturn:50(v12 T{String})
B9
Branch if TestRange(v17 T{_Smi} in [93-94]) T{bool} goto (10, 11)
B10
ParallelMove rdi <- rdi
v11 <- StaticCall:64( _stringToSafeString@0150898<0> v2 T{String}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:66(v11)
B11
MoveArgument(sp[0] <- v2 T{Object})
v25 <- StaticCall:10( _toString@0150898<0> v2 T{Object}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:72(v25 T{String})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(Object_toString) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{String})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rsi <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- C, rsi <- rsi
v4 <- StaticCall:10( encode<0> v3, v2, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:12(v4)
CheckStackOverflowSlowPath
B0
B5
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi
CheckStackOverflow:34(stack=0, loop=0)
ParallelMove rdi <- rdi
v35 <- StaticCall:14( stringify<0> v3 T{Object?}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:42(v35 T{String})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- AllocateObject:10(cls=StringBuffer) T{StringBuffer}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-2] <- rax
StaticCall:12( StringBuffer.<0> v3)
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
StaticCall:14( printOn<0> v2, v3)
MoveArgument(sp[0] <- v3)
v4 <- StaticCall:16( toString<0> v3, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:18(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- AllocateObject:10(cls=_JsonStringStringifier) T{_JsonStringStringifier}
ParallelMove rcx <- rax, rax <- fp[-2]
ParallelMove fp[-3] <- rcx
StoreField(v4 T{_JsonStringStringifier} . _sink@10003594 = v3 T{StringBuffer}, NoStoreBarrier)
ParallelMove rdi <- C, rsi <- C
v16 <- StaticCall:10( _GrowableList@0150898.<0> v0 T{Null?}, v21 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax, rdi <- fp[-3]
StoreField(v4 T{_JsonStringStringifier} . _seen@10003594 = v16)
ParallelMove rax <- C
StoreField(v4 T{_JsonStringStringifier} . _toEncodable@10003594 = v19 T{_Closure}, NoStoreBarrier)
ParallelMove rdi <- rdi, rsi <- fp[-1]
StaticCall:14( writeObject<0> v4, v2, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rsi, fp[-11] <- rdi, fp[-12] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rcx, rsi <- rax
v16 <- StaticCall:10( writeJsonValue<0> v14, v15, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v16 T{bool}, v17) goto (3, 4)
BoolTest
B3
ParallelMove rax <- C
DartReturn:20(v0)
B4
ParallelMove rdi <- fp[-11], rsi <- fp[-12]
StaticCall:24( _checkCycle@10003594<0> v14, v15, using unchecked entrypoint)
ParallelMove rax <- C goto:28 B5
B5
v36 <- LoadField(v18 T{_Closure} . Closure.context {final}) T{!null}
ParallelMove rdi <- fp[-12], fp[-13] <- rcx
v37 <- StaticCall:10( _defaultToEncodable@10003594<0> v15 T{*}) T{*?}
ParallelMove rax <- C
Throw:38(v20)
B9
ParallelMove rdi <- fp[-9], fp[-11] <- rax
v12 <- StaticCall:60( get:_partialResult@10003594<0> v2) T{String??}
v13 <- AllocateObject:62(cls=JsonUnsupportedObjectError, <not-aliased>) T{JsonUnsupportedObjectError}
ParallelMove rcx <- rax, rax <- fp[-10]
StoreField(v13 T{JsonUnsupportedObjectError} . unsupportedObject = v3 T{Object?}, NoStoreBarrier)
ParallelMove rax <- fp[-11]
StoreField(v13 T{JsonUnsupportedObjectError} . cause = v6 T{Object??}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:66(v13)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v5 <- StaticCall:10( _defaultToEncodable@10003594<0> v3) T{*?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _sink@10003594 {final}) T{StringBuffer}
MoveArgument(sp[0] <- v3)
v4 <- StaticCall:14( toString<0> v3, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:16(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v2)
v3 <- InstanceCall:10( dyn:toJson<0>, v2 IC[0: ], result_type = T{!null}) T{*}
InstanceCallAOT (smiable)
ParallelMove rax <- rax
DartReturn:12(v3)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rsi, fp[-5] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v6 <- LoadField:48(v2 . _seen@10003594 {final}) T{_GrowableList}
ParallelMove fp[-4] <- rbx
v49 <- LoadField:48(v6 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rsi <- rax
v84 <- UnboxInt64:48([non-speculative], v49 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-3] <- rsi
v18 <- LoadField:48(v6 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove fp[-2] <- rdi
ParallelMove r8 <- C goto:48 B7
B7
  Loop 0
ParallelMove fp[-1] <- r8
CheckStackOverflow:52(stack=0, loop=1)
Branch if RelationalOp(<, v5, v84 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
v95 <- LoadIndexed:30([_List] v18, v5 T{int}) T{*?}
ParallelMove rax <- rdx, rcx <- rcx
Branch if StrictCompare:32(===, v3, v95 T{*?}, with number check) goto (5, 6)
B6
  Loop 0
ParallelMove rax <- fp[-1]
v14 <- BinaryInt64Op(+ [tr], v5 T{int}, v96 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rax, rdx <- fp[-5], rbx <- fp[-4], rdi <- fp[-2], rsi <- fp[-3] goto:50 B7
B4
ParallelMove rax <- rdi, rbx <- rsi
v60 <- LoadField(v18 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v90 <- UnboxInt64([non-speculative], v60 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v84 T{_Smi} == v90 T{_Smi}) T{bool} goto (11, 12)
B11
ParallelMove rdi <- fp[-4]
StaticCall:26( _growToNextCapacity@0150898<0> v6 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B13
B12
B13
ParallelMove rax <- rcx
v31 <- BinaryInt64Op(+ [tr], v84 T{_Smi}, v96 T{_Smi}) [1, 576460752303423488] int64
v91 <- BoxInt64(v31) [1, 576460752303423488] T{_Smi}
StoreField(v6 T{_GrowableList} . GrowableObjectArray.length = v91, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:40(v31 T{_Smi}, v84 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v34 <- LoadField(v6 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rax, rax <- fp[-5]
StoreIndexed:40([_List] v34, v84 T{_Smi}, v3 T{*})
ParallelMove rax <- C
DartReturn:58(v0)
B5
ParallelMove rax <- fp[-5]
v15 <- AllocateObject:38(cls=JsonCyclicError, <not-aliased>) T{JsonCyclicError}
ParallelMove rcx <- rax, rax <- fp[-5]
StoreField(v15 T{JsonCyclicError} . unsupportedObject = v3 T{Object?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:42(v15)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
Branch if StrictCompare:10(===, v3, v4) goto (3, 4)
B3
ParallelMove rdi <- rcx, rsi <- C
StaticCall:16( writeString<0> v2, v8, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:18(v4)
B4
Branch if StrictCompare:22(===, v3, v5) goto (5, 6)
B5
ParallelMove rdi <- rcx, rsi <- C
StaticCall:28( writeString<0> v2, v7, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:30(v4)
B6
ParallelMove rdi <- rcx, rsi <- C
StaticCall:34( writeString<0> v2, v6, using unchecked entrypoint)
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
StaticCall:36( writeStringContent<0> v2, v3, using unchecked entrypoint)
ParallelMove rdi <- fp[-1], rsi <- C
StaticCall:38( writeString<0> v2, v6, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:40(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, rcx <- rsi, fp[-1] <- rdi, fp[-8] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v395 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove r8 <- rax
v582 <- UnboxInt64:462([non-speculative], v395 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-7] <- r8
v383 <- LoadClassId:462(v3 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove fp[-6] <- r9
v98 <- LoadField:462(v2 T{_JsonStringStringifier} . _sink@10003594 {final}) T{StringBuffer}
ParallelMove fp[-5] <- r10
ParallelMove rsi <- C, r13 <- C goto:462 B61
B61
  Loop 0
ParallelMove fp[-4] <- r13
CheckStackOverflow:466(stack=0, loop=1)
Branch if RelationalOp(<, v8, v582 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
Branch if StrictCompare:26(===, v383, v358 T{_Smi}) goto (150, 151)
B150
  Loop 0
v387 <- LoadIndexed([_OneByteString] v3 T{_OneByteString}, v8 T{int}) [0, 255] int64
ParallelMove rdi <- rax goto:26 B149
B151
  Loop 0
v385 <- LoadIndexed([_TwoByteString] v3 T{_StringBase}, v8 T{int}) [0, 65535] int64
ParallelMove rdi <- rax goto:26 B149
B149
  Loop 0
ParallelMove fp[-3] <- rdi
Branch if RelationalOp(>, v386 T{_Smi}, v601 T{_Smi}) T{bool} goto (5, 29)
B5
  Loop 0
Branch if RelationalOp(>=, v386 T{_Smi}, v602 T{_Smi}) T{bool} goto (6, 26)
B6
  Loop 0
ParallelMove rax <- rdi
v672 <- IntConverter(int64->uint32[tr], v386 T{_Smi}) uint32
ParallelMove rax <- rax
v63 <- BinaryUint32Op(& [tr], v672 T{_Smi}, v694 T{_Smi}) [0, 64512] uint32
ParallelMove fp[-2] <- rax
ParallelMove rbx <- rax
v674 <- IntConverter(uint32->int64, v63) int64
Branch if EqualityCompare(v674 T{_Smi} == v602 T{_Smi}) T{bool} goto (8, 12)
B8
  Loop 0
ParallelMove rbx <- r13
v86 <- BinaryInt64Op(+ [tr], v8 T{int}, v604 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v86, v582 T{_Smi}) T{bool} goto (7, 15)
B7
  Loop 0
ParallelMove rax <- r8, rbx <- rbx, rdx <- rbx
t0 <- GenericCheckBound:70(v582 T{_Smi}, v86 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:70(===, v383 T{_Smi}, v358 T{_Smi}) goto (145, 146)
B145
  Loop 0
v371 <- LoadIndexed([_OneByteString] v3 T{_OneByteString}, v86 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:70 B144
B146
  Loop 0
v369 <- LoadIndexed([_TwoByteString] v3 T{_StringBase}, v86 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:70 B144
B144
  Loop 0
ParallelMove rax <- rax
v675 <- IntConverter(int64->uint32[tr], v370 T{_Smi}) uint32
ParallelMove rax <- rax
v90 <- BinaryUint32Op(& [tr], v675 T{_Smi}, v694 T{_Smi}) [0, 64512] uint32
ParallelMove rax <- rax
v676 <- IntConverter(uint32->int64, v90) int64
Branch if EqualityCompare(v676 T{_Smi} == v605 T{_Smi}) T{bool} goto (13, 16)
B13
B16
B15
B12
B11
  Loop 0
ParallelMove rax <- fp[-2]
v673 <- IntConverter(uint32->int64, v63) int64
Branch if EqualityCompare(v673 T{_Smi} == v605 T{_Smi}) T{bool} goto (10, 23)
B10
  Loop 0
ParallelMove rdx <- r13
v68 <- BinaryInt64Op(- [tr], v8 T{int}, v604 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v68, v600 T{_Smi}) T{bool} goto (9, 17)
B9
  Loop 0
ParallelMove rax <- r8, rbx <- rdx
t0 <- GenericCheckBound:108(v582 T{_Smi}, v68 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:108(===, v383 T{_Smi}, v358 T{_Smi}) goto (140, 141)
B140
  Loop 0
v354 <- LoadIndexed([_OneByteString] v3 T{_OneByteString}, v68 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:108 B139
B141
  Loop 0
v352 <- LoadIndexed([_TwoByteString] v3 T{_StringBase}, v68 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:108 B139
B139
  Loop 0
ParallelMove rax <- rax
v677 <- IntConverter(int64->uint32[tr], v353 T{_Smi}) uint32
ParallelMove rax <- rax
v72 <- BinaryUint32Op(& [tr], v677 T{_Smi}, v694 T{_Smi}) [0, 64512] uint32
ParallelMove rax <- rax
v678 <- IntConverter(uint32->int64, v72) int64
Branch if EqualityCompare(v678 T{_Smi} == v602 T{_Smi}) T{bool} goto (24, 18)
B24
B18
B17
B14
  Loop 0
Branch if RelationalOp(>, v8 T{int}, v7) T{bool} goto (19, 20)
B19
  Loop 0
v584 <- BoxInt64(v8 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v584 T{int})
ParallelMove rdi <- rcx, rsi <- rsi, rax <- rdi
v341 <- StaticCall:12( substring<0> v3 T{String}, v7 T{int}, v584 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdi <- fp[-5], rsi <- rax
StaticCall:14( write<0> v98 T{StringBuffer}, v341, using unchecked entrypoint)
ParallelMove  goto:168 B21
B20
B21
  Loop 0
ParallelMove rax <- fp[-4]
v76 <- BinaryInt64Op(+ [tr], v8 T{int}, v604 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-5], rsi <- C, fp[-2] <- rax
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v601 T{_Smi}, using unchecked entrypoint)
ParallelMove rdi <- fp[-5], rsi <- C
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v606 T{_Smi}, using unchecked entrypoint)
ParallelMove rdi <- fp[-5], rsi <- C
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v607 T{_Smi}, using unchecked entrypoint)
ParallelMove rax <- fp[-3]
v671 <- IntConverter(int64->uint32[tr], v386 T{_Smi}) uint32
ParallelMove rax <- rax
v78 <- ShiftUint32Op(>> [tr], v671 T{_Smi}, v608 T{_Smi}) [0, 255] uint32
ParallelMove rcx <- C
ParallelMove rax <- rax
v79 <- BinaryUint32Op(& [tr], v78, v695 T{_Smi}) [0, 15] uint32
ParallelMove rdx <- rax
v679 <- IntConverter(uint32->int64, v79) int64
Branch if RelationalOp(<, v679 T{_Smi}, v610 T{_Smi}) T{bool} goto (116, 117)
B116
  Loop 0
ParallelMove rax <- rax
v681 <- IntConverter(uint32->int64, v79) int64
ParallelMove rax <- rax
v272 <- BinaryInt64Op(+ [tr], v681 T{_Smi}, v611 T{_Smi}) [48, 63] int64
ParallelMove rsi <- rax goto:28 B118
B117
  Loop 0
ParallelMove rax <- rax
v680 <- IntConverter(uint32->int64, v79) int64
ParallelMove rax <- rax
v269 <- BinaryInt64Op(+ [tr], v680 T{_Smi}, v612 T{_Smi}) [87, 102] int64
ParallelMove rsi <- rax goto:30 B118
B118
  Loop 0
ParallelMove rdi <- fp[-5], rsi <- rsi
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v270 T{int}, using unchecked entrypoint)
ParallelMove rax <- fp[-3]
v670 <- IntConverter(int64->uint32[tr], v386 T{_Smi}) uint32
ParallelMove rax <- rax
v81 <- ShiftUint32Op(>> [tr], v670 T{_Smi}, v613 T{_Smi}) [0, 4095] uint32
ParallelMove rcx <- C
ParallelMove rax <- rax
v82 <- BinaryUint32Op(& [tr], v81, v695 T{_Smi}) [0, 15] uint32
ParallelMove rdx <- rax
v682 <- IntConverter(uint32->int64, v82) int64
Branch if RelationalOp(<, v682 T{_Smi}, v610 T{_Smi}) T{bool} goto (123, 124)
B123
  Loop 0
ParallelMove rax <- rax
v684 <- IntConverter(uint32->int64, v82) int64
ParallelMove rax <- rax
v295 <- BinaryInt64Op(+ [tr], v684 T{_Smi}, v611 T{_Smi}) [48, 63] int64
ParallelMove rsi <- rax goto:28 B125
B124
  Loop 0
ParallelMove rax <- rax
v683 <- IntConverter(uint32->int64, v82) int64
ParallelMove rax <- rax
v292 <- BinaryInt64Op(+ [tr], v683 T{_Smi}, v612 T{_Smi}) [87, 102] int64
ParallelMove rsi <- rax goto:30 B125
B125
  Loop 0
ParallelMove rdi <- fp[-5], rsi <- rsi
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v293 T{int}, using unchecked entrypoint)
ParallelMove rax <- fp[-3]
v669 <- IntConverter(int64->uint32[tr], v386 T{_Smi}) uint32
ParallelMove rcx <- C
ParallelMove rax <- rax
v84 <- BinaryUint32Op(& [tr], v669 T{_Smi}, v695 T{_Smi}) [0, 15] uint32
ParallelMove rdx <- rax
v685 <- IntConverter(uint32->int64, v84) int64
Branch if RelationalOp(<, v685 T{_Smi}, v610 T{_Smi}) T{bool} goto (130, 131)
B130
  Loop 0
ParallelMove rax <- rax
v687 <- IntConverter(uint32->int64, v84) int64
ParallelMove rax <- rax
v318 <- BinaryInt64Op(+ [tr], v687 T{_Smi}, v611 T{_Smi}) [48, 63] int64
ParallelMove rsi <- rax goto:28 B132
B131
  Loop 0
ParallelMove rax <- rax
v686 <- IntConverter(uint32->int64, v84) int64
ParallelMove rax <- rax
v315 <- BinaryInt64Op(+ [tr], v686 T{_Smi}, v612 T{_Smi}) [87, 102] int64
ParallelMove rsi <- rax goto:30 B132
B132
  Loop 0
ParallelMove rdi <- fp[-5], rsi <- rsi
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v316 T{int}, using unchecked entrypoint)
ParallelMove rax <- fp[-2] goto:214 B25
B23
B22
  Loop 0
ParallelMove rax <- rsi goto:216 B25
B25
B26
  Loop 0
ParallelMove rax <- rsi goto:224 B27
B27
  Loop 0
ParallelMove rsi <- rax goto:228 B28
B29
  Loop 0
ParallelMove rcx <- rdi
Branch if RelationalOp(<, v386 T{_Smi}, v614 T{_Smi}) T{bool} goto (30, 50)
B30
  Loop 0
ParallelMove rdx <- fp[-4]
Branch if RelationalOp(>, v8 T{int}, v7) T{bool} goto (31, 32)
B31
  Loop 0
v585 <- BoxInt64(v8 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v585 T{int})
ParallelMove rdi <- fp[-8], rsi <- rsi
v239 <- StaticCall:12( substring<0> v3 T{String}, v7 T{int}, v585 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdi <- fp[-5], rsi <- rax
StaticCall:14( write<0> v98 T{StringBuffer}, v239, using unchecked entrypoint)
ParallelMove  goto:258 B33
B32
B33
  Loop 0
ParallelMove rcx <- fp[-4]
v29 <- BinaryInt64Op(+ [tr], v8 T{int}, v604 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-5], rsi <- C, fp[-2] <- rcx
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v601 T{_Smi}, using unchecked entrypoint)
ParallelMove rax <- fp[-3]
Branch if RelationalOp:312(<=, v386 T{_Smi}, v610 T{_Smi}) T{bool} goto (36, 37)
B36
  Loop 0
Branch if RelationalOp:334(<=, v386 T{_Smi}, v615 T{_Smi}) T{bool} goto (40, 41)
B40
  Loop 0
Branch if RelationalOp:344(<=, v386 T{_Smi}, v608 T{_Smi}) T{bool} goto (42, 43)
B42
  Loop 0
v589 <- BoxInt64(v386 T{_Smi}) [0, 65535] T{_Smi}
Branch if StrictCompare:354(===, v589 T{_Smi}, v51) T{bool} goto (44, 45)
B44
  Loop 0
ParallelMove rdi <- fp[-5], rsi <- C
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v616 T{_Smi}, using unchecked entrypoint)
ParallelMove  goto:270 B34
B45
B43
  Loop 0
ParallelMove rdi <- fp[-5], rsi <- C
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v617 T{_Smi}, using unchecked entrypoint)
ParallelMove  goto:274 B34
B41
  Loop 0
ParallelMove rdi <- fp[-5], rsi <- C
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v618 T{_Smi}, using unchecked entrypoint)
ParallelMove  goto:278 B34
B37
  Loop 0
Branch if RelationalOp:322(>=, v386 T{_Smi}, v619 T{_Smi}) T{bool} goto (38, 39)
B38
  Loop 0
Branch if RelationalOp:366(<=, v386 T{_Smi}, v619 T{_Smi}) T{bool} goto (46, 47)
B46
  Loop 0
ParallelMove rdi <- fp[-5], rsi <- C
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v620 T{_Smi}, using unchecked entrypoint)
ParallelMove  goto:282 B34
B47
  Loop 0
v588 <- BoxInt64(v386 T{_Smi}) [0, 65535] T{_Smi}
Branch if StrictCompare:376(===, v588 T{_Smi}, v35) T{bool} goto (48, 49)
B48
  Loop 0
ParallelMove rdi <- fp[-5], rsi <- C
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v621 T{_Smi}, using unchecked entrypoint)
ParallelMove  goto:286 B34
B49
B39
B35
  Loop 0
ParallelMove rdi <- fp[-5], rsi <- C
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v606 T{_Smi}, using unchecked entrypoint)
ParallelMove rdi <- fp[-5], rsi <- C
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v611 T{_Smi}, using unchecked entrypoint)
ParallelMove rdi <- fp[-5], rsi <- C
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v611 T{_Smi}, using unchecked entrypoint)
ParallelMove rax <- fp[-3]
v668 <- IntConverter(int64->uint32[tr], v386 T{_Smi}) uint32
ParallelMove rax <- rax
v42 <- ShiftUint32Op(>> [tr], v668 T{_Smi}, v613 T{_Smi}) [0, 4095] uint32
ParallelMove rcx <- C
ParallelMove rax <- rax
v44 <- BinaryUint32Op(& [tr], v42, v695 T{_Smi}) [0, 15] uint32
ParallelMove rdx <- rax
v688 <- IntConverter(uint32->int64, v44) int64
Branch if RelationalOp(<, v688 T{_Smi}, v610 T{_Smi}) T{bool} goto (82, 83)
B82
  Loop 0
ParallelMove rax <- rax
v690 <- IntConverter(uint32->int64, v44) int64
ParallelMove rax <- rax
v150 <- BinaryInt64Op(+ [tr], v690 T{_Smi}, v611 T{_Smi}) [48, 63] int64
ParallelMove rsi <- rax goto:28 B84
B83
  Loop 0
ParallelMove rax <- rax
v689 <- IntConverter(uint32->int64, v44) int64
ParallelMove rax <- rax
v147 <- BinaryInt64Op(+ [tr], v689 T{_Smi}, v612 T{_Smi}) [87, 102] int64
ParallelMove rsi <- rax goto:30 B84
B84
  Loop 0
ParallelMove rdi <- fp[-5], rsi <- rsi
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v148 T{int}, using unchecked entrypoint)
ParallelMove rax <- fp[-3]
v667 <- IntConverter(int64->uint32[tr], v386 T{_Smi}) uint32
ParallelMove rcx <- C
ParallelMove rax <- rax
v46 <- BinaryUint32Op(& [tr], v667 T{_Smi}, v695 T{_Smi}) [0, 15] uint32
ParallelMove rdx <- rax
v691 <- IntConverter(uint32->int64, v46) int64
Branch if RelationalOp(<, v691 T{_Smi}, v610 T{_Smi}) T{bool} goto (89, 90)
B89
  Loop 0
ParallelMove rax <- rax
v693 <- IntConverter(uint32->int64, v46) int64
ParallelMove rax <- rax
v174 <- BinaryInt64Op(+ [tr], v693 T{_Smi}, v611 T{_Smi}) [48, 63] int64
ParallelMove rsi <- rax goto:28 B91
B90
  Loop 0
ParallelMove rax <- rax
v692 <- IntConverter(uint32->int64, v46) int64
ParallelMove rax <- rax
v171 <- BinaryInt64Op(+ [tr], v692 T{_Smi}, v612 T{_Smi}) [87, 102] int64
ParallelMove rsi <- rax goto:30 B91
B91
  Loop 0
ParallelMove rdi <- fp[-5], rsi <- rsi
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v172 T{int}, using unchecked entrypoint)
ParallelMove  goto:308 B34
B34
  Loop 0
ParallelMove rax <- fp[-2] goto:454 B60
B50
  Loop 0
Branch if EqualityCompare(v386 T{_Smi} == v622 T{_Smi}) T{bool} goto (53, 51)
B53
B51
  Loop 0
Branch if EqualityCompare(v386 T{_Smi} == v601 T{_Smi}) T{bool} goto (54, 58)
B54
B52
  Loop 0
Branch if RelationalOp(>, v8 T{int}, v7) T{bool} goto (55, 56)
B55
  Loop 0
v586 <- BoxInt64(v8 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v586 T{int})
ParallelMove rdi <- fp[-8], rsi <- rsi
v117 <- StaticCall:12( substring<0> v3 T{String}, v7 T{int}, v586 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdi <- fp[-5], rsi <- rax
StaticCall:14( write<0> v98 T{StringBuffer}, v117, using unchecked entrypoint)
ParallelMove  goto:434 B57
B56
B57
  Loop 0
ParallelMove rax <- fp[-4]
v25 <- BinaryInt64Op(+ [tr], v8 T{int}, v604 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-5], rsi <- C, fp[-2] <- rax
StaticCall:12( writeCharCode<0> v98, v601 T{_Smi}, using unchecked entrypoint)
ParallelMove rdi <- fp[-5], rsi <- fp[-3]
StaticCall:12( writeCharCode<0> v98 T{StringBuffer}, v386 T{_Smi}, using unchecked entrypoint)
ParallelMove rax <- fp[-2] goto:448 B59
B58
  Loop 0
ParallelMove rax <- rsi goto:450 B59
B59
B60
  Loop 0
ParallelMove rsi <- rax goto:458 B28
B28
  Loop 0
ParallelMove rax <- fp[-4]
v58 <- BinaryInt64Op(+ [tr], v8 T{int}, v604 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi, r13 <- rax, rcx <- fp[-8], r10 <- fp[-5], r9 <- fp[-6], r8 <- fp[-7] goto:464 B61
B4
Branch if EqualityCompare(v7 == v600 T{_Smi}) T{bool} goto (62, 63)
B62
ParallelMove rdi <- fp[-1], rsi <- fp[-8]
StaticCall:478( writeString<0> v2, v3, using unchecked entrypoint)
ParallelMove  goto:504 B67
B63
ParallelMove rbx <- fp[-7]
Branch if RelationalOp(<, v7, v582 T{_Smi}) T{bool} goto (64, 65)
B64
ParallelMove rdi <- fp[-1], rsi <- fp[-8], rdx <- rsi, rbx <- rbx
StaticCall:492( writeStringSlice<0> v2, v3, v7, v582 T{_Smi}, using unchecked entrypoint)
ParallelMove  goto:498 B66
B65
B66
B67
ParallelMove rax <- C
DartReturn:508(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi, rsi <- rdx, rcx <- rbx
CheckStackOverflow:8(stack=0, loop=0)
v6 <- LoadField(v2 . _sink@10003594 {final}) T{StringBuffer}
ParallelMove fp[-1] <- rdx
v8 <- BoxInt64(v5) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v8 T{int})
ParallelMove rdi <- rdi, rsi <- rsi
v7 <- StaticCall:12( substring<0> v3, v4, v8 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdi <- fp[-1], rsi <- rax
StaticCall:14( write<0> v6, v7, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . _sink@10003594 {final}) T{StringBuffer}
ParallelMove rdi <- rax, rsi <- rsi
StaticCall:12( write<0> v4, v3, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v19 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdi <- rax, fp[-1] <- rcx
v4 <- StaticCall:12( _firstNonWhitespace@0150898<0> v2, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
ParallelMove rcx <- fp[-1], fp[-4] <- rax
v35 <- UnboxInt64([non-speculative], v19 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-3] <- rcx
Branch if EqualityCompare(v35 T{_Smi} == v4) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:24(v14)
B4
ParallelMove rdi <- fp[-2]
v7 <- StaticCall:28( _lastNonWhitespace@0150898<0> v2, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
ParallelMove rax <- rax
v9 <- BinaryInt64Op(+ [tr], v7, v36 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- fp[-4]
Branch if EqualityCompare(v4 == v37 T{_Smi}) T{bool} goto (5, 8)
B5
ParallelMove rcx <- fp[-3]
Branch if EqualityCompare(v9 == v35 T{_Smi}) T{bool} goto (6, 9)
B6
ParallelMove rax <- fp[-2]
DartReturn:52(v2)
B9
B8
B7
ParallelMove rdi <- fp[-2], rsi <- rsi, rdx <- rax
v12 <- StaticCall:64( _substringUnchecked@0150898<0> v2, v4, v9, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:66(v12)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . variableName {final}) T{String??}
ParallelMove fp[-1] <- rcx
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C goto:26 B5
B4
ParallelMove rbx <- C, r10 <- C
v5 <- CreateArray:20(v0, v4) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v5, v6, v7, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreIndexed([_List] v5, v8, v3 T{String?}, NoStoreBarrier)
StoreIndexed([_List] v5, v9, v10, NoStoreBarrier)
MoveArgument(sp[0] <- v5)
v11 <- StaticCall:22( _interpolate@0150898<0> v5, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:28 B5
B5
ParallelMove rax <- rax
DartReturn:30(v12)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v4 <- LoadField(v2 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v6 <- BinarySmiOp:4(- [tr], v4, v5) [-1, 4611686018427387902] T{_Smi}
v7 <- LoadIndexedUnsafe(rbp[v6 + 16]) T{*?}
Branch if RelationalOp:6(<=, v5, v6) T{bool} goto (2, 3)
B2
v11 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 8]) T{String??}
ParallelMove rax <- rbx goto:20 B5
B3
ParallelMove rax <- C goto:18 B5
B5
ParallelMove rax <- rax
StoreField(v7 . variableName = v10)
ParallelMove rax <- C
DartReturn:30(v0)
B0
B1
ParallelMove rcx <- sp[1]
v3 <- LoadField(v2 . _errorMsg@0150898 {final}) T{String}
ParallelMove rax <- rax
DartReturn:12(v3)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . _invocation@0150898 {final}) T{_InvocationMirror}
ParallelMove rdi <- rcx, fp[-1] <- rcx
v5 <- StaticCall:14( get:memberName<0> v3, result_type = T{Symbol}) T{Symbol}
ParallelMove rdi <- rax
v6 <- StaticCall:16( computeUnmangledName<0> v5, result_type = T{!null}) T{String}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-2] <- rcx
v7 <- LoadField(v3 . _type@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rdx
v9 <- ShiftInt64Op(>> [tr], v7, v538 T{_Smi}) [-1152921504606846976, 1152921504606846975] int64
ParallelMove rbx <- rbx
v617 <- IntConverter(int64->uint32[tr], v9) uint32
ParallelMove rsi <- C
ParallelMove rbx <- rbx
v11 <- BinaryUint32Op(& [tr], v617 T{int}, v642 T{_Smi}) [0, 7] uint32
ParallelMove fp[-4] <- rbx
ParallelMove rdx <- rdx
v616 <- IntConverter(int64->uint32[tr], v7 T{int}) uint32
ParallelMove rdx <- rdx
v13 <- BinaryUint32Op(& [tr], v616 T{int}, v642 T{_Smi}) [0, 7] uint32
ParallelMove fp[-3] <- rdx
ParallelMove rsi <- rdx
v627 <- IntConverter(uint32->int64, v13) int64
Branch if EqualityCompare(v627 T{_Smi} == v540 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rbx <- C, r10 <- C
v181 <- CreateArray:38(v0, v8) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v181, v19, v182, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v181, v49, v6, NoStoreBarrier)
StoreIndexed([_List] v181, v43, v51, NoStoreBarrier)
MoveArgument(sp[0] <- v181)
v183 <- StaticCall:40( _interpolate@0150898<0> v181, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:42(v183)
B4
ParallelMove rdi <- rax
v17 <- StaticCall:46( get:typeArguments<0> v3, result_type = T{!null}) T{List<Type>}
ParallelMove rax <- rax
ParallelMove fp[-5] <- rax
v632 <- LoadClassId(<non-smi> v17) int64
MoveArgument(sp[0] <- v17)
ParallelMove rcx <- rcx
v18 <- DispatchTableCall( cid=v632 List.length<0>, v17) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v516 <- UnboxInt64([non-speculative], v18 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
Branch if RelationalOp(>, v516 T{_Smi}, v541 T{_Smi}) T{bool} goto (5, 12)
B5
v171 <- AllocateObject:60(cls=StringBuffer) T{StringBuffer}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-6] <- rax
StaticCall:62( StringBuffer.<0> v171)
ParallelMove rdi <- fp[-6], rsi <- C
StaticCall:64( write<0> v171, v172, using unchecked entrypoint)
ParallelMove rdx <- C goto:110 B11
B11
  Loop 1
ParallelMove fp[-7] <- rdx
CheckStackOverflow:114(stack=0, loop=1)
v633 <- LoadClassId(<non-smi> v17) int64
MoveArgument(sp[0] <- v17)
ParallelMove rcx <- rcx
v174 <- DispatchTableCall( cid=v633 List.length<0>, v17) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v518 <- UnboxInt64([non-speculative], v174 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rcx <- fp[-7]
Branch if RelationalOp(<, v173, v518 T{_Smi}) T{bool} goto (6, 7)
B6
  Loop 1
Branch if RelationalOp(>, v173, v541 T{_Smi}) T{bool} goto (127, 9)
B127
  Loop 1
ParallelMove rdi <- fp[-6]
StaticCall:26( _consumeBuffer@0150898<0> v171 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-6], rsi <- C
StaticCall:28( _addPart@0150898<0> v171 T{StringBuffer}, v170 T{_OneByteString}, using unchecked entrypoint)
ParallelMove  goto:98 B10
B9
B10
  Loop 1
v517 <- BoxInt64(v173) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v634 <- LoadClassId(<non-smi> v17) int64
MoveArgument(sp[1] <- v17)
MoveArgument(sp[0] <- v517 T{int})
ParallelMove rcx <- rcx
v178 <- DispatchTableCall( cid=v634 List.[]<0>, v17, v517 T{int}) T{*?}
ParallelMove rax <- rax
v286 <- LoadClassId(v178 T{X0}) [1, 617] int64
Branch if TestRange(v286 in [59-61]) T{bool} goto (111, 108)
B111
B108
  Loop 1
Branch if EqualityCompare(v286 T{_Smi} == v240) T{bool} goto (112, 114)
B112
B110
  Loop 1
v635 <- LoadClassId(v178 T{X0}) int64
MoveArgument(sp[0] <- v178 T{X0})
ParallelMove rcx <- rcx
v281 <- DispatchTableCall( cid=v635 Object.toString<0>, v178 T{X0}) T{String}
ParallelMove rax <- rax
ParallelMove rsi <- rax goto:50 B117
B114
  Loop 1
Branch if TestRange(v286 T{_Smi} in [93-94]) T{bool} goto (115, 116)
B115
  Loop 1
ParallelMove rdi <- rax
v280 <- StaticCall:64( _stringToSafeString@0150898<0> v178 T{X0}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rsi <- rax goto:66 B117
B116
  Loop 1
MoveArgument(sp[0] <- v178 T{X0})
v354 <- StaticCall:10( _toString@0150898<0> v178 T{X0}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rsi <- rax goto:72 B117
B117
  Loop 1
ParallelMove fp[-8] <- rsi
v368 <- LoadField(v293 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v368, v19 T{_Smi}) T{bool} goto (120, 121)
B120
B121
  Loop 1
ParallelMove rdi <- fp[-6]
StaticCall:26( _consumeBuffer@0150898<0> v171 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-6], rsi <- fp[-8]
StaticCall:28( _addPart@0150898<0> v171 T{StringBuffer}, v293 T{String}, using unchecked entrypoint)
ParallelMove  goto:30 B122
B122
  Loop 1
ParallelMove rax <- fp[-7]
v180 <- BinaryInt64Op(+ [tr], v173, v542 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax goto:112 B11
B7
ParallelMove rdi <- fp[-6], rsi <- C
StaticCall:116( write<0> v171, v176, using unchecked entrypoint)
ParallelMove rsi <- fp[-6] goto:122 B13
B12
ParallelMove rsi <- C goto:124 B13
B13
ParallelMove fp[-5] <- rsi
v24 <- AllocateObject:126(cls=StringBuffer) T{StringBuffer}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-6] <- rax
StaticCall:128( StringBuffer.<0> v24)
v4 <- AllocateContext:12(num_variables=2) T{Context}
ParallelMove rcx <- rax, rax <- fp[-6]
ParallelMove fp[-8] <- rcx
StoreField(v4 . argumentsBuf = v24, NoStoreBarrier)
ParallelMove rdi <- fp[-1]
v25 <- StaticCall:130( get:positionalArguments<0> v3, result_type = T{!null}) T{List<dynamic>}
ParallelMove rax <- rax, rdx <- fp[-8]
ParallelMove fp[-6] <- rax
StoreField(v4 . argumentCount = v19)
ParallelMove rbx <- C goto:176 B19
B19
  Loop 0
ParallelMove fp[-7] <- rbx
CheckStackOverflow:180(stack=0, loop=1)
v636 <- LoadClassId(<non-smi> v25) int64
MoveArgument(sp[0] <- v25)
ParallelMove rcx <- rcx
v27 <- DispatchTableCall( cid=v636 List.length<0>, v25) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v520 <- UnboxInt64([non-speculative], v27 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rcx <- fp[-7]
Branch if RelationalOp(<, v537 T{int}, v520 T{_Smi}) T{bool} goto (14, 15)
B14
  Loop 0
ParallelMove rdx <- fp[-8]
v161 <- LoadField(v4 . argumentCount) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v521 <- UnboxInt64([non-speculative], v161) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v521 T{int}, v541 T{_Smi}) T{bool} goto (105, 17)
B105
  Loop 0
v169 <- LoadField(v4 . argumentsBuf) T{StringBuffer}
ParallelMove rdi <- rax, fp[-9] <- rax
StaticCall:26( _consumeBuffer@0150898<0> v169 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-9], rsi <- C
StaticCall:28( _addPart@0150898<0> v169 T{StringBuffer}, v170 T{_OneByteString}, using unchecked entrypoint)
ParallelMove  goto:164 B18
B17
B18
  Loop 0
v163 <- LoadField(v4 . argumentsBuf) T{StringBuffer}
ParallelMove fp[-9] <- rdi
v164 <- LoadField(v4 . argumentCount) [-9223372036854775808, 9223372036854775807] T{int}
v637 <- LoadClassId(<non-smi> v25) int64
MoveArgument(sp[1] <- v25)
MoveArgument(sp[0] <- v164)
ParallelMove rcx <- rbx
v165 <- DispatchTableCall( cid=v637 List.[]<0>, v25, v164) T{*?}
ParallelMove rax <- rax
v229 <- LoadClassId(v165 T{X0?}) [1, 617] int64
Branch if TestRange(v229 in [59-61]) T{bool} goto (89, 86)
B89
B86
  Loop 0
Branch if EqualityCompare(v229 T{_Smi} == v240) T{bool} goto (90, 87)
B90
B87
  Loop 0
Branch if StrictCompare:28(===, v165 T{X0?}, v0 T{Null?}) goto (91, 92)
B91
B88
  Loop 0
v638 <- LoadClassId(v165 T{X0?}) int64
MoveArgument(sp[0] <- v165 T{X0?})
ParallelMove rcx <- rcx
v224 <- DispatchTableCall( cid=v638 Object.toString<0>, v165 T{X0?}) T{String}
ParallelMove rax <- rax
ParallelMove rsi <- rax goto:50 B95
B92
  Loop 0
Branch if TestRange(v229 T{_Smi} in [93-94]) T{bool} goto (93, 94)
B93
  Loop 0
ParallelMove rdi <- rax
v223 <- StaticCall:64( _stringToSafeString@0150898<0> v165 T{X0}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rsi <- rax goto:66 B95
B94
  Loop 0
MoveArgument(sp[0] <- v165 T{X0})
v324 <- StaticCall:10( _toString@0150898<0> v165 T{X0}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rsi <- rax goto:72 B95
B95
  Loop 0
ParallelMove fp[-10] <- rsi
v338 <- LoadField(v241 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v338, v19 T{_Smi}) T{bool} goto (98, 99)
B98
B99
  Loop 0
ParallelMove rdi <- fp[-9]
StaticCall:26( _consumeBuffer@0150898<0> v163 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-9], rsi <- fp[-10]
StaticCall:28( _addPart@0150898<0> v163 T{StringBuffer}, v241 T{String}, using unchecked entrypoint)
ParallelMove  goto:30 B100
B100
  Loop 0
v167 <- LoadField(v4 . argumentCount) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v522 <- UnboxInt64([non-speculative], v167) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
v168 <- BinaryInt64Op(+ [tr], v522 T{int}, v542 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v523 <- BoxInt64(v168) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v4 . argumentCount = v523 T{int})
ParallelMove rbx <- rcx, rax <- fp[-6] goto:178 B19
B15
ParallelMove rcx <- fp[2], rax <- fp[-1], rdx <- fp[-8]
ParallelMove rdi <- rax
v29 <- StaticCall:182( get:namedArguments<0> v3, result_type = T{!null}) T{Map<Symbol, dynamic>}
ParallelMove rbx <- C, rdx <- fp[-8], rax <- rax
ParallelMove fp[-6] <- rax
v31 <- AllocateClosure:184(v30, v4) T{_Closure}
ParallelMove rax <- rax, rdi <- fp[-6]
v639 <- LoadClassId(<non-smi> v29) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- rax
DispatchTableCall( cid=v639 Map.forEach<0>, v29, v31)
ParallelMove rax <- fp[2]
v32 <- LoadField(v2 . _receiver@0150898 {final}) T{Object??}
ParallelMove rax <- fp[-1], fp[-6] <- rdi
v33 <- LoadField(v3 . _type@0150898) [-9223372036854775808, 9223372036854775807] int64
v524 <- BoxInt64(v33) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v32 T{Object??})
MoveArgument(sp[1] <- v6)
MoveArgument(sp[0] <- v524 T{int})
v34 <- StaticCall:192( _existingMethodSignature@0150898<0> v32 T{Object??}, v6, v524 T{int}) T{String??}
ParallelMove rcx <- rax
ParallelMove fp[-10] <- rcx
Branch if StrictCompare:194(!==, v34, v0) goto (20, 21)
B20
ParallelMove rdx <- C goto:204 B22
B21
ParallelMove rdx <- C goto:206 B22
B22
ParallelMove fp[-9] <- rdx
ParallelMove rax <- fp[-3]
v626 <- IntConverter(uint32->int64, v13) int64
Branch if RelationalOp(>=, v626 T{_Smi}, v541 T{_Smi}) T{bool} goto (23, 26)
B23
ParallelMove rax <- fp[-3]
v625 <- IntConverter(uint32->int64, v13) int64
Branch if RelationalOp(<, v625 T{_Smi}, v543 T{_Smi}) T{bool} goto (24, 27)
B24
ParallelMove rsi <- C
ParallelMove rdi <- fp[-3]
v628 <- IntConverter(uint32->int64, v13) int64
ParallelMove rax <- C, rbx <- rdi
GenericCheckBound:228(v543 T{_Smi}, v628 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v544 <- LoadIndexed:228([_List] v158, v628 T{_Smi}) T{String}
ParallelMove rax <- rax goto:242 B28
B27
B26
B25
ParallelMove rax <- C goto:244 B28
B28
ParallelMove fp[-1] <- rax
v40 <- AllocateObject:246(cls=StringBuffer) T{StringBuffer}
ParallelMove rax <- rax
ParallelMove fp[-11] <- rax
MoveArgument(sp[0] <- v41)
ParallelMove rdi <- rax
StaticCall:248( StringBuffer.<0> v40, v41)
ParallelMove rax <- fp[-4]
v622 <- IntConverter(uint32->int64, v11) int64
Branch if RelationalOp:430(<=, v622 T{_Smi}, v545 T{_Smi}) T{bool} goto (46, 47)
B46
ParallelMove rax <- fp[-4]
v621 <- IntConverter(uint32->int64, v11) int64
Branch if RelationalOp:440(<=, v621 T{_Smi}, v542 T{_Smi}) T{bool} goto (48, 49)
B48
ParallelMove rax <- fp[-4]
v620 <- IntConverter(uint32->int64, v11) int64
Branch if RelationalOp:450(<=, v620 T{_Smi}, v541 T{_Smi}) T{bool} goto (50, 51)
B50
ParallelMove rax <- fp[-4]
v514 <- BoxUint32(v11) [0, 7] T{_Smi}
Branch if StrictCompare:460(===, v514, v19) T{bool} goto (52, 53)
B52
ParallelMove rdi <- fp[-6]
Branch if StrictCompare:252(===, v32 T{Object??}, v0) goto (29, 33)
B29
ParallelMove rcx <- fp[-10]
Branch if StrictCompare:258(!==, v34, v0) goto (30, 31)
B30
ParallelMove r8 <- fp[-2], rdx <- fp[-9], rsi <- fp[-1]
ParallelMove rbx <- C, r10 <- C
v154 <- CreateArray:264(v0, v10) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v154, v19, v155, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreIndexed([_List] v154, v49, v39, NoStoreBarrier)
StoreIndexed([_List] v154, v43, v50, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v154, v8, v6, NoStoreBarrier)
StoreIndexed([_List] v154, v14, v51, NoStoreBarrier)
ParallelMove rdx <- fp[-9]
StoreIndexed([_List] v154, v52, v36, NoStoreBarrier)
StoreIndexed([_List] v154, v53, v117, NoStoreBarrier)
MoveArgument(sp[0] <- v154)
v156 <- StaticCall:266( _interpolate@0150898<0> v154, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-11], rsi <- rax
StaticCall:268( writeln<0> v40, v156, using unchecked entrypoint)
ParallelMove  goto:280 B32
B31
ParallelMove rax <- fp[-2], rcx <- fp[-1]
ParallelMove rbx <- C, r10 <- C
v150 <- CreateArray:272(v0, v52) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v150, v19, v151, NoStoreBarrier)
ParallelMove rbx <- fp[-1]
StoreIndexed([_List] v150, v49, v39, NoStoreBarrier)
StoreIndexed([_List] v150, v43, v50, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v150, v8, v6, NoStoreBarrier)
StoreIndexed([_List] v150, v14, v152, NoStoreBarrier)
MoveArgument(sp[0] <- v150)
v153 <- StaticCall:274( _interpolate@0150898<0> v150, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-11], rsi <- rax
StaticCall:276( writeln<0> v40, v153, using unchecked entrypoint)
ParallelMove  goto:282 B32
B32
ParallelMove rax <- C goto:372 B43
B33
ParallelMove rdx <- fp[-9], rbx <- fp[-1]
v194 <- LoadClassId(v32 T{Object?}) [1, 617] int64
Branch if EqualityCompare(v194 == v195) T{bool} goto (34, 35)
B34
ParallelMove rax <- fp[-2]
ParallelMove rbx <- C, r10 <- C
v146 <- CreateArray:298(v0, v8) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v146, v19, v147, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v146, v49, v6, NoStoreBarrier)
StoreIndexed([_List] v146, v43, v51, NoStoreBarrier)
MoveArgument(sp[0] <- v146)
v148 <- StaticCall:300( _interpolate@0150898<0> v146, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-11], rsi <- rax
StaticCall:302( writeln<0> v40, v148, using unchecked entrypoint)
ParallelMove rax <- C goto:366 B42
B35
Branch if EqualityCompare(v194 T{_Smi} == v197) T{bool} goto (36, 39)
B36
ParallelMove rax <- fp[-2]
v640 <- LoadClassId(<non-smi> v6) int64
MoveArgument(sp[1] <- v6)
MoveArgument(sp[0] <- v136)
ParallelMove rcx <- rcx
v137 <- DispatchTableCall( cid=v640 String.==<0>, v6, v136) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:320(===, v137 T{bool}, v16) goto (37, 40)
BoolTest
B37
ParallelMove rdi <- fp[-6]
v641 <- LoadClassId(v32 T{Object?}) int64
MoveArgument(sp[0] <- v32 T{Object?})
ParallelMove rcx <- rcx
v139 <- DispatchTableCall( cid=v641 Object.toString<0>, v32 T{Object?}) T{String}
ParallelMove rbx <- C, r10 <- C, rax <- rax
ParallelMove fp[-12] <- rax
v140 <- CreateArray:332(v0, v52) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v140, v19, v141, NoStoreBarrier)
ParallelMove rcx <- fp[-12]
StoreIndexed([_List] v140, v49, v139 T{String}, NoStoreBarrier)
StoreIndexed([_List] v140, v43, v142, NoStoreBarrier)
StoreIndexed([_List] v140, v8, v139 T{String}, NoStoreBarrier)
StoreIndexed([_List] v140, v14, v143, NoStoreBarrier)
MoveArgument(sp[0] <- v140)
v144 <- StaticCall:334( _interpolate@0150898<0> v140, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-11], rsi <- rax
StaticCall:336( writeln<0> v40, v144, using unchecked entrypoint)
ParallelMove rax <- C goto:360 B41
B40
B39
B38
ParallelMove rbx <- C, r10 <- C
v130 <- CreateArray:348(v0, v105) T{_List}
ParallelMove rax <- rax
ParallelMove fp[-12] <- rax
StoreIndexed([_List] v130, v19, v131, NoStoreBarrier)
MoveArgument(sp[0] <- v32 T{Object?})
v133 <- StaticCall:352( get:runtimeType<0> v32 T{Object?}, recognized_kind = ObjectRuntimeType) T{Type}
ParallelMove rdx <- fp[-12], rax <- rax
StoreIndexed([_List] v130, v49, v133 T{Type})
ParallelMove rcx <- fp[-12]
StoreIndexed([_List] v130, v43, v116, NoStoreBarrier)
ParallelMove rdx <- rcx, rax <- fp[-1]
StoreIndexed([_List] v130, v8, v39)
StoreIndexed([_List] v130, v14, v50, NoStoreBarrier)
ParallelMove rdx <- rcx, rax <- fp[-2]
StoreIndexed([_List] v130, v52, v6)
StoreIndexed([_List] v130, v53, v51, NoStoreBarrier)
ParallelMove rdx <- rcx, rax <- fp[-9]
StoreIndexed([_List] v130, v10, v36)
StoreIndexed([_List] v130, v109, v117, NoStoreBarrier)
MoveArgument(sp[0] <- v130)
v134 <- StaticCall:354( _interpolate@0150898<0> v130, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-11], rsi <- rax
StaticCall:356( writeln<0> v40, v134, using unchecked entrypoint)
ParallelMove rax <- C goto:362 B41
B41
B42
B43
ParallelMove rcx <- fp[-2], rax <- rax goto:378 B44
B53
B51
ParallelMove rax <- fp[-2]
ParallelMove rbx <- C, r10 <- C
v112 <- CreateArray:380(v0, v105) T{_List}
ParallelMove rax <- rax
ParallelMove fp[-12] <- rax
StoreIndexed([_List] v112, v19, v113, NoStoreBarrier)
MoveArgument(sp[0] <- v32 T{Object??})
v115 <- StaticCall:384( get:runtimeType<0> v32 T{Object??}, recognized_kind = ObjectRuntimeType) T{Type}
ParallelMove rdx <- fp[-12], rax <- rax
StoreIndexed([_List] v112, v49, v115 T{Type})
ParallelMove rcx <- fp[-12]
StoreIndexed([_List] v112, v43, v116, NoStoreBarrier)
ParallelMove rdx <- rcx, rax <- fp[-1]
StoreIndexed([_List] v112, v8, v39)
StoreIndexed([_List] v112, v14, v50, NoStoreBarrier)
ParallelMove rdx <- rcx, rax <- fp[-2]
StoreIndexed([_List] v112, v52, v6)
StoreIndexed([_List] v112, v53, v51, NoStoreBarrier)
ParallelMove rdx <- rcx, rax <- fp[-9]
StoreIndexed([_List] v112, v10, v36)
StoreIndexed([_List] v112, v109, v117, NoStoreBarrier)
MoveArgument(sp[0] <- v112)
v118 <- StaticCall:386( _interpolate@0150898<0> v112, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-11], rsi <- rax
StaticCall:388( writeln<0> v40, v118, using unchecked entrypoint)
ParallelMove rbx <- C, r10 <- C
v119 <- CreateArray:390(v0, v43) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v119, v19, v120, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v119, v49, v6, NoStoreBarrier)
MoveArgument(sp[0] <- v119)
v121 <- StaticCall:392( _interpolate@0150898<0> v119, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax, rax <- C goto:394 B44
B49
ParallelMove rcx <- fp[-2], rdi <- fp[-6], rax <- fp[-9], rdx <- fp[-1]
ParallelMove rbx <- C, r10 <- C
v106 <- CreateArray:396(v0, v105) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v106, v19, v107, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreIndexed([_List] v106, v49, v39, NoStoreBarrier)
StoreIndexed([_List] v106, v43, v50, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v106, v8, v6, NoStoreBarrier)
StoreIndexed([_List] v106, v14, v51, NoStoreBarrier)
ParallelMove rdx <- fp[-9]
StoreIndexed([_List] v106, v52, v36, NoStoreBarrier)
StoreIndexed([_List] v106, v53, v58, NoStoreBarrier)
ParallelMove rdi <- fp[-6]
StoreIndexed([_List] v106, v10, v32 T{Object??}, NoStoreBarrier)
StoreIndexed([_List] v106, v109, v60, NoStoreBarrier)
MoveArgument(sp[0] <- v106)
v110 <- StaticCall:400( _interpolate@0150898<0> v106, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-11], rsi <- rax
StaticCall:402( writeln<0> v40, v110, using unchecked entrypoint)
ParallelMove rcx <- fp[-2], rax <- C goto:404 B44
B47
ParallelMove rdx <- fp[-9], rcx <- fp[-1]
ParallelMove rax <- fp[-4]
v619 <- IntConverter(uint32->int64, v11) int64
Branch if RelationalOp:472(<=, v619 T{_Smi}, v538 T{_Smi}) T{bool} goto (54, 55)
B54
ParallelMove rax <- fp[-2], rdi <- fp[-6]
ParallelMove rbx <- C, r10 <- C
v56 <- CreateArray:406(v0, v10) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v56, v19, v57, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v56, v49, v6, NoStoreBarrier)
StoreIndexed([_List] v56, v43, v51, NoStoreBarrier)
ParallelMove rdx <- fp[-9]
StoreIndexed([_List] v56, v8, v36, NoStoreBarrier)
StoreIndexed([_List] v56, v14, v58, NoStoreBarrier)
ParallelMove rdi <- fp[-6]
StoreIndexed([_List] v56, v52, v32 T{Object??}, NoStoreBarrier)
StoreIndexed([_List] v56, v53, v60, NoStoreBarrier)
MoveArgument(sp[0] <- v56)
v61 <- StaticCall:410( _interpolate@0150898<0> v56, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-11], rsi <- rax
StaticCall:412( writeln<0> v40, v61, using unchecked entrypoint)
ParallelMove rbx <- C, r10 <- C
v62 <- CreateArray:414(v0, v43) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v62, v19, v63, NoStoreBarrier)
ParallelMove rsi <- fp[-2]
StoreIndexed([_List] v62, v49, v6, NoStoreBarrier)
MoveArgument(sp[0] <- v62)
v64 <- StaticCall:416( _interpolate@0150898<0> v62, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax, rax <- C goto:418 B44
B55
ParallelMove rsi <- fp[-2], rax <- fp[-4]
v515 <- BoxUint32(v11) [0, 7] T{_Smi}
Branch if StrictCompare:482(===, v515, v14) T{bool} goto (56, 57)
B56
ParallelMove rbx <- C, r10 <- C
v47 <- CreateArray:420(v0, v10) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v47, v19, v48, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreIndexed([_List] v47, v49, v39, NoStoreBarrier)
StoreIndexed([_List] v47, v43, v50, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v47, v8, v6, NoStoreBarrier)
StoreIndexed([_List] v47, v14, v51, NoStoreBarrier)
ParallelMove rdx <- fp[-9]
StoreIndexed([_List] v47, v52, v36, NoStoreBarrier)
StoreIndexed([_List] v47, v53, v54, NoStoreBarrier)
MoveArgument(sp[0] <- v47)
v55 <- StaticCall:422( _interpolate@0150898<0> v47, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-11], rsi <- rax
StaticCall:424( writeln<0> v40, v55, using unchecked entrypoint)
ParallelMove rcx <- fp[-2], rax <- C goto:426 B44
B57
B45
ParallelMove rcx <- fp[-2], rax <- C goto:494 B44
B44
ParallelMove fp[-1] <- rcx, fp[-2] <- rax
ParallelMove rdx <- fp[-4]
v618 <- IntConverter(uint32->int64, v11) int64
Branch if EqualityCompare(v618 T{_Smi} == v540 T{_Smi}) T{bool} goto (58, 59)
B58
ParallelMove rdi <- fp[-11], rsi <- C
StaticCall:506( writeln<0> v40, v103, using unchecked entrypoint)
ParallelMove  goto:522 B60
B59
ParallelMove rbx <- C, r10 <- C
v68 <- CreateArray:510(v0, v43) T{_List}
ParallelMove rax <- rax
ParallelMove fp[-9] <- rax
StoreIndexed([_List] v68, v19, v69, NoStoreBarrier)
ParallelMove rdi <- fp[-6]
v71 <- StaticCall:514( safeToString<0> v32 T{Object??}) T{String}
ParallelMove rdx <- fp[-9], rax <- rax
StoreIndexed([_List] v68, v49, v71)
MoveArgument(sp[0] <- v68)
v72 <- StaticCall:516( _interpolate@0150898<0> v68, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-11], rsi <- rax
StaticCall:518( writeln<0> v40, v72, using unchecked entrypoint)
ParallelMove  goto:524 B60
B60
ParallelMove rax <- fp[-3]
v624 <- IntConverter(uint32->int64, v13) int64
Branch if EqualityCompare(v624 T{_Smi} == v541 T{_Smi}) T{bool} goto (61, 68)
B61
ParallelMove rax <- fp[-2]
Branch if StrictCompare:538(===, v66 T{bool}, v16) goto (62, 63)
BoolTest
B62
MoveArgument(sp[0] <- v32 T{Object??})
v102 <- StaticCall:546( _interpolateSingle@0150898<0> v32 T{Object??}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:554 B64
B63
ParallelMove rax <- fp[-1] goto:556 B64
B64
ParallelMove rbx <- C, r10 <- C, fp[-2] <- rax
v94 <- CreateArray:558(v0, v43) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v94, v19, v78, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v94, v49, v93, NoStoreBarrier)
MoveArgument(sp[0] <- v94)
v95 <- StaticCall:560( _interpolate@0150898<0> v94, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-11], rsi <- rax
StaticCall:562( write<0> v40, v95, using unchecked entrypoint)
ParallelMove rsi <- fp[-5]
Branch if StrictCompare:564(!==, v21, v0) goto (65, 66)
B65
ParallelMove rdi <- fp[-11], rsi <- rsi
StaticCall:570( write<0> v40, v21 T{StringBuffer}, using unchecked entrypoint)
ParallelMove  goto:576 B67
B66
B67
ParallelMove rbx <- C, r10 <- C
v96 <- CreateArray:580(v0, v8) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v96, v19, v97, NoStoreBarrier)
ParallelMove rcx <- fp[-8]
v98 <- LoadField(v4 . argumentsBuf) T{StringBuffer}
StoreIndexed([_List] v96, v49, v98, NoStoreBarrier)
StoreIndexed([_List] v96, v43, v99, NoStoreBarrier)
MoveArgument(sp[0] <- v96)
v100 <- StaticCall:582( _interpolate@0150898<0> v96, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-11], rsi <- rax
StaticCall:584( write<0> v40, v100, using unchecked entrypoint)
ParallelMove  goto:644 B75
B68
ParallelMove rcx <- fp[-8]
v74 <- LoadField(v4 . argumentCount) [-9223372036854775808, 9223372036854775807] T{int}
Branch if StrictCompare(===, v74 T{int}, v19 T{_Smi}) T{bool} goto (69, 70)
B69
ParallelMove rax <- fp[-1]
ParallelMove rbx <- C, r10 <- C
v85 <- CreateArray:598(v0, v43) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v85, v19, v78, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreIndexed([_List] v85, v49, v65, NoStoreBarrier)
MoveArgument(sp[0] <- v85)
v86 <- StaticCall:600( _interpolate@0150898<0> v85, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-11], rsi <- rax
StaticCall:602( write<0> v40, v86, using unchecked entrypoint)
ParallelMove  goto:638 B74
B70
ParallelMove rax <- fp[-3]
v623 <- IntConverter(uint32->int64, v13) int64
Branch if EqualityCompare(v623 T{_Smi} == v545 T{_Smi}) T{bool} goto (71, 72)
B71
ParallelMove rax <- fp[-1]
ParallelMove rbx <- C, r10 <- C
v82 <- CreateArray:616(v0, v8) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v82, v19, v78, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreIndexed([_List] v82, v49, v65, NoStoreBarrier)
ParallelMove rdx <- fp[-8]
v83 <- LoadField(v4 . argumentsBuf) T{StringBuffer}
StoreIndexed([_List] v82, v43, v83, NoStoreBarrier)
MoveArgument(sp[0] <- v82)
v84 <- StaticCall:618( _interpolate@0150898<0> v82, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-11], rsi <- rax
StaticCall:620( write<0> v40, v84, using unchecked entrypoint)
ParallelMove  goto:632 B73
B72
ParallelMove rdx <- rcx, rax <- fp[-1]
ParallelMove rbx <- C, r10 <- C
v77 <- CreateArray:624(v0, v14) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v77, v19, v78, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreIndexed([_List] v77, v49, v65, NoStoreBarrier)
StoreIndexed([_List] v77, v43, v79, NoStoreBarrier)
ParallelMove rdx <- fp[-8]
v80 <- LoadField(v4 . argumentsBuf) T{StringBuffer}
StoreIndexed([_List] v77, v8, v80, NoStoreBarrier)
MoveArgument(sp[0] <- v77)
v81 <- StaticCall:626( _interpolate@0150898<0> v77, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-11], rsi <- rax
StaticCall:628( write<0> v40, v81, using unchecked entrypoint)
ParallelMove  goto:634 B73
B73
B74
B75
Branch if StrictCompare:648(!==, v34, v0) goto (76, 77)
B76
ParallelMove rcx <- fp[-1]
ParallelMove rbx <- C, r10 <- C
v89 <- CreateArray:654(v0, v8) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v89, v19, v90, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreIndexed([_List] v89, v49, v65, NoStoreBarrier)
ParallelMove rcx <- fp[-10]
StoreIndexed([_List] v89, v43, v34 T{String?}, NoStoreBarrier)
MoveArgument(sp[0] <- v89)
v91 <- StaticCall:656( _interpolate@0150898<0> v89, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-11], rsi <- rax
StaticCall:658( write<0> v40, v91, using unchecked entrypoint)
ParallelMove  goto:664 B78
B77
B78
MoveArgument(sp[0] <- v40)
v88 <- StaticCall:668( toString<0> v40, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:670(v88)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax, rsi <- rsi
StaticCall:10( write<0> v2, v3, using unchecked entrypoint)
ParallelMove rdi <- fp[-1], rsi <- C
StaticCall:12( write<0> v2, v4, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v0)
v5 <- NativeCall(NoSuchMethodError_existingMethodSignature) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v5, v6, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String??}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v5 T{String??})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _namedArguments@0150898) T{Map<Symbol, Object?>??}
Branch if StrictCompare:12(===, v3, v0) goto (3, 12)
B3
v11 <- LoadField(v2 . _argumentsDescriptor@0150898) T{List<Object?>??}
ParallelMove fp[-1] <- rax
CheckNull:20(v11, CastError) T{List<Object?>?}
v132 <- LoadClassId(<non-smi> v11 T{List<Object?>?}) int64
MoveArgument(sp[1] <- v11 T{List<Object?>?})
MoveArgument(sp[0] <- v12)
ParallelMove rcx <- rcx
v13 <- DispatchTableCall( cid=v132 List.[]<0>, v11 T{List<Object?>?}, v12) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-3] <- rbx
t0 <- AssertAssignable:24(v13 T{X0?}, v14, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-3]
v114 <- UnboxInt64([non-speculative], v13 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v16 <- BinaryInt64Op(- [tr], v114 T{int}, v83 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-1], fp[-4] <- rax
v133 <- LoadClassId(<non-smi> v11 T{List<Object?>?}) int64
MoveArgument(sp[1] <- v11 T{List<Object?>?})
MoveArgument(sp[0] <- v17)
ParallelMove rcx <- rcx
v18 <- DispatchTableCall( cid=v133 List.[]<0>, v11 T{List<Object?>?}, v17) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-3] <- rbx
t0 <- AssertAssignable:30(v18 T{X0?}, v14, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-3]
v115 <- UnboxInt64([non-speculative], v18 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v20 <- BinaryInt64Op(- [tr], v115 T{int}, v83 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[-4]
v21 <- BinaryInt64Op(- [tr], v16, v20) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-4] <- rcx
Branch if EqualityCompare(v21 == v123 T{_Smi}) T{bool} goto (4, 8)
B4
ParallelMove rax <- fp[-2], rcx <- C
StoreField(v2 T{_InvocationMirror} . _namedArguments@0150898 = v48 T{_ConstMap})
ParallelMove rax <- rcx
DartReturn:48(v48)
B8
ParallelMove rax <- fp[-2]
ParallelMove rdi <- rax
v25 <- StaticCall:52( get:_typeArgsLen@0150898<0> v2, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v26 <- RelationalOp(>, v25, v123 T{_Smi}) T{bool}
v94 <- IfThenElse(===, v26, v24 ? 1 : 0) [0, 1] T{_Smi}
BoolTest
ParallelMove rdi <- C, rdx <- rdx
ParallelMove fp[-3] <- rdx
v29 <- StaticCall:72( Map.<0> v28, result_type = T{_Map}) T{_Map}
ParallelMove rdx <- rax
ParallelMove fp[-7] <- rdx
ParallelMove r9 <- C goto:118 B11
B11
  Loop 0
ParallelMove fp[-6] <- r9
CheckStackOverflow:122(stack=0, loop=1)
Branch if RelationalOp(<, v30, v21) T{bool} goto (9, 10)
B9
  Loop 0
ParallelMove rax <- r9
v84 <- ShiftInt64Op(<< [tr], v30, v83) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- rax
v36 <- BinaryInt64Op(+ [tr], v84 T{int}, v124 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-5] <- r10
ParallelMove rcx <- r10
v37 <- BinaryInt64Op(+ [tr], v36, v83 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v117 <- BoxInt64(v37) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v134 <- LoadClassId(<non-smi> v11 T{List<Object?>?}) int64
MoveArgument(sp[1] <- v11 T{List<Object?>?})
MoveArgument(sp[0] <- v117 T{int})
ParallelMove rcx <- rcx
v38 <- DispatchTableCall( cid=v134 List.[]<0>, v11 T{List<Object?>?}, v117 T{int}) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-8] <- rbx
t0 <- AssertAssignable:96(v38 T{X0?}, v14, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[-5]
v116 <- BoxInt64(v36) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- rax, rax <- fp[-1]
v135 <- LoadClassId(<non-smi> v11 T{List<Object?>?}) int64
MoveArgument(sp[1] <- v11 T{List<Object?>?})
MoveArgument(sp[0] <- v116 T{int})
ParallelMove rcx <- rdx
v40 <- DispatchTableCall( cid=v135 List.[]<0>, v11 T{List<Object?>?}, v116 T{int}) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-9] <- rbx
t0 <- AssertAssignable:100(v40 T{X0?}, v41, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdx <- fp[-2]
v43 <- LoadField(v2 . _arguments@0150898) T{List<Object?>??}
CheckNull:104(v43, CastError) T{List<Object?>?}
ParallelMove rax <- fp[-8]
v118 <- UnboxInt64([non-speculative], v38 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- fp[-3]
v119 <- UnboxInt64([non-speculative], v94 T{_Smi}) [0, 1] int64
ParallelMove rsi <- rbx
v44 <- BinaryInt64Op(+ [tr], v119 T{_Smi}, v118 T{int}) [-9223372036854775808, 9223372036854775807] int64
v120 <- BoxInt64(v44) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v136 <- LoadClassId(<non-smi> v43 T{List<Object?>?}) int64
MoveArgument(sp[1] <- v43 T{List<Object?>?})
MoveArgument(sp[0] <- v120 T{int})
ParallelMove rcx <- rbx
v45 <- DispatchTableCall( cid=v136 List.[]<0>, v43 T{List<Object?>?}, v120 T{int}) T{*?}
ParallelMove rax <- rax
ParallelMove fp[-8] <- rax
v46 <- AllocateObject:110(cls=Symbol) T{Symbol}
ParallelMove rcx <- rax, rax <- fp[-9]
ParallelMove fp[-10] <- rcx
StoreField(v46 T{Symbol} . _name@9040228 = v40 T{String}, NoStoreBarrier)
MoveArgument(sp[0] <- v46 T{Symbol})
v91 <- StaticCall:10( get:hashCode<0> v46 T{Symbol}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v121 <- UnboxInt64([non-speculative], v91 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-7], rsi <- fp[-10], rdx <- fp[-8], rbx <- rax
StaticCall:16( _set@3220832<0> v29 T{_Map}, v46 T{Symbol}, v45 T{X0?}, v121 T{int}, using unchecked entrypoint)
ParallelMove rax <- fp[-6]
v47 <- BinaryInt64Op(+ [tr], v30, v83 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- rax, rdx <- fp[-7] goto:120 B11
B10
ParallelMove rax <- rdi
ParallelMove rdi <- C, rsi <- fp[-7]
v32 <- StaticCall:124( Map.unmodifiable<0> v28, v29, result_type = T{UnmodifiableMapView}) T{UnmodifiableMapView}
ParallelMove rax <- rax, rdx <- rax, rcx <- fp[-2]
StoreField(v2 T{_InvocationMirror} . _namedArguments@0150898 = v32 T{UnmodifiableMapView})
ParallelMove rax <- rdx goto:132 B13
B12
B13
ParallelMove rax <- rax
DartReturn:140(v122 T{Map<Symbol, Object?>?})
CheckStackOverflowSlowPath
slow path check null (cast) operation
CheckStackOverflowSlowPath
slow path check null (cast) operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax, rsi <- rsi
v5 <- StaticCall:12( LinkedHashMap.from<0> v2, v3, result_type = T{_Map}) T{_Map}
ParallelMove rdx <- fp[-1], rax <- rax
ParallelMove fp[-1] <- rax
v4 <- AllocateObject:10(cls=UnmodifiableMapView, v2) T{UnmodifiableMapView}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v4 T{UnmodifiableMapView} . _map@3220832 = v5 T{_Map}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:16(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, rdi <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- AllocateContext:10(num_variables=2) T{Context}
ParallelMove rax <- rax, rdx <- fp[-1]
ParallelMove fp[-3] <- rax
StoreField(v4 . :type_arguments = v2, NoStoreBarrier)
v24 <- LoadStaticField:4(_uninitializedIndex@3220832, CallsInitializer) T{_Uint32List}
ParallelMove rdx <- fp[-1], rax <- rax
ParallelMove fp[-1] <- rax
v6 <- AllocateObject:12(cls=_Map, v2 T{*?}) T{_Map}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-4] <- rcx
StoreField(v6 T{_Map} . LinkedHashBase.index = v24 T{_Uint32List}, NoStoreBarrier)
StoreField(v6 T{_Map} . LinkedHashBase.hash_mask = v17 T{_Smi}, NoStoreBarrier)
v39 <- LoadStaticField:4(_uninitializedData@3220832, CallsInitializer) T{_List}
ParallelMove rcx <- rax, rax <- fp[-4]
StoreField(v6 T{_Map} . LinkedHashBase.data = v39 T{_List}, NoStoreBarrier)
StoreField(v6 T{_Map} . LinkedHashBase.used_data = v17 T{_Smi}, NoStoreBarrier)
StoreField(v6 T{_Map} . LinkedHashBase.deleted_keys = v17 T{_Smi}, NoStoreBarrier)
ParallelMove rcx <- fp[-3]
StoreField(v4 . result = v6, NoStoreBarrier)
ParallelMove rbx <- C, rdx <- rcx
v8 <- AllocateClosure:16(v7, v4) T{_Closure}
ParallelMove rax <- rax, rdi <- fp[-2]
v74 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- rax
DispatchTableCall( cid=v74 Map.forEach<0>, v3, v8)
ParallelMove rcx <- fp[-3]
v9 <- LoadField(v4 . result) T{_Map}
ParallelMove rax <- rax
DartReturn:20(v9)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[4]
v5 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v6 <- LoadField(v5 . result) T{_Map}
ParallelMove fp[-2] <- rdi
v8 <- LoadField(v5 . :type_arguments) T{*?}
ParallelMove rax <- fp[3], rdx <- rbx, rcx <- C, fp[-1] <- rbx
t1 <- AssertAssignable:10(v3, v7, ' in type cast', instantiator_type_args(v8), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[2], rdx <- fp[-1], rcx <- C
t2 <- AssertAssignable:12(v4, v10, ' in type cast', instantiator_type_args(v8 T{*?}), function_type_args(v0)) T{X1?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-2], rsi <- fp[3], rdx <- fp[2]
StaticCall:14( []=<0> v6, v3 T{X0?}, v4 T{X1?})
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _argumentsDescriptor@0150898) T{List<Object?>??}
CheckNull:12(v3, CastError) T{List<Object?>?}
v23 <- LoadClassId(<non-smi> v3 T{List<Object?>?}) int64
MoveArgument(sp[1] <- v3 T{List<Object?>?})
MoveArgument(sp[0] <- v4)
ParallelMove rcx <- rcx
v5 <- DispatchTableCall( cid=v23 List.[]<0>, v3 T{List<Object?>?}, v4) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-2] <- rbx
t0 <- AssertAssignable:16(v5 T{X0?}, v6, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[-2]
v18 <- UnboxInt64([non-speculative], v5 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v18 T{int} == v20 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rdx <- fp[-1]
v11 <- LoadField(v2 . _delayedTypeArgumentsLen@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rbx goto:34 B5
B4
ParallelMove rax <- rcx goto:36 B5
B5
ParallelMove rax <- rax
DartReturn:38(v10)
CheckStackOverflowSlowPath
slow path check null (cast) operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _positionalArguments@0150898) T{List<Object?>??}
Branch if StrictCompare:12(===, v3, v0) goto (3, 9)
B3
v7 <- LoadField(v2 . _argumentsDescriptor@0150898) T{List<Object?>??}
CheckNull:20(v7, CastError) T{List<Object?>?}
v72 <- LoadClassId(<non-smi> v7 T{List<Object?>?}) int64
MoveArgument(sp[1] <- v7 T{List<Object?>?})
MoveArgument(sp[0] <- v8)
ParallelMove rcx <- rcx
v9 <- DispatchTableCall( cid=v72 List.[]<0>, v7 T{List<Object?>?}, v8) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-2] <- rbx
t0 <- AssertAssignable:24(v9 T{X0?}, v10, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-2]
v58 <- UnboxInt64([non-speculative], v9 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v13 <- BinaryInt64Op(- [tr], v58 T{int}, v63 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- rax
Branch if EqualityCompare(v13 == v64 T{_Smi}) T{bool} goto (4, 8)
B4
ParallelMove rcx <- fp[-1], rax <- C
StoreField(v2 T{_InvocationMirror} . _positionalArguments@0150898 = v24 T{_ImmutableList})
ParallelMove rax <- rax
DartReturn:40(v24)
B8
ParallelMove rcx <- fp[-1]
ParallelMove rdi <- rcx
v17 <- StaticCall:44( get:_typeArgsLen@0150898<0> v2, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v18 <- RelationalOp(>, v17, v64 T{_Smi}) T{bool}
v46 <- IfThenElse(===, v18, v16 ? 1 : 0) [0, 1] T{_Smi}
BoolTest
ParallelMove rdx <- rdx, rcx <- fp[-1]
v20 <- LoadField(v2 . _arguments@0150898) T{List<Object?>??}
CheckNull:66(v20, CastError) T{List<Object?>?}
ParallelMove rdx <- rdx
v60 <- UnboxInt64([non-speculative], v46 T{_Smi}) [0, 1] int64
ParallelMove rdx <- rdx
v22 <- BinaryInt64Op(+ [tr], v60 T{_Smi}, v63 T{_Smi}) [1, 2] int64
ParallelMove rdi <- fp[-3]
v59 <- BoxInt64(v13) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v61 <- BoxInt64(v22) [1, 2] T{_Smi}
MoveArgument(sp[3] <- v21)
MoveArgument(sp[2] <- v20 T{List<Object?>?})
MoveArgument(sp[1] <- v61)
MoveArgument(sp[0] <- v59 T{int})
v23 <- StaticCall:70( _ImmutableList@0150898._from@0150898<0> v21, v20 T{List<Object?>?}, v61, v59 T{int}, result_type = T{_ImmutableList}) T{_ImmutableList}
ParallelMove rax <- rax, rdx <- rax, rcx <- fp[-1]
StoreField(v2 T{_InvocationMirror} . _positionalArguments@0150898 = v23 T{_ImmutableList})
ParallelMove rax <- rdx goto:78 B10
B9
B10
ParallelMove rax <- rax
DartReturn:86(v62 T{List<Object?>?})
CheckStackOverflowSlowPath
slow path check null (cast) operation
slow path check null (cast) operation
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[4] <- v2)
MoveArgument(sp[3] <- v3)
MoveArgument(sp[2] <- v4)
MoveArgument(sp[1] <- v5)
MoveArgument(sp[0] <- v0)
v6 <- NativeCall(ImmutableList_from) T{*?}
ParallelMove rax <- rax, rdx <- fp[5], rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v6, v7, 'function result', instantiator_type_args(v2), function_type_args(v0)) T{_ImmutableList}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v6 T{_ImmutableList})
Checking for cid 90 (_ImmutableList)
Generating check for type argument 0: X0
Checking instantiated type parameter for possible top types
Checking for legacy or non-nullable instance type argument
Checking instance type argument for possible bottom types
Checking for legacy or nullable instantiated type parameter
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _typeArguments@0150898) T{List<Type>??}
Branch if StrictCompare:12(===, v3, v0) goto (3, 6)
B3
ParallelMove rdi <- rax
v5 <- StaticCall:18( get:_typeArgsLen@0150898<0> v2, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
Branch if EqualityCompare(v5 == v42 T{_Smi}) T{bool} goto (4, 5)
B4
ParallelMove rdi <- fp[-1], rax <- C
StoreField(v2 T{_InvocationMirror} . _typeArguments@0150898 = v13 T{_ImmutableList})
ParallelMove rax <- rax
DartReturn:32(v13)
B5
ParallelMove rdi <- fp[-1]
v9 <- LoadField(v2 . _arguments@0150898) T{List<Object?>??}
CheckNull:38(v9, CastError) T{List<Object?>?}
v50 <- LoadClassId(<non-smi> v9 T{List<Object?>?}) int64
MoveArgument(sp[1] <- v9 T{List<Object?>?})
MoveArgument(sp[0] <- v6)
ParallelMove rcx <- rcx
v10 <- DispatchTableCall( cid=v50 List.[]<0>, v9 T{List<Object?>?}, v6) T{*?}
ParallelMove rdi <- fp[-1], rax <- rax
ParallelMove fp[-2] <- rax
v11 <- StaticCall:42( get:_typeArgsLen@0150898<0> v2, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
v40 <- BoxInt64(v11) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v10 T{X0?})
MoveArgument(sp[0] <- v40 T{int})
v12 <- StaticCall:44( _unpackTypeArguments@0150898<0> v10 T{X0?}, v40 T{int}, result_type = T{!null}) T{List<Type>}
ParallelMove rax <- rax, rcx <- rax, rdx <- fp[-1]
StoreField(v2 T{_InvocationMirror} . _typeArguments@0150898 = v12 T{List<Type>})
ParallelMove rax <- rcx goto:52 B7
B6
ParallelMove rax <- rcx goto:54 B7
B7
ParallelMove rax <- rax
DartReturn:60(v41 T{List<Type>?})
CheckStackOverflowSlowPath
slow path check null (cast) operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v63 <- LoadField(v2 T{Symbol} . _name@9040228 {final}) T{String}
ParallelMove fp[-1] <- rax
v4 <- AllocateObject:12(cls=StringBuffer) T{StringBuffer}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-2] <- rax
StaticCall:14( StringBuffer.<0> v4)
ParallelMove rax <- fp[-1]
v68 <- LoadField(v63 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v131 <- UnboxInt64([non-speculative], v68 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-3] <- rcx
Branch if RelationalOp(>=, v131 T{_Smi}, v136 T{_Smi}) T{bool} goto (3, 9)
B3
MoveArgument(sp[1] <- v63 T{String})
MoveArgument(sp[0] <- v33)
v34 <- StaticCall:26( []<0> v63 T{String}, v33, using unchecked entrypoint, recognized_kind = StringBaseCharAt, result_type = T{!null}) T{String}
ParallelMove rax <- rax
v177 <- LoadClassId(<non-smi> v34) int64
MoveArgument(sp[1] <- v34)
MoveArgument(sp[0] <- v35)
ParallelMove rcx <- rcx
v36 <- DispatchTableCall( cid=v177 String.==<0>, v34, v35) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:32(===, v36 T{bool}, v10) goto (4, 10)
BoolTest
B4
MoveArgument(sp[1] <- v63 T{String})
MoveArgument(sp[0] <- v6)
v37 <- StaticCall:40( []<0> v63 T{String}, v6, using unchecked entrypoint, recognized_kind = StringBaseCharAt, result_type = T{!null}) T{String}
ParallelMove rax <- rax
v178 <- LoadClassId(<non-smi> v37) int64
MoveArgument(sp[1] <- v37)
MoveArgument(sp[0] <- v38)
ParallelMove rcx <- rcx
v39 <- DispatchTableCall( cid=v178 String.==<0>, v37, v38) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:46(===, v39 T{bool}, v10) goto (5, 6)
BoolTest
B5
ParallelMove rax <- C goto:56 B7
B6
ParallelMove rax <- C goto:58 B7
B7
ParallelMove rcx <- rax, rax <- C goto:72 B11
B10
B9
B8
ParallelMove rcx <- C, rax <- C goto:74 B11
B11
ParallelMove fp[-6] <- rcx
ParallelMove rdi <- rax, rsi <- C goto:182 B28
B28
  Loop 0
ParallelMove fp[-4] <- rdi, fp[-5] <- rsi
CheckStackOverflow:186(stack=0, loop=1)
Branch if RelationalOp(<, v13, v131 T{_Smi}) T{bool} goto (12, 13)
B12
  Loop 0
v132 <- BoxInt64(v13) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v63 T{String})
MoveArgument(sp[0] <- v132 T{int})
v20 <- StaticCall:92( []<0> v63 T{String}, v132 T{int}, using unchecked entrypoint, recognized_kind = StringBaseCharAt, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-7] <- rax
v179 <- LoadClassId(<non-smi> v20) int64
MoveArgument(sp[1] <- v20)
MoveArgument(sp[0] <- v21)
ParallelMove rcx <- rcx
v22 <- DispatchTableCall( cid=v179 String.==<0>, v20, v21) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:98(===, v22 T{bool}, v10) goto (14, 15)
BoolTest
B14
  Loop 0
ParallelMove rsi <- C goto:158 B24
B15
  Loop 0
ParallelMove rsi <- fp[-7]
v180 <- LoadClassId(<non-smi> v20) int64
MoveArgument(sp[1] <- v20)
MoveArgument(sp[0] <- v23)
ParallelMove rcx <- rcx
v24 <- DispatchTableCall( cid=v180 String.==<0>, v20, v23) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:110(===, v24 T{bool}, v10) goto (19, 16)
BoolTest
B19
B16
  Loop 0
ParallelMove rsi <- fp[-7]
v181 <- LoadClassId(<non-smi> v20) int64
MoveArgument(sp[1] <- v20)
MoveArgument(sp[0] <- v25)
ParallelMove rcx <- rcx
v26 <- DispatchTableCall( cid=v181 String.==<0>, v20, v25) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:118(===, v26 T{bool}, v10) goto (20, 17)
BoolTest
B20
B17
  Loop 0
ParallelMove rsi <- fp[-7]
v182 <- LoadClassId(<non-smi> v20) int64
MoveArgument(sp[1] <- v20)
MoveArgument(sp[0] <- v27)
ParallelMove rcx <- rcx
v28 <- DispatchTableCall( cid=v182 String.==<0>, v20, v27) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:128(===, v28 T{bool}, v10) goto (21, 22)
BoolTest
B21
B18
  Loop 0
ParallelMove rax <- C goto:152 B23
B22
  Loop 0
ParallelMove rax <- fp[-5] goto:154 B23
B23
  Loop 0
ParallelMove rsi <- rax goto:160 B24
B24
  Loop 0
ParallelMove fp[-5] <- rsi
Branch if StrictCompare:164(!==, v30 T{bool}, v10) goto (25, 26)
BoolTest
B25
  Loop 0
ParallelMove rax <- fp[-7]
v82 <- LoadField(v20 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v82, v6 T{_Smi}) T{bool} goto (34, 35)
B34
B35
  Loop 0
ParallelMove rdi <- fp[-2]
StaticCall:26( _consumeBuffer@0150898<0> v4 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-2], rsi <- fp[-7]
StaticCall:28( _addPart@0150898<0> v4 T{StringBuffer}, v20 T{String}, using unchecked entrypoint)
ParallelMove  goto:30 B36
B36
B26
B27
  Loop 0
ParallelMove rax <- fp[-4]
v32 <- BinaryInt64Op(+ [tr], v13, v138 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rax, rsi <- fp[-5], rcx <- fp[-6] goto:184 B28
B13
ParallelMove rax <- rcx
Branch if StrictCompare:190(===, v11 T{bool}, v10) goto (29, 30)
BoolTest
B29
ParallelMove rdi <- fp[-2], rsi <- C
StaticCall:196( write<0> v4, v19, using unchecked entrypoint)
ParallelMove  goto:202 B31
B30
B31
MoveArgument(sp[0] <- v4)
v18 <- StaticCall:206( toString<0> v4, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:208(v18)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _memberName@0150898) T{Symbol?}
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
ParallelMove rdi <- rax
StaticCall:18( _setMemberNameAndType@0150898<0> v2, using unchecked entrypoint)
ParallelMove  goto:24 B5
B4
B5
v4 <- LoadField(v2 . _memberName@0150898) T{Symbol?}
CheckNull:30(v4, CastError) T{Symbol}
ParallelMove rax <- rax
DartReturn:32(v4 T{Symbol})
CheckStackOverflowSlowPath
slow path check null (cast) operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _functionName@0150898) T{String??}
ParallelMove fp[-1] <- rcx
CheckNull:12(v3, CastError) T{String?}
v4 <- LoadField(v2 . _type@0150898) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v4 == v120 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rdx <- C
StoreField(v2 T{_InvocationMirror} . _type@0150898 = v121 T{_Smi} <int64>)
ParallelMove  goto:32 B5
B4
B5
ParallelMove rdi <- rcx, rsi <- C
v9 <- StaticCall:36( startsWith<0> v3 T{String?}, v8, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:40(===, v9 T{bool}, v7) goto (6, 7)
BoolTest
B6
ParallelMove rax <- fp[-2]
v32 <- LoadField(v2 . _type@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v33 <- BinaryInt64Op(| [tr], v32, v122 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_InvocationMirror} . _type@0150898 = v33 T{int} <int64>)
ParallelMove rdi <- fp[-1], rsi <- C
v35 <- StaticCall:54( substring<0> v3 T{String?}, v123 T{_Smi}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-3] <- rax
v34 <- AllocateObject:52(cls=Symbol) T{Symbol}
ParallelMove rcx <- rax, rax <- fp[-3]
StoreField(v34 T{Symbol} . _name@9040228 = v35 T{String}, NoStoreBarrier)
ParallelMove rax <- rcx, rcx <- fp[-2]
StoreField(v2 T{_InvocationMirror} . _memberName@0150898 = v34 T{Symbol})
ParallelMove  goto:132 B14
B7
ParallelMove rcx <- fp[-2]
ParallelMove rdi <- fp[-1], rsi <- C
v11 <- StaticCall:62( startsWith<0> v3 T{String?}, v10, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:66(===, v11 T{bool}, v7) goto (8, 12)
BoolTest
B8
ParallelMove rax <- fp[-2]
v23 <- LoadField(v2 . _type@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v25 <- BinaryInt64Op(| [tr], v23, v124 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_InvocationMirror} . _type@0150898 = v25 T{int} <int64>)
ParallelMove rdi <- fp[-1], rsi <- C
v28 <- StaticCall:80( substring<0> v3 T{String?}, v123 T{_Smi}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v28)
MoveArgument(sp[0] <- v29)
v30 <- StaticCall:82( +<0> v28, v29, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-3] <- rax
v26 <- AllocateObject:78(cls=Symbol) T{Symbol}
ParallelMove rcx <- rax, rax <- fp[-3]
StoreField(v26 T{Symbol} . _name@9040228 = v30 T{String}, NoStoreBarrier)
ParallelMove rax <- rcx, rcx <- fp[-2]
StoreField(v2 T{_InvocationMirror} . _memberName@0150898 = v26 T{Symbol})
ParallelMove  goto:126 B13
B12
ParallelMove rcx <- fp[-2], rax <- fp[-1]
v12 <- LoadField(v2 . _type@0150898) [-9223372036854775808, 9223372036854775807] int64
v13 <- LoadField(v2 . _isSuperInvocation@0150898) T{bool}
v98 <- IfThenElse(===, v13, v7 ? 8 : 0) [0, 8] T{_Smi}
BoolTest
ParallelMove rdx <- rdx
ParallelMove rdx <- rdx
v117 <- UnboxInt64([non-speculative], v98) [0, 8] int64
ParallelMove rbx <- rbx
v16 <- BinaryInt64Op(| [tr], v12, v117 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_InvocationMirror} . _type@0150898 = v16 T{int} <int64>)
v17 <- AllocateObject:118(cls=Symbol) T{Symbol}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v17 T{Symbol} . _name@9040228 = v3 T{String}, NoStoreBarrier)
ParallelMove rax <- rax, rcx <- fp[-2]
StoreField(v2 T{_InvocationMirror} . _memberName@0150898 = v17 T{Symbol})
ParallelMove  goto:128 B13
B13
B14
ParallelMove rax <- C
DartReturn:136(v0)
CheckStackOverflowSlowPath
slow path check null (cast) operation
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[4]
v5 <- LoadField(v2 . Closure.context {final}) T{*}
ParallelMove fp[-1] <- rcx
CheckStackOverflow:8(stack=0, loop=0)
v6 <- LoadField(v5 . argumentCount) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v29 <- UnboxInt64([non-speculative], v6) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v29 T{int}, v32 T{_Smi}) T{bool} goto (3, 4)
B3
v21 <- LoadField(v5 . argumentsBuf) T{StringBuffer}
ParallelMove rdi <- rdi, rsi <- C
StaticCall:20( write<0> v21, v22, using unchecked entrypoint)
ParallelMove  goto:26 B5
B4
B5
ParallelMove rax <- fp[3], rdx <- C, rcx <- C
t0 <- AssertAssignable:30(v3, v10, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) T{Symbol}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
v12 <- LoadField(v5 . argumentsBuf) T{StringBuffer}
ParallelMove rdi <- fp[3], fp[-2] <- rcx
v13 <- StaticCall:32( computeUnmangledName<0> v3 T{Symbol}, result_type = T{!null}) T{String}
ParallelMove rdi <- fp[-2], rsi <- rax
StaticCall:34( write<0> v12, v13, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
v14 <- LoadField(v5 . argumentsBuf) T{StringBuffer}
ParallelMove rdi <- rdi, rsi <- C
StaticCall:36( write<0> v14, v15, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
v16 <- LoadField(v5 . argumentsBuf) T{StringBuffer}
ParallelMove rdi <- fp[2], fp[-2] <- rcx
v17 <- StaticCall:38( safeToString<0> v4, result_type = T{!null}) T{String}
ParallelMove rdi <- fp[-2], rsi <- rax
StaticCall:40( write<0> v16, v17, using unchecked entrypoint)
ParallelMove rcx <- fp[-1]
v18 <- LoadField(v5 . argumentCount) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdx <- rdx
v30 <- UnboxInt64([non-speculative], v18) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v20 <- BinaryInt64Op(+ [tr], v30 T{int}, v33 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v31 <- BoxInt64(v20) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v5 . argumentCount = v31 T{int})
ParallelMove rax <- C
DartReturn:44(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v4 <- CreateArray:10(v0, v3) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v4, v5, v6, NoStoreBarrier)
ParallelMove rcx <- fp[2]
v8 <- LoadField(v2 . prefix {final}) T{_LibraryPrefix}
StoreIndexed([_List] v4, v7, v8, NoStoreBarrier)
StoreIndexed([_List] v4, v9, v10, NoStoreBarrier)
MoveArgument(sp[0] <- v4)
v11 <- StaticCall:14( _interpolate@0150898<0> v4, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:16(v11)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v3 <- LoadField(v2 . name {final}) T{String??}
ParallelMove fp[-1] <- rax
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C goto:26 B5
B4
ParallelMove rbx <- C, r10 <- C
v5 <- CreateArray:20(v0, v4) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v5, v6, v7, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreIndexed([_List] v5, v8, v3 T{String?}, NoStoreBarrier)
StoreIndexed([_List] v5, v9, v10, NoStoreBarrier)
MoveArgument(sp[0] <- v5)
v11 <- StaticCall:22( _interpolate@0150898<0> v5, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax, rdi <- fp[2] goto:28 B5
B5
ParallelMove fp[-2] <- rax
v13 <- LoadField(v2 . message {final}) T{*?}
ParallelMove fp[-1] <- rcx
Branch if StrictCompare:32(===, v13, v0) goto (6, 7)
B6
ParallelMove rax <- C goto:46 B8
B7
ParallelMove rbx <- C, r10 <- C
v14 <- CreateArray:40(v0, v9) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v14, v6, v15, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreIndexed([_List] v14, v8, v13 T{*}, NoStoreBarrier)
MoveArgument(sp[0] <- v14)
v16 <- StaticCall:42( _interpolate@0150898<0> v14, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax, rdi <- fp[2] goto:48 B8
B8
ParallelMove fp[-1] <- rax
v143 <- LoadClassId(v2) [582, 584] int64
ParallelMove fp[-3] <- rcx
Branch if EqualityCompare:52(v143 == v72) goto (32, 42)
B32
ParallelMove rbx <- C, r10 <- C
v111 <- CreateArray:10(v0 T{Null?}, v9 T{_Smi}) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v111, v6 T{_Smi}, v126 T{_OneByteString}, NoStoreBarrier)
ParallelMove rdi <- fp[2]
v115 <- LoadField(v2 T{ArgumentError} . _hasValue@0150898 {final}) T{bool}
Branch if StrictCompare:16(!==, v115 T{bool}, v22 T{bool}) goto (34, 35)
BoolTest
B34
ParallelMove rcx <- C goto:26 B36
B35
ParallelMove rcx <- C goto:28 B36
B36
StoreIndexed([_List] v111, v8 T{_Smi}, v118, NoStoreBarrier)
MoveArgument(sp[0] <- v111)
v119 <- StaticCall:30( _interpolate@0150898<0> v111, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove rsi <- rax, rax <- fp[-3] goto:32 B44
B42
ParallelMove rax <- rcx
Branch if EqualityCompare:52(v143 == v73) goto (37, 43)
B37
ParallelMove rsi <- C goto:10 B44
B43
ParallelMove rsi <- C goto:10 B44
B44
ParallelMove rbx <- C, r10 <- C, fp[-4] <- rsi
v18 <- CreateArray:50(v0, v4) T{_List}
ParallelMove rcx <- rax, rax <- fp[-4]
StoreIndexed([_List] v18, v6, v144 T{String}, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreIndexed([_List] v18, v8, v12, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreIndexed([_List] v18, v9, v17, NoStoreBarrier)
MoveArgument(sp[0] <- v18)
v20 <- StaticCall:54( _interpolate@0150898<0> v18, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rbx <- rax, rdi <- fp[2]
ParallelMove fp[-2] <- rbx
v21 <- LoadField(v2 . _hasValue@0150898 {final}) T{bool}
Branch if StrictCompare:60(!==, v21 T{bool}, v22) goto (9, 10)
BoolTest
B9
ParallelMove rax <- rbx
DartReturn:66(v20)
B10
ParallelMove rsi <- fp[-3]
Branch if EqualityCompare:70(v143 T{_Smi} == v72) goto (11, 20)
B11
ParallelMove rbx <- C, rax <- rsi goto:10 B22
B20
Branch if EqualityCompare:70(v143 T{_Smi} == v73) goto (13, 21)
B13
v149 <- LoadField(v2 T{IndexError} . invalidValue {final}) T{*?}
ParallelMove rax <- r8, rdx <- C, rcx <- C, fp[-1] <- r8
t0 <- AssertAssignable:12(v149, v92 T{_Type}, '', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
v186 <- UnboxInt64([non-speculative], v149 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v186 T{int}, v189 T{_Smi}) T{bool} goto (15, 16)
B15
ParallelMove rbx <- C, rax <- fp[-3] goto:22 B22
B16
ParallelMove rdi <- fp[2]
v48 <- LoadField(v2 T{IndexError} . length {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-5] <- rax
Branch if EqualityCompare(v48 == v189 T{_Smi}) T{bool} goto (17, 18)
B17
ParallelMove rbx <- C, rax <- fp[-3] goto:38 B22
B18
ParallelMove rbx <- C, r10 <- C
v51 <- CreateArray:42(v0 T{Null?}, v9 T{_Smi}) T{_List}
ParallelMove rcx <- rax
StoreIndexed([_List] v51, v6 T{_Smi}, v67 T{_OneByteString}, NoStoreBarrier)
ParallelMove rdx <- fp[-5]
v187 <- BoxInt64(v48 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreIndexed([_List] v51, v8 T{_Smi}, v187 T{int}, NoStoreBarrier)
MoveArgument(sp[0] <- v51)
v55 <- StaticCall:46( _interpolate@0150898<0> v51, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove rbx <- rax, rax <- fp[-3] goto:48 B22
B21
ParallelMove rax <- rdi
v220 <- LoadClassId(<non-smi> v2) int64
ParallelMove rcx <- rcx, rdi <- rax
v74 <- DispatchTableCall( cid=v220 ArgumentError._errorExplanation<0>, v2) T{String}
ParallelMove rax <- rax
ParallelMove rbx <- rax, rax <- fp[-3] goto:71 B22
B22
ParallelMove fp[-4] <- rbx
Branch if EqualityCompare:72(v143 T{_Smi} == v72) goto (23, 29)
B23
ParallelMove rcx <- fp[2]
v81 <- LoadField(v2 T{ArgumentError} . invalidValue {final}) T{*?}
ParallelMove rdi <- rax, rax <- rbx goto:4 B31
B29
ParallelMove rcx <- fp[2]
Branch if EqualityCompare:72(v143 T{_Smi} == v73) goto (24, 30)
B24
v88 <- LoadField(v2 T{IndexError} . invalidValue {final}) T{*?}
ParallelMove rax <- rsi, rdx <- C, rcx <- C, fp[-1] <- rsi
t0 <- AssertAssignable:12(v88, v92 T{_Type}, '', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-1], rax <- fp[-4] goto:14 B31
B30
v98 <- LoadField(v2 T{RangeError} . invalidValue {final}) T{*?}
ParallelMove rax <- rbx, rdx <- C, rcx <- C, fp[-1] <- rbx
t0 <- AssertAssignable:12(v98, v102 T{_Type}, '', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) T{num??}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-1], rax <- fp[-4] goto:14 B31
B31
ParallelMove rdi <- rdi
v25 <- StaticCall:74( safeToString<0> v104 T{*?}) T{String}
ParallelMove rbx <- C, r10 <- C, rax <- rax
ParallelMove fp[-1] <- rax
v27 <- CreateArray:76(v0, v26) T{_List}
ParallelMove rcx <- rax, rax <- fp[-2]
StoreIndexed([_List] v27, v6, v20, NoStoreBarrier)
ParallelMove rax <- fp[-4]
StoreIndexed([_List] v27, v8, v75 T{String}, NoStoreBarrier)
StoreIndexed([_List] v27, v9, v15, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreIndexed([_List] v27, v4, v25, NoStoreBarrier)
MoveArgument(sp[0] <- v27)
v28 <- StaticCall:78( _interpolate@0150898<0> v27, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:80(v28)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v4 <- CreateArray:10(v0, v3) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v4, v5, v6, NoStoreBarrier)
ParallelMove rcx <- fp[2]
v8 <- LoadField(v2 . message {final}) T{String??}
StoreIndexed([_List] v4, v7, v8 T{String??}, NoStoreBarrier)
MoveArgument(sp[0] <- v4)
v9 <- StaticCall:14( _interpolate@0150898<0> v4, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:16(v9)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v4 <- CreateArray:10(v0, v3) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v4, v5, v6, NoStoreBarrier)
ParallelMove rcx <- fp[2]
v8 <- LoadField(v2 . message {final}) T{String}
StoreIndexed([_List] v4, v7, v8, NoStoreBarrier)
MoveArgument(sp[0] <- v4)
v9 <- StaticCall:14( _interpolate@0150898<0> v4, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:16(v9)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v4 <- CreateArray:12(v0, v3) T{_List}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
StoreIndexed([_List] v4, v5, v6, NoStoreBarrier)
ParallelMove rcx <- fp[2]
v8 <- LoadField(v2 . modifiedObject {final}) T{Object??}
ParallelMove rdi <- rdi
v9 <- StaticCall:16( safeToString<0> v8) T{String}
ParallelMove rdx <- fp[-1], rax <- rax
StoreIndexed([_List] v4, v7, v9)
ParallelMove rax <- fp[-1]
StoreIndexed([_List] v4, v10, v11, NoStoreBarrier)
MoveArgument(sp[0] <- v4)
v12 <- StaticCall:18( _interpolate@0150898<0> v4, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:20(v12)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- C
DartReturn:10(v3)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . unsupportedObject {final}) T{Object??}
ParallelMove rdi <- rdi
v4 <- StaticCall:12( safeToString<0> v3) T{String}
ParallelMove rcx <- rax, rax <- fp[2]
ParallelMove fp[-2] <- rcx
v5 <- LoadField(v2 . cause {final}) T{Object??}
Branch if StrictCompare:16(!==, v5, v0) goto (3, 4)
B3
ParallelMove rax <- C goto:26 B5
B4
ParallelMove rax <- C goto:28 B5
B5
ParallelMove rbx <- C, r10 <- C, fp[-1] <- rax
v9 <- CreateArray:30(v0, v8) T{_List}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreIndexed([_List] v9, v10, v7, NoStoreBarrier)
StoreIndexed([_List] v9, v11, v12, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreIndexed([_List] v9, v13, v4, NoStoreBarrier)
MoveArgument(sp[0] <- v9)
v14 <- StaticCall:32( _interpolate@0150898<0> v9, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:34(v14)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . _message@9040228 {final}) T{String??}
ParallelMove rbx <- C, r10 <- C, fp[-1] <- rcx
v5 <- CreateArray:12(v0, v4) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v5, v6, v7, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreIndexed([_List] v5, v8, v3, NoStoreBarrier)
MoveArgument(sp[0] <- v5)
v9 <- StaticCall:14( _interpolate@0150898<0> v5, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:16(v9)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v11 <- CreateArray:10(v0 T{Null?}, v18 T{_Smi}) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v11, v19 T{_Smi}, v20 T{_OneByteString}, NoStoreBarrier)
ParallelMove rcx <- fp[2]
StoreIndexed([_List] v11, v21 T{_Smi}, v2 T{String}, NoStoreBarrier)
StoreIndexed([_List] v11, v22 T{_Smi}, v23 T{_OneByteString}, NoStoreBarrier)
MoveArgument(sp[0] <- v11)
v17 <- StaticCall:12( _interpolate@0150898<0> v11, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v3 <- AllocateObject:10(cls=LateError) T{LateError}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v3 T{LateError} . _message@9040228 = v17, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:14(v3)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v3)
v5 <- StaticCall:10( _throwLocalAssignedDuringInitialization@9040228<0> v3) T{*?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v11 <- CreateArray:10(v0 T{Null?}, v18 T{_Smi}) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v11, v19 T{_Smi}, v20 T{_OneByteString}, NoStoreBarrier)
ParallelMove rcx <- fp[2]
StoreIndexed([_List] v11, v21 T{_Smi}, v2 T{String}, NoStoreBarrier)
StoreIndexed([_List] v11, v22 T{_Smi}, v23 T{_OneByteString}, NoStoreBarrier)
MoveArgument(sp[0] <- v11)
v17 <- StaticCall:12( _interpolate@0150898<0> v11, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v3 <- AllocateObject:10(cls=LateError) T{LateError}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v3 T{LateError} . _message@9040228 = v17, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:14(v3)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v3)
v5 <- StaticCall:10( _throwLocalAlreadyInitialized@9040228<0> v3) T{*?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v11 <- CreateArray:10(v0 T{Null?}, v18 T{_Smi}) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v11, v19 T{_Smi}, v20 T{_OneByteString}, NoStoreBarrier)
ParallelMove rcx <- fp[2]
StoreIndexed([_List] v11, v21 T{_Smi}, v2 T{String}, NoStoreBarrier)
StoreIndexed([_List] v11, v22 T{_Smi}, v23 T{_OneByteString}, NoStoreBarrier)
MoveArgument(sp[0] <- v11)
v17 <- StaticCall:12( _interpolate@0150898<0> v11, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v3 <- AllocateObject:10(cls=LateError) T{LateError}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v3 T{LateError} . _message@9040228 = v17, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:14(v3)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v3)
v5 <- StaticCall:10( _throwLocalNotInitialized@9040228<0> v3) T{*?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v11 <- CreateArray:10(v0 T{Null?}, v18 T{_Smi}) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v11, v19 T{_Smi}, v20 T{_OneByteString}, NoStoreBarrier)
ParallelMove rcx <- fp[2]
StoreIndexed([_List] v11, v21 T{_Smi}, v2 T{String}, NoStoreBarrier)
StoreIndexed([_List] v11, v22 T{_Smi}, v23 T{_OneByteString}, NoStoreBarrier)
MoveArgument(sp[0] <- v11)
v17 <- StaticCall:12( _interpolate@0150898<0> v11, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v3 <- AllocateObject:10(cls=LateError) T{LateError}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v3 T{LateError} . _message@9040228 = v17, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:14(v3)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v3)
v5 <- StaticCall:10( _throwFieldAlreadyInitialized@9040228<0> v3) T{*?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v5 <- CreateArray:10(v0, v4) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v5, v6, v7, NoStoreBarrier)
ParallelMove rcx <- fp[2]
StoreIndexed([_List] v5, v8, v3, NoStoreBarrier)
StoreIndexed([_List] v5, v9, v10, NoStoreBarrier)
MoveArgument(sp[0] <- v5)
v11 <- StaticCall:12( _interpolate@0150898<0> v5, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax, rcx <- fp[3]
StoreField(v2 . _message@9040228 = v11)
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v5 <- CreateArray:10(v0, v4) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v5, v6, v7, NoStoreBarrier)
ParallelMove rcx <- fp[2]
StoreIndexed([_List] v5, v8, v3, NoStoreBarrier)
StoreIndexed([_List] v5, v9, v10, NoStoreBarrier)
MoveArgument(sp[0] <- v5)
v11 <- StaticCall:12( _interpolate@0150898<0> v5, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax, rcx <- fp[3]
StoreField(v2 . _message@9040228 = v11)
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- C
DartReturn:16(v10)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v4 <- CreateArray:10(v0, v3) T{_List}
ParallelMove rcx <- rax
StoreIndexed([_List] v4, v5, v6, NoStoreBarrier)
ParallelMove rax <- fp[2]
v8 <- LoadField(v2 . _className@2408521 {final}) T{String}
StoreIndexed([_List] v4, v7, v8, NoStoreBarrier)
StoreIndexed([_List] v4, v9, v10, NoStoreBarrier)
v12 <- LoadField(v2 . _url@2408521) T{String??}
StoreIndexed([_List] v4, v11, v12, NoStoreBarrier)
StoreIndexed([_List] v4, v13, v14, NoStoreBarrier)
v16 <- LoadField(v2 . _line@2408521) [-9223372036854775808, 9223372036854775807] int64
v18 <- BoxInt64(v16) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreIndexed([_List] v4, v15, v18 T{int}, NoStoreBarrier)
MoveArgument(sp[0] <- v4)
v17 <- StaticCall:18( _interpolate@0150898<0> v4, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:20(v17)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- sp[3], rcx <- sp[4]
StoreField(v2 . _className@2408521 = v3)
ParallelMove rax <- sp[2]
StoreField(v2 . _url@2408521 = v4)
ParallelMove rdx <- sp[1]
v10 <- UnboxInt64([non-speculative], v5) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 . _line@2408521 = v10 T{int} <int64>)
ParallelMove rax <- C
DartReturn:12(v0)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v4 <- CreateArray:10(v0, v3) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v4, v5, v6, NoStoreBarrier)
ParallelMove rcx <- fp[2]
v8 <- LoadField(v2 . _msg@0150898 {final}) T{String}
StoreIndexed([_List] v4, v7, v8, NoStoreBarrier)
StoreIndexed([_List] v4, v9, v10, NoStoreBarrier)
MoveArgument(sp[0] <- v4)
v11 <- StaticCall:14( _interpolate@0150898<0> v4, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:16(v11)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- sp[1], rcx <- sp[2]
StoreField(v2 . _stackTrace@0150898 = v3)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v3 <- StaticCall:10( iterableToShortString<0> v2, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:12(v3)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-9] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax
v12 <- StaticCall:10( isToStringVisiting<0> v11, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v12 T{bool}, v13) goto (5, 9)
BoolTest
B5
ParallelMove rax <- C
DartReturn:40(v32)
B9
ParallelMove rdi <- C, rsi <- C
v16 <- StaticCall:60( _GrowableList@0150898.<0> v14, v131 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
ParallelMove fp[-10] <- rax
v65 <- LoadStaticField:4(toStringVisiting, CallsInitializer) T{_GrowableList}
ParallelMove rax <- rax
ParallelMove fp[-12] <- rax
v99 <- LoadField(v65 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v104 <- LoadField(v65 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v105 <- LoadField(v104 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v120 <- UnboxInt64([non-speculative], v99 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-11] <- rcx
ParallelMove rbx <- rbx
v121 <- UnboxInt64([non-speculative], v105 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v120 T{_Smi} == v121 T{_Smi}) T{bool} goto (25, 26)
B25
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v65 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B27
B26
B27
ParallelMove rax <- rsi
v77 <- BinaryInt64Op(+ [tr], v120 T{_Smi}, v132 T{_Smi}) [1, 576460752303423488] int64
v122 <- BoxInt64(v77) [1, 576460752303423488] T{_Smi}
StoreField(v65 T{_GrowableList} . GrowableObjectArray.length = v122, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v77 T{_Smi}, v120 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v80 <- LoadField(v65 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-9]
StoreIndexed:40([_List] v80, v120 T{_Smi}, v11 T{Iterable<dynamic>})
ParallelMove  goto:68 B10
B10
ParallelMove rdi <- fp[-9], rsi <- fp[-10]
StaticCall:72( _iterablePartsToStrings@0150898<0> v11, v16)
ParallelMove rdi <- fp[-12] goto:76 B11
B11
v94 <- LoadField(v65 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v125 <- UnboxInt64([non-speculative], v94 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rcx <- rax
v57 <- BinaryInt64Op(- [tr], v125 T{_Smi}, v132 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:14(v125 T{_Smi}, v57) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi, rsi <- rcx
StaticCall:16( set:length<0> v65 T{_GrowableList}, v57 T{int}, using unchecked entrypoint)
v19 <- AllocateObject:92(cls=StringBuffer) T{StringBuffer}
ParallelMove rax <- rax
ParallelMove fp[-9] <- rax
MoveArgument(sp[0] <- v20)
ParallelMove rdi <- rax
StaticCall:94( StringBuffer.<0> v19, v20)
ParallelMove rdi <- fp[-9], rsi <- fp[-10], rdx <- C
StaticCall:96( writeAll<0> v19, v16, v21, using unchecked entrypoint)
ParallelMove rdi <- fp[-9], rsi <- C
StaticCall:98( write<0> v19, v22, using unchecked entrypoint)
MoveArgument(sp[0] <- v19)
v23 <- StaticCall:100( toString<0> v19, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:102(v23)
B13
ParallelMove rbx <- rdx, fp[-9] <- rax, fp[-10] <- rdx
v35 <- LoadStaticField:4(toStringVisiting, CallsInitializer) T{_GrowableList}
ParallelMove rcx <- rax
v89 <- LoadField(v35 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v128 <- UnboxInt64([non-speculative], v89 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rdx <- rax
v42 <- BinaryInt64Op(- [tr], v128 T{_Smi}, v132 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rax <- rax, rbx <- rdx
GenericCheckBound:14(v128 T{_Smi}, v42) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rcx, rsi <- rdx
StaticCall:16( set:length<0> v35 T{_GrowableList}, v42 T{int}, using unchecked entrypoint)
ParallelMove rax <- fp[-9], rbx <- fp[-10]
ReThrow:90(v5, v6)
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi, rsi <- rdx, fp[-1] <- rdi, fp[-2] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v139 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rdi
v5 <- DispatchTableCall( cid=v139 Iterable.iterator<0>, v3) T{*?}
ParallelMove rax <- rax
ParallelMove fp[-3] <- rax
v140 <- LoadClassId(<non-smi> v5 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax
v6 <- DispatchTableCall( cid=v140 Iterator.moveNext<0>, v5 T{Iterator<X0>}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:16(!==, v6 T{bool}, v7) goto (3, 4)
BoolTest
B3
ParallelMove rax <- C
DartReturn:22(v0)
B4
ParallelMove rsi <- fp[-2]
v57 <- LoadField(v4 T{_OneByteString} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove fp[-5] <- rax
Branch if StrictCompare:10(===, v57, v60 T{_Smi}) T{bool} goto (5, 9)
B5
B6
  Loop 1
CheckStackOverflow:50(stack=0, loop=1)
v141 <- LoadClassId(<non-smi> v5 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax
v12 <- DispatchTableCall( cid=v141 Iterator.current<0>, v5 T{Iterator<X0>}) T{*?}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v12 T{X0?})
v46 <- StaticCall:10( _interpolateSingle@0150898<0> v12 T{X0?}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-4] <- rax
v87 <- LoadField(v46 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v87, v60 T{_Smi}) T{bool} goto (26, 27)
B26
B27
  Loop 1
ParallelMove rdi <- fp[-1]
StaticCall:26( _consumeBuffer@0150898<0> v2 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-1], rsi <- fp[-4]
StaticCall:28( _addPart@0150898<0> v2 T{StringBuffer}, v46, using unchecked entrypoint)
ParallelMove  goto:30 B28
B28
  Loop 1
v142 <- LoadClassId(<non-smi> v5 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax
v13 <- DispatchTableCall( cid=v142 Iterator.moveNext<0>, v5 T{Iterator<X0>}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:44(===, v13 T{bool}, v7) goto (7, 8)
BoolTest
B7
B8
B9
ParallelMove rdx <- fp[-3]
v143 <- LoadClassId(<non-smi> v5 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rdx
v9 <- DispatchTableCall( cid=v143 Iterator.current<0>, v5 T{Iterator<X0>}) T{*?}
ParallelMove rdi <- fp[-1], rsi <- rax
StaticCall:64( write<0> v2, v9 T{X0?}, using unchecked entrypoint)
ParallelMove  goto:88 B11
B11
  Loop 0
CheckStackOverflow:86(stack=0, loop=1)
v144 <- LoadClassId(<non-smi> v5 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rdx
v10 <- DispatchTableCall( cid=v144 Iterator.moveNext<0>, v5 T{Iterator<X0>}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:70(===, v10 T{bool}, v7) goto (10, 12)
BoolTest
B10
  Loop 0
ParallelMove rax <- fp[-5]
Branch if StrictCompare:10(===, v57 T{_Smi}, v60 T{_Smi}) T{bool} goto (16, 17)
B16
B17
  Loop 0
ParallelMove rdi <- fp[-1]
StaticCall:26( _consumeBuffer@0150898<0> v2 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
StaticCall:28( _addPart@0150898<0> v2 T{StringBuffer}, v4, using unchecked entrypoint)
ParallelMove  goto:30 B18
B18
  Loop 0
v145 <- LoadClassId(<non-smi> v5 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax
v11 <- DispatchTableCall( cid=v145 Iterator.current<0>, v5 T{Iterator<X0>}) T{*?}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v11 T{X0?})
v33 <- StaticCall:10( _interpolateSingle@0150898<0> v11 T{X0?}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-4] <- rax
v80 <- LoadField(v33 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v80, v60 T{_Smi}) T{bool} goto (21, 22)
B21
B22
  Loop 0
ParallelMove rdi <- fp[-1]
StaticCall:26( _consumeBuffer@0150898<0> v2 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-1], rsi <- fp[-4]
StaticCall:28( _addPart@0150898<0> v2 T{StringBuffer}, v33, using unchecked entrypoint)
ParallelMove  goto:30 B23
B23
B12
B13
ParallelMove rax <- C
DartReturn:98(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rsi, fp[-1] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v652 <- LoadClassId(<non-smi> v2) int64
ParallelMove rcx <- rcx, rdi <- rdi
v5 <- DispatchTableCall( cid=v652 Iterable.iterator<0>, v2) T{*?}
ParallelMove rax <- rax
ParallelMove fp[-4] <- rax
ParallelMove rsi <- C, rbx <- C, rdx <- fp[-1] goto:74 B9
B9
  Loop 3
ParallelMove fp[-2] <- rsi, fp[-3] <- rbx
CheckStackOverflow:72(stack=0, loop=1)
Branch if RelationalOp(<, v6, v598 T{_Smi}) T{bool} goto (7, 3)
B7
B3
  Loop 3
Branch if RelationalOp(<, v7, v599 T{_Smi}) T{bool} goto (8, 10)
B8
B6
  Loop 3
v653 <- LoadClassId(<non-smi> v5 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax
v93 <- DispatchTableCall( cid=v653 Iterator.moveNext<0>, v5 T{Iterator<X0>}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:34(!==, v93 T{bool}, v10) goto (4, 5)
BoolTest
B5
  Loop 3
ParallelMove rax <- fp[-4]
v654 <- LoadClassId(<non-smi> v5 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax
v94 <- DispatchTableCall( cid=v654 Iterator.current<0>, v5 T{Iterator<X0>}) T{*?}
ParallelMove rax <- rax
v301 <- LoadClassId(v94 T{X0?}) [1, 617] int64
Branch if TestRange(v301 in [93-94]) T{bool} goto (123, 124)
B123
  Loop 3
ParallelMove rcx <- rax goto:20 B125
B124
  Loop 3
v655 <- LoadClassId(v94 T{X0?}) int64
MoveArgument(sp[0] <- v94 T{X0?})
ParallelMove rcx <- rcx
v299 <- DispatchTableCall( cid=v655 Object.toString<0>, v94 T{X0?}) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:26 B125
B125
  Loop 3
ParallelMove fp[-6] <- rcx
v412 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v417 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v418 <- LoadField(v417 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v534 <- UnboxInt64([non-speculative], v412 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-5] <- rdx
ParallelMove rsi <- rsi
v535 <- UnboxInt64([non-speculative], v418 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v534 T{_Smi} == v535 T{_Smi}) T{bool} goto (128, 129)
B128
  Loop 3
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v3 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B130
B129
B130
  Loop 3
ParallelMove rax <- rsi
v315 <- BinaryInt64Op(+ [tr], v534 T{_Smi}, v600 T{_Smi}) [1, 576460752303423488] int64
v536 <- BoxInt64(v315) [1, 576460752303423488] T{_Smi}
StoreField(v3 T{_GrowableList} . GrowableObjectArray.length = v536, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v315 T{_Smi}, v534 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v318 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- rcx
StoreIndexed:40([_List] v318, v534 T{_Smi}, v303 T{String})
v327 <- LoadField(v303 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rax <- rax
v539 <- UnboxInt64([non-speculative], v327 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rax <- rax
v97 <- BinaryInt64Op(+ [tr], v539 T{_Smi}, v601 T{_Smi}) [v539+2, v539+2] int64
ParallelMove rcx <- fp[-2]
v98 <- BinaryInt64Op(+ [tr], v6, v97) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-3]
v99 <- BinaryInt64Op(+ [tr], v7, v600 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rcx, rbx <- rax, rdx <- r8, rax <- fp[-4] goto:70 B9
B4
ParallelMove rax <- C
DartReturn:40(v0)
B10
ParallelMove r8 <- rdx
v656 <- LoadClassId(<non-smi> v5 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax
v13 <- DispatchTableCall( cid=v656 Iterator.moveNext<0>, v5 T{Iterator<X0>}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:82(!==, v13 T{bool}, v10) goto (11, 14)
BoolTest
B11
ParallelMove rcx <- fp[-3]
Branch if RelationalOp(<=, v7, v419) T{bool} goto (12, 13)
B12
ParallelMove rax <- C
DartReturn:100(v0)
B13
ParallelMove rdx <- fp[-1]
v402 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v540 <- UnboxInt64([non-speculative], v402 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rsi <- rax
v274 <- BinaryInt64Op(- [tr], v540 T{_Smi}, v600 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:14(v540 T{_Smi}, v274) [-9223372036854775808, 9223372036854775807] int64
v278 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v602 <- LoadIndexed:14([_List] v278, v274 T{int}) T{String}
ParallelMove rdi <- rdx, rsi <- rsi, fp[-6] <- rbx
StaticCall:16( set:length<0> v3 T{_GrowableList}, v274 T{int}, using unchecked entrypoint)
ParallelMove rcx <- fp[-1]
v407 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v543 <- UnboxInt64([non-speculative], v407 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rdx <- rax
v286 <- BinaryInt64Op(- [tr], v543 T{_Smi}, v600 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rax <- rax, rbx <- rdx
GenericCheckBound:14(v543 T{_Smi}, v286) [-9223372036854775808, 9223372036854775807] int64
v290 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v603 <- LoadIndexed:14([_List] v290, v286 T{int}) T{String}
ParallelMove rdi <- rcx, rsi <- rdx, fp[-7] <- rbx
StaticCall:16( set:length<0> v3 T{_GrowableList}, v286 T{int}, using unchecked entrypoint)
ParallelMove rbx <- fp[-2], rax <- fp[-3], r8 <- fp[-7], rdx <- fp[-6] goto:276 B31
B14
ParallelMove rax <- fp[-4]
v657 <- LoadClassId(<non-smi> v5 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax
v14 <- DispatchTableCall( cid=v657 Iterator.current<0>, v5 T{Iterator<X0>}) T{*?}
ParallelMove rax <- rax
ParallelMove rdx <- fp[-3], fp[-6] <- rax
v16 <- BinaryInt64Op(+ [tr], v7, v600 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- fp[-4], fp[-3] <- rdx
v658 <- LoadClassId(<non-smi> v5 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rbx
v17 <- DispatchTableCall( cid=v658 Iterator.moveNext<0>, v5 T{Iterator<X0>}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:118(!==, v17 T{bool}, v10) goto (15, 18)
BoolTest
B15
ParallelMove rax <- fp[-3]
Branch if RelationalOp(<=, v16, v420) T{bool} goto (16, 17)
B16
ParallelMove rdi <- fp[-1]
MoveArgument(sp[0] <- v14 T{X0?})
v62 <- StaticCall:136( _interpolateSingle@0150898<0> v14 T{X0?}) T{String}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-7] <- rcx
v391 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v396 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v397 <- LoadField(v396 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v548 <- UnboxInt64([non-speculative], v391 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-5] <- rdx
ParallelMove rsi <- rsi
v549 <- UnboxInt64([non-speculative], v397 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v548 T{_Smi} == v549 T{_Smi}) T{bool} goto (108, 109)
B108
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v3 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B110
B109
B110
ParallelMove rax <- rcx
v260 <- BinaryInt64Op(+ [tr], v548 T{_Smi}, v600 T{_Smi}) [1, 576460752303423488] int64
v550 <- BoxInt64(v260) [1, 576460752303423488] T{_Smi}
StoreField(v3 T{_GrowableList} . GrowableObjectArray.length = v550, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:40(v260 T{_Smi}, v548 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v263 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-7]
StoreIndexed:40([_List] v263, v548 T{_Smi}, v62 T{String})
ParallelMove rax <- C
DartReturn:140(v0)
B17
ParallelMove rdi <- fp[-1]
MoveArgument(sp[0] <- v14 T{X0?})
v57 <- StaticCall:144( _interpolateSingle@0150898<0> v14 T{X0?}) T{String}
ParallelMove rdx <- rax, rcx <- fp[-1]
ParallelMove fp[-8] <- rdx
v386 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v553 <- UnboxInt64([non-speculative], v386 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rsi <- rax
v238 <- BinaryInt64Op(- [tr], v553 T{_Smi}, v600 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:14(v553 T{_Smi}, v238) [-9223372036854775808, 9223372036854775807] int64
v242 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v604 <- LoadIndexed:14([_List] v242, v238 T{int}) T{String}
ParallelMove rdi <- rcx, rsi <- rsi, fp[-7] <- rbx
StaticCall:16( set:length<0> v3 T{_GrowableList}, v238 T{int}, using unchecked entrypoint)
ParallelMove rax <- fp[-8]
v248 <- LoadField(v57 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v556 <- UnboxInt64([non-speculative], v248 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rcx <- rcx
v60 <- BinaryInt64Op(+ [tr], v556 T{_Smi}, v601 T{_Smi}) [v556+2, v556+2] int64
ParallelMove rdx <- fp[-2]
v61 <- BinaryInt64Op(+ [tr], v6, v60) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rdx, rdx <- fp[-3], rcx <- fp[-7], rax <- rax goto:270 B30
B18
ParallelMove rax <- fp[-4]
v659 <- LoadClassId(<non-smi> v5 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax
v18 <- DispatchTableCall( cid=v659 Iterator.current<0>, v5 T{Iterator<X0>}) T{*?}
ParallelMove rax <- rax
ParallelMove rcx <- fp[-3]
v19 <- BinaryInt64Op(+ [tr], v16, v600 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rcx, rbx <- fp[-6], rdx <- rax goto:248 B28
B28
  Loop 2
ParallelMove fp[-3] <- rsi, fp[-6] <- rbx, fp[-7] <- rdx
CheckStackOverflow:246(stack=0, loop=1)
v660 <- LoadClassId(<non-smi> v5 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax
v23 <- DispatchTableCall( cid=v660 Iterator.moveNext<0>, v5 T{Iterator<X0>}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:164(===, v23 T{bool}, v10) goto (27, 29)
BoolTest
B27
  Loop 2
ParallelMove rax <- fp[-4]
v661 <- LoadClassId(<non-smi> v5 T{Iterator<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rax
v33 <- DispatchTableCall( cid=v661 Iterator.current<0>, v5 T{Iterator<X0>}) T{*?}
ParallelMove rax <- rax
ParallelMove rcx <- fp[-3]
v34 <- BinaryInt64Op(+ [tr], v20, v600 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v34, v605 T{_Smi}) T{bool} goto (19, 26)
B26
  Loop 2
ParallelMove rsi <- rcx, rbx <- fp[-7], rdx <- rax goto:244 B28
B19
ParallelMove r8 <- fp[-2], rdx <- rcx goto:222 B22
B22
  Loop 1
ParallelMove fp[-5] <- r8, fp[-9] <- rdx
CheckStackOverflow:220(stack=0, loop=2)
Branch if RelationalOp(>, v37, v422) T{bool} goto (20, 24)
B20
  Loop 1
Branch if RelationalOp(>, v38, v599 T{_Smi}) T{bool} goto (21, 25)
B21
  Loop 1
v381 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v557 <- UnboxInt64([non-speculative], v381 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rsi <- rax
v221 <- BinaryInt64Op(- [tr], v557 T{_Smi}, v600 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:14(v557 T{_Smi}, v221) [-9223372036854775808, 9223372036854775807] int64
v225 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v606 <- LoadIndexed:14([_List] v225, v221 T{int}) T{String}
ParallelMove rdi <- rcx, rsi <- rsi, fp[-4] <- rbx
StaticCall:16( set:length<0> v3 T{_GrowableList}, v221 T{int}, using unchecked entrypoint)
ParallelMove rax <- fp[-4]
v231 <- LoadField(v606 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v560 <- UnboxInt64([non-speculative], v231 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rcx <- rcx
v46 <- BinaryInt64Op(+ [tr], v560 T{_Smi}, v601 T{_Smi}) [v560+2, v560+2] int64
ParallelMove rax <- fp[-5]
v47 <- BinaryInt64Op(- [tr], v37, v46) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[-9]
v48 <- BinaryInt64Op(- [tr], v38, v600 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rax, rdx <- rcx goto:218 B22
B25
B24
B23
v370 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v375 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v376 <- LoadField(v375 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v563 <- UnboxInt64([non-speculative], v370 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-5] <- rcx
ParallelMove rbx <- rbx
v564 <- UnboxInt64([non-speculative], v376 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v563 T{_Smi} == v564 T{_Smi}) T{bool} goto (89, 90)
B89
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v3 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B91
B90
B91
ParallelMove rax <- rcx
v207 <- BinaryInt64Op(+ [tr], v563 T{_Smi}, v600 T{_Smi}) [1, 576460752303423488] int64
v565 <- BoxInt64(v207) [1, 576460752303423488] T{_Smi}
StoreField(v3 T{_GrowableList} . GrowableObjectArray.length = v565, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:40(v207 T{_Smi}, v563 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v210 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
StoreIndexed:40([_List] v210, v563 T{_Smi}, v42 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:236(v0)
B29
ParallelMove rdi <- fp[-1]
MoveArgument(sp[0] <- v21)
v24 <- StaticCall:252( _interpolateSingle@0150898<0> v21) T{String}
ParallelMove rax <- rax
ParallelMove fp[-4] <- rax
MoveArgument(sp[0] <- v22)
v25 <- StaticCall:254( _interpolateSingle@0150898<0> v22) T{String}
ParallelMove rax <- rax
v190 <- LoadField(v25 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- fp[-4]
v195 <- LoadField(v24 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v568 <- UnboxInt64([non-speculative], v190 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rbx <- rbx
v569 <- UnboxInt64([non-speculative], v195 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rcx <- rcx
v28 <- BinaryInt64Op(+ [tr], v568 T{_Smi}, v569 T{_Smi}) [v568, v568+2305843009213693951] int64
ParallelMove rcx <- rcx
v31 <- BinaryInt64Op(+ [tr], v28, v420) [v568+4, v568+2305843009213693955] int64
ParallelMove rbx <- fp[-2]
v32 <- BinaryInt64Op(+ [tr], v6, v31) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx, rdx <- fp[-3], rcx <- rdx, rax <- rax goto:272 B30
B30
ParallelMove rbx <- rbx, rax <- rdx, r8 <- rcx, rdx <- rax goto:278 B31
B31
ParallelMove fp[-7] <- r8, fp[-8] <- rdx
v185 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rsi <- rsi
v570 <- UnboxInt64([non-speculative], v185 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rsi <- rsi
v70 <- BinaryInt64Op(+ [tr], v570 T{_Smi}, v601 T{_Smi}) [2, 576460752303423489] int64
Branch if RelationalOp(>, v64, v70) T{bool} goto (32, 33)
B32
ParallelMove rax <- rbx
v88 <- BinaryInt64Op(+ [tr], v63, v419) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rax, rax <- C goto:302 B34
B33
ParallelMove rbx <- rbx, rax <- C goto:304 B34
B34
ParallelMove r10 <- rbx, r9 <- rax goto:360 B40
B40
  Loop 0
ParallelMove fp[-2] <- r10, fp[-6] <- r9
CheckStackOverflow:358(stack=0, loop=1)
Branch if RelationalOp(>, v74, v598 T{_Smi}) T{bool} goto (35, 42)
B35
  Loop 0
v180 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v571 <- UnboxInt64([non-speculative], v180 T{_Smi}) [0, 576460752303423487] int64
Branch if RelationalOp(>, v571 T{_Smi}, v599 T{_Smi}) T{bool} goto (39, 43)
B39
  Loop 0
ParallelMove rsi <- rax
v165 <- BinaryInt64Op(- [tr], v571 T{_Smi}, v600 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:14(v571 T{_Smi}, v165) [-9223372036854775808, 9223372036854775807] int64
v169 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v607 <- LoadIndexed:14([_List] v169, v165 T{int}) T{String}
ParallelMove rdi <- rcx, rsi <- rsi, fp[-4] <- rbx
StaticCall:16( set:length<0> v3 T{_GrowableList}, v165 T{int}, using unchecked entrypoint)
ParallelMove rax <- fp[-4]
v175 <- LoadField(v607 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v575 <- UnboxInt64([non-speculative], v175 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rcx <- rcx
v81 <- BinaryInt64Op(+ [tr], v575 T{_Smi}, v601 T{_Smi}) [v575+2, v575+2] int64
ParallelMove rax <- fp[-2]
v82 <- BinaryInt64Op(- [tr], v74, v81) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[-6]
Branch if StrictCompare:334(===, v75, v0) goto (36, 37)
B36
  Loop 0
ParallelMove rax <- rax
v86 <- BinaryInt64Op(+ [tr], v82, v419) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- rax, r9 <- C goto:348 B38
B37
  Loop 0
ParallelMove r10 <- rax, r9 <- rcx goto:350 B38
B38
  Loop 0
ParallelMove r10 <- r10, r9 <- r9, rcx <- fp[-1], r8 <- fp[-7], rdx <- fp[-8] goto:356 B40
B43
ParallelMove rcx <- r9
ParallelMove  goto:370 B41
B42
ParallelMove rcx <- r9
ParallelMove  goto:366 B41
B41
Branch if StrictCompare:372(!==, v75, v0) goto (44, 45)
B44
ParallelMove rax <- fp[-1]
v354 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v359 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v360 <- LoadField(v359 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v578 <- UnboxInt64([non-speculative], v354 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-2] <- rdx
ParallelMove rsi <- rsi
v579 <- UnboxInt64([non-speculative], v360 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v578 T{_Smi} == v579 T{_Smi}) T{bool} goto (67, 68)
B67
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v3 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B69
B68
B69
ParallelMove rax <- rsi
v151 <- BinaryInt64Op(+ [tr], v578 T{_Smi}, v600 T{_Smi}) [1, 576460752303423488] int64
v580 <- BoxInt64(v151) [1, 576460752303423488] T{_Smi}
StoreField(v3 T{_GrowableList} . GrowableObjectArray.length = v580, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v151 T{_Smi}, v578 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v154 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-6]
StoreIndexed:40([_List] v154, v578 T{_Smi}, v75 T{String?})
ParallelMove  goto:384 B46
B45
ParallelMove rcx <- fp[-1]
ParallelMove  goto:386 B46
B46
v332 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v337 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v338 <- LoadField(v337 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v585 <- UnboxInt64([non-speculative], v332 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-2] <- rax
ParallelMove rbx <- rbx
v586 <- UnboxInt64([non-speculative], v338 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v585 T{_Smi} == v586 T{_Smi}) T{bool} goto (49, 50)
B49
ParallelMove rdi <- rcx
StaticCall:26( _growToNextCapacity@0150898<0> v3 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B51
B50
B51
ParallelMove r8 <- rsi
v113 <- BinaryInt64Op(+ [tr], v585 T{_Smi}, v600 T{_Smi}) [1, 576460752303423488] int64
ParallelMove fp[-3] <- r8
v587 <- BoxInt64(v113) [1, 576460752303423488] T{_Smi}
StoreField(v3 T{_GrowableList} . GrowableObjectArray.length = v587, NoStoreBarrier)
ParallelMove rax <- r8, rbx <- rsi
GenericCheckBound:40(v113 T{_Smi}, v585 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v116 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rbx, rax <- fp[-7]
StoreIndexed:40([_List] v116, v585 T{_Smi}, v65)
v349 <- LoadField(v116 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v593 <- UnboxInt64([non-speculative], v349 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v113 T{_Smi} == v593 T{_Smi}) T{bool} goto (58, 59)
B58
ParallelMove rdi <- rcx
StaticCall:26( _growToNextCapacity@0150898<0> v3 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B60
B59
B60
ParallelMove rax <- rsi
v132 <- BinaryInt64Op(+ [tr], v113 T{_Smi}, v600 T{_Smi}) [2, 576460752303423489] int64
v594 <- BoxInt64(v132) [2, 576460752303423489] T{_Smi}
StoreField(v3 T{_GrowableList} . GrowableObjectArray.length = v594, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v132 T{_Smi}, v113 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v135 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-8]
StoreIndexed:40([_List] v135, v113 T{_Smi}, v66)
ParallelMove rax <- C
DartReturn:392(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C goto:44 B7
B7
  Loop 0
ParallelMove fp[-1] <- rbx
CheckStackOverflow:48(stack=0, loop=1)
v23 <- LoadStaticField:4(toStringVisiting, CallsInitializer) T{_GrowableList}
ParallelMove rcx <- rax
v28 <- LoadField(v23 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v35 <- UnboxInt64([non-speculative], v28 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rdx <- fp[-1]
Branch if RelationalOp(<, v4, v35 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
ParallelMove rax <- rax, rbx <- rdx
GenericCheckBound:30(v35 T{_Smi}, v4) [-9223372036854775808, 9223372036854775807] int64
v16 <- LoadField(v23 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v39 <- LoadIndexed:30([_List] v16, v4 T{int}) T{*?}
ParallelMove rax <- fp[-2], rcx <- rcx
Branch if StrictCompare:32(===, v2, v39 T{*?}, with number check) goto (5, 6)
B6
  Loop 0
ParallelMove rcx <- fp[-1]
v13 <- BinaryInt64Op(+ [tr], v4 T{int}, v40 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rcx, rax <- fp[-2] goto:46 B7
B5
ParallelMove rax <- C
DartReturn:38(v8)
B4
ParallelMove rax <- C
DartReturn:50(v9)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:4(stack=0, loop=0)
ParallelMove rdi <- C, rsi <- C
v4 <- StaticCall:6( _GrowableList@0150898.<0> v2, v6 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
DartReturn:8(v4)
CheckStackOverflowSlowPath
B0
B11
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v3 T{_Smi})
v24 <- StaticCall:82( toString<0> v3 T{_Smi}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
v111 <- LoadClassId(<non-smi> v24 T{String}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- C, rdx <- C
v27 <- DispatchTableCall( cid=v111 String.padLeft<0>, v24 T{String}, v110 T{_Smi}, v26) T{String}
ParallelMove rbx <- C, r10 <- C, rax <- rax
ParallelMove fp[-1] <- rax
v28 <- CreateArray:86(v0, v16) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v28, v3, v4 T{_OneByteString}, NoStoreBarrier)
StoreIndexed([_List] v28, v29, v3 T{_Smi}, NoStoreBarrier)
StoreIndexed([_List] v28, v30, v31, NoStoreBarrier)
StoreIndexed([_List] v28, v32, v26 T{_OneByteString}, NoStoreBarrier)
StoreIndexed([_List] v28, v33, v3 T{_Smi}, NoStoreBarrier)
StoreIndexed([_List] v28, v34, v31, NoStoreBarrier)
StoreIndexed([_List] v28, v25, v26 T{_OneByteString}, NoStoreBarrier)
StoreIndexed([_List] v28, v35, v3 T{_Smi}, NoStoreBarrier)
StoreIndexed([_List] v28, v36, v37, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreIndexed([_List] v28, v38, v27 T{String}, NoStoreBarrier)
MoveArgument(sp[0] <- v28)
v39 <- StaticCall:88( _interpolate@0150898<0> v28, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:90(v39)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v35 <- LoadClassId(v2) [523, 524] int64
Branch if EqualityCompare:10(v35 == v36) goto (3, 8)
B3
ParallelMove rbx <- C, r10 <- C
v10 <- CreateArray:10(v0 T{Null?}, v17 T{_Smi}) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v10, v18 T{_Smi}, v19 T{_OneByteString}, NoStoreBarrier)
ParallelMove rcx <- fp[2]
v14 <- LoadField(v2 T{_OS} . _name@0150898 {final}) T{_OneByteString}
StoreIndexed([_List] v10, v20 T{_Smi}, v14, NoStoreBarrier)
MoveArgument(sp[0] <- v10)
v15 <- StaticCall:14( _interpolate@0150898<0> v10, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:16 B9
B8
ParallelMove rcx <- rax
ParallelMove rbx <- C, r10 <- C
v27 <- CreateArray:10(v0 T{Null?}, v17 T{_Smi}) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v27, v18 T{_Smi}, v34 T{_OneByteString}, NoStoreBarrier)
ParallelMove rcx <- fp[2]
v31 <- LoadField(v2 T{_Architecture} . _name@0150898 {final}) T{_OneByteString}
StoreIndexed([_List] v27, v20 T{_Smi}, v31, NoStoreBarrier)
MoveArgument(sp[0] <- v27)
v32 <- StaticCall:14( _interpolate@0150898<0> v27, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:16 B9
B9
ParallelMove rax <- rax
DartReturn:12(v37 T{String})
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- C
DartReturn:10(v3)
B0
B1
ParallelMove rax <- C
DartReturn:10(v3)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v4 <- LoadField(v2 . message {final}) T{String}
ParallelMove fp[-1] <- rcx
MoveArgument(sp[1] <- v5)
MoveArgument(sp[0] <- v4)
v6 <- StaticCall:12( ==<0> v5, v4, using unchecked entrypoint, recognized_kind = OneByteString_equality, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:16(!==, v6 T{bool}, v7) goto (3, 4)
BoolTest
B3
ParallelMove rax <- fp[-1]
ParallelMove rbx <- C, r10 <- C
v125 <- CreateArray:22(v0, v14) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v125, v16, v3, NoStoreBarrier)
StoreIndexed([_List] v125, v18, v126, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreIndexed([_List] v125, v19, v4, NoStoreBarrier)
MoveArgument(sp[0] <- v125)
v127 <- StaticCall:24( _interpolate@0150898<0> v125, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:30 B5
B4
ParallelMove rcx <- C goto:32 B5
B5
ParallelMove fp[-1] <- rcx
v9 <- LoadField(v2 . offset {final}) T{int??}
ParallelMove fp[-10] <- rdx
v10 <- LoadField(v2 . source {final}) T{*?}
ParallelMove fp[-6] <- rdi
v132 <- LoadClassId(v10) [1, 617] int64
Branch if TestRange(v132 in [93-94]) T{bool} goto (6, 57)
B6
Branch if StrictCompare:48(!==, v9, v0) goto (8, 13)
B8
ParallelMove rax <- rdx
v291 <- UnboxInt64([non-speculative], v9 T{int?}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v291 T{int?}, v321 T{_Smi}) T{bool} goto (10, 7)
B10
B7
v190 <- LoadField(v10 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rbx <- rbx
v293 <- UnboxInt64([non-speculative], v190 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(>, v291 T{int?}, v293 T{_Smi}) T{bool} goto (11, 14)
B11
B9
ParallelMove rax <- C goto:96 B15
B14
B13
B12
ParallelMove rax <- rdx goto:98 B15
B15
Branch if StrictCompare:100(===, v23, v0) goto (16, 20)
B16
v185 <- LoadField(v10 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rax <- rax
v294 <- UnboxInt64([non-speculative], v185 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(>, v294 T{_Smi}, v322 T{_Smi}) T{bool} goto (17, 18)
B17
MoveArgument(sp[0] <- v68)
ParallelMove rdi <- rdi, rsi <- C
v120 <- StaticCall:118( substring<0> v10 T{String}, v321 T{_Smi}, v68, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v120)
MoveArgument(sp[0] <- v75)
v121 <- StaticCall:120( +<0> v120, v75, using unchecked entrypoint) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:126 B19
B18
ParallelMove rcx <- rdi goto:128 B19
B19
ParallelMove rbx <- C, r10 <- C, fp[-2] <- rcx
v118 <- CreateArray:130(v0, v14) T{_List}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreIndexed([_List] v118, v16, v8, NoStoreBarrier)
StoreIndexed([_List] v118, v18, v60, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v118, v19, v117, NoStoreBarrier)
MoveArgument(sp[0] <- v118)
v119 <- StaticCall:132( _interpolate@0150898<0> v118, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:134(v119)
B20
ParallelMove rdx <- rax
v296 <- UnboxInt64:234([non-speculative], v23 T{int?}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-5] <- rdx
v171 <- LoadField:234(v10 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove fp[-2] <- rsi
ParallelMove r8 <- rsi
v305 <- UnboxInt64:234([non-speculative], v171) [0, 2305843009213693951] int64
v173 <- LoadClassId:234(v10 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove rax <- C, r13 <- C, r12 <- C, r10 <- C goto:234 B35
B35
  Loop 1
ParallelMove fp[-3] <- rax, fp[-4] <- r13
CheckStackOverflow:238(stack=0, loop=1)
Branch if RelationalOp(<, v28, v296 T{int?}) T{bool} goto (21, 22)
B21
  Loop 1
ParallelMove rax <- r8, rbx <- r10, rcx <- rax
t0 <- GenericCheckBound:152(v305 T{_Smi}, v28 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:152(===, v173, v154 T{_Smi}) goto (75, 76)
B75
  Loop 1
v177 <- LoadIndexed([_OneByteString] v10 T{_OneByteString}, v28 T{int}) [0, 255] int64
ParallelMove rax <- rbx goto:152 B74
B76
  Loop 1
v175 <- LoadIndexed([_TwoByteString] v10 T{_StringBase}, v28 T{int}) [0, 65535] int64
ParallelMove rax <- rbx goto:152 B74
B74
  Loop 1
Branch if EqualityCompare(v176 T{_Smi} == v324 T{_Smi}) T{bool} goto (23, 30)
B23
  Loop 1
Branch if EqualityCompare(v26 != v28 T{int}) T{bool} goto (26, 24)
B26
B24
  Loop 1
Branch if StrictCompare:174(!==, v27 T{bool}, v7) goto (27, 28)
BoolTest
B27
B25
  Loop 1
ParallelMove rax <- rcx
v114 <- BinaryInt64Op(+ [tr], v25, v323 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax goto:196 B29
B28
  Loop 1
ParallelMove rax <- rcx goto:198 B29
B29
  Loop 1
ParallelMove rcx <- r10
v113 <- BinaryInt64Op(+ [tr], v28 T{int}, v323 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax, r13 <- rcx, r12 <- C goto:228 B34
B30
  Loop 1
Branch if EqualityCompare(v176 T{_Smi} == v325 T{_Smi}) T{bool} goto (31, 32)
B31
  Loop 1
ParallelMove rax <- rcx
v105 <- BinaryInt64Op(+ [tr], v25, v323 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- r10
v106 <- BinaryInt64Op(+ [tr], v28 T{int}, v323 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax, rbx <- rcx, rcx <- C goto:222 B33
B32
  Loop 1
ParallelMove rax <- rcx, rbx <- r13, rcx <- r12 goto:224 B33
B33
  Loop 1
ParallelMove rax <- rax, r13 <- rbx, r12 <- rcx goto:230 B34
B34
  Loop 1
ParallelMove r10 <- r10
v110 <- BinaryInt64Op(+ [tr], v28 T{int}, v323 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax, r13 <- r13, r12 <- r12, r10 <- r10 goto:236 B35
B22
ParallelMove rcx <- rax
Branch if RelationalOp(>, v25, v323 T{_Smi}) T{bool} goto (36, 37)
B36
ParallelMove rax <- rcx
ParallelMove rbx <- C, r10 <- C
v92 <- CreateArray:250(v0, v61) T{_List}
ParallelMove rcx <- rax
StoreIndexed([_List] v92, v16, v93, NoStoreBarrier)
ParallelMove rdx <- fp[-3]
v304 <- BoxInt64(v25) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreIndexed([_List] v92, v18, v304 T{int}, NoStoreBarrier)
StoreIndexed([_List] v92, v19, v94, NoStoreBarrier)
ParallelMove rdx <- fp[-4]
ParallelMove rax <- fp[-5]
v95 <- BinaryInt64Op(- [tr], v296 T{int?}, v26) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rax
v96 <- BinaryInt64Op(+ [tr], v95, v323 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v306 <- BoxInt64(v96) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreIndexed([_List] v92, v14, v306 T{int}, NoStoreBarrier)
StoreIndexed([_List] v92, v59, v35, NoStoreBarrier)
MoveArgument(sp[0] <- v92)
v97 <- StaticCall:256( _interpolate@0150898<0> v92, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v8)
MoveArgument(sp[0] <- v97)
v98 <- StaticCall:258( +<0> v8, v97, using unchecked entrypoint) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:272 B38
B37
ParallelMove rbx <- C, r10 <- C
v32 <- CreateArray:262(v0, v14) T{_List}
ParallelMove rcx <- rax
StoreIndexed([_List] v32, v16, v33, NoStoreBarrier)
ParallelMove rdx <- fp[-5]
v34 <- BinaryInt64Op(+ [tr], v296 T{int?}, v323 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v307 <- BoxInt64(v34) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreIndexed([_List] v32, v18, v307 T{int}, NoStoreBarrier)
StoreIndexed([_List] v32, v19, v35, NoStoreBarrier)
MoveArgument(sp[0] <- v32)
v36 <- StaticCall:266( _interpolate@0150898<0> v32, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v8)
MoveArgument(sp[0] <- v36)
v37 <- StaticCall:268( +<0> v8, v36, using unchecked entrypoint) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:274 B38
B38
ParallelMove fp[-8] <- rcx
ParallelMove rdx <- fp[-2]
v309 <- UnboxInt64:332([non-speculative], v171 T{_Smi}) [0, 2305843009213693951] int64
v146 <- LoadClassId:332(v10 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove r8 <- fp[-5] goto:332 B47
B47
  Loop 0
CheckStackOverflow:336(stack=0, loop=1)
Branch if RelationalOp(<, v40, v309 T{_Smi}) T{bool} goto (39, 40)
B39
  Loop 0
ParallelMove rax <- rdx, rbx <- r8
t0 <- GenericCheckBound:294(v309 T{_Smi}, v40 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:294(===, v146, v154 T{_Smi}) goto (66, 67)
B66
  Loop 0
v150 <- LoadIndexed([_OneByteString] v10 T{_OneByteString}, v40 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:294 B65
B67
  Loop 0
v148 <- LoadIndexed([_TwoByteString] v10 T{_StringBase}, v40 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:294 B65
B65
  Loop 0
Branch if EqualityCompare(v149 T{_Smi} == v324 T{_Smi}) T{bool} goto (43, 41)
B41
  Loop 0
Branch if EqualityCompare(v149 T{_Smi} == v325 T{_Smi}) T{bool} goto (44, 46)
B46
  Loop 0
ParallelMove r8 <- r8
v91 <- BinaryInt64Op(+ [tr], v40 T{int?}, v323 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- r8 goto:334 B47
B44
B43
B42
ParallelMove rdx <- r8 goto:326 B45
B40
B45
ParallelMove rbx <- rdx
v46 <- BinaryInt64Op(- [tr], v44, v26) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v46, v322 T{_Smi}) T{bool} goto (48, 55)
B48
ParallelMove rbx <- fp[-5]
v67 <- BinaryInt64Op(- [tr], v296 T{int?}, v26) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v67, v326 T{_Smi}) T{bool} goto (49, 50)
B49
ParallelMove rdx <- rax
v85 <- BinaryInt64Op(+ [tr], v26, v326 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rax, rbx <- rdx, rdx <- C, rax <- C, r8 <- fp[-5] goto:396 B54
B50
ParallelMove r8 <- fp[-5]
ParallelMove rax <- rdx
v70 <- BinaryInt64Op(- [tr], v44, v296 T{int?}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v70, v326 T{_Smi}) T{bool} goto (51, 52)
B51
ParallelMove rax <- rdx
v80 <- BinaryInt64Op(- [tr], v44, v326 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rax, rdx <- rdx, rax <- C goto:390 B53
B52
ParallelMove rax <- r8
v73 <- BinaryInt64Op(- [tr], v296 T{int?}, v327 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- r8
v74 <- BinaryInt64Op(+ [tr], v296 T{int?}, v327 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rax, rdx <- rdx, rax <- C goto:392 B53
B53
ParallelMove rsi <- rbx, rbx <- rdx, rdx <- C, rax <- rax goto:398 B54
B54
ParallelMove r10 <- rsi, rsi <- rbx, r9 <- rdx, rdx <- rax goto:404 B56
B55
ParallelMove r8 <- fp[-5]
ParallelMove r10 <- rax, rsi <- rdx, r9 <- C, rdx <- C goto:406 B56
B56
ParallelMove fp[-3] <- r10, fp[-2] <- r9, fp[-7] <- rdx
v311 <- BoxInt64(v50) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v311 T{int?})
ParallelMove rdi <- rdi, rsi <- r10
v53 <- StaticCall:408( substring<0> v10 T{String}, v49, v311 T{int?}, using unchecked entrypoint) T{String}
ParallelMove rcx <- rax, rax <- fp[-3]
ParallelMove rdx <- fp[-5], fp[-6] <- rcx
v54 <- BinaryInt64Op(- [tr], v296 T{int?}, v49) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-2]
v137 <- LoadField(v51 T{_OneByteString} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rbx <- rbx
v312 <- UnboxInt64([non-speculative], v137 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdx <- rdx
v56 <- BinaryInt64Op(+ [tr], v54, v312 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- C, r10 <- C, fp[-3] <- rdx
v58 <- CreateArray:416(v0, v57) T{_List}
ParallelMove rcx <- rax, rax <- fp[-8]
ParallelMove fp[-9] <- rcx
StoreIndexed([_List] v58, v16, v38, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreIndexed([_List] v58, v18, v51, NoStoreBarrier)
ParallelMove rax <- fp[-6]
StoreIndexed([_List] v58, v19, v53, NoStoreBarrier)
ParallelMove rax <- fp[-7]
StoreIndexed([_List] v58, v14, v52, NoStoreBarrier)
StoreIndexed([_List] v58, v59, v60, NoStoreBarrier)
ParallelMove rdi <- C, rsi <- fp[-3]
v63 <- StaticCall:418( *<0> v62, v56, using unchecked entrypoint) T{String}
ParallelMove rdx <- fp[-9], rax <- rax
StoreIndexed([_List] v58, v61, v63)
ParallelMove rax <- fp[-9]
StoreIndexed([_List] v58, v64, v65, NoStoreBarrier)
MoveArgument(sp[0] <- v58)
v66 <- StaticCall:420( _interpolate@0150898<0> v58, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:422(v66)
B57
Branch if StrictCompare:426(!==, v9, v0) goto (58, 59)
B58
ParallelMove rbx <- C, r10 <- C
v15 <- CreateArray:432(v0, v14) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v15, v16, v17, NoStoreBarrier)
ParallelMove rcx <- fp[-10]
StoreIndexed([_List] v15, v18, v9 T{int?}, NoStoreBarrier)
StoreIndexed([_List] v15, v19, v20, NoStoreBarrier)
MoveArgument(sp[0] <- v15)
v21 <- StaticCall:434( _interpolate@0150898<0> v15, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v8)
MoveArgument(sp[0] <- v21)
v22 <- StaticCall:436( +<0> v8, v21, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:442 B60
B59
ParallelMove rax <- fp[-1] goto:444 B60
B60
ParallelMove rax <- rax
DartReturn:446(v13)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-3] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
Branch if RelationalOp(<=, v3, v154 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:20(v22)
B4
Branch if EqualityCompare(v3 == v155 T{_Smi}) T{bool} goto (5, 6)
B5
ParallelMove rax <- rcx
DartReturn:34(v2)
B6
v99 <- LoadField(v2 T{_OneByteString} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v99, v4 T{_Smi}) T{bool} goto (7, 8)
B7
ParallelMove rax <- rcx
DartReturn:48(v2)
B8
ParallelMove rdi <- rax
v140 <- UnboxInt64([non-speculative], v99 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-2] <- rdi
ParallelMove rbx <- rdi
v60 <- BinaryInt64Op(* [tr], v140 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rdi
v61 <- BinaryInt64Op(| [tr], v140 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v61, v154 T{_Smi}) T{bool} goto (29, 27)
B29
B27
Branch if RelationalOp(<=, v60, v154 T{_Smi}) T{bool} goto (30, 31)
B30
B28
ParallelMove rdx <- C goto:42 B36
B31
Branch if RelationalOp(<, v61 T{int}, v88 T{_Smi}) T{bool} goto (32, 33)
B32
ParallelMove rdx <- rbx goto:60 B36
B33
ParallelMove rax <- rbx
v71 <- BinaryInt64Op(~/ [tr], v60, v140 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
Branch if EqualityCompare(v71 != v3 T{int}) T{bool} goto (34, 35)
B34
ParallelMove rdx <- C goto:76 B36
B35
ParallelMove rdx <- rbx goto:80 B36
B36
ParallelMove fp[-1] <- rdx
v144 <- BoxInt64(v89 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v144 T{int})
v94 <- StaticCall:10( allocateOneByteString<0> v144 T{int}, recognized_kind = AllocateOneByteString, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove rcx <- rax
ParallelMove rdi <- C, rdx <- fp[-3], rsi <- fp[-2] goto:78 B11
B11
  Loop 1
CheckStackOverflow:82(stack=0, loop=1)
Branch if RelationalOp(<, v13, v140 T{_Smi}) T{bool} goto (9, 10)
B9
  Loop 1
v157 <- LoadIndexed:72([_OneByteString] v2, v13 T{int}) [0, 255] int64
ParallelMove rax <- rax
StoreIndexed:10([_OneByteString] v94 T{_OneByteString}, v13 T{int}, v157 T{_Smi}, NoStoreBarrier)
ParallelMove rdi <- rdi
v21 <- BinaryInt64Op(+ [tr], v13 T{int}, v155 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:80 B11
B10
v27 <- LoadField:106(v94 T{_OneByteString} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v150 <- UnboxInt64:106([non-speculative], v27) [0, 2305843009213693951] int64
ParallelMove r8 <- rsi, rdi <- fp[-1] goto:106 B14
B14
  Loop 0
CheckStackOverflow:110(stack=0, loop=1)
Branch if RelationalOp(<, v15, v89 T{int}) T{bool} goto (12, 13)
B12
  Loop 0
ParallelMove r9 <- r8
v17 <- BinaryInt64Op(- [tr], v15, v140 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rdx, rbx <- r9
GenericCheckBound:100(v150 T{_Smi}, v17) [-9223372036854775808, 9223372036854775807] int64
v158 <- LoadIndexed:100([_OneByteString] v94 T{_OneByteString}, v17 T{int}) [0, 255] int64
ParallelMove rax <- rax
StoreIndexed:10([_OneByteString] v94 T{_OneByteString}, v15 T{int}, v158 T{_Smi}, NoStoreBarrier)
ParallelMove r8 <- r8
v19 <- BinaryInt64Op(+ [tr], v15, v155 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- r8 goto:108 B14
B13
ParallelMove rax <- rcx
DartReturn:112(v94 T{_OneByteString})
CheckStackOverflowSlowPath
slow path int64 divide operation
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
ParallelMove rax <- C
DartReturn:10(v3)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
StaticCall:10( _consumeBuffer@0150898<0> v2, using unchecked entrypoint)
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . _parts@0150898) T{_GrowableList?}
v4 <- LoadField(v2 . _partsCodeUnits@0150898) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v4 == v27 T{_Smi}) T{bool} goto (5, 3)
B5
B3
Branch if StrictCompare:24(===, v3, v0) goto (6, 7)
B6
B4
ParallelMove rax <- C goto:48 B8
B7
v17 <- LoadField(v3 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v26 <- UnboxInt64([non-speculative], v17 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rdi <- rdi, rsi <- C, rdx <- rax
v9 <- StaticCall:44( _concatRange@0150898<0> v3 T{_GrowableList}, v27 T{_Smi}, v26 T{_Smi}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:50 B8
B8
ParallelMove rax <- rax
DartReturn:52(v10)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- fp[2]
v8 <- LoadField:4(v2 T{_Uri} . _text@0150898, CallsInitializer) T{String}
ParallelMove rax <- rax
DartReturn:12(v8 T{String})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rcx <- fp[2]
v3 <- LoadField(v2 . _separatorIndices@0150898 {final}) T{_GrowableList}
v17 <- LoadField(v3 . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v27 <- UnboxInt64([non-speculative], v17) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v27 T{_Smi}, v31 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v19 <- LoadField(v3 . GrowableObjectArray.data) T{_List}
v32 <- LoadIndexed:12([_List] v19, v31 T{_Smi}) [-9223372036854775808, 9223372036854775807] T{int}
Branch if StrictCompare(===, v32 T{int}, v6 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rbx <- C, r10 <- C
v12 <- CreateArray:24(v0, v11) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v12, v4, v13, NoStoreBarrier)
ParallelMove rcx <- fp[2]
v15 <- LoadField(v2 . _text@0150898 {final}) T{String}
StoreIndexed([_List] v12, v14, v15, NoStoreBarrier)
MoveArgument(sp[0] <- v12)
v16 <- StaticCall:28( _interpolate@0150898<0> v12, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:36 B5
B4
v9 <- LoadField(v2 . _text@0150898 {final}) T{String}
ParallelMove rax <- rdx goto:38 B5
B5
ParallelMove rax <- rax
DartReturn:40(v10)
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
ParallelMove rcx <- sp[1]
v3 <- LoadField(v2 . _uri@0150898 {final}) T{String}
ParallelMove rax <- rax
DartReturn:12(v3)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v4 <- CreateArray:10(v0, v3) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v4, v5, v6, NoStoreBarrier)
ParallelMove rcx <- fp[2]
v8 <- LoadField(v2 . name {final}) T{Null?}
StoreIndexed([_List] v4, v7, v8, NoStoreBarrier)
MoveArgument(sp[0] <- v4)
v9 <- StaticCall:14( _interpolate@0150898<0> v4, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:16(v9)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . error {final}) T{Object}
MoveArgument(sp[0] <- v3)
v4 <- StaticCall:12( _interpolateSingle@0150898<0> v3) T{String}
ParallelMove rax <- rax
DartReturn:14(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v4 <- CreateArray:10(v0, v3) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v4, v5, v6, NoStoreBarrier)
ParallelMove rcx <- fp[2]
v8 <- LoadField(v2 . _message@4048458 {final}) T{String}
StoreIndexed([_List] v4, v7, v8, NoStoreBarrier)
StoreIndexed([_List] v4, v9, v10, NoStoreBarrier)
MoveArgument(sp[0] <- v4)
v11 <- StaticCall:14( _interpolate@0150898<0> v4, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:16(v11)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v5 <- CreateArray:12(v0, v4) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v5, v6, v7, NoStoreBarrier)
ParallelMove rcx <- fp[2]
v9 <- LoadField(v2 . duration {final}) T{Duration}
StoreIndexed([_List] v5, v8, v9, NoStoreBarrier)
MoveArgument(sp[0] <- v5)
v10 <- StaticCall:16( _interpolate@0150898<0> v5, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rbx <- C, r10 <- C, rax <- rax
ParallelMove fp[-1] <- rax
v12 <- CreateArray:20(v0, v11) T{_List}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreIndexed([_List] v12, v6, v10, NoStoreBarrier)
StoreIndexed([_List] v12, v8, v13, NoStoreBarrier)
ParallelMove rax <- fp[2]
v14 <- LoadField(v2 . message {final}) T{_OneByteString}
StoreIndexed([_List] v12, v4, v14, NoStoreBarrier)
MoveArgument(sp[0] <- v12)
v15 <- StaticCall:24( _interpolate@0150898<0> v12, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:26(v15)
CheckStackOverflowSlowPath
B0
B4
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi, fp[-2] <- rbx
CheckStackOverflow:8(stack=0, loop=0)
v36 <- LoadField(v2 T{__Int8List&_TypedList&_IntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v52 <- UnboxInt64([non-speculative], v36 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- C, rdx <- rcx
StaticCall:14( checkValidRange<0> v55 T{_Smi}, v7, v52 T{_Smi}) int64
ParallelMove rdx <- fp[-2]
Branch if StrictCompare:30(===, v5 T{int??}, v0) goto (5, 6)
B6
ParallelMove rdi <- C goto:62 B9
B9
  Loop 0
ParallelMove fp[-3] <- rdi
CheckStackOverflow:66(stack=0, loop=1)
Branch if RelationalOp(<, v15, v56 T{_Smi}) T{bool} goto (7, 8)
B7
  Loop 0
v53 <- BoxInt64(v15) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v63 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v53 T{int})
MoveArgument(sp[0] <- v5 T{int?})
ParallelMove rcx <- rcx
DispatchTableCall( cid=v63 List.[]=<0>, v2, v53 T{int}, v5 T{int?})
ParallelMove rax <- fp[-3]
v18 <- BinaryInt64Op(+ [tr], v15, v57 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rax, rdx <- fp[-2] goto:64 B9
B8
ParallelMove rax <- C
DartReturn:68(v0)
B5
v19 <- AllocateObject:36(cls=ArgumentError, <not-aliased>) T{ArgumentError}
ParallelMove rcx <- rax, rax <- C
StoreField(v19 T{ArgumentError} . name = v29 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v19 T{ArgumentError} . _hasValue@0150898 = v30 T{bool}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v19 T{ArgumentError} . message = v31 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:40(v19)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . _map@3220832 {final}) T{_Map}
ParallelMove rdi <- rdi
v9 <- StaticCall:10( mapToString<0> v3 T{_Map}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:14(v9 T{String})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-6] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax
v10 <- StaticCall:12( isToStringVisiting<0> v8, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:16(===, v10 T{bool}, v11) goto (3, 4)
BoolTest
B3
ParallelMove rax <- C
DartReturn:22(v23)
B4
v12 <- AllocateObject:26(cls=StringBuffer) T{StringBuffer}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-7] <- rax
StaticCall:28( StringBuffer.<0> v12)
v9 <- AllocateContext:10(num_variables=2) T{Context}
ParallelMove rcx <- rax, rax <- fp[-7]
ParallelMove fp[-8] <- rcx
StoreField(v9 . result = v12, NoStoreBarrier)
ParallelMove  goto:32 B5
B5
v57 <- LoadStaticField:4(toStringVisiting, CallsInitializer) T{_GrowableList}
ParallelMove rax <- rax
ParallelMove fp[-10] <- rax
v96 <- LoadField(v57 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove fp[-7] <- rcx
v101 <- LoadField(v57 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v102 <- LoadField(v101 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rcx
v116 <- UnboxInt64([non-speculative], v96 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-9] <- rdx
ParallelMove rbx <- rbx
v117 <- UnboxInt64([non-speculative], v102 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v116 T{_Smi} == v117 T{_Smi}) T{bool} goto (20, 21)
B20
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v57 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B22
B21
B22
ParallelMove rax <- rsi
v74 <- BinaryInt64Op(+ [tr], v116 T{_Smi}, v127 T{_Smi}) [1, 576460752303423488] int64
v118 <- BoxInt64(v74) [1, 576460752303423488] T{_Smi}
StoreField(v57 T{_GrowableList} . GrowableObjectArray.length = v118, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v74 T{_Smi}, v116 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v77 <- LoadField(v57 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- r9
StoreIndexed:40([_List] v77, v116 T{_Smi}, v8 T{Map<Object?, Object?>})
v14 <- LoadField(v9 . result) T{StringBuffer}
ParallelMove rdi <- rdi, rsi <- C
StaticCall:40( write<0> v14, v15, using unchecked entrypoint)
ParallelMove rax <- fp[-8], rcx <- C
StoreField(v9 . first = v11)
ParallelMove rbx <- C, rdx <- rax
v17 <- AllocateClosure:42(v16, v9) T{_Closure}
ParallelMove rax <- rax, rdi <- fp[-6]
v143 <- LoadClassId(<non-smi> v8) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- rax
DispatchTableCall( cid=v143 Map.forEach<0>, v8, v17)
ParallelMove rax <- fp[-8]
v18 <- LoadField(v9 . result) T{StringBuffer}
ParallelMove rdi <- rdi, rsi <- C
StaticCall:46( write<0> v18, v19, using unchecked entrypoint)
ParallelMove rcx <- fp[-8], rdi <- fp[-10] goto:50 B6
B6
v91 <- LoadField(v57 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v121 <- UnboxInt64([non-speculative], v91 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rdx <- rax
v49 <- BinaryInt64Op(- [tr], v121 T{_Smi}, v127 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rax <- rax, rbx <- rdx
GenericCheckBound:14(v121 T{_Smi}, v49) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi, rsi <- rdx
StaticCall:16( set:length<0> v57 T{_GrowableList}, v49 T{int}, using unchecked entrypoint)
ParallelMove rax <- fp[-8]
v21 <- LoadField(v9 . result) T{StringBuffer}
MoveArgument(sp[0] <- v21)
v22 <- StaticCall:66( toString<0> v21, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:68(v22)
B8
ParallelMove rbx <- rdx, fp[-6] <- rax, fp[-7] <- rdx
v26 <- LoadStaticField:4(toStringVisiting, CallsInitializer) T{_GrowableList}
ParallelMove rcx <- rax
v86 <- LoadField(v26 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v124 <- UnboxInt64([non-speculative], v86 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rdx <- rax
v33 <- BinaryInt64Op(- [tr], v124 T{_Smi}, v127 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rax <- rax, rbx <- rdx
GenericCheckBound:14(v124 T{_Smi}, v33) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rcx, rsi <- rdx
StaticCall:16( set:length<0> v26 T{_GrowableList}, v33 T{int}, using unchecked entrypoint)
ParallelMove rax <- fp[-6], rbx <- fp[-7]
ReThrow:64(v5, v6)
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[4]
v5 <- LoadField(v2 . Closure.context {final}) T{*}
ParallelMove fp[-1] <- rcx
CheckStackOverflow:8(stack=0, loop=0)
v6 <- LoadField(v5 . first) T{bool}
Branch if StrictCompare:12(!==, v6 T{bool}, v7) goto (3, 4)
BoolTest
B3
v13 <- LoadField(v5 . result) T{StringBuffer}
ParallelMove rdi <- rdi, rsi <- C
StaticCall:18( write<0> v13, v14, using unchecked entrypoint)
ParallelMove  goto:24 B5
B4
B5
StoreField(v5 . first = v8)
v9 <- LoadField(v5 . result) T{StringBuffer}
ParallelMove rdi <- rdi, rsi <- fp[3]
StaticCall:28( write<0> v9, v3, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
v10 <- LoadField(v5 . result) T{StringBuffer}
ParallelMove rdi <- rdi, rsi <- C
StaticCall:30( write<0> v10, v11, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
v12 <- LoadField(v5 . result) T{StringBuffer}
ParallelMove rdi <- rdi, rsi <- fp[2]
StaticCall:32( write<0> v12, v4, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:34(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v6 <- LoadField(v2 . _os@8050071 {final}) T{_OS}
v18 <- LoadField(v6 T{_OS} . _name@0150898 {final}) T{_OneByteString}
ParallelMove rbx <- C, r10 <- C, fp[-1] <- rdx
v4 <- CreateArray:10(v0, v3) T{_List}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreIndexed([_List] v4, v5, v18, NoStoreBarrier)
StoreIndexed([_List] v4, v8, v9, NoStoreBarrier)
ParallelMove rax <- fp[2]
v11 <- LoadField(v2 . _architecture@8050071 {final}) T{_Architecture}
v23 <- LoadField(v11 T{_Architecture} . _name@0150898 {final}) T{_OneByteString}
StoreIndexed([_List] v4, v10, v23, NoStoreBarrier)
MoveArgument(sp[0] <- v4)
v13 <- StaticCall:20( _interpolate@0150898<0> v4, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:22(v13)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v4 <- CreateArray:10(v0, v3) T{_List}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
StoreIndexed([_List] v4, v5, v6, NoStoreBarrier)
ParallelMove rdi <- fp[2]
v8 <- StaticCall:12( computeUnmangledName<0> v2) T{String}
ParallelMove rdx <- fp[-1], rax <- rax
StoreIndexed([_List] v4, v7, v8)
ParallelMove rax <- fp[-1]
StoreIndexed([_List] v4, v9, v10, NoStoreBarrier)
MoveArgument(sp[0] <- v4)
v11 <- StaticCall:14( _interpolate@0150898<0> v4, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:16(v11)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v4 <- CreateArray:10(v0, v3) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v4, v5, v6, NoStoreBarrier)
ParallelMove rcx <- fp[2]
v8 <- LoadField(v2 . message {final}) T{String}
StoreIndexed([_List] v4, v7, v8, NoStoreBarrier)
MoveArgument(sp[0] <- v4)
v9 <- StaticCall:14( _interpolate@0150898<0> v4, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:16(v9)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- C
DartReturn:10(v5 T{_Smi})
B0
B1
ParallelMove rax <- C
DartReturn:10(v5 T{_Smi})
B0
B1
ParallelMove rax <- C
DartReturn:10(v5 T{_Smi})
B0
B1
ParallelMove rax <- C
DartReturn:10(v5 T{_Smi})
B0
B1
ParallelMove rax <- C
DartReturn:10(v5 T{_Smi})
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- AllocateObject:10(cls=StringBuffer) T{StringBuffer}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-1] <- rax
StaticCall:12( StringBuffer.<0> v3)
ParallelMove rdi <- fp[-1], rsi <- C
StaticCall:14( write<0> v3, v4, using unchecked entrypoint)
ParallelMove rax <- fp[2]
v5 <- LoadField(v2 . message {final}) T{String}
ParallelMove fp[-2] <- rcx
v32 <- LoadField(v5 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(!==, v32, v35 T{_Smi}) T{bool} goto (3, 7)
B3
ParallelMove rdi <- fp[-1], rsi <- C
StaticCall:28( write<0> v3, v15, using unchecked entrypoint)
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
StaticCall:32( write<0> v3, v5 T{String}, using unchecked entrypoint)
ParallelMove rax <- fp[2]
v17 <- LoadField(v2 . errorCode {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- rcx
Branch if EqualityCompare(v17 != v54 T{_Smi}) T{bool} goto (4, 5)
B4
ParallelMove rdi <- fp[-1], rsi <- C
StaticCall:46( write<0> v3, v19, using unchecked entrypoint)
ParallelMove rcx <- fp[-3]
v48 <- BoxInt64(v17 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v63 <- LoadClassId(v48 T{int}) int64
MoveArgument(sp[0] <- v48 T{int})
ParallelMove rcx <- rcx
v21 <- DispatchTableCall( cid=v63 int.toString<0>, v48 T{int}) T{String}
ParallelMove rdi <- fp[-1], rsi <- rax
StaticCall:52( write<0> v3, v21 T{String}, using unchecked entrypoint)
ParallelMove  goto:58 B6
B5
B6
B7
v8 <- LoadField(v2 . errorCode {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- rcx
Branch if EqualityCompare(v8 != v54 T{_Smi}) T{bool} goto (8, 9)
B8
ParallelMove rdi <- fp[-1], rsi <- C
StaticCall:76( write<0> v3, v11, using unchecked entrypoint)
ParallelMove rcx <- fp[-3]
v49 <- BoxInt64(v8 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v64 <- LoadClassId(v49 T{int}) int64
MoveArgument(sp[0] <- v49 T{int})
ParallelMove rcx <- rcx
v13 <- DispatchTableCall( cid=v64 int.toString<0>, v49 T{int}) T{String}
ParallelMove rdi <- fp[-1], rsi <- rax
StaticCall:82( write<0> v3, v13 T{String}, using unchecked entrypoint)
ParallelMove  goto:88 B10
B9
B10
B11
MoveArgument(sp[0] <- v3)
v14 <- StaticCall:98( toString<0> v3, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:100(v14)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v4 <- CreateArray:10(v0, v3) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v4, v5, v6, NoStoreBarrier)
ParallelMove rcx <- fp[2]
v16 <- LoadField(v2 T{_Directory} . _path@15069316 {final}) T{String}
StoreIndexed([_List] v4, v7, v16 T{String}, NoStoreBarrier)
StoreIndexed([_List] v4, v9, v10, NoStoreBarrier)
MoveArgument(sp[0] <- v4)
v11 <- StaticCall:14( _interpolate@0150898<0> v4, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:16(v11)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v4 <- CreateArray:10(v0, v3) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v4, v5, v6, NoStoreBarrier)
ParallelMove rcx <- fp[2]
v16 <- LoadField(v2 T{_File} . _path@15069316 {final}) T{String}
StoreIndexed([_List] v4, v7, v16 T{String}, NoStoreBarrier)
StoreIndexed([_List] v4, v9, v10, NoStoreBarrier)
MoveArgument(sp[0] <- v4)
v11 <- StaticCall:14( _interpolate@0150898<0> v4, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:16(v11)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v4 <- CreateArray:10(v0, v3) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v4, v5, v6, NoStoreBarrier)
ParallelMove rcx <- fp[2]
v16 <- LoadField(v2 T{_Link} . _path@15069316 {final}) T{String}
StoreIndexed([_List] v4, v7, v16 T{String}, NoStoreBarrier)
StoreIndexed([_List] v4, v9, v10, NoStoreBarrier)
MoveArgument(sp[0] <- v4)
v11 <- StaticCall:14( _interpolate@0150898<0> v4, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:16(v11)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2], rsi <- C
v4 <- StaticCall:10( _toStringHelper@15069316<0> v2, v3, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:12(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- AllocateObject:10(cls=StringBuffer) T{StringBuffer}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-3] <- rax
StaticCall:12( StringBuffer.<0> v4)
ParallelMove rdi <- fp[-3], rsi <- fp[-2]
StaticCall:14( write<0> v4, v3, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
v5 <- LoadField(v2 . message {final}) T{String}
ParallelMove fp[-2] <- rcx
v52 <- LoadField(v5 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(!==, v52, v11 T{_Smi}) T{bool} goto (3, 7)
B3
ParallelMove rbx <- C, r10 <- C
v26 <- CreateArray:28(v0, v9) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v26, v11, v12, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v26, v13, v5 T{String}, NoStoreBarrier)
MoveArgument(sp[0] <- v26)
v28 <- StaticCall:32( _interpolate@0150898<0> v26, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-3], rsi <- rax
StaticCall:34( write<0> v4, v28, using unchecked entrypoint)
ParallelMove rbx <- C, r10 <- C
v29 <- CreateArray:38(v0, v19) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v29, v11, v21, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
v30 <- LoadField(v2 . path {final}) T{String??}
StoreIndexed([_List] v29, v13, v30, NoStoreBarrier)
StoreIndexed([_List] v29, v9, v23, NoStoreBarrier)
MoveArgument(sp[0] <- v29)
v31 <- StaticCall:42( _interpolate@0150898<0> v29, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-3], rsi <- rax
StaticCall:44( write<0> v4, v31, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
v32 <- LoadField(v2 . osError {final}) T{OSError?}
ParallelMove fp[-2] <- rcx
Branch if StrictCompare:48(!==, v32, v0) goto (4, 5)
B4
ParallelMove rbx <- C, r10 <- C
v33 <- CreateArray:54(v0, v19) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v33, v11, v34, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v33, v13, v32 T{OSError}, NoStoreBarrier)
StoreIndexed([_List] v33, v9, v36, NoStoreBarrier)
MoveArgument(sp[0] <- v33)
v37 <- StaticCall:58( _interpolate@0150898<0> v33, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-3], rsi <- rax
StaticCall:60( write<0> v4, v37, using unchecked entrypoint)
ParallelMove  goto:66 B6
B5
B6
B7
v8 <- LoadField(v2 . osError {final}) T{OSError?}
ParallelMove fp[-2] <- rcx
Branch if StrictCompare:74(!==, v8, v0) goto (8, 9)
B8
ParallelMove rbx <- C, r10 <- C
v16 <- CreateArray:80(v0, v9) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v16, v11, v12, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v16, v13, v8 T{OSError}, NoStoreBarrier)
MoveArgument(sp[0] <- v16)
v18 <- StaticCall:84( _interpolate@0150898<0> v16, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-3], rsi <- rax
StaticCall:86( write<0> v4, v18, using unchecked entrypoint)
ParallelMove rbx <- C, r10 <- C
v20 <- CreateArray:90(v0, v19) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v20, v11, v21, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
v22 <- LoadField(v2 . path {final}) T{String??}
StoreIndexed([_List] v20, v13, v22, NoStoreBarrier)
StoreIndexed([_List] v20, v9, v23, NoStoreBarrier)
MoveArgument(sp[0] <- v20)
v24 <- StaticCall:94( _interpolate@0150898<0> v20, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-3], rsi <- rax
StaticCall:96( write<0> v4, v24, using unchecked entrypoint)
ParallelMove  goto:112 B10
B9
ParallelMove rcx <- rax
ParallelMove rbx <- C, r10 <- C
v10 <- CreateArray:102(v0, v9) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v10, v11, v12, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
v14 <- LoadField(v2 . path {final}) T{String??}
StoreIndexed([_List] v10, v13, v14, NoStoreBarrier)
MoveArgument(sp[0] <- v10)
v15 <- StaticCall:106( _interpolate@0150898<0> v10, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-3], rsi <- rax
StaticCall:108( write<0> v4, v15, using unchecked entrypoint)
ParallelMove  goto:114 B10
B10
B11
MoveArgument(sp[0] <- v4)
v25 <- StaticCall:122( toString<0> v4, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:124(v25)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2], rsi <- C
v4 <- StaticCall:10( _toStringHelper@15069316<0> v2, v3, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:12(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2], rsi <- C
v4 <- StaticCall:10( _toStringHelper@15069316<0> v2, v3, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:12(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2], rsi <- C
v4 <- StaticCall:10( _toStringHelper@15069316<0> v2, v3, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:12(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- AllocateObject:10(cls=StringBuffer) T{StringBuffer}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-1] <- rax
StaticCall:12( StringBuffer.<0> v3)
ParallelMove rax <- fp[2]
v4 <- LoadField(v2 . type {final}) T{_OneByteString}
ParallelMove rdi <- fp[-1], rsi <- rsi
StaticCall:16( write<0> v3, v4, using unchecked entrypoint)
ParallelMove rax <- fp[2]
v5 <- LoadField(v2 . message {final}) T{String}
ParallelMove fp[-2] <- rcx
v41 <- LoadField(v5 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(!==, v41, v11 T{_Smi}) T{bool} goto (3, 7)
B3
ParallelMove rbx <- C, r10 <- C
v17 <- CreateArray:30(v0, v9) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v17, v11, v12, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v17, v13, v5 T{String}, NoStoreBarrier)
MoveArgument(sp[0] <- v17)
v19 <- StaticCall:34( _interpolate@0150898<0> v17, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-1], rsi <- rax
StaticCall:36( write<0> v3, v19, using unchecked entrypoint)
ParallelMove rax <- fp[2]
v20 <- LoadField(v2 . osError {final}) T{OSError?}
ParallelMove fp[-2] <- rcx
Branch if StrictCompare:40(!==, v20, v0) goto (4, 5)
B4
ParallelMove rbx <- C, r10 <- C
v22 <- CreateArray:46(v0, v21) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v22, v11, v23, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v22, v13, v20 T{OSError}, NoStoreBarrier)
StoreIndexed([_List] v22, v9, v25, NoStoreBarrier)
MoveArgument(sp[0] <- v22)
v26 <- StaticCall:50( _interpolate@0150898<0> v22, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-1], rsi <- rax
StaticCall:52( write<0> v3, v26, using unchecked entrypoint)
ParallelMove  goto:58 B6
B5
B6
B7
v8 <- LoadField(v2 . osError {final}) T{OSError?}
ParallelMove fp[-2] <- rcx
Branch if StrictCompare:66(!==, v8, v0) goto (8, 9)
B8
ParallelMove rbx <- C, r10 <- C
v10 <- CreateArray:72(v0, v9) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v10, v11, v12, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v10, v13, v8 T{OSError}, NoStoreBarrier)
MoveArgument(sp[0] <- v10)
v15 <- StaticCall:76( _interpolate@0150898<0> v10, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rdi <- fp[-1], rsi <- rax
StaticCall:78( write<0> v3, v15, using unchecked entrypoint)
ParallelMove  goto:84 B10
B9
B10
B11
MoveArgument(sp[0] <- v3)
v16 <- StaticCall:94( toString<0> v3, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:96(v16)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v4 <- CreateArray:10(v0, v3) T{_List}
ParallelMove rcx <- rax
StoreIndexed([_List] v4, v5, v6, NoStoreBarrier)
ParallelMove rax <- fp[2]
v15 <- LoadField(v2 T{InternetAddressType} . _value@15069316 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v17 <- BinaryInt64Op(+ [tr], v15, v28 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C, rbx <- rdx
GenericCheckBound:14(v29 T{_Smi}, v17) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C
v30 <- LoadIndexed:14([_List] v23, v17 T{int}) T{String}
StoreIndexed([_List] v4, v7, v30 T{String}, NoStoreBarrier)
MoveArgument(sp[0] <- v4)
v9 <- StaticCall:14( _interpolate@0150898<0> v4, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:16(v9)
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
ParallelMove rax <- C
DartReturn:10(v3)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2], rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v2, v3, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) T{List<dynamic>}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[2]
v5 <- StaticCall:12( listToString<0> v2, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:14(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi, rsi <- C, rdx <- C
v5 <- StaticCall:10( iterableToFullString<0> v2, v3, v4, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rsi, rsi <- rdx, fp[-9] <- rdi, fp[-10] <- rsi, fp[-11] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rcx
v14 <- StaticCall:10( isToStringVisiting<0> v11, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v14 T{bool}, v15) goto (3, 4)
BoolTest
B3
ParallelMove rax <- fp[-10], rsi <- fp[-11]
ParallelMove rbx <- C, r10 <- C
v22 <- CreateArray:20(v0, v21) T{_List}
ParallelMove rcx <- rax, rax <- fp[-10]
StoreIndexed([_List] v22, v23, v12, NoStoreBarrier)
StoreIndexed([_List] v22, v24, v25, NoStoreBarrier)
ParallelMove rsi <- fp[-11]
StoreIndexed([_List] v22, v26, v13, NoStoreBarrier)
MoveArgument(sp[0] <- v22)
v27 <- StaticCall:22( _interpolate@0150898<0> v22, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:24(v27)
B4
ParallelMove rax <- fp[-10], rsi <- fp[-11]
v16 <- AllocateObject:28(cls=StringBuffer) T{StringBuffer}
ParallelMove rax <- rax
ParallelMove fp[-12] <- rax
MoveArgument(sp[0] <- v12)
ParallelMove rdi <- rax
StaticCall:30( StringBuffer.<0> v16, v12)
v60 <- LoadStaticField:4(toStringVisiting, CallsInitializer) T{_GrowableList}
ParallelMove rax <- rax
ParallelMove fp[-10] <- rax
v94 <- LoadField(v60 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v99 <- LoadField(v60 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v100 <- LoadField(v99 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v114 <- UnboxInt64([non-speculative], v94 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-13] <- rcx
ParallelMove rbx <- rbx
v115 <- UnboxInt64([non-speculative], v100 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v114 T{_Smi} == v115 T{_Smi}) T{bool} goto (20, 21)
B20
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v60 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B22
B21
B22
ParallelMove rax <- rsi
v72 <- BinaryInt64Op(+ [tr], v114 T{_Smi}, v125 T{_Smi}) [1, 576460752303423488] int64
v116 <- BoxInt64(v72) [1, 576460752303423488] T{_Smi}
StoreField(v60 T{_GrowableList} . GrowableObjectArray.length = v116, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v72 T{_Smi}, v114 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v75 <- LoadField(v60 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-9]
StoreIndexed:40([_List] v75, v114 T{_Smi}, v11 T{Iterable<dynamic>})
ParallelMove  goto:38 B5
B5
ParallelMove rdi <- fp[-12], rsi <- fp[-9], rdx <- C
StaticCall:42( writeAll<0> v16, v11, v18, using unchecked entrypoint)
ParallelMove rdi <- fp[-10] goto:46 B6
B6
v89 <- LoadField(v60 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v119 <- UnboxInt64([non-speculative], v89 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rcx <- rax
v52 <- BinaryInt64Op(- [tr], v119 T{_Smi}, v125 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:14(v119 T{_Smi}, v52) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi, rsi <- rcx
StaticCall:16( set:length<0> v60 T{_GrowableList}, v52 T{int}, using unchecked entrypoint)
ParallelMove rdi <- fp[-12], rsi <- fp[-11]
StaticCall:62( write<0> v16, v13, using unchecked entrypoint)
MoveArgument(sp[0] <- v16)
v20 <- StaticCall:64( toString<0> v16, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:66(v20)
B8
ParallelMove rbx <- rdx, fp[-9] <- rax, fp[-10] <- rdx
v30 <- LoadStaticField:4(toStringVisiting, CallsInitializer) T{_GrowableList}
ParallelMove rcx <- rax
v84 <- LoadField(v30 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v122 <- UnboxInt64([non-speculative], v84 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rdx <- rax
v37 <- BinaryInt64Op(- [tr], v122 T{_Smi}, v125 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rax <- rax, rbx <- rdx
GenericCheckBound:14(v122 T{_Smi}, v37) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rcx, rsi <- rdx
StaticCall:16( set:length<0> v30 T{_GrowableList}, v37 T{int}, using unchecked entrypoint)
ParallelMove rax <- fp[-9], rbx <- fp[-10]
ReThrow:60(v7, v8)
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v3 <- StaticCall:10( listToString<0> v2, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:12(v3)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v3 <- StaticCall:10( setToString<0> v2, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:12(v3)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi, rsi <- C, rdx <- C
v5 <- StaticCall:10( iterableToFullString<0> v2, v3, v4, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v3 <- StaticCall:10( mapToString<0> v2, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:12(v3)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- AllocateObject:10(cls=StringBuffer) T{StringBuffer}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
MoveArgument(sp[0] <- v4)
ParallelMove rdi <- rax
StaticCall:12( StringBuffer.<0> v3, v4)
ParallelMove rax <- fp[2]
v91 <- LoadField(v2 T{_Record} . Record.shape {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rcx
v93 <- BinarySmiOp:10(& [-o], v91, v94 T{_Smi}) [0, 65535] T{_Smi}
v99 <- LoadThread() untagged
v100 <- LoadField(v99 . Thread.isolate_group {final}) untagged
v101 <- LoadField(v100 . IsolateGroup.object_store {final}) untagged
v102 <- LoadField(v101 . ObjectStore.record_field_names) T{_List?}
ParallelMove rcx <- rcx
v105 <- BinarySmiOp:10(>> [-o], v91 T{_Smi}, v109 T{_Smi}) [0, 70368744177663] T{_Smi}
ParallelMove rcx <- rcx
v107 <- BinarySmiOp:12(& [-o], v105, v110 T{_Smi}) [0, 70368744177663] T{_Smi}
v108 <- LoadIndexed([_List] v102, v107) T{*?}
ParallelMove fp[-6] <- rbx
v115 <- LoadField(v108 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v178 <- UnboxInt64([non-speculative], v93) [0, 65535] int64
ParallelMove fp[-5] <- rdx
ParallelMove rcx <- rcx
v179 <- UnboxInt64([non-speculative], v115 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-4] <- rcx
ParallelMove rsi <- rdx
v8 <- BinaryInt64Op(- [tr], v178 T{_Smi}, v179 T{_Smi}) [-576460752303423487, 65535] int64
ParallelMove fp[-3] <- rsi
ParallelMove r8 <- C goto:90 B11
B11
  Loop 0
ParallelMove fp[-2] <- r8
CheckStackOverflow:94(stack=0, loop=1)
Branch if RelationalOp(<, v10, v178 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
Branch if EqualityCompare(v10 != v188 T{_Smi}) T{bool} goto (34, 6)
B34
  Loop 0
ParallelMove rdi <- fp[-1]
StaticCall:26( _consumeBuffer@0150898<0> v3 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-1], rsi <- C
StaticCall:28( _addPart@0150898<0> v3 T{StringBuffer}, v24 T{_OneByteString}, using unchecked entrypoint)
ParallelMove  goto:52 B7
B6
B7
  Loop 0
Branch if RelationalOp(>=, v10, v8) T{bool} goto (8, 9)
B8
  Loop 0
ParallelMove rsi <- fp[-6]
ParallelMove rdi <- rdx
v21 <- BinaryInt64Op(- [tr], v10, v8) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-4], rbx <- rdi
GenericCheckBound:68(v179 T{_Smi}, v21) [-9223372036854775808, 9223372036854775807] int64
v189 <- LoadIndexed:68([_List] v108 T{_List}, v21 T{int}) T{*?}
MoveArgument(sp[0] <- v189 T{Object??})
v54 <- StaticCall:10( _interpolateSingle@0150898<0> v189 T{Object??}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-7] <- rax
v136 <- LoadField(v54 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v136, v9 T{_Smi}) T{bool} goto (22, 23)
B22
B23
  Loop 0
ParallelMove rdi <- fp[-1]
StaticCall:26( _consumeBuffer@0150898<0> v3 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-1], rsi <- fp[-7]
StaticCall:28( _addPart@0150898<0> v3 T{StringBuffer}, v54, using unchecked entrypoint)
ParallelMove  goto:30 B29
B29
  Loop 0
ParallelMove rdi <- fp[-1]
StaticCall:26( _consumeBuffer@0150898<0> v3 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-1], rsi <- C
StaticCall:28( _addPart@0150898<0> v3 T{StringBuffer}, v23 T{_OneByteString}, using unchecked entrypoint)
ParallelMove  goto:78 B10
B9
B10
  Loop 0
v190 <- LoadIndexed([_Record] v2 T{_Record}, v10 T{int}) T{*?}
v208 <- LoadClassId(v190 T{Object??}) int64
MoveArgument(sp[0] <- v190 T{Object??})
ParallelMove rcx <- rbx
v18 <- DispatchTableCall( cid=v208 Object.toString<0>, v190 T{Object??}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-7] <- rax
v129 <- LoadField(v18 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v129, v9 T{_Smi}) T{bool} goto (17, 18)
B17
B18
  Loop 0
ParallelMove rdi <- fp[-1]
StaticCall:26( _consumeBuffer@0150898<0> v3 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-1], rsi <- fp[-7]
StaticCall:28( _addPart@0150898<0> v3 T{StringBuffer}, v18 T{String}, using unchecked entrypoint)
ParallelMove  goto:30 B19
B19
  Loop 0
ParallelMove rax <- fp[-2]
v20 <- BinaryInt64Op(+ [tr], v10, v191 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rax, rax <- fp[2], rsi <- fp[-3], rbx <- fp[-6], rdx <- fp[-5], rcx <- fp[-4] goto:92 B11
B4
ParallelMove rdi <- fp[-1], rsi <- C
StaticCall:96( write<0> v3, v13, using unchecked entrypoint)
MoveArgument(sp[0] <- v3)
v14 <- StaticCall:98( toString<0> v3, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:100(v14)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
ParallelMove rcx <- sp[1]
Branch if StrictCompare:12(===, v2 T{bool}, v3) goto (3, 4)
BoolTest
B3
ParallelMove rax <- C goto:22 B5
B4
ParallelMove rax <- C goto:24 B5
B5
ParallelMove rax <- rax
DartReturn:26(v5)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- C goto:48 B7
B7
  Loop 0
ParallelMove fp[-1] <- rbx
CheckStackOverflow:52(stack=0, loop=1)
Branch if RelationalOp(<, v4, v78 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
v51 <- LoadStaticField:4(_cache@0150898, CallsInitializer) T{_List}
ParallelMove rdx <- rax
ParallelMove fp[-3] <- rdx
v30 <- LoadField(v51 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rsi <- rax
v65 <- UnboxInt64([non-speculative], v30) [0, 576460752303423487] int64
ParallelMove rax <- rsi, rbx <- fp[-1], fp[-2] <- rsi
GenericCheckBound:26(v65 T{_Smi}, v4) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- fp[-1]
v79 <- LoadIndexed:26([_List] v51, v4 T{int}) T{*?}
ParallelMove rax <- rax, rcx <- fp[2]
Branch if StrictCompare:28(===, v79 T{*?}, v2, with number check) goto (5, 6)
B6
  Loop 0
ParallelMove rax <- fp[-1]
v24 <- BinaryInt64Op(+ [tr], v4 T{int}, v82 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rax goto:50 B7
B5
ParallelMove rcx <- fp[-3]
ParallelMove rdx <- fp[-1]
v26 <- BinaryInt64Op(+ [tr], v4 T{int}, v80 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-2], rbx <- rdx
GenericCheckBound:38(v65 T{_Smi}, v26) [-9223372036854775808, 9223372036854775807] int64
v81 <- LoadIndexed:38([_List] v51 T{_List}, v26 T{int}) T{*?}
ParallelMove rax <- rbx, rdx <- C, rcx <- C, fp[-4] <- rbx
t0 <- AssertAssignable:40(v81 T{*?}, v28, '', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-4]
DartReturn:42(v81 T{String})
B4
ParallelMove rax <- C, rcx <- fp[2]
Branch if StrictCompare:54(===, v8, v2, with number check) goto (8, 9)
B8
ParallelMove rax <- C
DartReturn:60(v21)
B9
MoveArgument(sp[0] <- v2)
v9 <- StaticCall:64( _toString@0150898<0> v2, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-3] <- rax
v42 <- LoadStaticField:4(_cache@0150898, CallsInitializer) T{_List}
ParallelMove rcx <- rax
v11 <- LoadStaticField(_cacheEvictIndex@0150898) [-9223372036854775808, 9223372036854775807] T{int}
v36 <- LoadField(v42 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rsi <- rsi
v69 <- UnboxInt64([non-speculative], v11) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi
v70 <- UnboxInt64([non-speculative], v36) [0, 576460752303423487] int64
ParallelMove rax <- rdi, rbx <- rsi
GenericCheckBound:68(v70 T{_Smi}, v69 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rcx, rax <- fp[2]
StoreIndexed:68([_List] v42, v69 T{int}, v2)
ParallelMove r8 <- rsi
v15 <- BinaryInt64Op(+ [tr], v69 T{int}, v80 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rdi, rbx <- r8
GenericCheckBound:74(v70 T{_Smi}, v15) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rcx, rax <- fp[-3]
StoreIndexed:74([_List] v42 T{_List}, v15 T{int}, v9)
ParallelMove rsi <- rsi
v96 <- IntConverter(int64->uint32[tr], v69 T{int}) uint32
ParallelMove rcx <- C
ParallelMove rsi <- rsi
v18 <- BinaryUint32Op(+ [tr], v96 T{int}, v97 T{_Smi}) [0, 4294967295] uint32
ParallelMove rcx <- C
ParallelMove rsi <- rsi
v20 <- BinaryUint32Op(& [tr], v18, v98 T{_Smi}) [0, 15] uint32
v76 <- BoxUint32(v20) [0, 15] T{_Smi}
ParallelMove rax <- rax
StoreStaticField(_cacheEvictIndex@0150898, v76)
ParallelMove rax <- fp[-3]
DartReturn:80(v9)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(Double_toString) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{String})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- C, r10 <- C
v4 <- CreateArray:6(v0, v2) T{_List}
ParallelMove rax <- rax
DartReturn:8(v4)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v171 <- UnboxInt64([non-speculative], v2) [-4611686018427387904, 4611686018427387903] int64
ParallelMove fp[-1] <- rax
Branch if RelationalOp(<, v171 T{_Smi}, v186 T{_Smi}) T{bool} goto (3, 6)
B3
Branch if RelationalOp(>, v171 T{_Smi}, v135) T{bool} goto (4, 7)
B4
ParallelMove rcx <- C
ParallelMove rdx <- rax
v39 <- BinaryInt64Op(+ [tr], v171 T{_Smi}, v187 T{_Smi}) [-4611686018427387805, 4611686018427388002] int64
ParallelMove rax <- C, rbx <- rdx
GenericCheckBound:34(v188 T{_Smi}, v39) [-9223372036854775808, 9223372036854775807] int64
v189 <- LoadIndexed:34([_List] v37, v39 T{int}) T{String}
ParallelMove rax <- rax
DartReturn:36(v189 T{String})
B7
B6
B5
Branch if RelationalOp(<, v171 T{_Smi}, v190 T{_Smi}) T{bool} goto (8, 9)
B8
ParallelMove rdi <- rax
v34 <- StaticCall:58( _negativeToString@0150898<0> v171 T{_Smi}, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove rax <- rax
DartReturn:60(v34)
B9
ParallelMove rdi <- rax
v8 <- StaticCall:64( _positiveBase10Length@0150898<0> v171 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove fp[-2] <- rcx
v176 <- BoxInt64(v8 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v176 T{int})
v112 <- StaticCall:10( allocateOneByteString<0> v176 T{int}, recognized_kind = AllocateOneByteString, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove rcx <- rax
ParallelMove rsi <- fp[-2]
v11 <- BinaryInt64Op(- [tr], v8, v122 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rsi, rbx <- fp[-1], rdi <- C, rsi <- C goto:106 B10
B10
  Loop 0
CheckStackOverflow:100(stack=0, loop=1)
ParallelMove rax <- rbx
v119 <- BinaryInt64Op(~/ [tr], v13 T{int}, v186 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax
ParallelMove r9 <- rdx
v120 <- BinaryInt64Op(* [tr], v119, v186 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v121 <- BinaryInt64Op(- [tr], v13 T{int}, v120) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- rbx
v123 <- ShiftInt64Op(<< [tr], v121 T{int}, v122) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- r9
v19 <- BinaryInt64Op(+ [tr], v123 T{int}, v122 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C, rbx <- r10
GenericCheckBound:78(v191 T{_Smi}, v19) [-9223372036854775808, 9223372036854775807] int64
v192 <- LoadIndexed:78([_List] v18, v19 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove r12 <- r12
v98 <- UnboxInt64:10([non-speculative], v192 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r12
StoreIndexed:10([_OneByteString] v112 T{_OneByteString}, v12 T{int}, v98, NoStoreBarrier)
ParallelMove r10 <- r8
v21 <- BinaryInt64Op(- [tr], v12, v122 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C, rbx <- r9
GenericCheckBound:84(v191 T{_Smi}, v123 T{int}) [-9223372036854775808, 9223372036854775807] int64
v193 <- LoadIndexed:84([_List] v18, v123 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove r12 <- r12
v107 <- UnboxInt64:10([non-speculative], v193 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r12
StoreIndexed:10([_OneByteString] v112 T{_OneByteString}, v21 T{int}, v107, NoStoreBarrier)
ParallelMove r8 <- r8
v23 <- BinaryInt64Op(- [tr], v12, v194 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v119 T{int}, v186 T{_Smi}) T{bool} goto (11, 12)
B11
  Loop 0
ParallelMove r8 <- r8, rbx <- rdx goto:104 B10
B12
Branch if RelationalOp(<, v119 T{int}, v195 T{_Smi}) T{bool} goto (13, 14)
B13
ParallelMove rax <- rdx
v33 <- BinaryInt64Op(+ [tr], v119 T{int}, v196 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
StoreIndexed:10([_OneByteString] v112 T{_OneByteString}, v23 T{int}, v33 T{int}, NoStoreBarrier)
ParallelMove  goto:142 B15
B14
ParallelMove rdx <- rdx
v124 <- ShiftInt64Op(<< [tr], v119 T{int}, v122) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rdx
v28 <- BinaryInt64Op(+ [tr], v124 T{int}, v122 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C, rbx <- rsi
GenericCheckBound:130(v191 T{_Smi}, v28) [-9223372036854775808, 9223372036854775807] int64
v197 <- LoadIndexed:130([_List] v18, v28 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove r9 <- r9
v64 <- UnboxInt64:10([non-speculative], v197 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r9
StoreIndexed:10([_OneByteString] v112 T{_OneByteString}, v23 T{int}, v64, NoStoreBarrier)
ParallelMove r8 <- r8
v30 <- BinaryInt64Op(- [tr], v23, v122 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C, rbx <- rdx
GenericCheckBound:136(v191 T{_Smi}, v124 T{int}) [-9223372036854775808, 9223372036854775807] int64
v198 <- LoadIndexed:136([_List] v18, v124 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rbx <- rbx
v73 <- UnboxInt64:10([non-speculative], v198 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rbx
StoreIndexed:10([_OneByteString] v112 T{_OneByteString}, v30 T{int}, v73, NoStoreBarrier)
ParallelMove  goto:144 B15
B15
ParallelMove rax <- rcx
DartReturn:146(v112 T{_OneByteString})
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi
CheckStackOverflow:8(stack=0, loop=0)
Branch if RelationalOp(<, v2, v89 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:20(v90 T{_Smi})
B4
Branch if RelationalOp(<, v2, v91 T{_Smi}) T{bool} goto (5, 6)
B5
ParallelMove rax <- C
DartReturn:34(v92 T{_Smi})
B6
Branch if RelationalOp(<, v2, v93 T{_Smi}) T{bool} goto (7, 12)
B7
Branch if RelationalOp(<, v2, v94 T{_Smi}) T{bool} goto (8, 9)
B8
ParallelMove rax <- C
DartReturn:58(v95 T{_Smi})
B9
Branch if RelationalOp(<, v2, v96 T{_Smi}) T{bool} goto (10, 11)
B10
ParallelMove rax <- C
DartReturn:72(v97 T{_Smi})
B11
ParallelMove rax <- C
DartReturn:76(v98 T{_Smi})
B12
Branch if RelationalOp(<, v2, v99 T{_Smi}) T{bool} goto (13, 14)
B13
ParallelMove rax <- C
DartReturn:90(v100 T{_Smi})
B14
Branch if RelationalOp(<, v2, v101 T{_Smi}) T{bool} goto (15, 16)
B15
ParallelMove rax <- C
DartReturn:104(v102 T{_Smi})
B16
ParallelMove rcx <- C
ParallelMove rax <- rax
v14 <- BinaryInt64Op(~/ [tr], v2, v101 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
Branch if RelationalOp(<, v14, v103 T{_Smi}) T{bool} goto (17, 18)
B17
ParallelMove rax <- C
DartReturn:120(v103 T{_Smi})
B18
Branch if RelationalOp(<, v14, v104 T{_Smi}) T{bool} goto (19, 20)
B19
ParallelMove rax <- C
DartReturn:134(v105 T{_Smi})
B20
ParallelMove rdi <- rax
v20 <- StaticCall:138( _positiveBase10Length@0150898<0> v14, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
ParallelMove rax <- rax
v21 <- BinaryInt64Op(+ [tr], v20, v102 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
DartReturn:142(v21)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax
v3 <- StaticCall:10( _negativeBase10Length@0150898<0> v2, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
ParallelMove rdx <- rcx, fp[-2] <- rcx
v5 <- BinaryInt64Op(+ [tr], v3, v126 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v146 <- BoxInt64(v5 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v146 T{int})
v105 <- StaticCall:10( allocateOneByteString<0> v146 T{int}, recognized_kind = AllocateOneByteString, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove rcx <- rax
StoreIndexed:10([_OneByteString] v105 T{_OneByteString}, v7 T{_Smi}, v116 T{_Smi}, NoStoreBarrier)
ParallelMove rbx <- fp[-1], r8 <- fp[-2], rdi <- C, rsi <- C goto:58 B3
B3
  Loop 0
CheckStackOverflow:52(stack=0, loop=1)
ParallelMove rax <- rbx
v123 <- BinaryInt64Op(~/ [tr], v9 T{int}, v156 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax
ParallelMove r9 <- rdx
v124 <- BinaryInt64Op(* [tr], v123, v156 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v125 <- BinaryInt64Op(- [tr], v9 T{int}, v124) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v14 <- UnaryInt64Op(unary-, v125 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- rbx
v127 <- ShiftInt64Op(<< [tr], v14, v126) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- r9
v18 <- BinaryInt64Op(+ [tr], v127 T{int}, v126 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C, rbx <- r10
GenericCheckBound:28(v157 T{_Smi}, v18) [-9223372036854775808, 9223372036854775807] int64
v158 <- LoadIndexed:28([_List] v17, v18 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove r12 <- r12
v91 <- UnboxInt64:10([non-speculative], v158 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r12
StoreIndexed:10([_OneByteString] v105 T{_OneByteString}, v10 T{int}, v91, NoStoreBarrier)
ParallelMove r10 <- r8
v20 <- BinaryInt64Op(- [tr], v10, v126 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C, rbx <- r9
GenericCheckBound:34(v157 T{_Smi}, v127 T{int}) [-9223372036854775808, 9223372036854775807] int64
v159 <- LoadIndexed:34([_List] v17, v127 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove r12 <- r12
v100 <- UnboxInt64:10([non-speculative], v159 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r12
StoreIndexed:10([_OneByteString] v105 T{_OneByteString}, v20 T{int}, v100, NoStoreBarrier)
ParallelMove r8 <- r8
v22 <- BinaryInt64Op(- [tr], v10, v160 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<=, v123 T{int}, v130) T{bool} goto (4, 5)
B4
  Loop 0
ParallelMove rbx <- rdx, r8 <- r8 goto:56 B3
B5
Branch if RelationalOp(>, v123 T{int}, v131) T{bool} goto (6, 7)
B6
ParallelMove rsi <- C
v36 <- BinaryInt64Op(- [tr], v161 T{_Smi}, v123 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rsi
StoreIndexed:10([_OneByteString] v105 T{_OneByteString}, v22 T{int}, v36 T{int}, NoStoreBarrier)
ParallelMove  goto:98 B8
B7
ParallelMove rdx <- rdx
v29 <- UnaryInt64Op(unary-, v123 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v128 <- ShiftInt64Op(<< [tr], v29, v126) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rdx
v31 <- BinaryInt64Op(+ [tr], v128 T{int}, v126 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C, rbx <- rsi
GenericCheckBound:86(v157 T{_Smi}, v31) [-9223372036854775808, 9223372036854775807] int64
v162 <- LoadIndexed:86([_List] v17, v31 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove r9 <- r9
v57 <- UnboxInt64:10([non-speculative], v162 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r9
StoreIndexed:10([_OneByteString] v105 T{_OneByteString}, v22 T{int}, v57, NoStoreBarrier)
ParallelMove r8 <- r8
v33 <- BinaryInt64Op(- [tr], v22, v126 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- C, rbx <- rdx
GenericCheckBound:92(v157 T{_Smi}, v128 T{int}) [-9223372036854775808, 9223372036854775807] int64
v163 <- LoadIndexed:92([_List] v17, v128 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rbx <- rbx
v66 <- UnboxInt64:10([non-speculative], v163 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rbx
StoreIndexed:10([_OneByteString] v105 T{_OneByteString}, v33 T{int}, v66, NoStoreBarrier)
ParallelMove  goto:100 B8
B8
ParallelMove rax <- rcx
DartReturn:102(v105 T{_OneByteString})
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi
CheckStackOverflow:8(stack=0, loop=0)
Branch if RelationalOp(>, v2, v42) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:22(v62 T{_Smi})
B4
Branch if RelationalOp(>, v2, v43) T{bool} goto (5, 6)
B5
ParallelMove rax <- C
DartReturn:38(v63 T{_Smi})
B6
Branch if RelationalOp(>, v2, v44) T{bool} goto (7, 12)
B7
Branch if RelationalOp(>, v2, v45) T{bool} goto (8, 9)
B8
ParallelMove rax <- C
DartReturn:66(v64 T{_Smi})
B9
Branch if RelationalOp(>, v2, v46) T{bool} goto (10, 11)
B10
ParallelMove rax <- C
DartReturn:82(v65 T{_Smi})
B11
ParallelMove rax <- C
DartReturn:86(v66 T{_Smi})
B12
Branch if RelationalOp(>, v2, v47) T{bool} goto (13, 14)
B13
ParallelMove rax <- C
DartReturn:102(v67 T{_Smi})
B14
Branch if RelationalOp(>, v2, v48) T{bool} goto (15, 16)
B15
ParallelMove rax <- C
DartReturn:118(v68 T{_Smi})
B16
ParallelMove rcx <- C
ParallelMove rax <- rax
v19 <- BinaryInt64Op(~/ [tr], v2, v69 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
Branch if RelationalOp(>, v19, v49) T{bool} goto (17, 18)
B17
ParallelMove rax <- C
DartReturn:136(v70 T{_Smi})
B18
Branch if RelationalOp(>, v19, v50) T{bool} goto (19, 20)
B19
ParallelMove rax <- C
DartReturn:152(v71 T{_Smi})
B20
ParallelMove rdi <- rax
v27 <- StaticCall:156( _negativeBase10Length@0150898<0> v19, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
ParallelMove rax <- rax
v28 <- BinaryInt64Op(+ [tr], v27, v68 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
DartReturn:160(v28)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(AbstractType_toString) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{String})
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(Object_toString) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{String})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v319 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v6 <- DispatchTableCall( cid=v319 Uri.scheme<0>, v3) T{String}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v6 T{_StringBase})
v157 <- StaticCall:10( get:isEmpty<0> v6 T{_StringBase}, recognized_kind = StringBaseIsEmpty, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax
v158 <- BooleanNegate(v157 T{bool}) T{bool}
Branch if StrictCompare:16(===, v158 T{bool}, v8) goto (3, 4)
BoolTest
B3
ParallelMove rax <- fp[-2]
DartReturn:22(v3)
B4
ParallelMove rdx <- fp[-1], rax <- fp[-2]
v9 <- LoadField(v2 . scheme {final}) T{String}
ParallelMove fp[-3] <- rsi
v320 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v10 <- DispatchTableCall( cid=v320 Uri.hasAuthority<0>, v3) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:32(===, v10 T{bool}, v8) goto (5, 6)
BoolTest
B5
ParallelMove rax <- fp[-2]
v321 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- fp[-3]
v88 <- DispatchTableCall( cid=v321 Uri.replace<0>, v3, v9) T{Uri}
ParallelMove rax <- rax
DartReturn:40(v88 T{_Uri})
B6
ParallelMove rdx <- fp[-1], rax <- fp[-2]
v11 <- LoadField(v2 . _userInfo@0150898 {final}) T{String}
ParallelMove fp[-6] <- rbx
v12 <- LoadField(v2 . _host@0150898 {final}) T{String??}
ParallelMove fp[-5] <- rsi
v13 <- LoadField(v2 . _port@0150898) T{int??}
ParallelMove fp[-4] <- r8
v322 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v14 <- DispatchTableCall( cid=v322 Uri.hasEmptyPath<0>, v3) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:54(===, v14 T{bool}, v8) goto (7, 11)
BoolTest
B7
ParallelMove rdx <- fp[-1], rax <- fp[-2]
v81 <- LoadField(v2 . path {final}) T{String}
ParallelMove fp[-7] <- rbx
v323 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v82 <- DispatchTableCall( cid=v323 Uri.hasQuery<0>, v3) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:66(===, v82 T{bool}, v8) goto (8, 9)
BoolTest
B8
ParallelMove rax <- fp[-2]
v324 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v87 <- DispatchTableCall( cid=v324 Uri.query<0>, v3) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:80 B10
B9
ParallelMove rax <- fp[-1]
v83 <- LoadField(v2 . _query@0150898 {final}) T{String??}
ParallelMove rax <- rcx goto:82 B10
B10
ParallelMove rbx <- fp[-7], rdx <- rax goto:338 B44
B11
ParallelMove rax <- fp[-1]
v15 <- LoadField(v2 . path {final}) T{String}
ParallelMove rdi <- rax, rsi <- rcx, fp[-7] <- rcx
v16 <- StaticCall:88( _packageNameEnd@0150898<0> v2, v15, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
Branch if RelationalOp(>, v16, v253 T{_Smi}) T{bool} goto (12, 16)
B12
ParallelMove rdx <- fp[-2]
v235 <- BoxInt64(v16) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v235 T{int})
ParallelMove rdi <- fp[-7], rsi <- C
v59 <- StaticCall:100( substring<0> v15, v253 T{_Smi}, v235 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdx <- rax, rax <- fp[-2]
ParallelMove fp[-8] <- rdx
v325 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v60 <- DispatchTableCall( cid=v325 Uri.hasAbsolutePath<0>, v3) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:106(===, v60 T{bool}, v8) goto (13, 14)
BoolTest
B13
ParallelMove rax <- fp[-2]
v326 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v68 <- DispatchTableCall( cid=v326 Uri.path<0>, v3) T{String}
ParallelMove rdi <- rax
v69 <- StaticCall:114( _removeDotSegments@0150898<0> v68 T{String}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v59)
MoveArgument(sp[0] <- v69)
v70 <- StaticCall:116( +<0> v59, v69, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:134 B15
B14
ParallelMove rax <- fp[-2], rcx <- fp[-8]
v152 <- LoadField(v59 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v236 <- UnboxInt64([non-speculative], v152 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdi <- fp[-7], rsi <- rdx
v62 <- StaticCall:122( substring<0> v15, v236 T{_Smi}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdx <- rax, rax <- fp[-2]
ParallelMove fp[-9] <- rdx
v327 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v63 <- DispatchTableCall( cid=v327 Uri.path<0>, v3) T{String}
ParallelMove rdi <- fp[-1], rsi <- fp[-9], rdx <- rax
v64 <- StaticCall:126( _mergePaths@0150898<0> v2, v62, v63 T{String}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdi <- rax
v65 <- StaticCall:128( _removeDotSegments@0150898<0> v64, result_type = T{!null}) T{String}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v59)
MoveArgument(sp[0] <- v65)
v66 <- StaticCall:130( +<0> v59, v65, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:136 B15
B15
ParallelMove rdx <- rax goto:312 B40
B16
ParallelMove rax <- fp[-2]
v328 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v19 <- DispatchTableCall( cid=v328 Uri.hasAbsolutePath<0>, v3) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:144(===, v19 T{bool}, v8) goto (17, 18)
BoolTest
B17
ParallelMove rax <- fp[-2]
v329 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v51 <- DispatchTableCall( cid=v329 Uri.path<0>, v3) T{String}
ParallelMove rdi <- rax
v52 <- StaticCall:152( _removeDotSegments@0150898<0> v51 T{String}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:306 B39
B18
MoveArgument(sp[0] <- v15 T{String})
v147 <- StaticCall:12( get:isEmpty<0> v15 T{String}, recognized_kind = StringBaseIsEmpty, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:160(===, v147 T{bool}, v8) goto (19, 26)
BoolTest
B19
ParallelMove rax <- fp[-5]
Branch if StrictCompare:12(===, v12 T{String??}, v0 T{Null?}) T{bool} goto (20, 24)
B20
MoveArgument(sp[0] <- v9 T{_StringBase})
v169 <- StaticCall:10( get:isEmpty<0> v9 T{_StringBase}, recognized_kind = StringBaseIsEmpty, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax
v170 <- BooleanNegate(v169 T{bool}) T{bool}
Branch if StrictCompare:180(!==, v170 T{bool}, v8) goto (21, 22)
BoolTest
B21
ParallelMove rax <- fp[-2]
v330 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v47 <- DispatchTableCall( cid=v330 Uri.path<0>, v3) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:196 B23
B22
ParallelMove rax <- fp[-2]
v331 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v44 <- DispatchTableCall( cid=v331 Uri.path<0>, v3) T{String}
ParallelMove rdi <- rax
v45 <- StaticCall:192( _removeDotSegments@0150898<0> v44 T{String}, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:198 B23
B23
B24
ParallelMove rax <- fp[-2]
v332 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v39 <- DispatchTableCall( cid=v332 Uri.path<0>, v3) T{String}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v38)
MoveArgument(sp[0] <- v39 T{String})
v40 <- StaticCall:204( +<0> v38, v39 T{String}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdi <- rax
v41 <- StaticCall:206( _removeDotSegments@0150898<0> v40, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:212 B25
B25
B26
ParallelMove rax <- fp[-2]
v333 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v22 <- DispatchTableCall( cid=v333 Uri.path<0>, v3) T{String}
ParallelMove rdi <- fp[-1], rsi <- fp[-7], rdx <- rax
v23 <- StaticCall:220( _mergePaths@0150898<0> v2, v15 T{String}, v22 T{String}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-7] <- rax
MoveArgument(sp[0] <- v9 T{_StringBase})
v163 <- StaticCall:10( get:isEmpty<0> v9 T{_StringBase}, recognized_kind = StringBaseIsEmpty, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax
v164 <- BooleanNegate(v163 T{bool}) T{bool}
Branch if StrictCompare:226(===, v164 T{bool}, v8) goto (30, 27)
BoolTest
B30
B27
ParallelMove rax <- fp[-5]
Branch if StrictCompare:12(!==, v12 T{String??}, v0 T{Null?}) T{bool} goto (31, 28)
B31
B28
ParallelMove rdi <- fp[-1]
v26 <- StaticCall:240( get:hasAbsolutePath<0> v2, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:244(===, v26 T{bool}, v8) goto (32, 33)
BoolTest
B32
B29
ParallelMove rdi <- fp[-7]
v33 <- StaticCall:264( _removeDotSegments@0150898<0> v23, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:294 B37
B33
ParallelMove rdi <- fp[-1]
v27 <- StaticCall:270( get:hasScheme<0> v2, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:274(===, v27 T{bool}, v8) goto (36, 35)
BoolTest
B36
ParallelMove rsi <- C goto:288 B34
B35
ParallelMove rsi <- C goto:284 B34
B34
ParallelMove rdi <- fp[-7], rsi <- rsi
v30 <- StaticCall:290( _normalizeRelativePath@0150898<0> v23, v29, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:296 B37
B37
B38
B39
ParallelMove rdx <- rax goto:314 B40
B40
ParallelMove fp[-1] <- rdx
v334 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v56 <- DispatchTableCall( cid=v334 Uri.hasQuery<0>, v3) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:320(===, v56 T{bool}, v8) goto (41, 42)
BoolTest
B41
ParallelMove rax <- fp[-2]
v335 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v58 <- DispatchTableCall( cid=v335 Uri.query<0>, v3) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:332 B43
B42
ParallelMove rax <- C goto:334 B43
B43
ParallelMove rbx <- fp[-1], rdx <- rax goto:340 B44
B44
ParallelMove fp[-1] <- rbx, fp[-7] <- rdx
v336 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
v77 <- DispatchTableCall( cid=v336 Uri.hasFragment<0>, v3) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:346(===, v77 T{bool}, v8) goto (45, 46)
BoolTest
B45
ParallelMove rdi <- fp[-2]
v337 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rdi
v80 <- DispatchTableCall( cid=v337 Uri.fragment<0>, v3) T{String}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:358 B47
B46
ParallelMove r8 <- C goto:360 B47
B47
ParallelMove fp[-2] <- r8
v79 <- AllocateObject:362(cls=_Uri, <not-aliased>) T{_Uri}
ParallelMove rax <- rax, rcx <- C
StoreField(v79 T{_Uri} . _text@0150898 = v108 T{Sentinel~}, NoStoreBarrier)
StoreField(v79 T{_Uri} . pathSegments = v108 T{Sentinel~}, NoStoreBarrier)
StoreField(v79 T{_Uri} . hashCode = v108 T{Sentinel~}, NoStoreBarrier)
ParallelMove rcx <- fp[-3]
StoreField(v79 T{_Uri} . scheme = v9 T{String}, NoStoreBarrier)
ParallelMove rcx <- fp[-6]
StoreField(v79 T{_Uri} . _userInfo@0150898 = v11 T{String}, NoStoreBarrier)
ParallelMove rcx <- fp[-5]
StoreField(v79 T{_Uri} . _host@0150898 = v12 T{String??}, NoStoreBarrier)
ParallelMove rcx <- fp[-4]
StoreField(v79 T{_Uri} . _port@0150898 = v13 T{int??}, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreField(v79 T{_Uri} . path = v72 T{String}, NoStoreBarrier)
ParallelMove rcx <- fp[-7]
StoreField(v79 T{_Uri} . _query@0150898 = v73 T{String??}, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreField(v79 T{_Uri} . _fragment@0150898 = v78 T{String?}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:366(v79)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rcx <- rsi, rdi <- rdx, fp[-5] <- rsi, fp[-6] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v118 <- LoadField:30(v4 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove fp[-4] <- rdx
ParallelMove rsi <- rdx
v188 <- UnboxInt64:30([non-speculative], v118 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-3] <- rsi
ParallelMove r9 <- C, r8 <- C goto:30 B4
B4
  Loop 1
ParallelMove fp[-1] <- r9, fp[-2] <- r8
CheckStackOverflow:28(stack=0, loop=1)
Branch if RelationalOp(<, v7 T{int}, v194 T{_Smi}) T{bool} goto (45, 43)
B43
  Loop 1
Branch if RelationalOp(>, v7 T{int}, v188 T{_Smi}) T{bool} goto (46, 48)
B48
  Loop 1
v187 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v4 T{_StringBase})
MoveArgument(sp[1] <- v187 T{int})
MoveArgument(sp[0] <- v8 T{_OneByteString})
v97 <- StaticCall:78( _substringMatches@0150898<0> v4 T{_StringBase}, v187 T{int}, v8 T{_OneByteString}, using unchecked entrypoint, recognized_kind = StringBaseSubstringMatches, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v97 T{bool}, v10) goto (3, 5)
BoolTest
B3
  Loop 1
ParallelMove rax <- fp[-2]
v44 <- BinaryInt64Op(+ [tr], v7, v195 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- fp[-1]
v45 <- BinaryInt64Op(+ [tr], v6, v196 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- rcx, r8 <- rax, rcx <- fp[-5], rdi <- fp[-6], rdx <- fp[-4], rsi <- fp[-3] goto:26 B4
B5
ParallelMove rax <- fp[-5]
ParallelMove rdi <- rax, rsi <- C
v12 <- StaticCall:34( lastIndexOf<0> v3, v11, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax, rcx <- fp[-5]
v69 <- LoadField:176(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v190 <- UnboxInt64:176([non-speculative], v69) [0, 2305843009213693951] int64
ParallelMove fp[-8] <- rdx
v71 <- LoadClassId:176(v3 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove fp[-7] <- r8
ParallelMove r10 <- fp[-1], r9 <- rax goto:176 B24
B24
  Loop 0
ParallelMove fp[-1] <- r10, fp[-3] <- r9
CheckStackOverflow:174(stack=0, loop=1)
Branch if RelationalOp(>, v14, v194 T{_Smi}) T{bool} goto (6, 26)
B6
  Loop 0
Branch if RelationalOp(>, v13, v194 T{_Smi}) T{bool} goto (23, 27)
B23
  Loop 0
ParallelMove rsi <- r9
v28 <- BinaryInt64Op(- [tr], v14, v196 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v189 <- BoxInt64(v28) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v189 T{int})
ParallelMove rdi <- rcx, rsi <- C
v29 <- StaticCall:56( lastIndexOf<0> v3, v11, v189 T{int}, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
Branch if RelationalOp(<, v29, v194 T{_Smi}) T{bool} goto (7, 9)
B9
  Loop 0
ParallelMove rax <- fp[-3]
v31 <- BinaryInt64Op(- [tr], v14, v29) [-9223372036854775808, 9223372036854775807] int64
v33 <- EqualityCompare(v31 == v197 T{_Smi}) T{bool}
Branch if StrictCompare:80(===, v33, v10) goto (12, 10)
BoolTest
B12
B10
  Loop 0
Branch if EqualityCompare(v31 == v195 T{_Smi}) T{bool} goto (13, 20)
B13
B11
  Loop 0
ParallelMove rdi <- rcx
v36 <- BinaryInt64Op(+ [tr], v29, v196 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-8], rbx <- rdi
t0 <- GenericCheckBound:96(v190 T{_Smi}, v36 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:96(===, v71, v62 T{_Smi}) goto (36, 37)
B36
  Loop 0
ParallelMove r8 <- fp[-5]
v75 <- LoadIndexed([_OneByteString] v3 T{_OneByteString}, v36 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:96 B35
B37
  Loop 0
ParallelMove r8 <- fp[-5]
v73 <- LoadIndexed([_TwoByteString] v3 T{_StringBase}, v36 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:96 B35
B35
  Loop 0
Branch if EqualityCompare(v74 T{_Smi} == v198 T{_Smi}) T{bool} goto (15, 21)
B15
  Loop 0
Branch if StrictCompare:120(===, v33 T{bool}, v10) goto (17, 14)
BoolTest
B14
  Loop 0
ParallelMove rdx <- rcx
v41 <- BinaryInt64Op(+ [tr], v29, v197 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-8], rbx <- rdx
t0 <- GenericCheckBound:126(v190 T{_Smi}, v41 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:126(===, v71 T{_Smi}, v62 T{_Smi}) goto (31, 32)
B31
  Loop 0
v58 <- LoadIndexed([_OneByteString] v3 T{_OneByteString}, v41 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:126 B30
B32
  Loop 0
v56 <- LoadIndexed([_TwoByteString] v3 T{_StringBase}, v41 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:126 B30
B30
  Loop 0
Branch if EqualityCompare(v57 T{_Smi} == v198 T{_Smi}) T{bool} goto (18, 22)
B22
B18
B17
B16
B21
B20
  Loop 0
ParallelMove r8 <- fp[-5], rsi <- fp[-7]
ParallelMove  goto:156 B19
B19
  Loop 0
ParallelMove rax <- fp[-1]
v35 <- BinaryInt64Op(- [tr], v13, v196 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- rax, r9 <- rcx, rcx <- r8, r8 <- rsi, rdx <- fp[-8] goto:172 B24
B7
ParallelMove r8 <- fp[-5]
ParallelMove  goto:70 B8
B27
ParallelMove r8 <- rcx
ParallelMove  goto:186 B25
B26
ParallelMove r8 <- rcx
ParallelMove  goto:182 B25
B25
B8
ParallelMove rax <- fp[-3]
v21 <- BinaryInt64Op(+ [tr], v14, v196 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- rax
ParallelMove rcx <- fp[-1]
v23 <- BinaryInt64Op(* [tr], v13, v195 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-2]
v24 <- BinaryInt64Op(- [tr], v7, v23) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-6], rsi <- rdx
v25 <- StaticCall:196( substring<0> v4, v24, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdi <- fp[-5], rsi <- fp[-3], rdx <- C, rbx <- rax
v26 <- StaticCall:198( replaceRange<0> v3, v21, v0, v25, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:200(v26)
B46
B45
B44
v186 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-5] <- rax
v98 <- AllocateObject:58(cls=RangeError) T{RangeError}
ParallelMove rax <- rax
ParallelMove fp[-6] <- rax
MoveArgument(sp[3] <- v98)
MoveArgument(sp[2] <- v186 T{int})
MoveArgument(sp[1] <- v5 T{_Smi})
MoveArgument(sp[0] <- v118 T{_Smi})
StaticCall:62( RangeError.range<0> v98, v186 T{int}, v5 T{_Smi}, v118 T{_Smi})
ParallelMove rax <- fp[-6]
Throw:64(v98)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rsi <- rdi, rdi <- rsi, fp[-2] <- rdi, fp[-3] <- rsi
v6 <- LoadField(v4 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v8 <- BinarySmiOp:4(- [tr], v6, v7) [-2, 4611686018427387901] T{_Smi}
Branch if RelationalOp:6(<=, v9, v8) T{bool} goto (2, 3)
B2
v38 <- LoadIndexedUnsafe(rbp[v8 T{_Smi} + 8]) T{int??}
ParallelMove rax <- rcx goto:20 B5
B3
ParallelMove rax <- C goto:18 B5
B5
ParallelMove fp[-4] <- rax
CheckStackOverflow:26(stack=0, loop=0)
Branch if StrictCompare:28(===, v12, v0) goto (6, 7)
B6
v69 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rax
v107 <- UnboxInt64([non-speculative], v69 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rax <- rax
v153 <- UnboxInt64([non-speculative], v69) int64
ParallelMove rcx <- rcx, rax <- rax goto:80 B13
B7
ParallelMove rcx <- rax
v109 <- UnboxInt64([non-speculative], v12 T{int?}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v109 T{int?}, v123 T{_Smi}) T{bool} goto (10, 8)
B8
v64 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rbx <- rdx
v111 <- UnboxInt64([non-speculative], v64 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(>, v109 T{int?}, v111 T{_Smi}) T{bool} goto (11, 12)
B12
ParallelMove rdx <- rdx
v154 <- UnboxInt64([non-speculative], v64) int64
ParallelMove rcx <- rcx, rax <- rdx goto:82 B13
B13
v43 <- LoadClassId(v3) [78, 94] int64
Branch if TestRange(v43 in [93-94]) T{bool} goto (14, 23)
B14
v54 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v113 <- UnboxInt64([non-speculative], v54 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rax <- rax
v29 <- BinaryInt64Op(- [tr], v115 T{_Smi}, v113 T{_Smi}) [-2305843009213693951, 2305843009213693951] int64
Branch if RelationalOp(<, v29, v19 T{int?}) T{bool} goto (15, 16)
B15
B16
ParallelMove rax <- rcx goto:116 B17
B17
ParallelMove rcx <- rax goto:148 B22
B22
  Loop 1
ParallelMove fp[-1] <- rcx
CheckStackOverflow:152(stack=0, loop=1)
Branch if RelationalOp(>=, v32, v123 T{_Smi}) T{bool} goto (18, 19)
B18
  Loop 1
v114 <- BoxInt64(v32) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v114 T{int?})
MoveArgument(sp[0] <- v3 T{String})
v35 <- StaticCall:132( _substringMatches@0150898<0> v2, v114 T{int?}, v3 T{String}, using unchecked entrypoint, recognized_kind = StringBaseSubstringMatches, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:136(===, v35 T{bool}, v11) goto (20, 21)
BoolTest
B21
  Loop 1
ParallelMove rax <- fp[-1]
v36 <- BinaryInt64Op(- [tr], v32, v124 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax, rsi <- fp[-2], rdi <- fp[-3] goto:150 B22
B20
ParallelMove rax <- fp[-1]
DartReturn:142(v32)
B19
ParallelMove rax <- C
DartReturn:156(v86)
B23
ParallelMove rbx <- rcx goto:188 B28
B28
  Loop 0
ParallelMove fp[-1] <- rbx
CheckStackOverflow:192(stack=0, loop=1)
Branch if RelationalOp(>=, v22, v123 T{_Smi}) T{bool} goto (24, 25)
B24
  Loop 0
v156 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- fp[-2], rdx <- rbx
v25 <- DispatchTableCall( cid=v156 Pattern.matchAsPrefix<0>, v3, v2, v22) T{Match??}
ParallelMove rax <- rax
Branch if StrictCompare:176(!==, v25 T{Match??}, v0) goto (26, 27)
B27
  Loop 0
ParallelMove rax <- fp[-1]
v26 <- BinaryInt64Op(- [tr], v22, v124 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rax goto:190 B28
B26
ParallelMove rax <- fp[-1]
DartReturn:182(v22)
B25
ParallelMove rax <- C
DartReturn:196(v86)
B10
B11
B9
v59 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove fp[-3] <- rdx
v17 <- AllocateObject:68(cls=RangeError) T{RangeError}
ParallelMove rax <- rax
ParallelMove fp[-2] <- rax
MoveArgument(sp[3] <- v17)
MoveArgument(sp[2] <- v12 T{int?})
MoveArgument(sp[1] <- v13)
MoveArgument(sp[0] <- v59 T{_Smi})
StaticCall:72( RangeError.range<0> v17, v12 T{int?}, v13, v59 T{_Smi})
ParallelMove rax <- fp[-2]
Throw:74(v17)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rcx, rsi <- C
v5 <- StaticCall:10( isScheme<0> v2, v4, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v5 T{bool}, v6) goto (3, 6)
BoolTest
B3
ParallelMove rcx <- fp[-1]
v79 <- LoadField(v2 T{_Uri} . _host@0150898 {final}) T{String??}
Branch if StrictCompare:12(===, v79, v0 T{Null?}) T{bool} goto (4, 7)
B4
ParallelMove rcx <- fp[-2]
v17 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v136 <- UnboxInt64:100([non-speculative], v17 T{_Smi}) [0, 2305843009213693951] int64
v90 <- LoadClassId:100(v3 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove rdi <- C, rsi <- C goto:100 B24
B24
  Loop 0
CheckStackOverflow:104(stack=0, loop=1)
Branch if RelationalOp(<, v27, v136 T{_Smi}) T{bool} goto (12, 13)
B12
  Loop 0
Branch if StrictCompare:24(===, v90, v98 T{_Smi}) goto (31, 32)
B31
  Loop 0
v94 <- LoadIndexed([_OneByteString] v3 T{_OneByteString}, v27 T{int}) [0, 255] int64
ParallelMove r8 <- r8 goto:24 B30
B32
  Loop 0
v92 <- LoadIndexed([_TwoByteString] v3 T{_StringBase}, v27 T{int}) [0, 65535] int64
ParallelMove r8 <- r8 goto:24 B30
B30
  Loop 0
Branch if EqualityCompare(v93 T{_Smi} == v142 T{_Smi}) T{bool} goto (14, 18)
B18
  Loop 0
Branch if EqualityCompare(v93 T{_Smi} == v143 T{_Smi}) T{bool} goto (21, 19)
B19
  Loop 0
Branch if EqualityCompare(v93 T{_Smi} == v144 T{_Smi}) T{bool} goto (22, 23)
B23
  Loop 0
ParallelMove r8 <- r8
v41 <- BinaryInt64Op(^ [tr], v93 T{_Smi}, v145 T{_Smi}) [0, 65535] int64
ParallelMove rdi <- rdi
v42 <- BinaryInt64Op(| [tr], v26, v41) [0, 65535] int64
ParallelMove rsi <- rsi
v43 <- BinaryInt64Op(+ [tr], v27 T{int}, v146 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi, rsi <- rsi goto:102 B24
B22
B21
B20
ParallelMove rax <- C goto:90 B25
B14
Branch if EqualityCompare(v26 != v141 T{_Smi}) T{bool} goto (15, 16)
B15
ParallelMove rcx <- rsi goto:52 B17
B16
ParallelMove rcx <- C goto:54 B17
B17
ParallelMove rax <- rcx goto:56 B25
B13
ParallelMove rax <- C goto:108 B25
B25
ParallelMove rax <- rax
DartReturn:34(v74 T{int})
B7
B6
B5
ParallelMove rax <- C
DartReturn:48(v73)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi, fp[-1] <- rdi
v13 <- LoadIndexed([_List] v4, v11 T{_Smi}) T{*?}
Branch if StrictCompare:16(===, v13, v14) goto (2, 3)
B2
ParallelMove rcx <- C goto:26 B4
B3
ParallelMove rcx <- C goto:28 B4
B4
v207 <- BoxInt64(v15) [0, 1] T{_Smi}
ParallelMove rbx <- rdx
v158 <- BinarySmiOp:30(<< [tr], v207 T{_Smi}, v75) [0, 2] T{_Smi}
ParallelMove rbx <- rbx
v17 <- BinarySmiOp:38(+ [tr], v158 T{_Smi}, v11) [4, 6] T{_Smi}
v18 <- LoadIndexed([_List] v4, v17) T{*?}
Branch if StrictCompare:40(===, v18, v19) goto (5, 6)
B5
ParallelMove rdx <- rdx
v96 <- BinarySmiOp:36(+ [tr], v207 T{_Smi}, v75) [1, 2] T{_Smi}
ParallelMove rdx <- rdx
v209 <- UnboxInt64([non-speculative], v96) [1, 2] int64
ParallelMove rcx <- rdx goto:50 B7
B6
B7
v210 <- BoxInt64(v20) [0, 2] T{_Smi}
ParallelMove rbx <- rdx
v159 <- BinarySmiOp:54(<< [tr], v210 T{_Smi}, v75) [0, 4] T{_Smi}
ParallelMove rbx <- rbx
v22 <- BinarySmiOp:62(+ [tr], v159 T{_Smi}, v11) [4, 8] T{_Smi}
v23 <- LoadIndexed([_List] v4, v22) T{*?}
Branch if StrictCompare:64(===, v23, v24) goto (8, 9)
B8
ParallelMove rdx <- rdx
v91 <- BinarySmiOp:60(+ [tr], v210 T{_Smi}, v75) [1, 3] T{_Smi}
ParallelMove rdx <- rdx
v212 <- UnboxInt64([non-speculative], v91) [1, 3] int64
ParallelMove rcx <- rdx goto:74 B10
B9
B10
v213 <- BoxInt64(v25) [0, 3] T{_Smi}
ParallelMove rbx <- rdx
v160 <- BinarySmiOp:78(<< [tr], v213 T{_Smi}, v75) [0, 6] T{_Smi}
ParallelMove rbx <- rbx
v27 <- BinarySmiOp:86(+ [tr], v160 T{_Smi}, v11) [4, 10] T{_Smi}
v28 <- LoadIndexed([_List] v4, v27) T{*?}
Branch if StrictCompare:88(===, v28, v29) goto (11, 12)
B11
ParallelMove rdx <- rdx
v86 <- BinarySmiOp:84(+ [tr], v213 T{_Smi}, v75) [1, 4] T{_Smi}
ParallelMove rdx <- rdx
v215 <- UnboxInt64([non-speculative], v86) [1, 4] int64
ParallelMove rcx <- rdx goto:98 B13
B12
B13
v216 <- BoxInt64(v30) [0, 4] T{_Smi}
ParallelMove rdx <- rdx
v161 <- BinarySmiOp:102(<< [tr], v216 T{_Smi}, v75) [0, 8] T{_Smi}
ParallelMove rdx <- rdx
v32 <- BinarySmiOp:110(+ [tr], v161 T{_Smi}, v11) [4, 12] T{_Smi}
v33 <- LoadIndexed([_List] v4, v32) T{*?}
Branch if StrictCompare:112(===, v33, v34) goto (14, 15)
B14
B15
B20
CheckStackOverflow:154(stack=0, loop=0)
v148 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v221 <- UnboxInt64([non-speculative], v148 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdi <- rdi, rsi <- rcx
v42 <- StaticCall:158( _makeScheme@0150898<0> v3, v221 T{_Smi}, result_type = T{!null}) T{String}
ParallelMove rdx <- rax, rax <- fp[-1]
ParallelMove fp[-2] <- rdx
v43 <- LoadField(v2 . scheme {final}) T{String}
v269 <- LoadClassId(<non-smi> v42) int64
MoveArgument(sp[1] <- v42)
MoveArgument(sp[0] <- v43)
ParallelMove rcx <- rbx
v44 <- DispatchTableCall( cid=v269 String.==<0>, v42, v43) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax
v45 <- BooleanNegate(v44 T{bool}) T{bool}
ParallelMove rsi <- fp[-2], fp[-3] <- rax
v270 <- LoadClassId(<non-smi> v42) int64
MoveArgument(sp[1] <- v42)
MoveArgument(sp[0] <- v46)
ParallelMove rcx <- rcx
v47 <- DispatchTableCall( cid=v270 String.==<0>, v42, v46) T{bool}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-5] <- rcx
v48 <- LoadField(v2 . _userInfo@0150898 {final}) T{String}
ParallelMove fp[-4] <- rdx
v49 <- LoadField(v2 . _port@0150898) T{int??}
ParallelMove rbx <- fp[-3]
Branch if StrictCompare:174(===, v45 T{bool}, v50) goto (21, 22)
BoolTest
B21
ParallelMove rdi <- rdi, rsi <- fp[-2]
v69 <- StaticCall:180( _makePort@0150898<0> v49, v42, result_type = T{int??}) T{int??}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:186 B23
B22
ParallelMove rcx <- rdi goto:188 B23
B23
ParallelMove fp[-7] <- rcx
v141 <- LoadField(v2 T{_Uri} . _host@0150898 {final}) T{String??}
Branch if StrictCompare:12(!==, v141, v0 T{Null?}) T{bool} goto (24, 25)
B24
ParallelMove r8 <- rdx, rbx <- fp[-5], rdx <- fp[-4] goto:250 B34
B25
ParallelMove rdx <- fp[-4]
v153 <- LoadField(v48 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(!==, v153, v9 T{_Smi}) T{bool} goto (29, 26)
B29
ParallelMove rbx <- fp[-5] goto:230 B28
B26
Branch if StrictCompare:212(!==, v51, v0) goto (30, 27)
B30
ParallelMove rbx <- fp[-5] goto:234 B28
B27
ParallelMove rbx <- fp[-5]
Branch if StrictCompare:220(===, v47 T{bool}, v50) goto (31, 32)
BoolTest
B31
B28
ParallelMove rsi <- C goto:244 B33
B32
ParallelMove rsi <- C goto:246 B33
B33
ParallelMove r8 <- rsi goto:252 B34
B34
ParallelMove fp[-6] <- r8
v59 <- LoadField(v2 . path {final}) T{String}
ParallelMove fp[-3] <- r9
Branch if StrictCompare:262(===, v47 T{bool}, v50) goto (38, 36)
BoolTest
B38
B36
Branch if StrictCompare:254(!==, v56, v0) T{bool} goto (35, 42)
B35
v128 <- LoadField(v59 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(!==, v128, v9 T{_Smi}) T{bool} goto (39, 43)
B39
B37
ParallelMove rdi <- r9, rsi <- C
v66 <- StaticCall:284( startsWith<0> v59, v65, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:288(!==, v66 T{bool}, v50) goto (40, 44)
BoolTest
B40
MoveArgument(sp[1] <- v65)
MoveArgument(sp[0] <- v59)
v67 <- StaticCall:304( +<0> v65, v59, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rdi <- rax goto:322 B45
B44
B43
B42
B41
ParallelMove rdi <- fp[-3] goto:324 B45
B45
ParallelMove fp[-8] <- rdi
v62 <- LoadField(v2 . _query@0150898 {final}) T{String??}
ParallelMove fp[-5] <- r8
v63 <- LoadField(v2 . _fragment@0150898 {final}) T{String??}
ParallelMove fp[-3] <- r9
v64 <- AllocateObject:330(cls=_Uri, <not-aliased>) T{_Uri}
ParallelMove rax <- rax, rcx <- C
StoreField(v64 T{_Uri} . _text@0150898 = v123 T{Sentinel~}, NoStoreBarrier)
StoreField(v64 T{_Uri} . pathSegments = v123 T{Sentinel~}, NoStoreBarrier)
StoreField(v64 T{_Uri} . hashCode = v123 T{Sentinel~}, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreField(v64 T{_Uri} . scheme = v42 T{String}, NoStoreBarrier)
ParallelMove rcx <- fp[-4]
StoreField(v64 T{_Uri} . _userInfo@0150898 = v48 T{String}, NoStoreBarrier)
ParallelMove rcx <- fp[-6]
StoreField(v64 T{_Uri} . _host@0150898 = v56 T{String??}, NoStoreBarrier)
ParallelMove rcx <- fp[-7]
StoreField(v64 T{_Uri} . _port@0150898 = v51 T{int??}, NoStoreBarrier)
ParallelMove rcx <- fp[-8]
StoreField(v64 T{_Uri} . path = v61 T{String}, NoStoreBarrier)
ParallelMove rcx <- fp[-5]
StoreField(v64 T{_Uri} . _query@0150898 = v62 T{String??}, NoStoreBarrier)
ParallelMove rcx <- fp[-3]
StoreField(v64 T{_Uri} . _fragment@0150898 = v63 T{String??}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:334(v64)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
Branch if StrictCompare:10(!==, v2, v0) goto (3, 6)
B3
ParallelMove rdi <- rdi
v4 <- StaticCall:14( _defaultPort@0150898<0> v3, result_type = T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rax <- rax
v15 <- BoxInt64(v4) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- fp[-1]
Branch if StrictCompare(===, v2 T{int?}, v15 T{_Smi}) T{bool} goto (4, 7)
B4
ParallelMove rax <- C
DartReturn:28(v0)
B7
B6
B5
ParallelMove rax <- rax
DartReturn:40(v2)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v33 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v4 <- DispatchTableCall( cid=v33 String.==<0>, v2, v3) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v4 T{bool}, v5) goto (3, 4)
BoolTest
B3
ParallelMove rax <- C
DartReturn:20(v22 T{_Smi})
B4
ParallelMove rax <- fp[-1]
v34 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v6)
ParallelMove rcx <- rcx
v7 <- DispatchTableCall( cid=v34 String.==<0>, v2, v6) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:28(===, v7 T{bool}, v5) goto (5, 6)
BoolTest
B5
ParallelMove rax <- C
DartReturn:34(v23 T{_Smi})
B6
ParallelMove rax <- C
DartReturn:38(v24 T{_Smi})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi, fp[-1] <- rdi
v13 <- LoadIndexed([_List] v4, v11 T{_Smi}) T{*?}
Branch if StrictCompare:16(===, v13, v14) goto (2, 3)
B2
ParallelMove rcx <- C goto:26 B4
B3
ParallelMove rcx <- C goto:28 B4
B4
v276 <- BoxInt64(v15) [0, 1] T{_Smi}
ParallelMove rbx <- rdx
v207 <- BinarySmiOp:30(<< [tr], v276 T{_Smi}, v80) [0, 2] T{_Smi}
ParallelMove rbx <- rbx
v17 <- BinarySmiOp:38(+ [tr], v207 T{_Smi}, v11) [4, 6] T{_Smi}
v18 <- LoadIndexed([_List] v4, v17) T{*?}
Branch if StrictCompare:40(===, v18, v19) goto (5, 6)
B5
ParallelMove rdx <- rdx
v128 <- BinarySmiOp:36(+ [tr], v276 T{_Smi}, v80) [1, 2] T{_Smi}
ParallelMove rdx <- rdx
v278 <- UnboxInt64([non-speculative], v128) [1, 2] int64
ParallelMove rcx <- rdx goto:50 B7
B6
B7
v279 <- BoxInt64(v20) [0, 2] T{_Smi}
ParallelMove rbx <- rdx
v208 <- BinarySmiOp:54(<< [tr], v279 T{_Smi}, v80) [0, 4] T{_Smi}
ParallelMove rbx <- rbx
v22 <- BinarySmiOp:62(+ [tr], v208 T{_Smi}, v11) [4, 8] T{_Smi}
v23 <- LoadIndexed([_List] v4, v22) T{*?}
Branch if StrictCompare:64(===, v23, v24) goto (8, 9)
B8
ParallelMove rdx <- rdx
v123 <- BinarySmiOp:60(+ [tr], v279 T{_Smi}, v80) [1, 3] T{_Smi}
ParallelMove rdx <- rdx
v281 <- UnboxInt64([non-speculative], v123) [1, 3] int64
ParallelMove rcx <- rdx goto:74 B10
B9
B10
v282 <- BoxInt64(v25) [0, 3] T{_Smi}
ParallelMove rbx <- rdx
v209 <- BinarySmiOp:78(<< [tr], v282 T{_Smi}, v80) [0, 6] T{_Smi}
ParallelMove rbx <- rbx
v27 <- BinarySmiOp:86(+ [tr], v209 T{_Smi}, v11) [4, 10] T{_Smi}
v28 <- LoadIndexed([_List] v4, v27) T{*?}
Branch if StrictCompare:88(===, v28, v29) goto (11, 12)
B11
ParallelMove rdx <- rdx
v118 <- BinarySmiOp:84(+ [tr], v282 T{_Smi}, v80) [1, 4] T{_Smi}
ParallelMove rdx <- rdx
v284 <- UnboxInt64([non-speculative], v118) [1, 4] int64
ParallelMove rcx <- rdx goto:98 B13
B12
B13
v285 <- BoxInt64(v30) [0, 4] T{_Smi}
ParallelMove rdx <- rdx
v210 <- BinarySmiOp:102(<< [tr], v285 T{_Smi}, v80) [0, 8] T{_Smi}
ParallelMove rdx <- rdx
v32 <- BinarySmiOp:110(+ [tr], v210 T{_Smi}, v11) [4, 12] T{_Smi}
v33 <- LoadIndexed([_List] v4, v32) T{*?}
Branch if StrictCompare:112(===, v33, v34) goto (14, 15)
B14
B15
B20
CheckStackOverflow:154(stack=0, loop=0)
v197 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v290 <- UnboxInt64([non-speculative], v197 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdi <- rdi, rsi <- rcx
v42 <- StaticCall:158( _makeScheme@0150898<0> v3, v290 T{_Smi}, result_type = T{!null}) T{String}
ParallelMove rdi <- fp[-1], rsi <- rax, rax <- rax
ParallelMove fp[-2] <- rax
v43 <- StaticCall:160( _isScheme@0150898<0> v2, v42, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax
v44 <- BooleanNegate(v43 T{bool}) T{bool}
ParallelMove rsi <- fp[-2], fp[-3] <- rax
v360 <- LoadClassId(<non-smi> v42) int64
MoveArgument(sp[1] <- v42)
MoveArgument(sp[0] <- v45)
ParallelMove rcx <- rcx
v46 <- DispatchTableCall( cid=v360 String.==<0>, v42, v45) T{bool}
ParallelMove rdx <- rax, rcx <- fp[-1]
ParallelMove fp[-6] <- rdx
v47 <- LoadField(v2 . _hostStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-5] <- r8
v48 <- RelationalOp(>, v47, v305 T{_Smi}) T{bool}
ParallelMove fp[-4] <- r9
Branch if StrictCompare:172(===, v48, v49) goto (21, 22)
BoolTest
B21
v97 <- LoadField(v2 . _uri@0150898 {final}) T{String}
v98 <- LoadField(v2 . _schemeEnd@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rax
v100 <- BinaryInt64Op(+ [tr], v98, v306 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v291 <- BoxInt64(v47 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v291 T{int})
ParallelMove rdi <- rdi, rsi <- rsi
v102 <- StaticCall:186( substring<0> v97, v100, v291 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:192 B23
B22
ParallelMove rcx <- C goto:194 B23
B23
ParallelMove fp[-7] <- rcx
Branch if StrictCompare:18(===, v48 T{bool}, v49 T{bool}) goto (70, 79)
BoolTest
B70
ParallelMove rdx <- fp[-1]
v184 <- LoadField(v2 T{_SimpleUri} . _portStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v186 <- BinaryInt64Op(+ [tr], v184, v304 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v187 <- LoadField(v2 T{_SimpleUri} . _pathStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v186, v187) T{bool} goto (24, 77)
B24
ParallelMove rdi <- rdx
v96 <- StaticCall:206( get:port<0> v2, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
v292 <- BoxInt64(v96) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rdi <- rax goto:212 B26
B77
B79
B25
ParallelMove rdi <- C goto:214 B26
B26
Branch if StrictCompare:218(===, v44 T{bool}, v49) goto (27, 28)
BoolTest
B27
ParallelMove rdi <- rdi, rsi <- fp[-2]
v95 <- StaticCall:224( _makePort@0150898<0> v53, v42, result_type = T{int??}) T{int??}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:230 B29
B28
ParallelMove rcx <- rdi goto:232 B29
B29
ParallelMove fp[-3] <- rcx
Branch if StrictCompare:240(===, v48 T{bool}, v49) goto (30, 31)
BoolTest
B30
ParallelMove rdx <- fp[-1]
v91 <- LoadField(v2 . _uri@0150898 {final}) T{String}
v93 <- LoadField(v2 . _portStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v293 <- BoxInt64(v93) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v293 T{int})
ParallelMove rdi <- rdi, rsi <- fp[-5]
v94 <- StaticCall:252( substring<0> v91, v47 T{int}, v293 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove r10 <- rax, r8 <- fp[-6], rcx <- fp[-7], rdx <- fp[-3] goto:302 B40
B31
ParallelMove rcx <- fp[-7]
v202 <- LoadField(v51 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(!==, v202, v9 T{_Smi}) T{bool} goto (35, 32)
B35
ParallelMove r8 <- fp[-6], rdx <- fp[-3] goto:282 B34
B32
ParallelMove rdx <- fp[-3]
Branch if StrictCompare:264(!==, v54, v0) goto (36, 33)
B36
ParallelMove r8 <- fp[-6] goto:286 B34
B33
ParallelMove r8 <- fp[-6]
Branch if StrictCompare:272(===, v46 T{bool}, v49) goto (37, 38)
BoolTest
B37
B34
ParallelMove rax <- C goto:296 B39
B38
ParallelMove rax <- C goto:298 B39
B39
ParallelMove r10 <- rax goto:304 B40
B40
ParallelMove fp[-8] <- r10
v62 <- LoadField(v2 . _uri@0150898 {final}) T{String}
ParallelMove fp[-4] <- r12
v63 <- LoadField(v2 . _pathStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v64 <- LoadField(v2 . _queryStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-5] <- r13
v294 <- BoxInt64(v64) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v294 T{int})
ParallelMove rdi <- r12, rsi <- rsi
v65 <- StaticCall:316( substring<0> v62, v63, v294 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rcx <- rax, rax <- fp[-6]
ParallelMove fp[-9] <- rcx
Branch if StrictCompare:320(===, v46 T{bool}, v49) goto (44, 42)
BoolTest
B44
ParallelMove rax <- fp[-8] goto:354 B43
B42
ParallelMove rax <- fp[-8]
Branch if StrictCompare:306(!==, v59, v0) T{bool} goto (41, 48)
B41
v165 <- LoadField(v65 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(!==, v165, v9 T{_Smi}) T{bool} goto (45, 49)
B45
B43
ParallelMove rdi <- rcx, rsi <- C
v89 <- StaticCall:342( startsWith<0> v65, v88, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:346(!==, v89 T{bool}, v49) goto (46, 50)
BoolTest
B46
MoveArgument(sp[1] <- v88)
MoveArgument(sp[0] <- v65)
v90 <- StaticCall:362( +<0> v88, v65, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rdx <- rax goto:380 B51
B50
B49
B48
B47
ParallelMove rdx <- fp[-9] goto:382 B51
B51
ParallelMove fp[-6] <- rdx
v69 <- LoadField(v2 . _fragmentStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-10] <- r8
Branch if RelationalOp(<, v64 T{int}, v69) T{bool} goto (52, 53)
B52
ParallelMove rcx <- rcx
v85 <- BinaryInt64Op(+ [tr], v64 T{int}, v304 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v295 <- BoxInt64(v69 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v295 T{int})
ParallelMove rdi <- fp[-4], rsi <- rcx
v87 <- StaticCall:406( substring<0> v62 T{String}, v85, v295 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:412 B54
B53
ParallelMove rcx <- C goto:414 B54
B54
ParallelMove fp[-1] <- rcx
v160 <- LoadField(v62 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v296 <- UnboxInt64([non-speculative], v160 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(<, v69 T{int}, v296 T{_Smi}) T{bool} goto (55, 56)
B55
ParallelMove rax <- rax
v81 <- BinaryInt64Op(+ [tr], v69 T{int}, v304 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi, rsi <- rax
v82 <- StaticCall:438( substring<0> v62 T{String}, v81, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:444 B57
B56
ParallelMove r8 <- C goto:446 B57
B57
ParallelMove fp[-4] <- r8
v77 <- AllocateObject:448(cls=_Uri, <not-aliased>) T{_Uri}
ParallelMove rax <- rax, rcx <- C
StoreField(v77 T{_Uri} . _text@0150898 = v155 T{Sentinel~}, NoStoreBarrier)
StoreField(v77 T{_Uri} . pathSegments = v155 T{Sentinel~}, NoStoreBarrier)
StoreField(v77 T{_Uri} . hashCode = v155 T{Sentinel~}, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreField(v77 T{_Uri} . scheme = v42 T{String}, NoStoreBarrier)
ParallelMove rcx <- fp[-7]
StoreField(v77 T{_Uri} . _userInfo@0150898 = v51 T{String}, NoStoreBarrier)
ParallelMove rcx <- fp[-8]
StoreField(v77 T{_Uri} . _host@0150898 = v59 T{String?}, NoStoreBarrier)
ParallelMove rcx <- fp[-3]
StoreField(v77 T{_Uri} . _port@0150898 = v54 T{int??}, NoStoreBarrier)
ParallelMove rcx <- fp[-6]
StoreField(v77 T{_Uri} . path = v67 T{String}, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreField(v77 T{_Uri} . _query@0150898 = v71 T{String?}, NoStoreBarrier)
ParallelMove rcx <- fp[-4]
StoreField(v77 T{_Uri} . _fragment@0150898 = v76 T{String?}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:452(v77)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . _schemeEnd@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v16 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v21 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 2305843009213693951] int64
Branch if EqualityCompare(v4 == v21 T{_Smi}) T{bool} goto (4, 5)
B4
v10 <- LoadField(v2 . _uri@0150898 {final}) T{String}
ParallelMove rdi <- rax, rsi <- rsi
v11 <- StaticCall:28( startsWith<0> v10, v3, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:32 B3
B5
ParallelMove rax <- C goto:36 B3
B3
ParallelMove rax <- rax
DartReturn:38(v9)
CheckStackOverflowSlowPath
B0
B1
v3 <- LoadField(v2 . path {final}) T{String}
v9 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
v11 <- StrictCompare:10(===, v9, v12 T{_Smi}) T{bool}
ParallelMove rax <- rax
DartReturn:14(v11 T{bool})
B0
B1
v3 <- LoadField(v2 . _pathStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v4 <- LoadField(v2 . _queryStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v5 <- EqualityCompare(v3 == v4) T{bool}
ParallelMove rax <- rax
DartReturn:16(v5)
B0
B1
ParallelMove rcx <- sp[1]
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v7)
B4
v13 <- LoadClassId(v3 T{*}) [1, 617] int64
Branch if EqualityCompare(v13 == v14) T{bool} goto (6, 7)
B6
ParallelMove rax <- C goto:40 B5
B7
ParallelMove rax <- C goto:44 B5
B5
ParallelMove rax <- rax
DartReturn:46(v8)
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
t0 <- AssertAssignable:10(v3, v4, 'dispatch', instantiator_type_args(v5), function_type_args(v0)) T{_EventDispatch<X0>}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
v7 <- LoadField(v2 . value {final}) T{X0?}
ParallelMove rdi <- fp[-2], rsi <- rsi
StaticCall:14( _sendData@4048458<0> v3 T{_EventDispatch<X0>}, v7)
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
Checking for concrete finalized classes:
 * 455 (_ControllerSubscription)
 * 456 (_BroadcastSubscription)
 * 460 (_SyncStreamController)
 * 461 (_AsyncStreamController)
 * 491 (_AsyncBroadcastStreamController)
 * 492 (_SyncBroadcastStreamController)
Generating check for type argument 0: X0
Checking instantiated type parameter for possible top types
Checking for legacy or non-nullable instance type argument
Checking instance type argument for possible bottom types
Checking for legacy or nullable instantiated type parameter
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- rbx, rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v3, v4, 'dispatch', instantiator_type_args(v0), function_type_args(v0)) T{_EventDispatch<dynamic>}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
v6 <- LoadField(v2 . error {final}) T{Object}
v7 <- LoadField(v2 . stackTrace {final}) T{StackTrace}
ParallelMove rdi <- fp[-2], rsi <- rsi, rdx <- rdx
StaticCall:16( _sendError@4048458<0> v3 T{_EventDispatch<dynamic>}, v6, v7, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:18(v0)
CheckStackOverflowSlowPath
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rsi, fp[-1] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- rbx, rdx <- C, rcx <- C
t0 <- AssertAssignable:10(v3, v4, 'dispatch', instantiator_type_args(v0), function_type_args(v0)) T{_EventDispatch<dynamic>}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-1]
StaticCall:12( _sendDone@4048458<0> v3 T{_EventDispatch<dynamic>}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- fp[2]
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v7)
B4
ParallelMove rdi <- fp[3]
Branch if StrictCompare:20(===, v2, v3 T{*}) goto (5, 6)
B5
ParallelMove rax <- C
DartReturn:26(v6)
B6
ParallelMove rax <- rbx, rdx <- C, rcx <- C
v5 <- InstanceOf:32(v3 T{*} IS Uri, instantiator_type_args(v0), function_type_args(v0)) T{bool}
InlineInstanceof
InstantiatedTypeNoArgumentsTest
ParallelMove rax <- rax
Branch if StrictCompare:36(===, v5 T{bool}, v6) goto (8, 19)
BoolTest
B8
ParallelMove rdx <- fp[3], rax <- fp[2]
v9 <- LoadField(v2 . scheme {final}) T{String}
ParallelMove fp[-1] <- rbx
v173 <- LoadClassId(<non-smi> v3 T{Uri}) int64
ParallelMove rcx <- rcx, rdi <- rax
v10 <- DispatchTableCall( cid=v173 Uri.scheme<0>, v3 T{Uri}) T{String}
ParallelMove rcx <- rax, rax <- fp[-1]
v174 <- LoadClassId(<non-smi> v9) int64
MoveArgument(sp[1] <- v9)
MoveArgument(sp[0] <- v10 T{String})
ParallelMove rcx <- rdx
v11 <- DispatchTableCall( cid=v174 String.==<0>, v9, v10 T{String}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:48(===, v11 T{bool}, v6) goto (9, 20)
BoolTest
B9
ParallelMove rdx <- fp[3], rax <- fp[2]
v99 <- LoadField(v2 T{_Uri} . _host@0150898 {final}) T{String??}
v100 <- StrictCompare:12(!==, v99, v0 T{Null?}) T{bool}
ParallelMove fp[-1] <- rbx
v175 <- LoadClassId(<non-smi> v3 T{Uri}) int64
ParallelMove rcx <- rcx, rdi <- rax
v13 <- DispatchTableCall( cid=v175 Uri.hasAuthority<0>, v3 T{Uri}) T{bool}
ParallelMove rcx <- rax, rax <- fp[-1]
Branch if StrictCompare:10(===, v100 T{bool}, v13 T{bool}) T{bool} goto (10, 21)
B10
ParallelMove rdx <- fp[3], rax <- fp[2]
v94 <- LoadField(v2 T{_Uri} . _userInfo@0150898 {final}) T{String}
ParallelMove fp[-1] <- rbx
v176 <- LoadClassId(<non-smi> v3 T{Uri}) int64
ParallelMove rcx <- rcx, rdi <- rax
v16 <- DispatchTableCall( cid=v176 Uri.userInfo<0>, v3 T{Uri}) T{String}
ParallelMove rcx <- rax, rax <- fp[-1]
v177 <- LoadClassId(<non-smi> v94 T{String}) int64
MoveArgument(sp[1] <- v94 T{String})
MoveArgument(sp[0] <- v16 T{String})
ParallelMove rcx <- rdx
v17 <- DispatchTableCall( cid=v177 String.==<0>, v94 T{String}, v16 T{String}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:76(===, v17 T{bool}, v6) goto (11, 22)
BoolTest
B11
ParallelMove rax <- fp[2]
ParallelMove rdi <- fp[3]
v18 <- StaticCall:82( get:host<0> v2, result_type = T{!null}) T{String}
ParallelMove rdx <- rax, rax <- fp[2]
ParallelMove fp[-1] <- rdx
v178 <- LoadClassId(<non-smi> v3 T{Uri}) int64
ParallelMove rcx <- rcx, rdi <- rax
v19 <- DispatchTableCall( cid=v178 Uri.host<0>, v3 T{Uri}) T{String}
ParallelMove rcx <- rax, rax <- fp[-1]
v179 <- LoadClassId(<non-smi> v18) int64
MoveArgument(sp[1] <- v18)
MoveArgument(sp[0] <- v19 T{String})
ParallelMove rcx <- rdx
v20 <- DispatchTableCall( cid=v179 String.==<0>, v18, v19 T{String}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:90(===, v20 T{bool}, v6) goto (12, 23)
BoolTest
B12
ParallelMove rax <- fp[2]
ParallelMove rdi <- fp[3]
v21 <- StaticCall:96( get:port<0> v2, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rax <- fp[2]
ParallelMove fp[-2] <- rdx
v180 <- LoadClassId(<non-smi> v3 T{Uri}) int64
ParallelMove rcx <- rcx, rdi <- rax
v22 <- DispatchTableCall( cid=v180 Uri.port<0>, v3 T{Uri}) int64
ParallelMove rcx <- rax, rax <- fp[-2]
Branch if EqualityCompare(v21 == v22 T{int}) T{bool} goto (13, 24)
B13
ParallelMove rdx <- fp[3], rax <- fp[2]
v24 <- LoadField(v2 . path {final}) T{String}
ParallelMove fp[-1] <- rbx
v181 <- LoadClassId(<non-smi> v3 T{Uri}) int64
ParallelMove rcx <- rcx, rdi <- rax
v25 <- DispatchTableCall( cid=v181 Uri.path<0>, v3 T{Uri}) T{String}
ParallelMove rcx <- rax, rax <- fp[-1]
v182 <- LoadClassId(<non-smi> v24) int64
MoveArgument(sp[1] <- v24)
MoveArgument(sp[0] <- v25 T{String})
ParallelMove rcx <- rdx
v26 <- DispatchTableCall( cid=v182 String.==<0>, v24, v25 T{String}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:118(===, v26 T{bool}, v6) goto (14, 25)
BoolTest
B14
ParallelMove rdx <- fp[3], rax <- fp[2]
v80 <- LoadField(v2 T{_Uri} . _query@0150898 {final}) T{String??}
ParallelMove fp[-3] <- rbx
v81 <- StrictCompare:12(!==, v80, v0 T{Null?}) T{bool}
ParallelMove fp[-1] <- rsi
v183 <- LoadClassId(<non-smi> v3 T{Uri}) int64
ParallelMove rcx <- rcx, rdi <- rax
v28 <- DispatchTableCall( cid=v183 Uri.hasQuery<0>, v3 T{Uri}) T{bool}
ParallelMove rcx <- rax, rax <- fp[-1]
Branch if StrictCompare:10(===, v81 T{bool}, v28 T{bool}) T{bool} goto (15, 26)
B15
ParallelMove rax <- fp[-3]
Branch if StrictCompare:12(===, v80 T{String??}, v0 T{Null?}) goto (40, 41)
B40
ParallelMove rdx <- C goto:22 B42
B41
ParallelMove rdx <- rax goto:24 B42
B42
ParallelMove fp[-1] <- rdx
v184 <- LoadClassId(<non-smi> v3 T{Uri}) int64
ParallelMove rcx <- rcx, rdi <- rax
v31 <- DispatchTableCall( cid=v184 Uri.query<0>, v3 T{Uri}) T{String}
ParallelMove rcx <- rax, rax <- fp[-1]
v185 <- LoadClassId(<non-smi> v71 T{String}) int64
MoveArgument(sp[1] <- v71 T{String})
MoveArgument(sp[0] <- v31 T{String})
ParallelMove rcx <- rdx
v32 <- DispatchTableCall( cid=v185 String.==<0>, v71 T{String}, v31 T{String}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:146(===, v32 T{bool}, v6) goto (16, 27)
BoolTest
B16
ParallelMove rcx <- fp[3], rax <- fp[2]
v56 <- LoadField(v2 T{_Uri} . _fragment@0150898 {final}) T{String??}
ParallelMove fp[-3] <- rdx
v57 <- StrictCompare:12(!==, v56, v0 T{Null?}) T{bool}
ParallelMove fp[-1] <- rbx
v186 <- LoadClassId(<non-smi> v3 T{Uri}) int64
ParallelMove rcx <- rcx, rdi <- rax
v34 <- DispatchTableCall( cid=v186 Uri.hasFragment<0>, v3 T{Uri}) T{bool}
ParallelMove rcx <- rax, rax <- fp[-1]
Branch if StrictCompare:10(===, v57 T{bool}, v34 T{bool}) T{bool} goto (17, 28)
B17
ParallelMove rax <- fp[-3]
Branch if StrictCompare:12(===, v56 T{String??}, v0 T{Null?}) goto (31, 32)
B31
ParallelMove rax <- C goto:22 B33
B32
B33
ParallelMove fp[-1] <- rax
v187 <- LoadClassId(<non-smi> v3 T{Uri}) int64
ParallelMove rcx <- rcx, rdi <- rdi
v37 <- DispatchTableCall( cid=v187 Uri.fragment<0>, v3 T{Uri}) T{String}
ParallelMove rcx <- rax, rax <- fp[-1]
v188 <- LoadClassId(<non-smi> v46 T{String}) int64
MoveArgument(sp[1] <- v46 T{String})
MoveArgument(sp[0] <- v37 T{String})
ParallelMove rcx <- rdx
v38 <- DispatchTableCall( cid=v188 String.==<0>, v46 T{String}, v37 T{String}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:176 B7
B28
B27
B26
B25
B24
B23
B22
B21
B20
B19
B18
ParallelMove rax <- C goto:220 B7
B7
ParallelMove rax <- rax
DartReturn:222(v8)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- fp[2]
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v7)
B4
ParallelMove rsi <- fp[3]
Branch if StrictCompare:20(===, v2, v3 T{*}) goto (5, 6)
B5
ParallelMove rax <- C
DartReturn:26(v6)
B6
ParallelMove rax <- rbx, rdx <- C, rcx <- C
v5 <- InstanceOf:32(v3 T{*} IS Uri, instantiator_type_args(v0), function_type_args(v0)) T{bool}
InlineInstanceof
InstantiatedTypeNoArgumentsTest
ParallelMove rax <- rax
Branch if StrictCompare:36(===, v5 T{bool}, v6) goto (8, 9)
BoolTest
B8
ParallelMove rcx <- fp[3], rax <- fp[2]
v9 <- LoadField(v2 . _uri@0150898 {final}) T{String}
ParallelMove fp[-1] <- rdx
v28 <- LoadClassId(<non-smi> v3 T{Uri}) int64
MoveArgument(sp[0] <- v3 T{Uri})
ParallelMove rcx <- rcx
v10 <- DispatchTableCall( cid=v28 Uri.toString<0>, v3 T{Uri}) T{String}
ParallelMove rcx <- rax, rax <- fp[-1]
v29 <- LoadClassId(<non-smi> v9) int64
MoveArgument(sp[1] <- v9)
MoveArgument(sp[0] <- v10 T{String})
ParallelMove rcx <- rdx
v11 <- DispatchTableCall( cid=v29 String.==<0>, v9, v10 T{String}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:50 B7
B9
ParallelMove rax <- C goto:54 B7
B7
ParallelMove rax <- rax
DartReturn:56(v8)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rcx <- sp[1]
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v7)
B4
ParallelMove rdx <- sp[2]
Branch if StrictCompare:20(===, v2, v3 T{*}) goto (5, 6)
B5
ParallelMove rax <- C
DartReturn:26(v6)
B6
v14 <- LoadClassId(v3 T{*}) [1, 617] int64
Branch if TestRange(v14 in [475-476]) T{bool} goto (8, 9)
B8
v9 <- LoadField(v3 T{_ControllerStream<dynamic>} . _controller@4048458) T{_StreamControllerLifecycle<X0>}
v10 <- LoadField(v2 . _controller@4048458) T{_StreamControllerLifecycle<X0>}
v11 <- StrictCompare:46(===, v9, v10) T{bool}
ParallelMove rax <- rdx goto:48 B7
B9
ParallelMove rax <- C goto:52 B7
B7
ParallelMove rax <- rax
DartReturn:54(v8)
B0
B11
Enter frame
PrologueOffset = 0
ParallelMove rsi <- rdi, rbx <- rsi, fp[-2] <- rdi, fp[-3] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v9 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdi, rcx <- C, fp[-1] <- rdi
t0 <- AssertAssignable:10(v3, v8, 'source', instantiator_type_args(v9), function_type_args(v0)) T{Stream<X0>}
AssertAssignable for compile-time type
TTSCall
ParallelMove rsi <- fp[-2]
v58 <- LoadField(v2 T{_StreamController<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v58, v79 T{_Smi}) T{bool} goto (3, 4)
B4
ParallelMove rcx <- C
ParallelMove rax <- rax
v86 <- IntConverter(int64->uint32[tr], v58 T{int}) uint32
ParallelMove rax <- rax
v50 <- BinaryUint32Op(& [tr], v86 T{int}, v88 T{_Smi}) [0, 2] uint32
ParallelMove rax <- rax
v87 <- IntConverter(uint32->int64, v50) int64
Branch if EqualityCompare(v87 T{_Smi} != v81 T{_Smi}) T{bool} goto (5, 6)
B5
ParallelMove rdx <- C
v22 <- AllocateObject:38(cls=_Future, v0) T{_Future}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-4] <- rcx
StoreField(v22 T{_Future} . _state@4048458 = v81 T{_Smi} <int64>, NoStoreBarrier)
v64 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rcx <- rax, rax <- fp[-4]
StoreField(v22 T{_Future} . _zone@4048458 = v64, NoStoreBarrier)
ParallelMove rdi <- rax, rsi <- C
StaticCall:14( _asyncComplete@4048458<0> v22 T{_Future}, v0 T{Null?}, using unchecked entrypoint)
ParallelMove rax <- fp[-4]
DartReturn:42(v22)
B6
v15 <- LoadField(v2 . _varData@4048458) T{Object??}
ParallelMove rdx <- fp[-1], fp[-4] <- rax
v17 <- AllocateObject:48(cls=_StreamControllerAddStreamState, v9 T{TypeArguments}) T{_StreamControllerAddStreamState}
ParallelMove rdi <- rax, rsi <- fp[-2], rdx <- fp[-4], rbx <- fp[-3], rax <- rax
ParallelMove fp[-1] <- rax
StaticCall:50( _StreamControllerAddStreamState@4048458.<0> v17, v2, v15, v3 T{Stream<X0>})
ParallelMove rax <- fp[-1], rdi <- fp[-2]
StoreField(v2 T{_StreamController<X0>} . _varData@4048458 = v17 T{_StreamControllerAddStreamState})
v18 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v20 <- BinaryInt64Op(| [tr], v18, v82 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_StreamController<X0>} . _state@4048458 = v20 T{int} <int64>)
ParallelMove rax <- fp[-1]
v21 <- LoadField(v17 . addStreamFuture {final}) T{_Future}
ParallelMove rax <- rcx
DartReturn:62(v21)
B3
ParallelMove rdi <- rsi
ParallelMove rdi <- rdi
v23 <- StaticCall:22( _badEventState@4048458<0> v2, using unchecked entrypoint) T{Error}
ParallelMove rax <- rax
Throw:24(v23)
CheckStackOverflowSlowPath
Checking for concrete finalized classes:
 * 460 (_SyncStreamController)
 * 461 (_AsyncStreamController)
 * 491 (_AsyncBroadcastStreamController)
 * 492 (_SyncBroadcastStreamController)
Generating check for type argument 0: X0
Checking instantiated type parameter for possible top types
Checking for legacy or non-nullable instance type argument
Checking instance type argument for possible bottom types
Checking for legacy or nullable instantiated type parameter
B0
B1
ParallelMove rcx <- sp[1]
v4 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[2]
StoreField(v2 . _state@4048458 = v4 T{int} <int64>)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
ParallelMove rcx <- sp[1]
v3 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
v4 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
PrologueOffset = 21
ParallelMove rax <- rax
DartReturn:4(v4 T{int})
B0
B1
ParallelMove rax <- sp[1], rcx <- sp[2]
StoreField(v2 . _function_type_arguments@0150898 = v3)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
v25 <- LoadField(v2 T{_StreamController<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v52 <- IntConverter(int64->uint32[tr], v25) uint32
ParallelMove rcx <- rcx
v27 <- BinaryUint32Op(& [tr], v52 T{int}, v54 T{_Smi}) [0, 4] uint32
ParallelMove rcx <- rcx
v53 <- IntConverter(uint32->int64, v27) int64
Branch if EqualityCompare(v53 T{_Smi} != v48 T{_Smi}) T{bool} goto (3, 4)
B3
v7 <- AllocateObject:20(cls=StateError, <not-aliased>) T{StateError}
ParallelMove rcx <- rax, rax <- C
StoreField(v7 T{StateError} . message = v8 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
DartReturn:24(v7)
B4
v5 <- AllocateObject:28(cls=StateError, <not-aliased>) T{StateError}
ParallelMove rax <- rax, rcx <- C
StoreField(v5 T{StateError} . message = v6 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:32(v5)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rdi, rcx <- rsi, rax <- rdx, rdx <- rbx, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- rax
StoreField(v2 . _varData@4048458 = v4)
ParallelMove rdi <- rbx, rsi <- rcx, rdx <- rdx
StaticCall:10( _AddStreamState@4048458.<0> v2, v3, v5)
ParallelMove rdi <- fp[-2]
v6 <- StaticCall:12( get:isPaused<0> v3, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:16(===, v6 T{bool}, v7) goto (3, 4)
BoolTest
B3
ParallelMove rax <- fp[-1]
v8 <- LoadField(v2 . addSubscription {final}) T{StreamSubscription<dynamic>}
v17 <- LoadClassId(<non-smi> v8) int64
ParallelMove rcx <- rcx, rdi <- rdi
DispatchTableCall( cid=v17 StreamSubscription.pause<0>, v8)
ParallelMove  goto:30 B5
B4
B5
ParallelMove rax <- C
DartReturn:34(v0)
CheckStackOverflowSlowPath
Checking for cid 453 (_StreamControllerAddStreamState)
Generating check for type argument 0: X0
Checking instantiated type parameter for possible top types
Checking for legacy or non-nullable instance type argument
Checking instance type argument for possible bottom types
Checking for legacy or nullable instantiated type parameter
B0
B5
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rdx, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdx <- C
v5 <- AllocateObject:10(cls=_Future, v0) T{_Future}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-4] <- rcx
StoreField(v5 T{_Future} . _state@4048458 = v29 T{_Smi} <int64>, NoStoreBarrier)
v27 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rcx <- rax, rax <- fp[-4]
StoreField(v5 T{_Future} . _zone@4048458 = v27, NoStoreBarrier)
ParallelMove rax <- rax, rdx <- fp[-1]
StoreField(v2 . addStreamFuture = v5)
ParallelMove rax <- fp[-2]
v30 <- LoadClassId(v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v6 <- DispatchTableCall( cid=v30 _EventSink._add<0>, v3) T{*?}
ParallelMove rsi <- rax, rbx <- fp[-1]
ParallelMove fp[-4] <- rsi
v8 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rsi, rdx <- rdx, rcx <- C
t1 <- AssertAssignable:16(v6 T{*}, v7, '', instantiator_type_args(v8), function_type_args(v0)) T{_Closure}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-2]
v31 <- LoadClassId(v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v12 <- DispatchTableCall( cid=v31 _EventSink._addError<0>, v3) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-5] <- rbx
t1 <- AssertAssignable:38(v12 T{*}, v13, '', instantiator_type_args(v0), function_type_args(v0)) T{_Closure}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-2]
v32 <- LoadClassId(v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v15 <- DispatchTableCall( cid=v32 _EventSink._close<0>, v3) T{*?}
ParallelMove rax <- rax, rdi <- fp[-3]
v33 <- LoadClassId(<non-smi> v4) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- fp[-4], rdx <- C, rbx <- rax, r8 <- fp[-5]
v16 <- DispatchTableCall( cid=v33 Stream.listen<0>, v4, v6 T{_Closure}, v10 T{bool}, v15 T{*}, v12 T{_Closure}) T{*?}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v2 . addSubscription = v16 T{StreamSubscription<X0>})
ParallelMove rax <- C
DartReturn:46(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- AllocateContext:10(num_variables=1) T{Context}
ParallelMove rax <- rax, rdi <- fp[-1]
StoreField(v3 . this = v2, NoStoreBarrier)
ParallelMove rbx <- C, rdx <- rax
v5 <- AllocateClosure:12(v4, v3) T{_Closure}
ParallelMove rdi <- fp[-1], rax <- rax
ParallelMove fp[-2] <- rax
StaticCall:14( _cancel@4048458<0> v2, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
v6 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v8 <- BinaryInt64Op(| [tr], v6, v24 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v8 T{int} <int64>)
v9 <- LoadField(v2 . _cancelFuture@4048458) T{_Future?}
ParallelMove fp[-3] <- rdi
Branch if StrictCompare:24(!==, v9, v0) goto (3, 6)
B3
v14 <- LoadStaticField:4(_nullFuture@4048458, CallsInitializer) T{_Future}
ParallelMove rax <- rax, rdi <- fp[-3]
Branch if StrictCompare:30(!==, v9 T{_Future}, v14 T{_Future}) goto (4, 7)
B4
ParallelMove rdi <- rdi, rsi <- fp[-2]
StaticCall:38( whenComplete<0> v9 T{_Future}, v5, using unchecked entrypoint)
ParallelMove  goto:54 B8
B7
B6
B5
MoveArgument(sp[0] <- v5)
ParallelMove rax <- fp[-2]
ClosureCall:50( closure=v5<0>, v5)
ParallelMove  goto:56 B8
B8
ParallelMove rax <- C
DartReturn:58(v0)
CheckStackOverflowSlowPath
Checking for concrete finalized classes:
 * 446 (_DoneStreamSubscription)
 * 455 (_ControllerSubscription)
 * 456 (_BroadcastSubscription)
Generating check for type argument 0: X0
Checking instantiated type parameter for possible top types
Checking for legacy or non-nullable instance type argument
Checking instance type argument for possible bottom types
Checking for legacy or nullable instantiated type parameter
B0
B1
ParallelMove rcx <- sp[1]
v4 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[2]
StoreField(v2 . _state@4048458 = v4 T{int} <int64>)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
ParallelMove rcx <- sp[1]
v3 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
v4 <- BoxInt64(v3) [-9223372036854775808, 9223372036854775807] T{int}
PrologueOffset = 21
ParallelMove rax <- rax
DartReturn:4(v4 T{int})
B0
B1
ParallelMove rax <- sp[1], rcx <- sp[2]
StoreField(v2 . _onDone@4048458 = v3)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
ParallelMove rax <- sp[1], rcx <- sp[2]
StoreField(v2 . _onError@4048458 = v3)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B5
Enter frame
PrologueOffset = 0
ParallelMove fp[-2] <- rdi, fp[-3] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rax, fp[-1] <- rax
v5 <- AllocateObject:10(cls=_Future, v4) T{_Future}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-4] <- rcx
StoreField(v5 T{_Future} . _state@4048458 = v47 T{_Smi} <int64>, NoStoreBarrier)
v42 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rcx <- rax, rax <- fp[-4]
StoreField(v5 T{_Future} . _zone@4048458 = v42, NoStoreBarrier)
ParallelMove rdx <- fp[-1], rcx <- C, rbx <- C
v11 <- InstantiateTypeArguments:34(v10, instantiator_type_args(v4 T{TypeArguments}), function_type_args(v0), instantiator_class(Library:'dart:async' Class: _Future@4048458)) T{*?}
ParallelMove rdx <- rax
v12 <- AllocateObject:36(cls=_FutureListener, v11) T{_FutureListener}
ParallelMove rcx <- rax, rax <- fp[-4]
StoreField(v12 T{_FutureListener} . result = v5 T{_Future}, NoStoreBarrier)
ParallelMove rdx <- fp[-3]
StoreField(v12 T{_FutureListener} . callback = v3 T{_Closure}, NoStoreBarrier)
ParallelMove rdx <- C
StoreField(v12 T{_FutureListener} . state = v48 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rdi <- fp[-2], rsi <- rcx
StaticCall:40( _addListener@4048458<0> v2, v12, using unchecked entrypoint)
ParallelMove rax <- fp[-4]
DartReturn:42(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove rcx <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v5 <- BinaryInt64Op(| [tr], v3, v65 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v5 T{int} <int64>)
ParallelMove rdx <- rdx
v75 <- IntConverter(int64->uint32[tr], v5 T{int}) uint32
ParallelMove rdx <- rdx
v47 <- BinaryUint32Op(& [tr], v75 T{int}, v79 T{_Smi}) [0, 128] uint32
ParallelMove rdx <- rdx
v76 <- IntConverter(uint32->int64, v47) int64
Branch if EqualityCompare(v76 T{_Smi} != v67 T{_Smi}) T{bool} goto (3, 4)
B3
v10 <- LoadField(v2 . _pending@4048458) T{_PendingEvents?}
CheckNull:28(v10, CastError) T{_PendingEvents}
ParallelMove rdi <- rdi
StaticCall:30( cancelSchedule<0> v10 T{_PendingEvents}, using unchecked entrypoint)
ParallelMove  goto:36 B5
B4
B5
v27 <- LoadField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v77 <- IntConverter(int64->uint32[tr], v27) uint32
ParallelMove rdx <- rdx
v29 <- BinaryUint32Op(& [tr], v77 T{int}, v80 T{_Smi}) [0, 64] uint32
ParallelMove rdx <- rdx
v78 <- IntConverter(uint32->int64, v29) int64
Branch if EqualityCompare(v78 T{_Smi} == v67 T{_Smi}) T{bool} goto (6, 7)
B6
ParallelMove rcx <- C
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _pending@4048458 = v0 T{Null?})
ParallelMove  goto:56 B8
B7
ParallelMove rcx <- C
ParallelMove  goto:58 B8
B8
ParallelMove rdi <- rax
v9 <- StaticCall:60( _onCancel@4048458<0> v2, using unchecked entrypoint, result_type = T{_Future?}) T{_Future?}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _cancelFuture@4048458 = v9 T{_Future?})
ParallelMove rax <- C
DartReturn:64(v0)
CheckStackOverflowSlowPath
slow path check null (cast) operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rsi <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _controller@4048458 {final}) T{_StreamControllerLifecycle<X0>}
v5 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- rsi
v4 <- DispatchTableCall( cid=v5 _StreamControllerLifecycle._recordCancel<0>, v3, v2) T{Future<void>??}
ParallelMove rax <- rax
DartReturn:14(v4 T{_Future?})
CheckStackOverflowSlowPath
Checking for concrete finalized classes:
 * 455 (_ControllerSubscription)
 * 456 (_BroadcastSubscription)
Generating check for type argument 0: X0
Checking instantiated type parameter for possible top types
Checking for legacy or non-nullable instance type argument
Checking instance type argument for possible bottom types
Checking for legacy or nullable instantiated type parameter
B0
B1
v16 <- LoadField(v2 T{_PendingEvents} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v16 == v27 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rcx <- C
StoreField(v2 T{_PendingEvents} . _state@4048458 = v28 T{_Smi} <int64>)
ParallelMove  goto:26 B5
B4
B5
ParallelMove rax <- C
DartReturn:30(v0)
Checking for cid 447 (_PendingEvents)
Generating check for type argument 0: X0
Checking instantiated type parameter for possible top types
Checking for legacy or non-nullable instance type argument
Checking instance type argument for possible bottom types
Checking for legacy or nullable instantiated type parameter
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:4(stack=0, loop=0)
v5 <- LoadStaticField:4(nullFuture, CallsInitializer) T{_Future}
ParallelMove rax <- rax
DartReturn:8(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:4(stack=0, loop=0)
ParallelMove rbx <- C, rdx <- C
v5 <- AllocateClosure:6(v4, v0) T{_Closure}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v5)
v6 <- StaticCall:8( run<1> v2, v3, v5, using unchecked entrypoint, result_type = T{_Future}) T{_Future}
ParallelMove rax <- rax
DartReturn:10(v6)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdx <- C
v10 <- AllocateObject:28(cls=_Future, v4 T{TypeArguments}) T{_Future}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-1] <- rcx
StoreField(v10 T{_Future} . _state@4048458 = v29 T{_Smi} <int64>, NoStoreBarrier)
v27 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v10 T{_Future} . _zone@4048458 = v27, NoStoreBarrier)
ParallelMove rdi <- rax, rsi <- C
StaticCall:14( _asyncComplete@4048458<0> v10 T{_Future}, v0 T{Null?}, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
DartReturn:12(v10)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v4 <- LoadField(v2 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6 <- BinarySmiOp:4(- [tr], v4, v5) [-1, 4611686018427387902] T{_Smi}
v7 <- LoadIndexedUnsafe(rbp[v6 + 16]) T{*?}
ParallelMove fp[-2] <- rbx
Branch if RelationalOp:6(<=, v5, v6) T{bool} goto (2, 3)
B2
v15 <- LoadIndexedUnsafe(rbp[v6 T{_Smi} + 8]) T{FutureOr<X0>??}
ParallelMove rsi <- rcx goto:20 B5
B3
ParallelMove rsi <- C goto:18 B5
B5
ParallelMove fp[-1] <- rsi
CheckStackOverflow:26(stack=0, loop=0)
Branch if StrictCompare:30(===, v10, v0) goto (6, 7)
B6
ParallelMove rax <- rsi, rdx <- rbx, rcx <- C
t2 <- AssertAssignable:36(v10 T{FutureOr<X0>??}, v13, ' in type cast', instantiator_type_args(v7), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove  goto:42 B8
B7
B8
ParallelMove rdx <- fp[-2]
v11 <- AllocateObject:28(cls=_Future, v7) T{_Future}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-2] <- rcx
StoreField(v11 T{_Future} . _state@4048458 = v33 T{_Smi} <int64>, NoStoreBarrier)
v28 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rcx <- rax, rax <- fp[-2]
StoreField(v11 T{_Future} . _zone@4048458 = v28, NoStoreBarrier)
ParallelMove rdi <- rax, rsi <- fp[-1]
StaticCall:14( _asyncComplete@4048458<0> v11 T{_Future}, v10 T{FutureOr<X0>?}, using unchecked entrypoint)
ParallelMove rax <- fp[-2]
DartReturn:48(v11)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove rcx <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
ParallelMove fp[-1] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v3 . this) T{_BufferingStreamSubscription<X0>}
v41 <- LoadField(v4 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rbx
v63 <- IntConverter(int64->uint32[tr], v41) uint32
ParallelMove rsi <- rsi
v43 <- BinaryUint32Op(& [tr], v63 T{int}, v65 T{_Smi}) [0, 16] uint32
ParallelMove rsi <- rsi
v64 <- IntConverter(uint32->int64, v43) int64
Branch if EqualityCompare(v64 T{_Smi} == v59 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:20(v0)
B4
ParallelMove rbx <- rbx
v15 <- BinaryInt64Op(| [tr], v41 T{int}, v50) [-9223372036854775808, 9223372036854775807] int64
StoreField(v4 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v15 T{int} <int64>)
v17 <- LoadField(v4 T{_BufferingStreamSubscription<X0>} . _zone@4048458 {final}) T{_RootZone}
v19 <- LoadField(v4 T{_BufferingStreamSubscription<X0>} . _onDone@4048458) T{(dynamic) => void}
ParallelMove rdi <- rdi, rsi <- rsi
StaticCall:38( runGuarded<0> v17, v19, using unchecked entrypoint)
ParallelMove rcx <- fp[-1]
v20 <- LoadField(v3 . this) T{_BufferingStreamSubscription<X0>}
v22 <- LoadField(v20 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v24 <- BinaryInt64Op(& [tr], v22, v53) [-9223372036854775808, 9223372036854775807] int64
StoreField(v20 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v24 T{int} <int64>)
ParallelMove rax <- C
DartReturn:48(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove rcx <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v21 <- LoadField(v2 T{_StreamController<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rdx
v44 <- IntConverter(int64->uint32[tr], v21) uint32
ParallelMove rbx <- rbx
v23 <- BinaryUint32Op(& [tr], v44 T{int}, v46 T{_Smi}) [0, 4] uint32
ParallelMove rbx <- rbx
v45 <- IntConverter(uint32->int64, v23) int64
Branch if EqualityCompare(v45 T{_Smi} != v40 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rdi <- rcx
v8 <- StaticCall:20( _ensureDoneFuture@4048458<0> v2, using unchecked entrypoint, result_type = T{_Future}) T{_Future}
ParallelMove rax <- rax
DartReturn:22(v8)
B4
Branch if RelationalOp(>=, v21 T{int}, v39 T{_Smi}) T{bool} goto (5, 6)
B6
ParallelMove rdi <- rcx
StaticCall:42( _closeUnchecked@4048458<0> v2, using unchecked entrypoint)
ParallelMove rdi <- fp[-1]
v6 <- StaticCall:44( _ensureDoneFuture@4048458<0> v2, using unchecked entrypoint, result_type = T{_Future}) T{_Future}
ParallelMove rax <- rax
DartReturn:46(v6)
B5
ParallelMove rdi <- fp[-1]
v7 <- StaticCall:36( _badEventState@4048458<0> v2, using unchecked entrypoint) T{Error}
ParallelMove rax <- rax
Throw:38(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v5 <- BinaryInt64Op(| [tr], v3, v71 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_StreamController<X0>} . _state@4048458 = v5 T{int} <int64>)
ParallelMove rdx <- rcx
v84 <- IntConverter(int64->uint32[tr], v5 T{int}) uint32
ParallelMove rdx <- rdx
v51 <- BinaryUint32Op(& [tr], v84 T{int}, v87 T{_Smi}) [0, 1] uint32
ParallelMove rdx <- rdx
v85 <- IntConverter(uint32->int64, v51) int64
Branch if EqualityCompare(v85 T{_Smi} != v73 T{_Smi}) T{bool} goto (3, 4)
B3
v26 <- LoadClassId(v2) [460, 461] int64
Branch if EqualityCompare:26(v26 == v27) goto (9, 14)
B9
ParallelMove rdi <- rdi
v16 <- StaticCall:10( get:_subscription@4048458<0> v2 T{_SyncStreamController}, result_type = T{!null}) T{_ControllerSubscription<X0>}
ParallelMove rdi <- rax
StaticCall:12( _close@4048458<0> v16, using unchecked entrypoint)
ParallelMove  goto:14 B15
B14
ParallelMove rdi <- rdi
v23 <- StaticCall:10( get:_subscription@4048458<0> v2 T{_AsyncStreamController}, result_type = T{!null}) T{_ControllerSubscription<X0>}
ParallelMove rdi <- rax, rsi <- C
StaticCall:12( _addPending@4048458<0> v23, v10 T{_DelayedDone}, using unchecked entrypoint)
ParallelMove  goto:14 B15
B15
B4
ParallelMove rax <- C
ParallelMove rcx <- rcx
v83 <- IntConverter(int64->uint32[tr], v5 T{int}) uint32
ParallelMove rcx <- rcx
v34 <- BinaryUint32Op(& [tr], v83 T{int}, v88 T{_Smi}) [0, 3] uint32
ParallelMove rcx <- rcx
v86 <- IntConverter(uint32->int64, v34) int64
Branch if EqualityCompare(v86 T{_Smi} == v73 T{_Smi}) T{bool} goto (5, 6)
B5
ParallelMove rdi <- rdi
v9 <- StaticCall:40( _ensurePendingEvents@4048458<0> v2, using unchecked entrypoint, result_type = T{_PendingEvents}) T{_PendingEvents}
ParallelMove rdi <- rax, rsi <- C
StaticCall:42( add<0> v9, v10, using unchecked entrypoint)
ParallelMove  goto:48 B7
B6
B7
B8
ParallelMove rax <- C
DartReturn:58(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rdi, rdx <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . lastPendingEvent) T{_DelayedEvent<dynamic>??}
Branch if StrictCompare:12(===, v4, v0) goto (3, 4)
B3
ParallelMove rax <- rdx
StoreField(v2 T{_PendingEvents} . lastPendingEvent = v3 T{_DelayedEvent<dynamic>})
ParallelMove rax <- rdx
StoreField(v2 T{_PendingEvents} . firstPendingEvent = v3 T{_DelayedEvent<dynamic>})
ParallelMove  goto:30 B5
B4
v29 <- LoadClassId(<non-smi> v4 T{_DelayedEvent<dynamic>?}) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- rdx
DispatchTableCall( cid=v29 _DelayedEvent.next=<0>, v4 T{_DelayedEvent<dynamic>?}, v3)
ParallelMove rax <- fp[-2], rcx <- fp[-1]
StoreField(v2 T{_PendingEvents} . lastPendingEvent = v3 T{_DelayedEvent<dynamic>})
ParallelMove  goto:32 B5
B5
ParallelMove rax <- C
DartReturn:34(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove fp[-1] <- rdi
v51 <- LoadField(v2 T{_StreamController<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v88 <- IntConverter(int64->uint32[tr], v51) uint32
ParallelMove rcx <- rcx
v53 <- BinaryUint32Op(& [tr], v88 T{int}, v90 T{_Smi}) [0, 8] uint32
ParallelMove rcx <- rcx
v89 <- IntConverter(uint32->int64, v53) int64
Branch if EqualityCompare(v89 T{_Smi} == v74 T{_Smi}) T{bool} goto (3, 7)
B3
v16 <- LoadField(v2 . _varData@4048458) T{Object??}
Branch if StrictCompare:22(===, v16, v0) goto (4, 5)
B4
v20 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx
v21 <- AllocateObject:28(cls=_PendingEvents, v20) T{_PendingEvents}
ParallelMove rcx <- rax, rbx <- C
StoreField(v21 T{_PendingEvents} . _state@4048458 = v74 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rcx, rdx <- fp[-1]
StoreField(v2 T{_StreamController<X0>} . _varData@4048458 = v21 T{_PendingEvents})
ParallelMove rbx <- rcx goto:38 B6
B5
ParallelMove rdx <- rdi
ParallelMove rbx <- rax goto:40 B6
B6
ParallelMove fp[-2] <- rbx
v18 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rax, rcx <- C
t0 <- AssertAssignable:42(v17, v11, '', instantiator_type_args(v18), function_type_args(v0)) T{_PendingEvents}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-2]
DartReturn:44(v17 T{_PendingEvents})
B7
ParallelMove rdx <- rdi, rbx <- C
v5 <- LoadField(v2 . _varData@4048458) T{Object??}
ParallelMove fp[-3] <- rsi
v7 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rsi, rdx <- rdi, rcx <- C, fp[-2] <- rdi
t0 <- AssertAssignable:50(v5, v6, '', instantiator_type_args(v7), function_type_args(v0)) T{_StreamControllerAddStreamState}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-3]
v9 <- LoadField(v5 T{_StreamControllerAddStreamState} . _varData@4048458) T{*?}
Branch if StrictCompare:54(===, v9, v0) goto (8, 9)
B8
ParallelMove rdx <- fp[-2]
v15 <- AllocateObject:60(cls=_PendingEvents, v7 T{TypeArguments}) T{_PendingEvents}
ParallelMove rcx <- rax, rax <- C
StoreField(v15 T{_PendingEvents} . _state@4048458 = v74 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rcx, rdx <- fp[-3]
StoreField(v5 T{_StreamControllerAddStreamState} . _varData@4048458 = v15 T{_PendingEvents})
ParallelMove rbx <- rcx goto:70 B10
B9
ParallelMove rbx <- rcx goto:72 B10
B10
ParallelMove rax <- rbx, rdx <- fp[-2], rcx <- C, fp[-1] <- rbx
t0 <- AssertAssignable:74(v10, v11, '', instantiator_type_args(v7 T{TypeArguments}), function_type_args(v0)) T{_PendingEvents}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:76(v10 T{_PendingEvents})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . _pending@4048458) T{_PendingEvents?}
Branch if StrictCompare:12(===, v4, v0) goto (3, 4)
B3
v12 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx
v13 <- AllocateObject:18(cls=_PendingEvents, v12) T{_PendingEvents}
ParallelMove rcx <- rax, rax <- C
StoreField(v13 T{_PendingEvents} . _state@4048458 = v66 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rcx, rdx <- fp[-1]
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _pending@4048458 = v13 T{_PendingEvents})
ParallelMove rax <- rcx goto:28 B5
B4
ParallelMove rdx <- rax
ParallelMove rax <- rcx goto:30 B5
B5
ParallelMove rdi <- rax, rsi <- fp[-2], fp[-3] <- rax
StaticCall:32( add<0> v5, v3, using unchecked entrypoint)
ParallelMove rsi <- fp[-1]
v33 <- LoadField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
v75 <- IntConverter(int64->uint32[tr], v33) uint32
ParallelMove rdx <- C
ParallelMove rcx <- rcx
v35 <- BinaryUint32Op(& [tr], v75 T{int}, v77 T{_Smi}) [0, 128] uint32
ParallelMove rcx <- rcx
v76 <- IntConverter(uint32->int64, v35) int64
Branch if EqualityCompare(v76 T{_Smi} == v66 T{_Smi}) T{bool} goto (6, 10)
B6
ParallelMove rax <- rax
v10 <- BinaryInt64Op(| [tr], v33 T{int}, v67 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v10 T{int} <int64>)
Branch if RelationalOp(<, v10 T{int}, v68 T{_Smi}) T{bool} goto (7, 8)
B7
ParallelMove rdi <- fp[-3], rsi <- rsi
StaticCall:60( schedule<0> v5, v2)
ParallelMove  goto:66 B9
B8
B9
B10
B11
ParallelMove rax <- C
DartReturn:78(v0)
CheckStackOverflowSlowPath
B0
B11
Enter frame
PrologueOffset = 0
ParallelMove rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v5 <- AllocateContext:10(num_variables=2) T{Context}
ParallelMove rsi <- rax, rbx <- fp[-1]
ParallelMove fp[-3] <- rsi
StoreField(v5 . this = v2, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreField(v5 . dispatch = v3, NoStoreBarrier)
v8 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rax, rdx <- rdx, rcx <- C
t0 <- AssertAssignable:12(v3, v7, 'dispatch', instantiator_type_args(v8), function_type_args(v0)) T{_EventDispatch<X0>}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
v40 <- LoadField(v2 T{_PendingEvents} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v40 == v55 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:24(v0)
B4
Branch if RelationalOp(>=, v40 T{int}, v55 T{_Smi}) T{bool} goto (5, 6)
B5
ParallelMove rcx <- C
StoreField(v2 T{_PendingEvents} . _state@4048458 = v55 T{_Smi} <int64>)
ParallelMove rax <- C
DartReturn:40(v0)
B6
ParallelMove rcx <- C
ParallelMove rbx <- C, rdx <- fp[-3]
v14 <- AllocateClosure:44(v13, v5) T{_Closure}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v14)
StaticCall:46( scheduleMicrotask<0> v14)
ParallelMove rcx <- fp[-1], rdx <- C
StoreField(v2 T{_PendingEvents} . _state@4048458 = v55 T{_Smi} <int64>)
ParallelMove rax <- C
DartReturn:50(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove rcx <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v3 . this) T{_PendingEvents}
v5 <- LoadField(v4 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
StoreField(v4 T{_PendingEvents} . _state@4048458 = v25 T{_Smi} <int64>)
Branch if EqualityCompare(v5 == v26 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:24(v0)
B4
v12 <- LoadField(v3 . dispatch) T{_EventDispatch<X0>}
ParallelMove rdi <- rdi, rsi <- rsi
StaticCall:28( handleNext<0> v4 T{_PendingEvents}, v12, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:30(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-2] <- rdi, fp[-3] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . firstPendingEvent) T{_DelayedEvent<dynamic>??}
ParallelMove fp[-1] <- rdx
CheckNull:12(v4, CastError) T{_DelayedEvent<dynamic>?}
v30 <- LoadClassId(<non-smi> v4 T{_DelayedEvent<dynamic>?}) int64
ParallelMove rcx <- rcx, rdi <- rdx
v5 <- DispatchTableCall( cid=v30 _DelayedEvent.next<0>, v4 T{_DelayedEvent<dynamic>?}) T{_DelayedEvent<dynamic>??}
ParallelMove rax <- rax, rdx <- rax, rcx <- fp[-2]
StoreField(v2 T{_PendingEvents} . firstPendingEvent = v5 T{_DelayedEvent<dynamic>??})
Branch if StrictCompare:18(===, v5 T{_DelayedEvent<dynamic>??}, v0) goto (3, 4)
B3
ParallelMove rax <- C
StoreField(v2 T{_PendingEvents} . lastPendingEvent = v0 T{Null?})
ParallelMove  goto:30 B5
B4
ParallelMove rax <- C
ParallelMove  goto:32 B5
B5
v31 <- LoadClassId(<non-smi> v4 T{_DelayedEvent<dynamic>?}) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- fp[-3]
DispatchTableCall( cid=v31 _DelayedEvent.perform<0>, v4 T{_DelayedEvent<dynamic>?}, v3)
ParallelMove rax <- C
DartReturn:36(v0)
CheckStackOverflowSlowPath
slow path check null (cast) operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
CheckStackOverflow:8(stack=0, loop=0)
v28 <- LoadField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rcx
v55 <- IntConverter(int64->uint32[tr], v28) uint32
ParallelMove rdx <- rdx
v30 <- BinaryUint32Op(& [tr], v55 T{int}, v57 T{_Smi}) [0, 8] uint32
ParallelMove rdx <- rdx
v56 <- IntConverter(uint32->int64, v30) int64
Branch if EqualityCompare(v56 T{_Smi} != v49 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:20(v0)
B4
ParallelMove rcx <- rcx
v7 <- BinaryInt64Op(| [tr], v28 T{int}, v50 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v7 T{int} <int64>)
Branch if RelationalOp(<, v7 T{int}, v51 T{_Smi}) T{bool} goto (5, 6)
B5
ParallelMove rdi <- rdi
StaticCall:40( _sendDone@4048458<0> v2, using unchecked entrypoint)
ParallelMove  goto:48 B7
B6
ParallelMove rdi <- rdi, rsi <- C
StaticCall:44( _addPending@4048458<0> v2, v9, using unchecked entrypoint)
ParallelMove  goto:50 B7
B7
ParallelMove rax <- C
DartReturn:52(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi
v5 <- StaticCall:10( _close@4048458<0> v3 T{*}) T{void?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove fp[-2] <- rdi
v3 <- LoadField(v2 . _varData@4048458) T{Object??}
ParallelMove fp[-1] <- rbx
v17 <- LoadField(v2 T{_StreamController<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v36 <- IntConverter(int64->uint32[tr], v17) uint32
ParallelMove rcx <- rcx
v19 <- BinaryUint32Op(& [tr], v36 T{int}, v38 T{_Smi}) [0, 8] uint32
ParallelMove rcx <- rcx
v37 <- IntConverter(uint32->int64, v19) int64
Branch if EqualityCompare(v37 T{_Smi} != v32 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- rbx, rdx <- C, rcx <- C
t0 <- AssertAssignable:22(v3, v10, '', instantiator_type_args(v0), function_type_args(v0)) T{_StreamControllerAddStreamState}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
v12 <- LoadField(v3 T{_StreamControllerAddStreamState} . _varData@4048458) T{*?}
ParallelMove rbx <- rcx goto:30 B5
B4
ParallelMove rax <- rbx
ParallelMove rbx <- rax goto:32 B5
B5
ParallelMove fp[-1] <- rbx
v8 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
t0 <- AssertAssignable:34(v6, v7, '', instantiator_type_args(v8), function_type_args(v0)) T{_ControllerSubscription<X0>}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:36(v6 T{_ControllerSubscription<X0>})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _doneFuture@4048458) T{_Future?}
Branch if StrictCompare:12(===, v3, v0) goto (3, 7)
B3
ParallelMove rax <- C
v32 <- LoadField(v2 T{_StreamController<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v62 <- IntConverter(int64->uint32[tr], v32) uint32
ParallelMove rcx <- rcx
v34 <- BinaryUint32Op(& [tr], v62 T{int}, v64 T{_Smi}) [0, 2] uint32
ParallelMove rcx <- rcx
v63 <- IntConverter(uint32->int64, v34) int64
Branch if EqualityCompare(v63 T{_Smi} != v53 T{_Smi}) T{bool} goto (4, 5)
B4
v27 <- LoadStaticField:4(_nullFuture@4048458, CallsInitializer) T{_Future}
ParallelMove rax <- rax
ParallelMove rdx <- rax goto:38 B6
B5
ParallelMove rdx <- C
v8 <- AllocateObject:32(cls=_Future, v7) T{_Future}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-2] <- rcx
StoreField(v8 T{_Future} . _state@4048458 = v53 T{_Smi} <int64>, NoStoreBarrier)
v41 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rax <- rax, rcx <- fp[-2]
StoreField(v8 T{_Future} . _zone@4048458 = v41, NoStoreBarrier)
ParallelMove rdx <- rcx goto:40 B6
B6
ParallelMove rax <- rdx
StoreField(v2 T{_StreamController<X0>} . _doneFuture@4048458 = v9 T{_Future})
ParallelMove rax <- rdx goto:48 B8
B7
B8
ParallelMove rax <- rax
DartReturn:52(v4)
CheckStackOverflowSlowPath
B0
B1
v3 <- LoadField(v2 . _fragment@0150898 {final}) T{String??}
v4 <- StrictCompare:12(!==, v3, v0) T{bool}
ParallelMove rax <- rax
DartReturn:16(v4 T{bool})
B0
B1
v3 <- LoadField(v2 . _fragmentStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v4 <- LoadField(v2 . _uri@0150898 {final}) T{String}
v11 <- LoadField(v4 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rbx <- rbx
v12 <- UnboxInt64([non-speculative], v11 T{_Smi}) [0, 2305843009213693951] int64
v6 <- RelationalOp(<, v3, v12 T{_Smi}) T{bool}
ParallelMove rax <- rax
DartReturn:18(v6)
B0
B16
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v33 <- LoadField(v2 T{_StreamController<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v33, v46 T{_Smi}) T{bool} goto (3, 4)
B4
v39 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rdi <- fp[-1], rsi <- fp[-2], rdx <- fp[-3]
StaticCall:32( _addError@4048458<0> v2, v3, v4, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:34(v0)
B3
ParallelMove rdi <- fp[-1]
v9 <- StaticCall:22( _badEventState@4048458<0> v2, using unchecked entrypoint) T{Error}
ParallelMove rax <- rax
Throw:24(v9)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove fp[-1] <- rsi, fp[-2] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v58 <- LoadField(v2 T{_StreamController<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rcx
v107 <- IntConverter(int64->uint32[tr], v58) uint32
ParallelMove rbx <- rbx
v60 <- BinaryUint32Op(& [tr], v107 T{int}, v110 T{_Smi}) [0, 1] uint32
ParallelMove rbx <- rbx
v108 <- IntConverter(uint32->int64, v60) int64
Branch if EqualityCompare(v108 T{_Smi} != v96 T{_Smi}) T{bool} goto (3, 4)
B3
v33 <- LoadClassId(v2) [460, 461] int64
Branch if EqualityCompare:20(v33 == v34) goto (9, 14)
B9
ParallelMove rdi <- rdi
v19 <- StaticCall:10( get:_subscription@4048458<0> v2 T{_SyncStreamController}, result_type = T{!null}) T{_ControllerSubscription<X0>}
ParallelMove rdi <- rax, rsi <- fp[-1], rdx <- fp[-2]
StaticCall:12( _addError@4048458<0> v19, v3 T{Object}, v4 T{StackTrace}, using unchecked entrypoint)
ParallelMove  goto:14 B15
B14
ParallelMove rcx <- rsi, rax <- rdx
ParallelMove rdi <- rdi
v30 <- StaticCall:10( get:_subscription@4048458<0> v2 T{_AsyncStreamController}, result_type = T{!null}) T{_ControllerSubscription<X0>}
ParallelMove rdx <- C, rax <- rax
ParallelMove fp[-3] <- rax
v31 <- AllocateObject:12(cls=_DelayedError, v0 T{Null?}) T{_DelayedError}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v31 T{_DelayedError} . error = v3 T{Object}, NoStoreBarrier)
ParallelMove rdx <- fp[-2]
StoreField(v31 T{_DelayedError} . stackTrace = v4 T{StackTrace}, NoStoreBarrier)
ParallelMove rdi <- fp[-3], rsi <- rcx
StaticCall:16( _addPending@4048458<0> v30, v31, using unchecked entrypoint)
ParallelMove  goto:18 B15
B15
B4
ParallelMove rax <- rsi, rbx <- C
ParallelMove rcx <- rcx
v106 <- IntConverter(int64->uint32[tr], v58 T{int}) uint32
ParallelMove rcx <- rcx
v49 <- BinaryUint32Op(& [tr], v106 T{int}, v111 T{_Smi}) [0, 3] uint32
ParallelMove rcx <- rcx
v109 <- IntConverter(uint32->int64, v49) int64
Branch if EqualityCompare(v109 T{_Smi} == v96 T{_Smi}) T{bool} goto (5, 6)
B5
ParallelMove rdi <- rdi
v8 <- StaticCall:34( _ensurePendingEvents@4048458<0> v2, using unchecked entrypoint, result_type = T{_PendingEvents}) T{_PendingEvents}
ParallelMove rdx <- C, rax <- rax
ParallelMove fp[-3] <- rax
v9 <- AllocateObject:36(cls=_DelayedError, v0) T{_DelayedError}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v9 T{_DelayedError} . error = v3 T{Object}, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreField(v9 T{_DelayedError} . stackTrace = v4 T{StackTrace}, NoStoreBarrier)
ParallelMove rdi <- fp[-3], rsi <- rcx
StaticCall:40( add<0> v8, v9, using unchecked entrypoint)
ParallelMove  goto:46 B7
B6
B7
B8
ParallelMove rax <- C
DartReturn:56(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[4]
v5 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi, rsi <- fp[3], rdx <- fp[2]
v7 <- StaticCall:10( _addError@4048458<0> v5 T{*}, v3, v4) T{void?}
ParallelMove rax <- rax
DartReturn:12(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove rcx <- rdx, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v29 <- LoadField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rdx
v58 <- IntConverter(int64->uint32[tr], v29) uint32
ParallelMove rbx <- rbx
v31 <- BinaryUint32Op(& [tr], v58 T{int}, v60 T{_Smi}) [0, 8] uint32
ParallelMove rbx <- rbx
v59 <- IntConverter(uint32->int64, v31) int64
Branch if EqualityCompare(v59 T{_Smi} != v53 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:20(v0)
B4
Branch if RelationalOp(<, v29 T{int}, v54 T{_Smi}) T{bool} goto (5, 6)
B5
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rcx
StaticCall:34( _sendError@4048458<0> v2, v3, v4, using unchecked entrypoint)
ParallelMove  goto:46 B7
B6
ParallelMove rdx <- C
v8 <- AllocateObject:38(cls=_DelayedError, v0) T{_DelayedError}
ParallelMove rcx <- rax, rax <- fp[-2]
StoreField(v8 T{_DelayedError} . error = v3 T{Object}, NoStoreBarrier)
ParallelMove rax <- fp[-3]
StoreField(v8 T{_DelayedError} . stackTrace = v4 T{StackTrace}, NoStoreBarrier)
ParallelMove rdi <- fp[-1], rsi <- rcx
StaticCall:42( _addPending@4048458<0> v2, v8, using unchecked entrypoint)
ParallelMove  goto:48 B7
B7
ParallelMove rax <- C
DartReturn:50(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[4]
v5 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi, rsi <- fp[3], rdx <- fp[2]
v7 <- StaticCall:10( _addError@4048458<0> v5 T{*}, v3, v4) T{void?}
ParallelMove rax <- rax
DartReturn:12(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v5 <- AllocateContext:10(num_variables=3) T{Context}
ParallelMove rax <- rax, rdi <- fp[-1]
StoreField(v5 . this = v2, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreField(v5 . error = v3, NoStoreBarrier)
ParallelMove rcx <- fp[-3]
StoreField(v5 . stackTrace = v4, NoStoreBarrier)
v31 <- LoadField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-4] <- rcx
ParallelMove rdx <- rcx
v73 <- IntConverter(int64->uint32[tr], v31) uint32
ParallelMove rbx <- C
ParallelMove rdx <- rdx
v33 <- BinaryUint32Op(& [tr], v73 T{int}, v76 T{_Smi}) [0, 4] uint32
ParallelMove rdx <- rdx
v74 <- IntConverter(uint32->int64, v33) int64
v35 <- EqualityCompare(v74 T{_Smi} != v62 T{_Smi}) T{bool}
ParallelMove rbx <- C, rdx <- rax, fp[-2] <- rsi
v8 <- AllocateClosure:14(v7, v5) T{_Closure}
ParallelMove rax <- rax
ParallelMove rcx <- fp[-4], fp[-3] <- rax
v72 <- IntConverter(int64->uint32[tr], v31 T{int}) uint32
ParallelMove rdx <- C
ParallelMove rcx <- rcx
v45 <- BinaryUint32Op(& [tr], v72 T{int}, v77 T{_Smi}) [0, 1] uint32
ParallelMove rcx <- rcx
v75 <- IntConverter(uint32->int64, v45) int64
Branch if EqualityCompare(v75 T{_Smi} != v62 T{_Smi}) T{bool} goto (3, 10)
B3
ParallelMove rcx <- fp[-1]
ParallelMove rdx <- fp[-4]
v14 <- BinaryInt64Op(| [tr], v31 T{int}, v64 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v14 T{int} <int64>)
ParallelMove rdi <- rcx
StaticCall:32( _cancel@4048458<0> v2, using unchecked entrypoint)
ParallelMove rdi <- fp[-1]
v15 <- LoadField(v2 . _cancelFuture@4048458) T{_Future?}
ParallelMove fp[-5] <- rax
Branch if StrictCompare:36(!==, v15, v0) goto (4, 7)
B4
v20 <- LoadStaticField:4(_nullFuture@4048458, CallsInitializer) T{_Future}
ParallelMove rax <- rax, rdi <- fp[-5]
Branch if StrictCompare:42(!==, v15 T{_Future}, v20 T{_Future}) goto (5, 8)
B5
ParallelMove rdi <- rdi, rsi <- fp[-3]
StaticCall:50( whenComplete<0> v15 T{_Future}, v8, using unchecked entrypoint)
ParallelMove  goto:66 B9
B8
B7
B6
MoveArgument(sp[0] <- v8)
ParallelMove rax <- fp[-3]
ClosureCall:62( closure=v8<0>, v8)
ParallelMove  goto:68 B9
B9
B10
ParallelMove rdi <- fp[-1]
MoveArgument(sp[0] <- v8)
ParallelMove rax <- fp[-3]
ClosureCall:72( closure=v8<0>, v8)
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
StaticCall:74( _checkState@4048458<0> v2, v35 T{bool}, using unchecked entrypoint)
ParallelMove  goto:80 B11
B11
ParallelMove rax <- C
DartReturn:82(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove rcx <- rdi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v160 <- LoadField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rdx
v253 <- IntConverter(int64->uint32[tr], v160) uint32
ParallelMove rbx <- rbx
v162 <- BinaryUint32Op(& [tr], v253 T{int}, v265 T{_Smi}) [0, 128] uint32
ParallelMove rbx <- rbx
v254 <- IntConverter(uint32->int64, v162) int64
Branch if EqualityCompare(v254 T{_Smi} != v218 T{_Smi}) T{bool} goto (3, 12)
B3
v21 <- LoadField(v2 . _pending@4048458) T{_PendingEvents?}
CheckNull:20(v21, CastError) T{_PendingEvents}
v154 <- LoadField(v21 T{_PendingEvents} . lastPendingEvent) T{_DelayedEvent<dynamic>??}
Branch if StrictCompare:12(===, v154, v0 T{Null?}) T{bool} goto (4, 13)
B4
ParallelMove rbx <- C
ParallelMove rdx <- rdx
v26 <- BinaryInt64Op(& [tr], v160 T{int}, v183) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v26 T{int} <int64>)
ParallelMove rdx <- rdx
v255 <- IntConverter(int64->uint32[tr], v26 T{int}) uint32
ParallelMove rdx <- rdx
v146 <- BinaryUint32Op(& [tr], v255 T{int}, v266 T{_Smi}) [0, 4] uint32
ParallelMove rdx <- rdx
v256 <- IntConverter(uint32->int64, v146) int64
Branch if EqualityCompare(v256 T{_Smi} != v218 T{_Smi}) T{bool} goto (5, 8)
B5
ParallelMove rdi <- rcx
v28 <- StaticCall:50( get:_mayResumeInput@4048458<0> v2, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:54(===, v28 T{bool}, v5) goto (6, 9)
BoolTest
B6
ParallelMove rax <- fp[-1]
v29 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v32 <- BinaryInt64Op(& [tr], v29, v184) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v32 T{int} <int64>)
ParallelMove  goto:82 B10
B9
ParallelMove rax <- fp[-1]
ParallelMove  goto:78 B7
B8
ParallelMove rax <- rcx
ParallelMove  goto:74 B7
B7
B10
B13
ParallelMove rax <- rcx
ParallelMove  goto:94 B11
B12
ParallelMove rax <- rcx
ParallelMove  goto:90 B11
B11
B14
v48 <- LoadClassId:184(v2) [455, 456] int64
ParallelMove fp[-4] <- rdx
v63 <- LoadClassId:184(v2) [455, 456] int64
ParallelMove fp[-3] <- rbx
ParallelMove rcx <- fp[-2] goto:184 B23
B23
  Loop 0
CheckStackOverflow:182(stack=0, loop=1)
v121 <- LoadField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rsi
v259 <- IntConverter(int64->uint32[tr], v121) uint32
ParallelMove rdi <- rdi
v123 <- BinaryUint32Op(& [tr], v259 T{int}, v267 T{_Smi}) [0, 8] uint32
ParallelMove rdi <- rdi
v260 <- IntConverter(uint32->int64, v123) int64
Branch if EqualityCompare(v260 T{_Smi} != v218 T{_Smi}) T{bool} goto (15, 16)
B16
  Loop 0
ParallelMove rdi <- rsi
v258 <- IntConverter(int64->uint32[tr], v121 T{int}) uint32
ParallelMove rdi <- rdi
v101 <- BinaryUint32Op(& [tr], v258 T{int}, v266 T{_Smi}) [0, 4] uint32
ParallelMove rdi <- rdi
v261 <- IntConverter(uint32->int64, v101) int64
v103 <- EqualityCompare(v261 T{_Smi} != v218 T{_Smi}) T{bool}
ParallelMove fp[-2] <- r10
Branch if StrictCompare:10(===, v6 T{bool}, v103 T{bool}) T{bool} goto (18, 19)
B19
  Loop 0
ParallelMove rcx <- rsi
v17 <- BinaryInt64Op(^ [tr], v121 T{int}, v222 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v17 T{int} <int64>)
Branch if StrictCompare:150(===, v103 T{bool}, v5 T{bool}) goto (20, 21)
BoolTest
B20
  Loop 0
Branch if EqualityCompare:156(v63 == v49) goto (39, 44)
B39
  Loop 0
v55 <- LoadField(v2 T{_BufferingStreamSubscription<X0>} . _controller@4048458 {final}) T{_StreamControllerLifecycle<X0>}
v263 <- LoadClassId(<non-smi> v55) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- rax
DispatchTableCall( cid=v263 _StreamControllerLifecycle._recordPause<0>, v55, v2 T{_BufferingStreamSubscription<X0>})
ParallelMove  goto:14 B45
B44
B45
B21
  Loop 0
ParallelMove rax <- rdx
Branch if EqualityCompare:160(v48 == v49) goto (32, 37)
B32
  Loop 0
ParallelMove rdx <- fp[-1]
v40 <- LoadField(v2 T{_BufferingStreamSubscription<X0>} . _controller@4048458 {final}) T{_StreamControllerLifecycle<X0>}
v264 <- LoadClassId(<non-smi> v40) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- rdx
DispatchTableCall( cid=v264 _StreamControllerLifecycle._recordResume<0>, v40, v2 T{_BufferingStreamSubscription<X0>})
ParallelMove  goto:14 B38
B37
B38
B22
  Loop 0
v18 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v20 <- BinaryInt64Op(& [tr], v18, v185) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v20 T{int} <int64>)
ParallelMove rcx <- fp[-2], rdx <- fp[-4], rbx <- fp[-3] goto:180 B23
B18
ParallelMove rcx <- C
ParallelMove rdx <- rsi
v257 <- IntConverter(int64->uint32[tr], v121 T{int}) uint32
ParallelMove rdx <- rdx
v78 <- BinaryUint32Op(& [tr], v257 T{int}, v265 T{_Smi}) [0, 128] uint32
ParallelMove rdx <- rdx
v262 <- IntConverter(uint32->int64, v78) int64
Branch if EqualityCompare(v262 T{_Smi} != v218 T{_Smi}) T{bool} goto (26, 29)
B26
Branch if RelationalOp(<, v121 T{int}, v221 T{_Smi}) T{bool} goto (27, 30)
B27
v11 <- LoadField(v2 . _pending@4048458) T{_PendingEvents?}
CheckNull:212(v11, CastError) T{_PendingEvents}
ParallelMove rdi <- rdi, rsi <- rax
StaticCall:214( schedule<0> v11 T{_PendingEvents}, v2)
ParallelMove  goto:228 B31
B30
B29
B28
B31
ParallelMove rax <- C
DartReturn:232(v0)
B15
ParallelMove rcx <- C
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _pending@4048458 = v0 T{Null?})
ParallelMove rax <- rcx
DartReturn:120(v0)
CheckStackOverflowSlowPath
slow path check null (cast) operation
CheckStackOverflowSlowPath
slow path check null (cast) operation
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi
v5 <- StaticCall:10( _onResume@4048458<0> v3 T{*}) T{void?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi
v5 <- StaticCall:10( _onPause@4048458<0> v3 T{*}) T{void?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
v26 <- LoadField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v26, v39 T{_Smi}) T{bool} goto (4, 11)
B4
v9 <- LoadField(v2 . _pending@4048458) T{_PendingEvents?}
Branch if StrictCompare:24(===, v9, v0) goto (5, 6)
B5
ParallelMove rcx <- C goto:36 B7
B6
v20 <- LoadField(v9 T{_PendingEvents} . lastPendingEvent) T{_DelayedEvent<dynamic>??}
v21 <- StrictCompare:12(===, v20, v0 T{Null?}) T{bool}
ParallelMove rcx <- rcx goto:38 B7
B7
Branch if StrictCompare:40(===, v11, v0) goto (8, 9)
B8
ParallelMove rcx <- C goto:50 B10
B9
B10
ParallelMove rax <- rcx goto:56 B3
B11
ParallelMove rax <- C goto:60 B3
B3
ParallelMove rax <- rax
DartReturn:62(v6)
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove rcx <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
ParallelMove fp[-3] <- rbx
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v3 . this) T{_BufferingStreamSubscription<X0>}
ParallelMove fp[-2] <- rsi
v65 <- LoadField(v4 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rcx
v110 <- IntConverter(int64->uint32[tr], v65) uint32
ParallelMove rdx <- rdx
v67 <- BinaryUint32Op(& [tr], v110 T{int}, v113 T{_Smi}) [0, 8] uint32
ParallelMove rdx <- rdx
v111 <- IntConverter(uint32->int64, v67) int64
Branch if EqualityCompare(v111 T{_Smi} != v92 T{_Smi}) T{bool} goto (3, 6)
B3
ParallelMove rax <- C
ParallelMove rdx <- rcx
v109 <- IntConverter(int64->uint32[tr], v65 T{int}) uint32
ParallelMove rdx <- rdx
v55 <- BinaryUint32Op(& [tr], v109 T{int}, v114 T{_Smi}) [0, 16] uint32
ParallelMove rdx <- rdx
v112 <- IntConverter(uint32->int64, v55) int64
Branch if EqualityCompare(v112 T{_Smi} == v92 T{_Smi}) T{bool} goto (4, 7)
B4
ParallelMove rax <- C
DartReturn:30(v0)
B7
B6
B5
ParallelMove rcx <- rcx
v11 <- BinaryInt64Op(| [tr], v65 T{int}, v94 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v4 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v11 T{int} <int64>)
v13 <- LoadField(v4 T{_BufferingStreamSubscription<X0>} . _onError@4048458) T{Function}
ParallelMove rax <- rdi, rdx <- C, rcx <- C, fp[-1] <- rdi
v15 <- InstanceOf:50(v13 IS (dynamic, Object, StackTrace) => void, instantiator_type_args(v0), function_type_args(v0)) T{bool}
InlineInstanceof
FunctionTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:54(===, v15 T{bool}, v6) goto (8, 9)
BoolTest
B8
ParallelMove rax <- fp[-3], rcx <- fp[-2]
v31 <- LoadField(v4 T{_BufferingStreamSubscription<X0>} . _zone@4048458 {final}) T{_RootZone}
v32 <- LoadField(v3 . error) T{Object}
v33 <- LoadField(v3 . stackTrace) T{StackTrace}
MoveArgument(sp[4] <- v29)
MoveArgument(sp[3] <- v31)
MoveArgument(sp[2] <- v13 T{_Closure})
MoveArgument(sp[1] <- v32)
MoveArgument(sp[0] <- v33)
StaticCall:62( runBinaryGuarded<2> v29, v31, v13 T{_Closure}, v32, v33, using unchecked entrypoint)
ParallelMove  goto:76 B10
B9
ParallelMove rbx <- fp[-3], rcx <- fp[-2]
v18 <- LoadField(v4 T{_BufferingStreamSubscription<X0>} . _zone@4048458 {final}) T{_RootZone}
ParallelMove rax <- fp[-1], rdx <- C, rcx <- C, fp[-4] <- rsi
t2 <- AssertAssignable:70(v13 T{Function}, v21, '', instantiator_type_args(v0), function_type_args(v0)) T{_Closure}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-3]
v23 <- LoadField(v3 . error) T{Object}
MoveArgument(sp[3] <- v16)
MoveArgument(sp[2] <- v18)
MoveArgument(sp[1] <- v13 T{_Closure})
MoveArgument(sp[0] <- v23)
StaticCall:72( runUnaryGuarded<1> v16, v18, v13 T{_Closure}, v23, using unchecked entrypoint)
ParallelMove  goto:78 B10
B10
v24 <- LoadField(v3 . this) T{_BufferingStreamSubscription<X0>}
v26 <- LoadField(v24 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v28 <- BinaryInt64Op(& [tr], v26, v78) [-9223372036854775808, 9223372036854775807] int64
StoreField(v24 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v28 T{int} <int64>)
ParallelMove rax <- C
DartReturn:88(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v30 <- LoadField(v29 . ArgumentsDescriptor.type_args_len {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare:4(===, v30, v31) goto (2, 3)
B2
ParallelMove rcx <- C goto:14 B5
B3
v32 <- LoadField(v29 . ArgumentsDescriptor.size {final}) [0, 4611686018427387903] T{_Smi}
v33 <- LoadIndexedUnsafe(rbp[v32 + 16]) T{TypeArguments?}
ParallelMove rcx <- rcx goto:16 B5
B5
ParallelMove fp[-10] <- rcx
CheckStackOverflow:22(stack=0, loop=0)
ParallelMove  goto:26 B6
B6
v50 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rax <- rax
Branch if StrictCompare:32(===, v35, v50) goto (8, 9)
B8
MoveArgument(sp[1] <- v27)
MoveArgument(sp[0] <- v28)
ParallelMove rax <- fp[3]
v39 <- ClosureCall:40( closure=v27<0>, v27, v28) T{*?}
ParallelMove rax <- C
DartReturn:42(v0)
B9
ParallelMove rdx <- C, rcx <- fp[-10], rbx <- C
v38 <- InstantiateTypeArguments:46(v37, instantiator_type_args(v0), function_type_args(v34), instantiator_class(Library:'dart:async' Class: _RootZone@4048458)) T{*?}
ParallelMove rax <- rax
MoveArgument(sp[3] <- v38)
MoveArgument(sp[2] <- v26)
MoveArgument(sp[1] <- v27)
MoveArgument(sp[0] <- v28)
StaticCall:48( _rootRunUnary@4048458<2> v38, v26, v27, v28)
ParallelMove  goto:50 B7
B10
ParallelMove rdi <- rax, rsi <- rdx
StaticCall:10( _rootHandleError@4048458<0> v9 T{Object}, v10 T{StackTrace})
ParallelMove  goto:56 B7
B7
ParallelMove rax <- C
DartReturn:58(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v33 <- LoadField(v32 . ArgumentsDescriptor.type_args_len {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare:4(===, v33, v34) goto (2, 3)
B2
ParallelMove rcx <- C goto:14 B5
B3
v35 <- LoadField(v32 . ArgumentsDescriptor.size {final}) [0, 4611686018427387903] T{_Smi}
v36 <- LoadIndexedUnsafe(rbp[v35 + 16]) T{TypeArguments?}
ParallelMove rcx <- rcx goto:16 B5
B5
ParallelMove fp[-10] <- rcx
CheckStackOverflow:22(stack=0, loop=0)
ParallelMove  goto:26 B6
B6
v53 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rax <- rax
Branch if StrictCompare:32(===, v38, v53) goto (8, 9)
B8
MoveArgument(sp[2] <- v29)
MoveArgument(sp[1] <- v30)
MoveArgument(sp[0] <- v31)
ParallelMove rax <- fp[4]
v42 <- ClosureCall:40( closure=v29<0>, v29, v30, v31) T{*?}
ParallelMove rax <- C
DartReturn:42(v0)
B9
ParallelMove rdx <- C, rcx <- fp[-10], rbx <- C
v41 <- InstantiateTypeArguments:46(v40, instantiator_type_args(v0), function_type_args(v37), instantiator_class(Library:'dart:async' Class: _RootZone@4048458)) T{*?}
ParallelMove rax <- rax
MoveArgument(sp[4] <- v41)
MoveArgument(sp[3] <- v28)
MoveArgument(sp[2] <- v29)
MoveArgument(sp[1] <- v30)
MoveArgument(sp[0] <- v31)
StaticCall:48( _rootRunBinary@4048458<3> v41, v28, v29, v30, v31)
ParallelMove  goto:50 B7
B10
ParallelMove rdi <- rax, rsi <- rdx
StaticCall:10( _rootHandleError@4048458<0> v10 T{Object}, v11 T{StackTrace})
ParallelMove  goto:56 B7
B7
ParallelMove rax <- C
DartReturn:58(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- C, rdx <- fp[2]
v4 <- AllocateClosure:6(v3, v2) T{_Closure}
ParallelMove rax <- rax
DartReturn:8(v4)
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi
v5 <- StaticCall:10( _close@4048458<0> v3 T{*}) T{void?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _varData@4048458) T{Object??}
ParallelMove fp[-1] <- rbx
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
t0 <- AssertAssignable:12(v3, v4, '', instantiator_type_args(v5), function_type_args(v0)) T{_StreamControllerAddStreamState}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-1]
v7 <- LoadField(v3 T{_StreamControllerAddStreamState} . _varData@4048458) T{*?}
ParallelMove rax <- rax, rcx <- fp[-2]
StoreField(v2 T{_StreamController<X0>} . _varData@4048458 = v7 T{Object??})
v8 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v11 <- BinaryInt64Op(& [tr], v8, v24) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_StreamController<X0>} . _state@4048458 = v11 T{int} <int64>)
ParallelMove rdi <- rdi
StaticCall:26( complete<0> v3 T{_StreamControllerAddStreamState}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:28(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . addStreamFuture {final}) T{_Future}
ParallelMove rdi <- rax, rsi <- C
StaticCall:12( _asyncComplete@4048458<0> v3, v0, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rsi, fp[-2] <- rdi, fp[-3] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rsi, rcx <- C, fp[-1] <- rsi
t0 <- AssertAssignable:10(v3, v4, 'data', instantiator_type_args(v5), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-2]
v21 <- LoadField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
v49 <- IntConverter(int64->uint32[tr], v21) uint32
ParallelMove rdx <- C
ParallelMove rcx <- rcx
v23 <- BinaryUint32Op(& [tr], v49 T{int}, v51 T{_Smi}) [0, 4] uint32
ParallelMove rcx <- rcx
v50 <- IntConverter(uint32->int64, v23) int64
v25 <- EqualityCompare(v50 T{_Smi} != v46 T{_Smi}) T{bool}
ParallelMove fp[-4] <- rsi
ParallelMove rax <- rax
v10 <- BinaryInt64Op(| [tr], v21 T{int}, v47 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v10 T{int} <int64>)
v12 <- LoadField(v2 . _zone@4048458 {final}) T{_RootZone}
v13 <- LoadField(v2 . _onData@4048458) T{(dynamic, X0) => void}
MoveArgument(sp[3] <- v5 T{TypeArguments})
MoveArgument(sp[2] <- v12)
MoveArgument(sp[1] <- v13)
MoveArgument(sp[0] <- v3 T{X0?})
StaticCall:24( runUnaryGuarded<1> v5 T{TypeArguments}, v12, v13, v3 T{X0?}, using unchecked entrypoint)
ParallelMove rdi <- fp[-2]
v14 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v16 <- BinaryInt64Op(& [tr], v14, v41) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v16 T{int} <int64>)
ParallelMove rdi <- rdi, rsi <- fp[-4]
StaticCall:34( _checkState@4048458<0> v2, v25 T{bool}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:36(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- C, rdx <- fp[2]
v4 <- AllocateClosure:6(v3, v2) T{_Closure}
ParallelMove rax <- rax
DartReturn:8(v4)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- C, rdx <- fp[2]
v4 <- AllocateClosure:6(v3, v2) T{_Closure}
ParallelMove rax <- rax
DartReturn:8(v4)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v7)
B4
v14 <- LoadClassId(v3 T{*}) [1, 617] int64
Branch if EqualityCompare(v14 == v15) T{bool} goto (6, 7)
B6
ParallelMove rcx <- fp[3]
v9 <- LoadField(v2 . _name@9040228 {final}) T{String}
v10 <- LoadField(v3 T{Symbol} . _name@9040228 {final}) T{String}
v25 <- LoadClassId(<non-smi> v9) int64
MoveArgument(sp[1] <- v9)
MoveArgument(sp[0] <- v10)
ParallelMove rcx <- rax
v11 <- DispatchTableCall( cid=v25 String.==<0>, v9, v10) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:40 B5
B7
ParallelMove rax <- C goto:44 B5
B5
ParallelMove rax <- rax
DartReturn:46(v8)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- C, rdx <- fp[2]
v4 <- AllocateClosure:6(v3, v2) T{_Closure}
ParallelMove rax <- rax
DartReturn:8(v4)
B0
B1
Enter frame
PrologueOffset = 0
v10 <- LoadField(v2 T{_UnmodifiableInt8ArrayView} . TypedDataView.typed_data {final}) T{*}
ParallelMove fp[-1] <- rax
v3 <- AllocateObject:10(cls=_UnmodifiableByteBufferView, <not-aliased>) T{_UnmodifiableByteBufferView}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v3 T{_UnmodifiableByteBufferView} . _data@7027147 = v10 T{_TypedList}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:18(v3)
B0
B1
Enter frame
PrologueOffset = 0
v9 <- LoadField(v2 T{_TypedListView} . TypedDataView.typed_data {final}) T{*}
ParallelMove fp[-1] <- rax
v14 <- AllocateObject:10(cls=_ByteBuffer, <not-aliased>) T{_ByteBuffer}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v14 T{_ByteBuffer} . _data@7027147 = v9 T{_TypedList}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v14 T{_ByteBuffer})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
v3 <- AllocateObject:10(cls=_ByteBuffer) T{_ByteBuffer}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v3 T{_ByteBuffer} . _data@7027147 = v2 T{_TypedList}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v3)
B0
B1
v3 <- LoadField(v2 . _fragment@0150898 {final}) T{String??}
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C goto:22 B5
B4
ParallelMove rax <- rcx goto:24 B5
B5
ParallelMove rax <- rax
DartReturn:26(v4)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _fragmentStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v4 <- LoadField(v2 . _uri@0150898 {final}) T{String}
v19 <- LoadField(v4 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v25 <- UnboxInt64([non-speculative], v19 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(<, v3, v25 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- rax
v13 <- BinaryInt64Op(+ [tr], v3 T{int}, v28 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rcx, rsi <- rax
v14 <- StaticCall:32( substring<0> v4 T{String}, v13, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:38 B5
B4
ParallelMove rax <- C goto:40 B5
B5
ParallelMove rax <- rax
DartReturn:42(v9)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . path {final}) T{String}
ParallelMove rdi <- rax, rsi <- C
v5 <- StaticCall:12( startsWith<0> v3, v4, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
DartReturn:14(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _uri@0150898 {final}) T{String}
v5 <- LoadField(v2 . _pathStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v7 <- BoxInt64(v5) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v7 T{int})
ParallelMove rdi <- rcx, rsi <- C
v6 <- StaticCall:14( startsWith<0> v3, v4, v7 T{int}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
DartReturn:16(v6)
CheckStackOverflowSlowPath
B0
B5
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
t0 <- AssertAssignable:10(v3, v4, 'value', instantiator_type_args(v5), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-1]
v14 <- LoadField(v2 T{_StreamController<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v14, v23 T{_Smi}) T{bool} goto (3, 4)
B4
ParallelMove rdi <- rdi, rsi <- fp[-2]
StaticCall:28( _add@4048458<0> v2, v3 T{X0?}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:30(v0)
B3
ParallelMove rdi <- rdi
v9 <- StaticCall:22( _badEventState@4048458<0> v2, using unchecked entrypoint) T{Error}
ParallelMove rax <- rax
Throw:24(v9)
CheckStackOverflowSlowPath
B0
B9
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rsi, fp[-2] <- rdi, fp[-3] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rsi, rcx <- C, fp[-1] <- rsi
t0 <- AssertAssignable:10(v3, v4, 'value', instantiator_type_args(v5), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-2]
v56 <- LoadField(v2 T{_StreamController<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
v106 <- IntConverter(int64->uint32[tr], v56) uint32
ParallelMove rdx <- C
ParallelMove rcx <- rcx
v58 <- BinaryUint32Op(& [tr], v106 T{int}, v109 T{_Smi}) [0, 1] uint32
ParallelMove rcx <- rcx
v107 <- IntConverter(uint32->int64, v58) int64
Branch if EqualityCompare(v107 T{_Smi} != v95 T{_Smi}) T{bool} goto (3, 4)
B3
v33 <- LoadClassId(v2) [460, 461] int64
Branch if EqualityCompare:22(v33 == v34) goto (11, 16)
B11
ParallelMove rdi <- rdi
v20 <- StaticCall:10( get:_subscription@4048458<0> v2 T{_SyncStreamController}, result_type = T{!null}) T{_ControllerSubscription<X0>}
ParallelMove rdi <- rax, rsi <- fp[-3]
StaticCall:12( _add@4048458<0> v20, v3 T{X0?})
ParallelMove  goto:14 B17
B16
ParallelMove rax <- fp[-3]
ParallelMove rdi <- rdi
v29 <- StaticCall:10( get:_subscription@4048458<0> v2 T{_AsyncStreamController}, result_type = T{!null}) T{_ControllerSubscription<X0>}
ParallelMove rdx <- fp[-1], rax <- rax
ParallelMove fp[-4] <- rax
v31 <- AllocateObject:12(cls=_DelayedData, v5 T{TypeArguments}) T{_DelayedData}
ParallelMove rax <- rax, rcx <- fp[-3]
StoreField(v31 T{_DelayedData} . value = v3 T{X0?}, NoStoreBarrier)
ParallelMove rdi <- fp[-4], rsi <- rax
StaticCall:16( _addPending@4048458<0> v29, v31, using unchecked entrypoint)
ParallelMove  goto:18 B17
B17
B4
ParallelMove rcx <- fp[-3], rdx <- C
ParallelMove rax <- rax
v105 <- IntConverter(int64->uint32[tr], v56 T{int}) uint32
ParallelMove rax <- rax
v47 <- BinaryUint32Op(& [tr], v105 T{int}, v110 T{_Smi}) [0, 3] uint32
ParallelMove rax <- rax
v108 <- IntConverter(uint32->int64, v47) int64
Branch if EqualityCompare(v108 T{_Smi} == v95 T{_Smi}) T{bool} goto (5, 6)
B5
ParallelMove rdi <- rdi
v10 <- StaticCall:36( _ensurePendingEvents@4048458<0> v2, using unchecked entrypoint, result_type = T{_PendingEvents}) T{_PendingEvents}
ParallelMove rdx <- fp[-1], rax <- rax
ParallelMove fp[-1] <- rax
v12 <- AllocateObject:38(cls=_DelayedData, v5 T{TypeArguments}) T{_DelayedData}
ParallelMove rcx <- rax, rax <- fp[-3]
StoreField(v12 T{_DelayedData} . value = v3 T{X0?}, NoStoreBarrier)
ParallelMove rdi <- fp[-1], rsi <- rcx
StaticCall:42( add<0> v10, v12, using unchecked entrypoint)
ParallelMove  goto:48 B7
B6
B7
B8
ParallelMove rax <- C
DartReturn:58(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[3]
v4 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi, rsi <- fp[2]
v6 <- StaticCall:10( _add@4048458<0> v4 T{*}, v3) T{void?}
ParallelMove rax <- rax
DartReturn:12(v6)
CheckStackOverflowSlowPath
B0
B8
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rsi, fp[-2] <- rdi, fp[-3] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rsi, rcx <- C, fp[-1] <- rsi
t0 <- AssertAssignable:10(v3, v4, 'data', instantiator_type_args(v5), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-2]
v30 <- LoadField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
v60 <- IntConverter(int64->uint32[tr], v30) uint32
ParallelMove rdx <- C
ParallelMove rcx <- rcx
v32 <- BinaryUint32Op(& [tr], v60 T{int}, v62 T{_Smi}) [0, 8] uint32
ParallelMove rcx <- rcx
v61 <- IntConverter(uint32->int64, v32) int64
Branch if EqualityCompare(v61 T{_Smi} != v55 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:22(v0)
B4
Branch if RelationalOp(<, v30 T{int}, v56 T{_Smi}) T{bool} goto (5, 6)
B5
ParallelMove rdi <- rdi, rsi <- fp[-3]
StaticCall:36( _sendData@4048458<0> v2, v3 T{X0?}, using unchecked entrypoint)
ParallelMove  goto:48 B7
B6
ParallelMove rax <- fp[-3]
ParallelMove rdx <- fp[-1]
v11 <- AllocateObject:40(cls=_DelayedData, v5 T{TypeArguments}) T{_DelayedData}
ParallelMove rcx <- rax, rax <- fp[-3]
StoreField(v11 T{_DelayedData} . value = v3 T{X0?}, NoStoreBarrier)
ParallelMove rdi <- fp[-2], rsi <- rcx
StaticCall:44( _addPending@4048458<0> v2, v11, using unchecked entrypoint)
ParallelMove  goto:50 B7
B7
ParallelMove rax <- C
DartReturn:52(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[3]
v4 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi, rsi <- fp[2]
v6 <- StaticCall:10( _add@4048458<0> v4 T{*}, v3) T{void?}
ParallelMove rax <- rax
DartReturn:12(v6)
CheckStackOverflowSlowPath
B0
B6
Enter frame
PrologueOffset = 0
ParallelMove rax <- rsi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rax, rdx <- rbx, rcx <- C, fp[-1] <- rbx
t0 <- AssertAssignable:10(v3, v4, 'subscription', instantiator_type_args(v5), function_type_args(v0)) T{StreamSubscription<X0>}
AssertAssignable for compile-time type
TTSCall
ParallelMove rbx <- fp[-2]
v18 <- LoadField(v2 T{_StreamController<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v38 <- IntConverter(int64->uint32[tr], v18) uint32
ParallelMove rcx <- C
ParallelMove rax <- rax
v20 <- BinaryUint32Op(& [tr], v38 T{int}, v40 T{_Smi}) [0, 8] uint32
ParallelMove rax <- rax
v39 <- IntConverter(uint32->int64, v20) int64
Branch if EqualityCompare(v39 T{_Smi} != v34 T{_Smi}) T{bool} goto (3, 4)
B3
v10 <- LoadField(v2 . _varData@4048458) T{Object??}
ParallelMove rax <- rsi, rdx <- fp[-1], rcx <- C, fp[-3] <- rsi
t0 <- AssertAssignable:24(v10, v11, '', instantiator_type_args(v5 T{TypeArguments}), function_type_args(v0)) T{_StreamControllerAddStreamState}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-3]
StaticCall:26( resume<0> v10 T{_StreamControllerAddStreamState}, using unchecked entrypoint)
ParallelMove  goto:32 B5
B4
B5
v9 <- LoadField(v2 . onResume) T{((dynamic) => void)??}
ParallelMove rdi <- rdi
StaticCall:38( _runGuarded@4048458<0> v9)
ParallelMove rax <- C
DartReturn:40(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, fp[-8] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
Branch if StrictCompare:10(===, v17, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:16(v0)
B4
B5
MoveArgument(sp[0] <- v17 T{_Closure})
ParallelMove rax <- rcx
v18 <- ClosureCall:28( closure=v17 T{_Closure}<0>, v17 T{_Closure}) T{*?}
ParallelMove  goto:30 B6
B7
ParallelMove rdi <- rax, rsi <- rdx, fp[-8] <- rax, fp[-9] <- rdx
v33 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rdi <- fp[-8], rsi <- fp[-9]
StaticCall:10( _rootHandleError@4048458<0> v5 T{Object}, v6 T{StackTrace})
ParallelMove  goto:38 B6
B6
ParallelMove rax <- C
DartReturn:40(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . addSubscription {final}) T{StreamSubscription<dynamic>}
v4 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
DispatchTableCall( cid=v4 StreamSubscription.resume<0>, v3)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B6
Enter frame
PrologueOffset = 0
ParallelMove rax <- rsi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rax, rdx <- rbx, rcx <- C, fp[-1] <- rbx
t0 <- AssertAssignable:10(v3, v4, 'subscription', instantiator_type_args(v5), function_type_args(v0)) T{StreamSubscription<X0>}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-2]
v17 <- LoadField(v2 T{_StreamController<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v37 <- IntConverter(int64->uint32[tr], v17) uint32
ParallelMove rdx <- C
ParallelMove rcx <- rcx
v19 <- BinaryUint32Op(& [tr], v37 T{int}, v39 T{_Smi}) [0, 8] uint32
ParallelMove rcx <- rcx
v38 <- IntConverter(uint32->int64, v19) int64
Branch if EqualityCompare(v38 T{_Smi} != v33 T{_Smi}) T{bool} goto (3, 4)
B3
v9 <- LoadField(v2 . _varData@4048458) T{Object??}
ParallelMove rax <- rbx, rdx <- fp[-1], rcx <- C, fp[-3] <- rbx
t0 <- AssertAssignable:24(v9, v10, '', instantiator_type_args(v5 T{TypeArguments}), function_type_args(v0)) T{_StreamControllerAddStreamState}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-3]
StaticCall:26( pause<0> v9 T{_StreamControllerAddStreamState}, using unchecked entrypoint)
ParallelMove  goto:32 B5
B4
B5
ParallelMove rdi <- C
StaticCall:38( _runGuarded@4048458<0> v0)
ParallelMove rax <- C
DartReturn:40(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . addSubscription {final}) T{StreamSubscription<dynamic>}
v4 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rax
DispatchTableCall( cid=v4 StreamSubscription.pause<0>, v3)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B25
Enter frame
PrologueOffset = 0
ParallelMove rax <- rsi, fp[-15] <- rdi, fp[-16] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v67 <- AllocateContext:10(num_variables=1) T{Context}
ParallelMove rsi <- rax, rbx <- fp[-15]
ParallelMove fp[-18] <- rsi
StoreField(v67 . this = v64, NoStoreBarrier)
v70 <- LoadField(v64 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- fp[-16], rdx <- rdi, rcx <- C, fp[-17] <- rdi
t0 <- AssertAssignable:12(v65, v69, 'subscription', instantiator_type_args(v70), function_type_args(v0)) T{StreamSubscription<X0>}
AssertAssignable for compile-time type
TTSCall
ParallelMove rbx <- fp[-15]
v138 <- LoadField(v64 T{_StreamController<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v246 <- IntConverter(int64->uint32[tr], v138) uint32
ParallelMove rcx <- C
ParallelMove rax <- rax
v140 <- BinaryUint32Op(& [tr], v246 T{int}, v250 T{_Smi}) [0, 8] uint32
ParallelMove rax <- rax
v247 <- IntConverter(uint32->int64, v140) int64
Branch if EqualityCompare(v247 T{_Smi} != v212 T{_Smi}) T{bool} goto (3, 4)
B3
v103 <- LoadField(v64 . _varData@4048458) T{Object??}
ParallelMove rax <- rsi, rdx <- fp[-17], rcx <- C, fp[-16] <- rsi
t0 <- AssertAssignable:26(v103, v104, '', instantiator_type_args(v70 T{TypeArguments}), function_type_args(v0)) T{_StreamControllerAddStreamState}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-16]
v107 <- StaticCall:28( cancel<0> v103 T{_StreamControllerAddStreamState}, using unchecked entrypoint, result_type = T{_Future}) T{_Future}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:34 B5
B4
ParallelMove rcx <- C goto:36 B5
B5
ParallelMove fp[-17] <- rcx
StoreField(v64 T{_StreamController<X0>} . _varData@4048458 = v0 T{Null?})
v77 <- LoadField(v64 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v82 <- BinaryInt64Op(& [tr], v77, v193) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v83 <- BinaryInt64Op(| [tr], v82, v213 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v64 T{_StreamController<X0>} . _state@4048458 = v83 T{int} <int64>)
v84 <- LoadField(v64 . onCancel) T{((dynamic) => void)??}
ParallelMove fp[-16] <- rdx
Branch if StrictCompare:54(!==, v84, v0) goto (6, 16)
B6
Branch if StrictCompare:60(===, v75, v0) goto (7, 14)
B7
B8
v164 <- LoadField(v84 T{((dynamic) => void)?} . Closure.context {final}) T{*}
ParallelMove rdi <- rax, fp[-15] <- rax
v166 <- StaticCall:10( onCancel<0> v164 T{*}) T{*?}
ParallelMove rax <- rax
v113 <- LoadClassId(v166 T{*?}) [1, 617] int64
Branch if EqualityCompare(v113 == v114) T{bool} goto (10, 11)
B10
B11
ParallelMove rax <- fp[-17] goto:92 B12
B12
ParallelMove rcx <- fp[-18], rax <- rax goto:94 B9
B14
ParallelMove rdi <- fp[-17], rsi <- fp[-16]
v85 <- StaticCall:108( whenComplete<0> v75 T{_Future}, v84 T{((dynamic) => void)?}, using unchecked entrypoint, result_type = T{_Future}) T{_Future}
ParallelMove rax <- rax
ParallelMove rcx <- fp[-18], rax <- rax goto:114 B15
B16
ParallelMove rdx <- fp[-18], rdi <- fp[-17] goto:122 B17
B13
ParallelMove rdx <- C, rsi <- rax, rax <- rdx, fp[-15] <- rax, fp[-16] <- rdx
v17 <- AllocateObject:98(cls=_Future, v16) T{_Future}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-17] <- rcx
StoreField(v17 T{_Future} . _state@4048458 = v212 T{_Smi} <int64>, NoStoreBarrier)
v169 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rcx <- rax, rax <- fp[-17]
StoreField(v17 T{_Future} . _zone@4048458 = v169, NoStoreBarrier)
ParallelMove rdi <- rax, rsi <- fp[-15], rdx <- fp[-16]
StaticCall:102( _asyncCompleteError@4048458<0> v17, v6, v7, using unchecked entrypoint)
ParallelMove rax <- fp[-2]
ParallelMove rcx <- rax, rax <- fp[-17] goto:104 B9
B9
B15
ParallelMove rdx <- rcx, rdi <- rax goto:120 B17
B17
ParallelMove fp[-15] <- rdi
Branch if StrictCompare:126(!==, v54, v0) goto (18, 19)
B18
ParallelMove rbx <- C, rdx <- rdx
v61 <- AllocateClosure:124(v60, v48) T{_Closure}
ParallelMove rdi <- fp[-15], rsi <- rax
v63 <- StaticCall:132( whenComplete<0> v54 T{_Future}, v61, using unchecked entrypoint, result_type = T{_Future}) T{_Future}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:140 B20
B19
v149 <- LoadField(v48 T{*} . this) T{_StreamController<X0>}
v150 <- LoadField(v149 . _doneFuture@4048458) T{_Future?}
Branch if StrictCompare:12(!==, v150, v0 T{Null?}) goto (35, 38)
B35
ParallelMove rax <- C
v174 <- LoadField(v150 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v248 <- IntConverter(int64->uint32[tr], v174) uint32
ParallelMove rcx <- rcx
v176 <- BinaryUint32Op(& [tr], v248 T{int}, v251 T{_Smi}) [0, 30] uint32
ParallelMove rcx <- rcx
v249 <- IntConverter(uint32->int64, v176) int64
Branch if EqualityCompare(v249 T{_Smi} == v212 T{_Smi}) T{bool} goto (36, 39)
B36
ParallelMove rdi <- rdi, rsi <- C
StaticCall:28( _asyncComplete@4048458<0> v150 T{_Future}, v0 T{Null?})
ParallelMove  goto:42 B40
B39
B38
B37
B40
ParallelMove rax <- fp[-15] goto:142 B20
B20
ParallelMove rax <- rax
DartReturn:144(v62)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi
v5 <- StaticCall:10( onCancel<0> v3 T{*}) T{*?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- fp[3]
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- fp[2], rdx <- rdx, rcx <- C
AssertAssignable:4(v3, v4, 'value', instantiator_type_args(v5), function_type_args(v0)) T{StreamController<X0>}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[2], rcx <- fp[3]
StoreField(v2 . controller = v3 T{StreamController<X0>})
ParallelMove rax <- C
DartReturn:6(v0)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . controller) T{StreamController<X0>}
v56 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rdi
v4 <- DispatchTableCall( cid=v56 StreamController.isClosed<0>, v3) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:16(===, v4 T{bool}, v5) goto (3, 4)
BoolTest
B3
ParallelMove rax <- C
DartReturn:22(v0)
B4
ParallelMove rdi <- fp[-1]
v6 <- LoadField(v2 . cancellationFuture) T{_Future?}
Branch if StrictCompare:28(===, v6, v0) goto (5, 9)
B5
ParallelMove rdx <- C
v8 <- AllocateObject:34(cls=_Future, v0) T{_Future}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-2] <- rcx
StoreField(v8 T{_Future} . _state@4048458 = v42 T{_Smi} <int64>, NoStoreBarrier)
v27 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rcx <- rax, rax <- fp[-2]
StoreField(v8 T{_Future} . _zone@4048458 = v27, NoStoreBarrier)
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v2 T{_AsyncStarStreamController} . cancellationFuture = v8 T{_Future})
v9 <- LoadField(v2 . isSuspendedAtYield) T{bool}
Branch if StrictCompare:44(===, v9 T{bool}, v5) goto (6, 7)
BoolTest
B6
ParallelMove rdi <- rcx
StaticCall:50( scheduleGenerator<0> v2, using unchecked entrypoint)
ParallelMove  goto:56 B8
B7
B8
B9
B10
v7 <- LoadField(v2 . cancellationFuture) T{_Future?}
ParallelMove rax <- rax
DartReturn:70(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . isScheduled) T{bool}
Branch if StrictCompare:14(===, v3 T{bool}, v4) goto (6, 3)
BoolTest
B6
B3
v5 <- LoadField(v2 . controller) T{StreamController<X0>}
v46 <- LoadClassId(<non-smi> v5) int64
ParallelMove rcx <- rcx, rdi <- rdi
v6 <- DispatchTableCall( cid=v46 StreamController.isPaused<0>, v5) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:24(===, v6 T{bool}, v4) goto (7, 4)
BoolTest
B7
B4
ParallelMove rdx <- fp[-1]
v7 <- LoadField(v2 . isAdding) T{bool}
Branch if StrictCompare:34(===, v7 T{bool}, v4) goto (8, 9)
BoolTest
B8
B5
ParallelMove rax <- C
DartReturn:54(v0)
B9
ParallelMove rax <- C
StoreField(v2 T{_AsyncStarStreamController} . isScheduled = v4 T{bool})
ParallelMove rbx <- C, rdx <- rdx
v20 <- AllocateClosure:6(v21 T{Function}, v2 T{_AsyncStarStreamController}) T{_Closure}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v20)
StaticCall:62( scheduleMicrotask<0> v20)
ParallelMove rax <- C
DartReturn:64(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi
v5 <- StaticCall:10( runBody<0> v3 T{*}) T{void?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
CheckStackOverflow:8(stack=0, loop=0)
StoreField(v2 T{_AsyncStarStreamController} . isScheduled = v3 T{bool})
StoreField(v2 T{_AsyncStarStreamController} . isSuspendedAtYield = v3 T{bool})
v4 <- LoadField(v2 . asyncStarBody) T{((dynamic, Object?) => void)??}
ParallelMove fp[-1] <- rax
CheckNull:16(v4, CastError) T{((dynamic, Object?) => void)?}
v5 <- LoadField(v2 . controller) T{StreamController<X0>}
v22 <- LoadClassId(<non-smi> v5) int64
ParallelMove rcx <- rdx, rdi <- rcx
v6 <- DispatchTableCall( cid=v22 StreamController.hasListener<0>, v5) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax
v7 <- BooleanNegate(v6 T{bool}) T{bool}
MoveArgument(sp[1] <- v4 T{((dynamic, Object?) => void)?})
MoveArgument(sp[0] <- v7)
ParallelMove rax <- fp[-1]
v8 <- ClosureCall:26( closure=v4 T{((dynamic, Object?) => void)?}<0>, v4 T{((dynamic, Object?) => void)?}, v7) T{*?}
ParallelMove rax <- C
DartReturn:28(v0)
CheckStackOverflowSlowPath
slow path check null (cast) operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- AllocateContext:10(num_variables=1) T{Context}
ParallelMove rdx <- rax, rax <- fp[-1]
ParallelMove fp[-2] <- rdx
StoreField(v3 . this = v2, NoStoreBarrier)
v4 <- LoadField(v2 . addSubscription {final}) T{StreamSubscription<dynamic>}
v9 <- LoadClassId(<non-smi> v4) int64
ParallelMove rcx <- rcx, rdi <- rdi
v5 <- DispatchTableCall( cid=v9 StreamSubscription.cancel<0>, v4) T{_Future}
ParallelMove rbx <- C, rdx <- fp[-2], rax <- rax
ParallelMove fp[-1] <- rax
v7 <- AllocateClosure:16(v6, v3) T{_Closure}
ParallelMove rdi <- fp[-1], rsi <- rax
v8 <- StaticCall:18( whenComplete<0> v5 T{_Future}, v7, using unchecked entrypoint, result_type = T{_Future}) T{_Future}
ParallelMove rax <- rax
DartReturn:20(v8)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v3 . this) T{_AddStreamState<X0>}
v5 <- LoadField(v4 . addStreamFuture {final}) T{_Future}
ParallelMove rdi <- rdi, rsi <- C
StaticCall:12( _asyncComplete@4048458<0> v5, v0, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v3 . this) T{_StreamController<X0>}
v5 <- LoadField(v4 . _doneFuture@4048458) T{_Future?}
Branch if StrictCompare:12(!==, v5, v0) goto (3, 6)
B3
ParallelMove rax <- C
v13 <- LoadField(v5 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v36 <- IntConverter(int64->uint32[tr], v13) uint32
ParallelMove rcx <- rcx
v15 <- BinaryUint32Op(& [tr], v36 T{int}, v38 T{_Smi}) [0, 30] uint32
ParallelMove rcx <- rcx
v37 <- IntConverter(uint32->int64, v15) int64
Branch if EqualityCompare(v37 T{_Smi} == v29 T{_Smi}) T{bool} goto (4, 7)
B4
ParallelMove rdi <- rdi, rsi <- C
StaticCall:28( _asyncComplete@4048458<0> v5 T{_Future}, v0)
ParallelMove  goto:42 B8
B7
B6
B5
B8
ParallelMove rax <- C
DartReturn:46(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx, fp[-4] <- rbx, fp[-5] <- r8
CheckStackOverflow:8(stack=0, loop=0)
v7 <- AllocateContext:10(num_variables=1) T{Context}
ParallelMove rax <- rax, rdi <- fp[-1]
ParallelMove fp[-7] <- rax
StoreField(v7 . this = v2, NoStoreBarrier)
v79 <- LoadField(v2 T{_StreamController<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v113 <- IntConverter(int64->uint32[tr], v79) uint32
ParallelMove rdx <- C
ParallelMove rcx <- rcx
v81 <- BinaryUint32Op(& [tr], v113 T{int}, v117 T{_Smi}) [0, 3] uint32
ParallelMove rcx <- rcx
v114 <- IntConverter(uint32->int64, v81) int64
Branch if EqualityCompare(v114 T{_Smi} != v104 T{_Smi}) T{bool} goto (3, 4)
B4
v10 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rcx, fp[-6] <- rcx
v11 <- AllocateObject:30(cls=_ControllerSubscription, v10) T{_ControllerSubscription}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-8] <- rcx
StoreField(v11 T{_ControllerSubscription} . _controller@4048458 = v2 T{_StreamController<X0>}, NoStoreBarrier)
ParallelMove rdi <- rcx, rsi <- fp[-2], rdx <- fp[-3], rbx <- fp[-4], r8 <- fp[-5]
StaticCall:10( _BufferingStreamSubscription@4048458.<0> v11 T{_ControllerSubscription}, v3 T{_Closure}, v4 T{_Closure}, v5 T{_Closure}, v6 T{bool})
ParallelMove rdi <- fp[-1]
v12 <- StaticCall:34( get:_pendingEvents@4048458<0> v2, result_type = T{_PendingEvents?}) T{_PendingEvents?}
ParallelMove rbx <- rax, rcx <- fp[-1]
ParallelMove fp[-3] <- rbx
v13 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v15 <- BinaryInt64Op(| [tr], v13, v105 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_StreamController<X0>} . _state@4048458 = v15 T{int} <int64>)
ParallelMove rax <- rax
v115 <- IntConverter(int64->uint32[tr], v15 T{int}) uint32
ParallelMove rdx <- C
ParallelMove rax <- rax
v63 <- BinaryUint32Op(& [tr], v115 T{int}, v118 T{_Smi}) [0, 8] uint32
ParallelMove rax <- rax
v116 <- IntConverter(uint32->int64, v63) int64
Branch if EqualityCompare(v116 T{_Smi} != v104 T{_Smi}) T{bool} goto (5, 6)
B5
v19 <- LoadField(v2 . _varData@4048458) T{Object??}
ParallelMove rax <- rsi, rdx <- fp[-6], rcx <- C, fp[-2] <- rsi
t0 <- AssertAssignable:54(v19, v20, '', instantiator_type_args(v10 T{TypeArguments}), function_type_args(v0)) T{_StreamControllerAddStreamState}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-8], rdi <- fp[-2]
StoreField(v19 T{_StreamControllerAddStreamState} . _varData@4048458 = v11 T{_ControllerSubscription})
ParallelMove rdi <- rdi
StaticCall:58( resume<0> v19 T{_StreamControllerAddStreamState}, using unchecked entrypoint)
ParallelMove  goto:66 B7
B6
ParallelMove rax <- fp[-8]
StoreField(v2 T{_StreamController<X0>} . _varData@4048458 = v11 T{_ControllerSubscription})
ParallelMove  goto:68 B7
B7
ParallelMove rdi <- fp[-8], rsi <- fp[-3]
StaticCall:70( _setPendingEvents@4048458<0> v11, v12)
ParallelMove rbx <- C, rdx <- fp[-7]
v18 <- AllocateClosure:72(v17, v7) T{_Closure}
ParallelMove rdi <- fp[-8], rsi <- rax
StaticCall:74( _guardCallback@4048458<0> v11, v18, using unchecked entrypoint)
ParallelMove rax <- fp[-8]
DartReturn:76(v11)
B3
v23 <- AllocateObject:22(cls=StateError, <not-aliased>) T{StateError}
ParallelMove rcx <- rax, rax <- C
StoreField(v23 T{StateError} . message = v24 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:26(v23)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove rcx <- rsi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v16 <- LoadField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rdx
v44 <- IntConverter(int64->uint32[tr], v16) uint32
ParallelMove rbx <- rbx
v18 <- BinaryUint32Op(& [tr], v44 T{int}, v46 T{_Smi}) [0, 4] uint32
ParallelMove rbx <- rbx
v45 <- IntConverter(uint32->int64, v18) int64
v20 <- EqualityCompare(v45 T{_Smi} != v41 T{_Smi}) T{bool}
ParallelMove fp[-1] <- rsi
ParallelMove rdx <- rdx
v7 <- BinaryInt64Op(| [tr], v16 T{int}, v42 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v7 T{int} <int64>)
MoveArgument(sp[0] <- v3)
ParallelMove rax <- rcx
v8 <- ClosureCall:20( closure=v3<0>, v3) T{*?}
ParallelMove rdi <- fp[-2]
v9 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v11 <- BinaryInt64Op(& [tr], v9, v36) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v11 T{int} <int64>)
ParallelMove rdi <- rdi, rsi <- fp[-1]
StaticCall:30( _checkState@4048458<0> v2, v20 T{bool}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:32(v0)
CheckStackOverflowSlowPath
B0
B8
Enter frame
PrologueOffset = 0
ParallelMove rsi <- rdi, rbx <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
t0 <- AssertAssignable:10(v3, v4, 'pendingEvents', instantiator_type_args(v5), function_type_args(v0)) T{_PendingEvents?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[-2]
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v0)
B4
ParallelMove rsi <- fp[-1]
ParallelMove rax <- rcx
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _pending@4048458 = v3 T{_PendingEvents})
v29 <- LoadField(v3 T{_PendingEvents} . lastPendingEvent) T{_DelayedEvent<dynamic>??}
Branch if StrictCompare:12(!==, v29, v0 T{Null?}) T{bool} goto (5, 6)
B5
v9 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v11 <- BinaryInt64Op(| [tr], v9, v37 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v11 T{int} <int64>)
ParallelMove rdi <- rcx, rsi <- rsi
StaticCall:40( schedule<0> v3 T{_PendingEvents}, v2)
ParallelMove  goto:46 B7
B6
B7
ParallelMove rax <- C
DartReturn:50(v0)
CheckStackOverflowSlowPath
Checking for cid 447 (_PendingEvents)
Generating check for type argument 0: X0
Checking instantiated type parameter for possible top types
Checking for legacy or non-nullable instance type argument
Checking instance type argument for possible bottom types
Checking for legacy or nullable instantiated type parameter
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
v20 <- LoadField(v2 T{_StreamController<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v39 <- IntConverter(int64->uint32[tr], v20) uint32
ParallelMove rcx <- rcx
v22 <- BinaryUint32Op(& [tr], v39 T{int}, v41 T{_Smi}) [0, 8] uint32
ParallelMove rcx <- rcx
v40 <- IntConverter(uint32->int64, v22) int64
Branch if EqualityCompare(v40 T{_Smi} == v35 T{_Smi}) T{bool} goto (3, 4)
B3
v13 <- LoadField(v2 . _varData@4048458) T{Object??}
ParallelMove fp[-1] <- rbx
v14 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
t0 <- AssertAssignable:22(v13, v10, '', instantiator_type_args(v14), function_type_args(v0)) T{_PendingEvents?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:24(v13 T{_PendingEvents?})
B4
v5 <- LoadField(v2 . _varData@4048458) T{Object??}
ParallelMove fp[-2] <- rbx
v7 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rsi, rcx <- C, fp[-1] <- rsi
t0 <- AssertAssignable:30(v5, v6, '', instantiator_type_args(v7), function_type_args(v0)) T{_StreamControllerAddStreamState}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-2]
v9 <- LoadField(v5 T{_StreamControllerAddStreamState} . _varData@4048458) T{*?}
ParallelMove rax <- rbx, rdx <- fp[-1], rcx <- C, fp[-3] <- rbx
t0 <- AssertAssignable:34(v9, v10, '', instantiator_type_args(v7 T{TypeArguments}), function_type_args(v0)) T{_PendingEvents?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-3]
DartReturn:36(v9 T{_PendingEvents?})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rsi, rbx <- rdx, r8 <- rbx, r9 <- r8, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx, fp[-4] <- rbx, fp[-5] <- r8
CheckStackOverflow:8(stack=0, loop=0)
v13 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rdi <- fp[-1], rsi <- rax, rdx <- fp[-2], rbx <- fp[-3], r8 <- fp[-4], r9 <- fp[-5]
StaticCall:12( _BufferingStreamSubscription@4048458.zoned<0> v2, v13, v3, v4, v5, v6)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B5
Enter frame
PrologueOffset = 0
ParallelMove r8 <- rdi, rdi <- rsi, rbx <- rdx, rcx <- rbx, rsi <- r8, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rbx, fp[-4] <- r8
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- rdi
StoreField(v2 . _zone@4048458 = v3)
v20 <- IfThenElse(===, v7, v8 ? 1 : 0) [0, 1] T{_Smi}
BoolTest
ParallelMove rdx <- rdx
ParallelMove rdx <- rdx
v22 <- UnboxInt64([non-speculative], v20 T{_Smi}) [0, 1] int64
ParallelMove rdx <- rdx
v12 <- BinaryInt64Op(| [tr], v22 T{_Smi}, v23 T{_Smi}) [0, 63] int64
StoreField(v2 . _state@4048458 = v12 <int64>)
v13 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
MoveArgument(sp[2] <- v13)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v4)
v14 <- StaticCall:28( _registerDataHandler@4048458<1> v13, v3, v4, result_type = T{!null}) T{_Closure}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v2 . _onData@4048458 = v14)
ParallelMove rdi <- fp[-2], rsi <- fp[-3]
v15 <- StaticCall:30( _registerErrorHandler@4048458<0> v3, v5, result_type = T{!null}) T{_Closure}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v2 . _onError@4048458 = v15)
ParallelMove rdi <- fp[-2], rsi <- fp[-4]
v16 <- StaticCall:32( _registerDoneHandler@4048458<0> v3, v6, result_type = T{!null}) T{_Closure}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v2 . _onDone@4048458 = v16)
ParallelMove rax <- C
DartReturn:36(v0)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- rsi
DartReturn:12(v3 T{_Closure})
B0
B1
Enter frame
PrologueOffset = 0
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rbx <- C goto:20 B5
B4
ParallelMove rbx <- rsi goto:22 B5
B5
ParallelMove rax <- rbx, rdx <- C, rcx <- C, fp[-1] <- rbx
v7 <- InstanceOf:24(v4 IS (dynamic, Object, StackTrace) => void, instantiator_type_args(v0), function_type_args(v0)) T{bool}
InlineInstanceof
FunctionTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:28(===, v7 T{bool}, v8) goto (6, 7)
BoolTest
B6
ParallelMove rax <- fp[-1]
DartReturn:36(v4 T{_Closure})
B7
ParallelMove rax <- fp[-1], rdx <- C, rcx <- C
v10 <- InstanceOf:40(v4 IS (dynamic, Object) => void, instantiator_type_args(v0), function_type_args(v0)) T{bool}
InlineInstanceof
FunctionTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:44(===, v10 T{bool}, v8) goto (8, 9)
BoolTest
B8
ParallelMove rax <- fp[-1]
DartReturn:52(v4 T{_Closure})
B9
v11 <- AllocateObject:56(cls=ArgumentError) T{ArgumentError}
ParallelMove rcx <- rax, rax <- C
StoreField(v11 T{ArgumentError} . message = v12 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v11 T{ArgumentError} . _hasValue@0150898 = v27 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:60(v11)
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[3], rsi <- fp[2]
v6 <- StaticCall:10( _nullErrorHandler@4048458<0> v3, v4) T{void?}
ParallelMove rax <- rax
DartReturn:12(v6)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v18 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
StaticCall:10( _rootHandleError@4048458<0> v2 T{Object}, v3 T{StackTrace})
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v3 . this) T{_StreamController<X0>}
v5 <- LoadField(v4 . onListen) T{((dynamic) => void)??}
ParallelMove rdi <- rdi
StaticCall:12( _runGuarded@4048458<0> v5)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _port@0150898) T{int??}
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
v5 <- LoadField(v2 . scheme {final}) T{String}
ParallelMove rdi <- rax
v6 <- StaticCall:20( _defaultPort@0150898<0> v5, result_type = T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rax <- rax
ParallelMove rax <- rax goto:26 B5
B4
ParallelMove rax <- rax
v10 <- UnboxInt64([non-speculative], v3 T{int?}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax goto:28 B5
B5
ParallelMove rax <- rax
DartReturn:30(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v21 <- LoadField(v2 T{_SimpleUri} . _hostStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v21, v56 T{_Smi}) T{bool} goto (12, 17)
B12
v27 <- LoadField(v2 T{_SimpleUri} . _portStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v29 <- BinaryInt64Op(+ [tr], v27, v57 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v30 <- LoadField(v2 T{_SimpleUri} . _pathStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v29, v30) T{bool} goto (3, 15)
B3
v10 <- LoadField(v2 . _uri@0150898 {final}) T{String}
v55 <- BoxInt64(v30 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v55 T{int})
ParallelMove rdi <- rdi, rsi <- rcx
v15 <- StaticCall:28( substring<0> v10, v29 T{int}, v55 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdi <- rax
v16 <- StaticCall:30( parse<0> v15, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
DartReturn:32(v16)
B15
B17
B4
ParallelMove rdi <- rax
v5 <- StaticCall:36( get:_isHttp@0150898<0> v2, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:40(===, v5 T{bool}, v4) goto (5, 6)
BoolTest
B5
ParallelMove rax <- C
DartReturn:46(v58 T{_Smi})
B6
ParallelMove rdi <- fp[-1]
v6 <- StaticCall:50( get:_isHttps@0150898<0> v2, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:54(===, v6 T{bool}, v4) goto (7, 8)
BoolTest
B7
ParallelMove rax <- C
DartReturn:60(v59 T{_Smi})
B8
ParallelMove rax <- C
DartReturn:64(v56 T{_Smi})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _schemeEnd@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v3 == v17 T{_Smi}) T{bool} goto (4, 5)
B4
v9 <- LoadField(v2 . _uri@0150898 {final}) T{String}
ParallelMove rdi <- rax, rsi <- C
v11 <- StaticCall:26( startsWith<0> v9, v10, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:30 B3
B5
ParallelMove rax <- C goto:34 B3
B3
ParallelMove rax <- rax
DartReturn:36(v8)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _schemeEnd@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v3 == v17 T{_Smi}) T{bool} goto (4, 5)
B4
v9 <- LoadField(v2 . _uri@0150898 {final}) T{String}
ParallelMove rdi <- rax, rsi <- C
v11 <- StaticCall:26( startsWith<0> v9, v10, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:30 B3
B5
ParallelMove rax <- C goto:34 B3
B3
ParallelMove rax <- rax
DartReturn:36(v8)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- fp[2]
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v7)
B4
ParallelMove rax <- rbx, rdx <- C, rcx <- C
v5 <- InstanceOf:22(v3 T{*} IS _ByteBuffer@7027147, instantiator_type_args(v0), function_type_args(v0)) T{bool}
InlineInstanceof
InstantiatedTypeNoArgumentsTest
ParallelMove rax <- rax
Branch if StrictCompare:26(===, v5 T{bool}, v6) goto (6, 7)
BoolTest
B6
ParallelMove rdx <- fp[3], rcx <- fp[2]
v9 <- LoadField(v2 . _data@7027147 {final}) T{_TypedList}
v10 <- LoadField(v3 T{_ByteBuffer} . _data@7027147 {final}) T{_TypedList}
v11 <- StrictCompare:36(===, v9, v10) T{bool}
ParallelMove rax <- rcx goto:38 B5
B7
ParallelMove rax <- C goto:42 B5
B5
ParallelMove rax <- rax
DartReturn:44(v8)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _hostStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v4 <- LoadField(v2 . _schemeEnd@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v6 <- BinaryInt64Op(+ [tr], v4, v24 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v3, v6) T{bool} goto (3, 4)
B3
v11 <- LoadField(v2 . _uri@0150898 {final}) T{String}
ParallelMove rsi <- rax
v16 <- BinaryInt64Op(- [tr], v3 T{int}, v25 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v21 <- BoxInt64(v16) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v21 T{int})
ParallelMove rdi <- rdx, rsi <- rcx
v17 <- StaticCall:36( substring<0> v11, v6 T{int}, v21 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:42 B5
B4
ParallelMove rax <- C goto:44 B5
B5
ParallelMove rax <- rax
DartReturn:46(v10)
CheckStackOverflowSlowPath
B0
B1
Intrinsic
Enter frame
PrologueOffset = 79
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v5)
B4
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v3 T{*})
v4 <- StaticCall:20( ==<0> v2, v3 T{*}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
DartReturn:22(v4)
CheckStackOverflowSlowPath
B0
B4
Enter frame
PrologueOffset = 0
ParallelMove rdx <- fp[3], rcx <- fp[2]
Branch if StrictCompare:20(===, v2, v3 T{*}) goto (5, 6)
B5
ParallelMove rax <- C
DartReturn:26(v6)
B6
v22 <- LoadClassId(v3 T{*}) [1, 617] int64
Branch if TestRange(v22 in [93-94]) T{bool} goto (7, 15)
B7
v65 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
v70 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rsi <- rsi
v90 <- UnboxInt64([non-speculative], v65 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdi <- rdi
v91 <- UnboxInt64([non-speculative], v70 T{_Smi}) [0, 2305843009213693951] int64
Branch if EqualityCompare(v90 T{_Smi} == v91 T{_Smi}) T{bool} goto (8, 16)
B8
v31 <- LoadClassId:90(v2 T{_StringBase}) [93, 94] T{_Smi}
v48 <- LoadClassId:90(v3 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove r10 <- C goto:90 B13
B13
  Loop 0
CheckStackOverflow:94(stack=0, loop=1)
Branch if RelationalOp(<, v13, v90 T{_Smi}) T{bool} goto (9, 10)
B9
  Loop 0
Branch if StrictCompare:70(===, v31, v39 T{_Smi}) goto (20, 21)
B20
  Loop 0
v35 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v13 T{int}) [0, 255] int64
ParallelMove r12 <- r12 goto:70 B19
B21
  Loop 0
v33 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v13 T{int}) [0, 65535] int64
ParallelMove r12 <- r12 goto:70 B19
B19
  Loop 0
ParallelMove rax <- rdi, rbx <- r10
t0 <- GenericCheckBound:72(v91 T{_Smi}, v13 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:72(===, v48, v39 T{_Smi}) goto (25, 26)
B25
  Loop 0
v52 <- LoadIndexed([_OneByteString] v3 T{_OneByteString}, v13 T{int}) [0, 255] int64
ParallelMove rbx <- rbx goto:72 B24
B26
  Loop 0
v50 <- LoadIndexed([_TwoByteString] v3 T{_StringBase}, v13 T{int}) [0, 65535] int64
ParallelMove rbx <- rbx goto:72 B24
B24
  Loop 0
Branch if EqualityCompare(v34 T{_Smi} != v51 T{_Smi}) T{bool} goto (11, 12)
B12
  Loop 0
ParallelMove r10 <- r10
v19 <- BinaryInt64Op(+ [tr], v13 T{int}, v98 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- r10 goto:92 B13
B11
ParallelMove rax <- C
DartReturn:84(v7)
B10
ParallelMove rax <- C
DartReturn:96(v6)
B16
B15
B14
ParallelMove rax <- C
DartReturn:108(v7)
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Intrinsic
Enter frame
PrologueOffset = 82
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v5)
B4
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v3 T{*})
v4 <- StaticCall:20( ==<0> v2, v3 T{*}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
DartReturn:22(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
Branch if StrictCompare:8(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v6 T{bool})
B4
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3 T{*})
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(MirrorReference_equals) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:20(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{bool}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:22(v4 T{bool})
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v7)
B4
v14 <- LoadClassId(v3 T{*}) [1, 617] int64
Branch if EqualityCompare(v14 == v15) T{bool} goto (6, 7)
B6
MoveArgument(sp[0] <- v2)
v9 <- StaticCall:32( _get_id@1026248<0> v2, using unchecked entrypoint) T{*?}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
MoveArgument(sp[0] <- v3 T{_SendPort})
v10 <- StaticCall:34( _get_id@1026248<0> v3 T{_SendPort}, using unchecked entrypoint) T{*?}
ParallelMove rcx <- rax, rax <- fp[-1]
v25 <- LoadClassId(v9) int64
MoveArgument(sp[1] <- v9)
MoveArgument(sp[0] <- v10)
ParallelMove rcx <- rdx
v11 <- DispatchTableCall( cid=v25 Object.==<0>, v9, v10) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:40 B5
B7
ParallelMove rax <- C goto:44 B5
B5
ParallelMove rax <- rax
DartReturn:46(v8)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(SendPort_get_id) T{*?}
ParallelMove rax <- rax
DartReturn:8(v3)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v7)
B4
v14 <- LoadClassId(v3 T{*}) [1, 617] int64
Branch if EqualityCompare(v14 == v15) T{bool} goto (6, 7)
B6
MoveArgument(sp[0] <- v2)
v9 <- StaticCall:32( _get_id@1026248<0> v2, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
MoveArgument(sp[0] <- v3 T{_RawReceivePort})
v10 <- StaticCall:34( _get_id@1026248<0> v3 T{_RawReceivePort}, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rcx <- fp[-1]
v20 <- UnboxInt64([non-speculative], v9) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v21 <- UnboxInt64([non-speculative], v10) [-9223372036854775808, 9223372036854775807] int64
v11 <- EqualityCompare(v20 T{int} == v21 T{int}) T{bool}
ParallelMove rax <- rdx goto:40 B5
B7
ParallelMove rax <- C goto:44 B5
B5
ParallelMove rax <- rax
DartReturn:46(v8)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v7)
B4
v12 <- LoadClassId(v3 T{*}) [1, 617] int64
Branch if EqualityCompare(v12 == v13) T{bool} goto (6, 7)
B6
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v3 T{_Capability})
v9 <- StaticCall:32( _equals@1026248<0> v2, v3 T{_Capability}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:36 B5
B7
ParallelMove rax <- C goto:40 B5
B5
ParallelMove rax <- rax
DartReturn:42(v8)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(Capability_equals) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{bool}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{bool})
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v10)
B4
v13 <- LoadClassId(v3 T{*}) [1, 617] int64
Branch if EqualityCompare(v13 != v14) T{bool} goto (5, 6)
B5
ParallelMove rax <- C
DartReturn:30(v10)
B6
MoveArgument(sp[0] <- v2)
v7 <- StaticCall:34( getHandle<0> v2, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
MoveArgument(sp[0] <- v3 T{DynamicLibrary})
v8 <- StaticCall:36( getHandle<0> v3 T{DynamicLibrary}, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rcx <- fp[-1]
v19 <- UnboxInt64([non-speculative], v7) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v20 <- UnboxInt64([non-speculative], v8) [-9223372036854775808, 9223372036854775807] int64
v9 <- EqualityCompare(v19 T{int} == v20 T{int}) T{bool}
ParallelMove rax <- rdx
DartReturn:40(v9)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rcx <- sp[1]
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v10)
B4
v13 <- LoadClassId(v3 T{*}) [1, 617] int64
Branch if EqualityCompare(v13 != v14) T{bool} goto (5, 6)
B5
ParallelMove rax <- C
DartReturn:30(v10)
B6
ParallelMove rdx <- sp[2]
v20 <- LoadField(v2 T{Pointer} . PointerBase.data {final}) untagged
ParallelMove rbx <- rbx
v21 <- IntConverter(untagged->int64[tr], v20) [-9223372036854775808, 9223372036854775807] int64
v28 <- LoadField(v3 T{Pointer} . PointerBase.data {final}) untagged
ParallelMove rdx <- rdx
v29 <- IntConverter(untagged->int64[tr], v28) [-9223372036854775808, 9223372036854775807] int64
v9 <- EqualityCompare(v21 T{int} == v29 T{int}) T{bool}
ParallelMove rax <- rax
DartReturn:40(v9)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v19)
B4
ParallelMove rdx <- fp[3]
Branch if StrictCompare:20(===, v2, v3 T{*}) goto (5, 6)
B5
ParallelMove rax <- C
DartReturn:26(v6)
B6
v22 <- LoadClassId(v3 T{*}) [1, 617] int64
Branch if EqualityCompare(v22 != v23) T{bool} goto (7, 8)
B7
ParallelMove rax <- C
DartReturn:40(v19)
B8
v50 <- LoadField(v2 T{_Record} . Record.shape {final}) [0, 4611686018427387903] T{_Smi}
v55 <- LoadField(v3 T{_Record} . Record.shape {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare(!==, v50 T{_Smi}, v55 T{_Smi}) T{bool} goto (9, 10)
B9
ParallelMove rax <- C
DartReturn:58(v19)
B10
ParallelMove rcx <- rcx
v44 <- BinarySmiOp:10(& [-o], v50 T{_Smi}, v45 T{_Smi}) [0, 65535] T{_Smi}
ParallelMove rbx <- rcx
v76 <- UnboxInt64:98([non-speculative], v44) [0, 65535] int64
ParallelMove fp[-2] <- rbx
ParallelMove rsi <- C goto:98 B15
B15
  Loop 0
ParallelMove fp[-1] <- rsi
CheckStackOverflow:102(stack=0, loop=1)
Branch if RelationalOp(<, v12, v76 T{_Smi}) T{bool} goto (11, 12)
B11
  Loop 0
v83 <- LoadIndexed([_Record] v2 T{_Record}, v12 T{int}) T{*?}
v84 <- LoadIndexed([_Record] v3 T{_Record}, v12 T{int}) T{*?}
v105 <- LoadClassId(v83 T{Object??}) int64
MoveArgument(sp[1] <- v83 T{Object??})
MoveArgument(sp[0] <- v84 T{Object??})
ParallelMove rcx <- r8
v16 <- DispatchTableCall( cid=v105 Object.==<0>, v83 T{Object??}, v84 T{Object??}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:86(!==, v16 T{bool}, v6) goto (13, 14)
BoolTest
B14
  Loop 0
ParallelMove rcx <- fp[-1]
v18 <- BinaryInt64Op(+ [tr], v12, v85 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rcx, rdx <- fp[3], rax <- fp[2], rbx <- fp[-2] goto:100 B15
B13
ParallelMove rax <- C
DartReturn:92(v19)
B12
ParallelMove rax <- C
DartReturn:104(v6)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Intrinsic
Enter frame
PrologueOffset = 74
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v7)
B4
v13 <- LoadClassId(v3 T{*}) [1, 617] int64
Branch if TestRange(v13 in [59-61]) T{bool} goto (6, 7)
B6
v19 <- LoadClassId(v3 T{num}) int64
MoveArgument(sp[0] <- v3 T{num})
ParallelMove rcx <- rcx
v9 <- DispatchTableCall( cid=v19 num.toDouble<0>, v3 T{num}) T{_Double}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v9 T{_Double})
v10 <- StaticCall:34( _equal@0150898<0> v2, v9 T{_Double}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:38 B5
B7
ParallelMove rax <- C goto:42 B5
B5
ParallelMove rax <- rax
DartReturn:44(v8)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(Double_equal) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{bool}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{bool})
B0
B1
Intrinsic
Enter frame
PrologueOffset = 109
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
Branch if StrictCompare:10(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v7)
B4
v11 <- LoadClassId(v3 T{*}) [1, 617] int64
Branch if TestRange(v11 in [59-61]) T{bool} goto (5, 6)
B5
v17 <- LoadClassId(v3 T{num}) int64
MoveArgument(sp[1] <- v3 T{num})
MoveArgument(sp[0] <- v2)
ParallelMove rcx <- rcx
v8 <- DispatchTableCall( cid=v17 num._equalToInteger<0>, v3 T{num}, v2) T{bool}
ParallelMove rax <- rax
DartReturn:32(v8 T{bool})
B6
ParallelMove rax <- C
DartReturn:36(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx
v5 <- StaticCall:10( asUint8List<0> v2, v3, v4, using unchecked entrypoint, result_type = T{_Uint8ArrayView}) T{_Uint8ArrayView}
ParallelMove rax <- rax
v20 <- LoadField(v5 T{_Uint8ArrayView} . TypedDataView.typed_data {final}) T{*}
ParallelMove fp[-3] <- rcx
v25 <- LoadField(v5 T{_Uint8ArrayView} . TypedDataView.offset_in_bytes {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove fp[-2] <- rdx
v30 <- LoadField(v5 T{_Uint8ArrayView} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove fp[-1] <- rbx
v40 <- AllocateObject:16(cls=_UnmodifiableUint8ArrayView) T{_UnmodifiableUint8ArrayView}
ParallelMove rax <- rax, rcx <- fp[-3]
StoreField(v40 . TypedDataView.typed_data = v20 T{_TypedList}, NoStoreBarrier)
ParallelMove rdx <- fp[-2]
StoreField(v40 . TypedDataView.offset_in_bytes = v25 T{_Smi}, NoStoreBarrier)
ParallelMove rbx <- fp[-1]
StoreField(v40 . TypedDataBase.length = v30 T{_Smi}, NoStoreBarrier)
ParallelMove rdx <- rdx
v41 <- UnboxInt64([non-speculative], v25 T{_Smi}) [0, 4611686018427387903] int64
v42 <- LoadField(v20 T{_TypedList} . PointerBase.data, MayLoadInnerPointer) untagged
v43 <- UnboxedConstant(#0) [0, 0] int64
v44 <- CalculateElementAddress(v42, v43, v41, index_scale=1) untagged
StoreField(v40 . PointerBase.data = v44 <untagged>, NoStoreBarrier, MayStoreInnerPointer)
ParallelMove rax <- rax
DartReturn:14(v40 T{_UnmodifiableUint8ArrayView})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
Branch if StrictCompare:8(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v6 T{bool})
B4
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3 T{*})
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(Closure_equals) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:20(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{bool}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:22(v4 T{bool})
B0
B1
Intrinsic
Enter frame
PrologueOffset = 24
ParallelMove rax <- fp[2]
Branch if StrictCompare:8(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v6 T{bool})
B4
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3 T{*})
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(AbstractType_equality) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:20(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{bool}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:22(v4 T{bool})
B0
B1
Intrinsic
Enter frame
PrologueOffset = 231
ParallelMove rax <- fp[2]
Branch if StrictCompare:8(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v6 T{bool})
B4
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3 T{*})
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(Type_equality) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:20(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{bool}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:22(v4 T{bool})
B0
B1
Intrinsic
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
CheckStackOverflow:8(stack=0, loop=0)
v37 <- LoadField(v2 T{_StreamController<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rcx
v64 <- IntConverter(int64->uint32[tr], v37) uint32
ParallelMove rdx <- rdx
v39 <- BinaryUint32Op(& [tr], v64 T{int}, v69 T{_Smi}) [0, 1] uint32
ParallelMove rdx <- rdx
v65 <- IntConverter(uint32->int64, v39) int64
Branch if EqualityCompare(v65 T{_Smi} != v55 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rdi <- rdi
v8 <- StaticCall:20( get:_subscription@4048458<0> v2, result_type = T{!null}) T{_ControllerSubscription<X0>}
ParallelMove rax <- rax
v26 <- LoadField(v8 T{_ControllerSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v66 <- IntConverter(int64->uint32[tr], v26) uint32
ParallelMove rbx <- C
ParallelMove rdx <- rdx
v28 <- BinaryUint32Op(& [tr], v66 T{int}, v70 T{_Smi}) [0, 4] uint32
ParallelMove rdx <- rdx
v67 <- IntConverter(uint32->int64, v28) int64
v30 <- EqualityCompare(v67 T{_Smi} != v55 T{_Smi}) T{bool}
ParallelMove rax <- rbx goto:32 B5
B4
ParallelMove rdx <- C
ParallelMove rcx <- rcx
v63 <- IntConverter(int64->uint32[tr], v37 T{int}) uint32
ParallelMove rcx <- rcx
v16 <- BinaryUint32Op(& [tr], v63 T{int}, v71 T{_Smi}) [0, 2] uint32
ParallelMove rcx <- rcx
v68 <- IntConverter(uint32->int64, v16) int64
v18 <- EqualityCompare(v68 T{_Smi} == v55 T{_Smi}) T{bool}
ParallelMove rax <- rdx goto:34 B5
B5
ParallelMove rax <- rax
DartReturn:36(v7)
CheckStackOverflowSlowPath
B0
B1
v3 <- LoadField(v2 . _index@0150898) [-9223372036854775808, 9223372036854775807] int64
v4 <- LoadField(v2 . _length@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v3, v4) T{bool} goto (3, 4)
B3
ParallelMove rdx <- C
StoreField(v2 T{_ArrayIterator} . _current@0150898 = v0 T{Null?})
ParallelMove rax <- C
DartReturn:26(v13)
B4
v7 <- LoadField(v2 . _array@0150898 {final}) T{_Array<X0>}
v14 <- LoadField(v7 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rsi <- rsi
v35 <- UnboxInt64([non-speculative], v14) [0, 576460752303423487] int64
ParallelMove rax <- rsi, rbx <- rcx
GenericCheckBound:34(v35 T{_Smi}, v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
v37 <- LoadIndexed:34([_List] v7, v3 T{int}) T{*?}
ParallelMove rax <- rax
StoreField(v2 T{_ArrayIterator} . _current@0150898 = v37 T{X0??})
ParallelMove rcx <- rcx
v12 <- BinaryInt64Op(+ [tr], v3 T{int}, v38 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_ArrayIterator} . _index@0150898 = v12 T{int} <int64>)
ParallelMove rax <- C
DartReturn:44(v6)
slow path check bound operation
PrologueOffset = 105
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . scheme {final}) T{String}
v16 <- LoadField(v3 T{_OneByteString} . String.length {final}) [0, 2305843009213693951] T{_Smi}
v21 <- LoadField(v4 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare(!==, v16 T{_Smi}, v21 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:26(v11)
B4
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- C
v10 <- StaticCall:30( _caseInsensitiveStartsWith@0150898<0> v3, v4, v30 T{_Smi}, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
DartReturn:32(v10)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx
v5 <- StaticCall:10( _caseInsensitiveCompareStart@0150898<0> v2, v3, v4, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v7 <- RelationalOp(>=, v5, v9 T{_Smi}) T{bool}
ParallelMove rax <- rcx
DartReturn:14(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v57 <- LoadField:108(v2 T{_OneByteString} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v89 <- UnboxInt64:108([non-speculative], v57 T{_Smi}) [0, 2305843009213693951] int64
v42 <- LoadField:108(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove r8 <- r8
v93 <- UnboxInt64:108([non-speculative], v42) [0, 2305843009213693951] int64
v44 <- LoadClassId:108(v3 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove r12 <- C, r10 <- C goto:108 B16
B16
  Loop 0
ParallelMove fp[-1] <- r12
CheckStackOverflow:112(stack=0, loop=1)
Branch if RelationalOp(<, v7, v89 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
v95 <- LoadIndexed:26([_OneByteString] v2, v7 T{int}) [0, 255] int64
ParallelMove rbx <- rdx
v15 <- BinaryInt64Op(+ [tr], v4, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r8, rbx <- rbx, r12 <- rbx
t0 <- GenericCheckBound:30(v93 T{_Smi}, v15 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:30(===, v44, v52 T{_Smi}) goto (21, 22)
B21
  Loop 0
v48 <- LoadIndexed([_OneByteString] v3 T{_OneByteString}, v15 T{int}) [0, 255] int64
ParallelMove rbx <- rbx goto:30 B20
B22
  Loop 0
v46 <- LoadIndexed([_TwoByteString] v3 T{_StringBase}, v15 T{int}) [0, 65535] int64
ParallelMove rbx <- rbx goto:30 B20
B20
  Loop 0
ParallelMove r13 <- r13
v17 <- BinaryInt64Op(^ [tr], v95, v47 T{_Smi}) [0, 65535] int64
Branch if EqualityCompare(v17 != v94 T{_Smi}) T{bool} goto (5, 15)
B5
  Loop 0
Branch if EqualityCompare(v17 == v96 T{_Smi}) T{bool} goto (6, 13)
B6
  Loop 0
ParallelMove rbx <- rbx
v27 <- BinaryInt64Op(| [tr], v47 T{_Smi}, v17 T{int}) [0, 65535] int64
Branch if RelationalOp(<=, v97 T{_Smi}, v27) T{bool} goto (7, 11)
B7
  Loop 0
Branch if RelationalOp(<=, v27, v98 T{_Smi}) T{bool} goto (8, 12)
B8
  Loop 0
ParallelMove r12 <- C goto:78 B9
B12
B11
B10
B13
B14
ParallelMove rax <- C
DartReturn:100(v69)
B15
  Loop 0
ParallelMove r12 <- fp[-1] goto:104 B9
B9
  Loop 0
ParallelMove r10 <- r10
v22 <- BinaryInt64Op(+ [tr], v7 T{int}, v99 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- r12, r10 <- r10 goto:110 B16
B4
ParallelMove rax <- fp[-1]
DartReturn:114(v6)
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
v3 <- LoadField(v2 . _host@0150898 {final}) T{String??}
v4 <- StrictCompare:12(!==, v3, v0) T{bool}
ParallelMove rax <- rax
DartReturn:16(v4 T{bool})
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . _current@0150898) T{X0??}
ParallelMove fp[-1] <- rbx
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
v6 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
t0 <- AssertAssignable:18(v3 T{X0??}, v5, ' in type cast', instantiator_type_args(v6), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove  goto:24 B5
B4
B5
ParallelMove rax <- fp[-1]
DartReturn:28(v3 T{X0??})
B0
B1
v3 <- LoadField(v2 . _hostStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v5 <- RelationalOp(>, v3, v7 T{_Smi}) T{bool}
ParallelMove rax <- rax
DartReturn:14(v5)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . start {final}) T{num??}
ParallelMove fp[-2] <- rax
v5 <- LoadField(v2 . end {final}) T{num??}
ParallelMove fp[-1] <- rcx
Branch if StrictCompare:14(===, v4, v0) goto (3, 7)
B3
Branch if StrictCompare:20(!==, v5, v0) goto (4, 5)
B4
ParallelMove rbx <- C, r10 <- C
v30 <- CreateArray:26(v0, v9) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v30, v11, v31, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreIndexed([_List] v30, v13, v5 T{num?}, NoStoreBarrier)
MoveArgument(sp[0] <- v30)
v32 <- StaticCall:28( _interpolate@0150898<0> v30, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:34 B6
B5
ParallelMove rax <- C goto:36 B6
B6
B7
Branch if StrictCompare:40(===, v5, v0) goto (8, 9)
B8
ParallelMove rbx <- C, r10 <- C
v25 <- CreateArray:46(v0, v9) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v25, v11, v26, NoStoreBarrier)
ParallelMove rdx <- fp[-2]
StoreIndexed([_List] v25, v13, v4 T{num?}, NoStoreBarrier)
MoveArgument(sp[0] <- v25)
v27 <- StaticCall:48( _interpolate@0150898<0> v25, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:98 B16
B9
ParallelMove rdx <- rax
MoveArgument(sp[1] <- v5 T{int?})
MoveArgument(sp[0] <- v4 T{num?})
v6 <- StaticCall:52( ><0> v5 T{int?}, v4 T{num?}, using unchecked entrypoint, recognized_kind = Integer_greaterThan, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:56(===, v6 T{bool}, v7) goto (10, 11)
BoolTest
B10
ParallelMove rcx <- fp[-2], rax <- fp[-1]
ParallelMove rbx <- C, r10 <- C
v19 <- CreateArray:62(v0, v18) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v19, v11, v20, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v19, v13, v4 T{num?}, NoStoreBarrier)
StoreIndexed([_List] v19, v9, v21, NoStoreBarrier)
ParallelMove rdx <- fp[-1]
StoreIndexed([_List] v19, v22, v5 T{int?}, NoStoreBarrier)
MoveArgument(sp[0] <- v19)
v23 <- StaticCall:64( _interpolate@0150898<0> v19, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:92 B15
B11
ParallelMove rcx <- fp[-2], rdx <- fp[-1]
MoveArgument(sp[1] <- v5 T{int?})
MoveArgument(sp[0] <- v4 T{num?})
v8 <- StaticCall:68( <<0> v5 T{int?}, v4 T{num?}, using unchecked entrypoint, recognized_kind = Integer_lessThan, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:72(===, v8 T{bool}, v7) goto (12, 13)
BoolTest
B12
ParallelMove rcx <- C goto:86 B14
B13
ParallelMove rax <- fp[-2]
ParallelMove rbx <- C, r10 <- C
v10 <- CreateArray:80(v0, v9) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v10, v11, v12, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v10, v13, v4 T{num?}, NoStoreBarrier)
MoveArgument(sp[0] <- v10)
v14 <- StaticCall:82( _interpolate@0150898<0> v10, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:88 B14
B14
B15
B16
ParallelMove rax <- rcx goto:106 B17
B17
ParallelMove rax <- rax
DartReturn:108(v28)
CheckStackOverflowSlowPath
B0
B1
Intrinsic
ParallelMove rcx <- sp[2]
v5 <- UnboxInt64([non-speculative], v2) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[1]
v6 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
v4 <- RelationalOp(>, v6 T{int}, v5 T{_IntegerImplementation}) T{bool}
ParallelMove rax <- rax
DartReturn:12(v4)
B0
B1
Intrinsic
Enter frame
PrologueOffset = 39
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v2)
v4 <- StaticCall:10( _greaterThanFromInteger@0150898<0> v3, v2, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
DartReturn:12(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(Integer_greaterThanFromInteger) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{bool}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{bool})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v21 <- LoadField(v2 T{IndexError} . invalidValue {final}) T{*?}
ParallelMove rax <- rbx, rdx <- C, rcx <- C, fp[-1] <- rbx
t0 <- AssertAssignable:12(v21, v24 T{_Type}, '', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
v35 <- UnboxInt64([non-speculative], v21 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v35 T{int}, v37 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:22(v16)
B4
ParallelMove rax <- fp[-2]
v7 <- LoadField(v2 . length {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- rcx
Branch if EqualityCompare(v7 == v37 T{_Smi}) T{bool} goto (5, 6)
B5
ParallelMove rax <- C
DartReturn:38(v15)
B6
ParallelMove rbx <- C, r10 <- C
v10 <- CreateArray:42(v0, v9) T{_List}
ParallelMove rcx <- rax
StoreIndexed([_List] v10, v4, v11, NoStoreBarrier)
ParallelMove rdx <- fp[-3]
v36 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreIndexed([_List] v10, v12, v36 T{int}, NoStoreBarrier)
MoveArgument(sp[0] <- v10)
v14 <- StaticCall:46( _interpolate@0150898<0> v10, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:48(v14)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- C
DartReturn:10(v3)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- C, rdx <- fp[2]
v4 <- AllocateClosure:6(v3, v2) T{_Closure}
ParallelMove rax <- rax
DartReturn:8(v4)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- C, rdx <- fp[2]
v4 <- AllocateClosure:6(v3, v2) T{_Closure}
ParallelMove rax <- rax
DartReturn:8(v4)
B0
B1
ParallelMove rcx <- C
v3 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v14 <- IntConverter(int64->uint32[tr], v3) uint32
ParallelMove rdx <- rdx
v5 <- BinaryUint32Op(& [tr], v14 T{int}, v16 T{_Smi}) [0, 4] uint32
ParallelMove rdx <- rdx
v15 <- IntConverter(uint32->int64, v5) int64
v7 <- EqualityCompare(v15 T{_Smi} != v12 T{_Smi}) T{bool}
ParallelMove rax <- rax
DartReturn:18(v7 T{bool})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-4] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _re@0150898) T{_RegExp?}
ParallelMove fp[-3] <- rcx
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v10)
B4
v4 <- LoadField(v2 . _nextIndex@0150898) [-9223372036854775808, 9223372036854775807] int64
v5 <- LoadField(v2 . _str@0150898 {final}) T{String}
ParallelMove fp[-2] <- rsi
v168 <- LoadField(v5 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove r8 <- rax
v213 <- UnboxInt64([non-speculative], v168 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-1] <- r8
Branch if RelationalOp(<=, v4, v213 T{_Smi}) T{bool} goto (5, 21)
B5
v214 <- BoxInt64(v4 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v3 T{_RegExp})
MoveArgument(sp[1] <- v5 T{String})
MoveArgument(sp[0] <- v214 T{int})
v13 <- StaticCall:42( _ExecuteMatch@0150898<0> v3 T{_RegExp}, v5 T{String}, v214 T{int}, using unchecked entrypoint, recognized_kind = RegExp_ExecuteMatch) T{List<int>??}
ParallelMove rax <- rax
ParallelMove fp[-5] <- rax
Branch if StrictCompare:44(!==, v13, v0) goto (6, 20)
B6
ParallelMove rcx <- fp[-4]
v15 <- AllocateObject:52(cls=_RegExpMatch) T{_RegExpMatch}
ParallelMove rcx <- rax, rax <- fp[-5]
ParallelMove fp[-6] <- rcx
StoreField(v15 T{_RegExpMatch} . _match@0150898 = v13 T{List<int>}, NoStoreBarrier)
ParallelMove rax <- rcx, rdx <- fp[-4]
StoreField(v2 T{_AllMatchesIterator} . _current@0150898 = v15 T{_RegExpMatch})
ParallelMove rdi <- rcx
v152 <- StaticCall:10( _end@0150898<0> v15 T{_RegExpMatch}, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax, rax <- fp[-4]
ParallelMove fp[-7] <- rcx
StoreField(v2 T{_AllMatchesIterator} . _nextIndex@0150898 = v152 T{int} <int64>)
ParallelMove rdi <- fp[-6]
v163 <- StaticCall:10( _start@0150898<0> v15 T{_RegExpMatch}, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax, rax <- fp[-7]
Branch if EqualityCompare(v152 T{int} == v163 T{int}) T{bool} goto (7, 18)
B7
MoveArgument(sp[0] <- v3 T{_RegExp})
v20 <- StaticCall:76( get:isUnicode<0> v3 T{_RegExp}, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:80(===, v20 T{bool}, v8) goto (8, 13)
BoolTest
B8
ParallelMove rcx <- fp[-4], rdx <- fp[-1]
v24 <- LoadField(v2 . _nextIndex@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rsi
v25 <- BinaryInt64Op(+ [tr], v24, v222 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v25, v213 T{_Smi}) T{bool} goto (9, 14)
B9
ParallelMove r8 <- fp[-2]
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:106(v213 T{_Smi}, v24 T{int}) [-9223372036854775808, 9223372036854775807] int64
v106 <- LoadClassId(v5 T{_StringBase}) [93, 94] T{_Smi}
Branch if StrictCompare:106(===, v106, v80 T{_Smi}) goto (40, 41)
B40
v110 <- LoadIndexed([_OneByteString] v5 T{_OneByteString}, v24 T{int}) [0, 255] int64
ParallelMove rsi <- r10 goto:106 B39
B41
v108 <- LoadIndexed([_TwoByteString] v5 T{_StringBase}, v24 T{int}) [0, 65535] int64
ParallelMove rsi <- r10 goto:106 B39
B39
Branch if RelationalOp(>=, v109 T{_Smi}, v223 T{_Smi}) T{bool} goto (45, 63)
B45
Branch if RelationalOp(<=, v109 T{_Smi}, v224 T{_Smi}) T{bool} goto (10, 61)
B10
ParallelMove rax <- rdx, rbx <- rdi
t0 <- GenericCheckBound:124(v213 T{_Smi}, v25 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:124(===, v106 T{_Smi}, v80 T{_Smi}) goto (30, 31)
B30
v76 <- LoadIndexed([_OneByteString] v5 T{_OneByteString}, v25 T{int}) [0, 255] int64
ParallelMove rdx <- rdx goto:124 B29
B31
v74 <- LoadIndexed([_TwoByteString] v5 T{_StringBase}, v25 T{int}) [0, 65535] int64
ParallelMove rdx <- rdx goto:124 B29
B29
Branch if RelationalOp(>=, v75 T{_Smi}, v225 T{_Smi}) T{bool} goto (35, 67)
B35
Branch if RelationalOp(<=, v75 T{_Smi}, v226 T{_Smi}) T{bool} goto (11, 65)
B11
StoreField(v2 T{_AllMatchesIterator} . _nextIndex@0150898 = v25 T{int} <int64>)
ParallelMove  goto:164 B17
B65
B67
B16
B61
B63
B15
B14
B13
ParallelMove rcx <- fp[-4]
ParallelMove  goto:148 B12
B12
B17
v21 <- LoadField(v2 . _nextIndex@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v23 <- BinaryInt64Op(+ [tr], v21, v222 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_AllMatchesIterator} . _nextIndex@0150898 = v23 T{int} <int64>)
ParallelMove  goto:178 B19
B18
B19
ParallelMove rax <- C
DartReturn:182(v8)
B20
ParallelMove rcx <- fp[-4]
ParallelMove  goto:190 B22
B21
ParallelMove rcx <- rdi
ParallelMove  goto:192 B22
B22
StoreField(v2 T{_AllMatchesIterator} . _current@0150898 = v0 T{Null?})
StoreField(v2 T{_AllMatchesIterator} . _re@0150898 = v0 T{Null?})
ParallelMove rax <- C
DartReturn:198(v10)
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(RegExp_getIsUnicode) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{bool}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{bool})
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _match@0150898 {final}) T{List<int>}
v11 <- LoadClassId(<non-smi> v3) int64
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v4 T{_Smi})
ParallelMove rcx <- rcx
v7 <- DispatchTableCall( cid=v11 List.[]<0>, v3, v4 T{_Smi}) T{*?}
ParallelMove rax <- rax
ParallelMove rax <- rax
v10 <- UnboxInt64([non-speculative], v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
DartReturn:16(v10 T{int})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _match@0150898 {final}) T{List<int>}
v14 <- LoadClassId(<non-smi> v3) int64
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v7 T{_Smi})
ParallelMove rcx <- rcx
v9 <- DispatchTableCall( cid=v14 List.[]<0>, v3, v7 T{_Smi}) T{*?}
ParallelMove rax <- rax
ParallelMove rax <- rax
v13 <- UnboxInt64([non-speculative], v9 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
DartReturn:18(v13 T{int})
CheckStackOverflowSlowPath
B0
B1
Intrinsic
Enter frame
PrologueOffset = 0
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v0)
v5 <- NativeCall(RegExp_ExecuteMatch) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v5, v6, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{List<int>??}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v5 T{List<int>??})
B0
B1
v3 <- LoadField(v2 . scheme {final}) T{String}
ParallelMove rax <- rax
DartReturn:4(v3)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, fp[-4] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _index@0150898) [-9223372036854775808, 9223372036854775807] int64
v4 <- LoadField(v2 . _pattern@0150898 {final}) T{String}
ParallelMove fp[-3] <- r8
v82 <- LoadField(v4 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove r9 <- rax
v99 <- UnboxInt64([non-speculative], v82 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-2] <- r9
ParallelMove rax <- rcx
v6 <- BinaryInt64Op(+ [tr], v3, v99 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v7 <- LoadField(v2 . _input@0150898 {final}) T{String}
v87 <- LoadField(v7 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove r10 <- rbx
v100 <- UnboxInt64([non-speculative], v87 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-1] <- r10
Branch if RelationalOp(>, v6, v100 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove r12 <- C
StoreField(v2 T{_StringAllMatchesIterator} . _current@0150898 = v0 T{Null?})
ParallelMove rax <- C
DartReturn:34(v31)
B4
ParallelMove r12 <- C
v101 <- BoxInt64(v3 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v106 <- LoadClassId(<non-smi> v7 T{String}) int64
MoveArgument(sp[0] <- v101 T{int})
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- r8
v14 <- DispatchTableCall( cid=v106 String.indexOf<0>, v7 T{String}, v4 T{String}, v101 T{int}) int64
ParallelMove rax <- rax
ParallelMove fp[-5] <- rax
Branch if RelationalOp(<, v14 T{int}, v104 T{_Smi}) T{bool} goto (5, 6)
B5
ParallelMove rax <- C, rcx <- fp[-4]
ParallelMove rdx <- fp[-1]
v30 <- BinaryInt64Op(+ [tr], v100 T{_Smi}, v105 T{_Smi}) [v100+1, v100+1] int64
StoreField(v2 T{_StringAllMatchesIterator} . _index@0150898 = v30 T{int} <int64>)
StoreField(v2 T{_StringAllMatchesIterator} . _current@0150898 = v0 T{Null?})
ParallelMove rax <- C
DartReturn:66(v31)
B6
ParallelMove rcx <- fp[-4], rdx <- fp[-3], rbx <- fp[-2]
ParallelMove rsi <- rax
v19 <- BinaryInt64Op(+ [tr], v14 T{int}, v99 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-1] <- rsi
v22 <- AllocateObject:80(cls=_StringMatch) T{_StringMatch}
ParallelMove rax <- rax, rcx <- fp[-5]
StoreField(v22 T{_StringMatch} . start = v14 T{int} <int64>, NoStoreBarrier)
ParallelMove rcx <- fp[-3]
StoreField(v22 T{_StringMatch} . pattern = v4 T{String}, NoStoreBarrier)
ParallelMove rax <- rax, rcx <- fp[-4]
StoreField(v2 T{_StringAllMatchesIterator} . _current@0150898 = v22 T{_StringMatch})
v23 <- LoadField(v2 . _index@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- fp[-1]
Branch if EqualityCompare(v19 == v23) T{bool} goto (7, 8)
B7
ParallelMove rdx <- rbx
v27 <- BinaryInt64Op(+ [tr], v19, v105 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:104 B9
B8
ParallelMove rdx <- rbx goto:106 B9
B9
StoreField(v2 T{_StringAllMatchesIterator} . _index@0150898 = v25 T{int} <int64>)
ParallelMove rax <- C
DartReturn:110(v10)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _schemeCache@0150898) T{String??}
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
ParallelMove rdi <- rax
v5 <- StaticCall:18( _computeScheme@0150898<0> v2, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax, rcx <- rax, rdx <- fp[-1]
StoreField(v2 T{_SimpleUri} . _schemeCache@0150898 = v5 T{String})
ParallelMove rax <- rcx goto:26 B5
B4
ParallelMove rax <- rcx goto:28 B5
B5
ParallelMove rax <- rax
DartReturn:30(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _schemeEnd@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-1] <- rcx
Branch if RelationalOp(<=, v3, v42 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:22(v18)
B4
ParallelMove rdi <- rax
v7 <- StaticCall:26( get:_isHttp@0150898<0> v2, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:30(===, v7 T{bool}, v6) goto (5, 6)
BoolTest
B5
ParallelMove rax <- C
DartReturn:36(v17)
B6
ParallelMove rdi <- fp[-2]
v8 <- StaticCall:40( get:_isHttps@0150898<0> v2, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:44(===, v8 T{bool}, v6) goto (7, 8)
BoolTest
B7
ParallelMove rax <- C
DartReturn:50(v16)
B8
ParallelMove rdi <- fp[-2]
v9 <- StaticCall:54( get:_isFile@0150898<0> v2, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:58(===, v9 T{bool}, v6) goto (9, 10)
BoolTest
B9
ParallelMove rax <- C
DartReturn:64(v15)
B10
ParallelMove rdi <- fp[-2]
v10 <- StaticCall:68( get:_isPackage@0150898<0> v2, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:72(===, v10 T{bool}, v6) goto (11, 12)
BoolTest
B11
ParallelMove rax <- C
DartReturn:78(v14)
B12
ParallelMove rax <- fp[-2], rcx <- fp[-1]
v11 <- LoadField(v2 . _uri@0150898 {final}) T{String}
v41 <- BoxInt64(v3 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v41 T{int})
ParallelMove rdi <- rdi, rsi <- C
v13 <- StaticCall:86( substring<0> v11, v42 T{_Smi}, v41 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:88(v13)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _schemeEnd@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v3 == v17 T{_Smi}) T{bool} goto (4, 5)
B4
v9 <- LoadField(v2 . _uri@0150898 {final}) T{String}
ParallelMove rdi <- rax, rsi <- C
v11 <- StaticCall:26( startsWith<0> v9, v10, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:30 B3
B5
ParallelMove rax <- C goto:34 B3
B3
ParallelMove rax <- rax
DartReturn:36(v8)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _schemeEnd@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v3 == v17 T{_Smi}) T{bool} goto (4, 5)
B4
v9 <- LoadField(v2 . _uri@0150898 {final}) T{String}
ParallelMove rdi <- rax, rsi <- C
v11 <- StaticCall:26( startsWith<0> v9, v10, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:30 B3
B5
ParallelMove rax <- C goto:34 B3
B3
ParallelMove rax <- rax
DartReturn:36(v8)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
v3 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx
v4 <- AllocateObject:10(cls=_ControllerStream, v3, <not-aliased>) T{_ControllerStream}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v4 T{_ControllerStream} . _controller@4048458 = v2 T{_StreamController<X0>}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v4)
B0
B1
ParallelMove rax <- rsi
StoreField(v2 . onResume = v3)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
ParallelMove rax <- rsi
StoreField(v2 . onCancel = v3)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . _current@0150898) T{_RegExpMatch?}
ParallelMove fp[-1] <- rbx
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- rbx, rdx <- C, rcx <- C
t0 <- AssertAssignable:18(v3 T{_RegExpMatch?}, v5, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) T{_RegExpMatch}
AssertAssignable for compile-time type
TTSCall
ParallelMove  goto:24 B5
B4
B5
ParallelMove rax <- fp[-1]
DartReturn:28(v3 T{_RegExpMatch})
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . _current@0150898) T{_StringMatch?}
ParallelMove fp[-1] <- rbx
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- rbx, rdx <- C, rcx <- C
t0 <- AssertAssignable:18(v3 T{_StringMatch?}, v5, ' in type cast', instantiator_type_args(v0), function_type_args(v0)) T{Match}
AssertAssignable for compile-time type
TTSCall
ParallelMove  goto:24 B5
B4
B5
ParallelMove rax <- fp[-1]
DartReturn:28(v3 T{Match})
B0
B1
ParallelMove rax <- rsi
StoreField(v2 . onListen = v3)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
v3 <- LoadField(v2 . _query@0150898 {final}) T{String??}
v4 <- StrictCompare:12(!==, v3, v0) T{bool}
ParallelMove rax <- rax
DartReturn:16(v4 T{bool})
B0
B1
v3 <- LoadField(v2 . _queryStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v4 <- LoadField(v2 . _fragmentStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v5 <- RelationalOp(<, v3, v4) T{bool}
ParallelMove rax <- rax
DartReturn:16(v5)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . scheme {final}) T{String}
MoveArgument(sp[0] <- v3 T{_StringBase})
v9 <- StaticCall:10( get:isEmpty<0> v3 T{_StringBase}, recognized_kind = StringBaseIsEmpty, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
ParallelMove rax <- rax
v10 <- BooleanNegate(v9 T{bool}) T{bool}
ParallelMove rax <- rax
DartReturn:14(v10 T{bool})
CheckStackOverflowSlowPath
B0
B1
v3 <- LoadField(v2 . _schemeEnd@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v5 <- RelationalOp(>, v3, v7 T{_Smi}) T{bool}
ParallelMove rax <- rax
DartReturn:14(v5)
B0
B1
v3 <- LoadField(v2 . _query@0150898 {final}) T{String??}
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C goto:22 B5
B4
ParallelMove rax <- rcx goto:24 B5
B5
ParallelMove rax <- rax
DartReturn:26(v4)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _queryStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v4 <- LoadField(v2 . _fragmentStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v3, v4) T{bool} goto (3, 4)
B3
v9 <- LoadField(v2 . _uri@0150898 {final}) T{String}
ParallelMove rsi <- rax
v12 <- BinaryInt64Op(+ [tr], v3 T{int}, v19 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v16 <- BoxInt64(v4 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v16 T{int})
ParallelMove rdi <- rdx, rsi <- rsi
v14 <- StaticCall:32( substring<0> v9, v12, v16 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:38 B5
B4
ParallelMove rax <- C goto:40 B5
B5
ParallelMove rax <- rax
DartReturn:42(v8)
CheckStackOverflowSlowPath
B0
B1
v3 <- LoadField(v2 . path {final}) T{String}
ParallelMove rax <- rax
DartReturn:4(v3)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _uri@0150898 {final}) T{String}
v4 <- LoadField(v2 . _pathStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v5 <- LoadField(v2 . _queryStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v7 <- BoxInt64(v5) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v7 T{int})
ParallelMove rdi <- rcx, rsi <- rsi
v6 <- StaticCall:16( substring<0> v3, v4, v7 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:18(v6)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v150 <- LoadField(v149 . _state@4048458) T{_SuspendState?}
Branch if StrictCompare:12(===, v150, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v105)
B4
ParallelMove r8 <- rdi, rsi <- C, rbx <- C, rdx <- C, rax <- C goto:230 B34
B10
ParallelMove rcx <- fp[-14]
ParallelMove rdi <- rcx, rsi <- rax, rbx <- rdx, rdx <- rax, rcx <- rdx goto:64 B7
B20
ParallelMove r8 <- fp[-14], rdi <- rax, rsi <- rdx, fp[-15] <- rax, fp[-16] <- rdx
v359 <- LoadField(v120 T{_SyncStarIterator} . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- rbx
AssertAssignable:4(v0 T{Null?}, v227 T{_TypeParameter}, 'value', instantiator_type_args(v359), function_type_args(v0 T{Null?})) T{Null?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- C, rdx <- fp[-14]
StoreField(v120 T{_SyncStarIterator} . _current@4048458 = v0 T{Null?})
StoreField(v120 T{_SyncStarIterator} . _state@4048458 = v0 T{Null?})
v268 <- LoadField(v120 T{_SyncStarIterator} . _stack@4048458) T{_GrowableList?}
Branch if StrictCompare:16(!==, v268, v0 T{Null?}) goto (67, 70)
B67
v399 <- LoadField(v268 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v443 <- UnboxInt64([non-speculative], v399 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v443 T{_Smi} != v460 T{_Smi}) T{bool} goto (21, 71)
B21
ParallelMove rsi <- rax
v335 <- BinaryInt64Op(- [tr], v443 T{_Smi}, v461 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:14(v443 T{_Smi}, v335) [-9223372036854775808, 9223372036854775807] int64
v339 <- LoadField(v268 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v462 <- LoadIndexed:14([_List] v339, v335 T{int}) T{X0?}
ParallelMove rdi <- rdi, rsi <- rsi, fp[-17] <- rbx
StaticCall:16( set:length<0> v268 T{_GrowableList}, v335 T{int}, using unchecked entrypoint)
ParallelMove rax <- fp[-17], rcx <- fp[-14]
StoreField(v120 T{_SyncStarIterator} . _state@4048458 = v462 T{_SuspendState})
ParallelMove rsi <- rcx, rbx <- fp[-15], rdx <- fp[-16], rcx <- fp[-15], rax <- fp[-16] goto:128 B17
B31
ParallelMove rcx <- fp[-14]
ParallelMove rsi <- rcx, rbx <- rax, rdx <- rdx, rcx <- rax, rax <- rdx goto:208 B30
B30
B32
B17
ParallelMove r8 <- rsi, rsi <- rbx, rbx <- rdx, rdx <- rcx, rax <- rax goto:226 B34
B34
ParallelMove fp[-18] <- r8, fp[-19] <- rsi, fp[-20] <- rbx, fp[-21] <- rdx, fp[-22] <- rax
CheckStackOverflow:228(stack=0, loop=1)
v73 <- LoadField(v58 . _yieldStarIterator@4048458) T{Iterator<X0>??}
ParallelMove fp[-17] <- r9
Branch if StrictCompare:30(!==, v73, v0) goto (5, 11)
B5
B6
v540 <- LoadClassId(<non-smi> v73 T{Iterator<X0>?}) int64
ParallelMove rcx <- rcx, rdi <- r9
v74 <- DispatchTableCall( cid=v540 Iterator.moveNext<0>, v73 T{Iterator<X0>?}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:46(===, v74 T{bool}, v72 T{bool}) goto (8, 9)
BoolTest
B8
ParallelMove rax <- fp[-18], rdi <- fp[-17]
v541 <- LoadClassId(<non-smi> v73 T{Iterator<X0>?}) int64
ParallelMove rcx <- rcx, rdi <- rdi
v75 <- DispatchTableCall( cid=v541 Iterator.current<0>, v73 T{Iterator<X0>?}) T{*?}
ParallelMove rsi <- rax, rbx <- fp[-18]
ParallelMove fp[-23] <- rsi
v262 <- LoadField(v58 T{_SyncStarIterator} . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rsi, rdx <- rdi, rcx <- C, fp[-17] <- rdi
AssertAssignable:4(v75 T{X0?}, v227 T{_TypeParameter}, 'value', instantiator_type_args(v262), function_type_args(v0 T{Null?})) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-23], rcx <- fp[-18]
StoreField(v58 T{_SyncStarIterator} . _current@4048458 = v75 T{X0?})
ParallelMove rax <- C
DartReturn:56(v72 T{bool})
B9
ParallelMove rcx <- fp[-18]
ParallelMove rdi <- rcx, rsi <- fp[-19], rbx <- fp[-20], rdx <- fp[-21], rcx <- fp[-22] goto:60 B7
B7
StoreField(v106 T{_SyncStarIterator} . _yieldStarIterator@4048458 = v0 T{Null?})
ParallelMove rdi <- rdi, rsi <- rsi, rbx <- rbx, rdx <- rdx, rcx <- rcx goto:72 B12
B11
ParallelMove rax <- C, rcx <- r8
ParallelMove rdi <- rcx, rsi <- fp[-19], rbx <- fp[-20], rdx <- fp[-21], rcx <- fp[-22] goto:74 B12
B12
ParallelMove fp[-17] <- rdi, fp[-18] <- rsi, fp[-19] <- rbx
ParallelMove  goto:78 B13
B13
v90 <- LoadField(v76 . _state@4048458) T{_SuspendState?}
MoveArgument(sp[3] <- v90)
MoveArgument(sp[2] <- v0)
MoveArgument(sp[1] <- v83)
MoveArgument(sp[0] <- v84)
v91 <- StaticCall:84( _resume@4048458<0> v90, v0, v83, v84, using unchecked entrypoint, recognized_kind = SuspendState_resume) T{Object??}
ParallelMove rax <- rax, rcx <- rax
ParallelMove fp[-20] <- rcx
AssertBoolean:86(v91) T{bool}
ParallelMove rax <- fp[-20]
Branch if StrictCompare:88(!==, v91 T{bool}, v72) goto (15, 19)
BoolTest
B15
ParallelMove rbx <- C, rsi <- fp[-17]
v322 <- LoadField(v76 T{_SyncStarIterator} . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdi, rcx <- rbx, fp[-20] <- rdi
AssertAssignable:4(v0 T{Null?}, v227 T{_TypeParameter}, 'value', instantiator_type_args(v322), function_type_args(v0 T{Null?})) T{Null?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- C, rdx <- fp[-17]
StoreField(v76 T{_SyncStarIterator} . _current@4048458 = v0 T{Null?})
StoreField(v76 T{_SyncStarIterator} . _state@4048458 = v0 T{Null?})
v232 <- LoadField(v76 T{_SyncStarIterator} . _stack@4048458) T{_GrowableList?}
ParallelMove fp[-21] <- r8
Branch if StrictCompare:16(!==, v232, v0 T{Null?}) goto (57, 60)
B57
v394 <- LoadField(v232 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v447 <- UnboxInt64([non-speculative], v394 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v447 T{_Smi} != v460 T{_Smi}) T{bool} goto (16, 61)
B16
ParallelMove r9 <- rax
v298 <- BinaryInt64Op(- [tr], v447 T{_Smi}, v461 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rax <- rax, rbx <- r9, fp[-24] <- r9
GenericCheckBound:14(v447 T{_Smi}, v298) [-9223372036854775808, 9223372036854775807] int64
v302 <- LoadField(v232 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v463 <- LoadIndexed:14([_List] v302, v298 T{int}) T{X0?}
ParallelMove rdi <- r8, rsi <- r9, fp[-20] <- rbx
StaticCall:16( set:length<0> v232 T{_GrowableList}, v298 T{int}, using unchecked entrypoint)
ParallelMove rax <- fp[-20], rsi <- fp[-17]
StoreField(v76 T{_SyncStarIterator} . _state@4048458 = v463 T{_SuspendState})
ParallelMove rsi <- rsi, rbx <- fp[-18], rdx <- fp[-19], rcx <- C, rax <- C goto:106 B17
B61
B60
B18
ParallelMove rax <- C
DartReturn:110(v105)
B19
ParallelMove rsi <- fp[-17]
ParallelMove  goto:114 B14
B14
v92 <- LoadField(v76 . _yieldStarIterable@4048458) T{Iterable<X0>??}
ParallelMove fp[-21] <- rdi
Branch if StrictCompare:136(!==, v92, v0) goto (23, 33)
B23
ParallelMove rbx <- C
v216 <- LoadField(v76 T{_SyncStarIterator} . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- r8, rcx <- rbx, fp[-20] <- r8
AssertAssignable:4(v0 T{Null?}, v218 T{_Type}, 'value', instantiator_type_args(v216), function_type_args(v0 T{Null?})) T{Null?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rsi <- C, rbx <- fp[-17]
StoreField(v76 T{_SyncStarIterator} . _yieldStarIterable@4048458 = v0 T{Null?})
ParallelMove rax <- rsi, rdx <- fp[-20], rcx <- rsi
AssertAssignable:4(v0 T{Null?}, v227 T{_TypeParameter}, 'value', instantiator_type_args(v216 T{TypeArguments}), function_type_args(v0 T{Null?})) T{Null?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- C, rax <- fp[-17]
StoreField(v76 T{_SyncStarIterator} . _current@4048458 = v0 T{Null?})
ParallelMove rdx <- fp[-21]
v158 <- LoadClassId(v92 T{Iterable<X0>?}) [1, 617] int64
Branch if EqualityCompare(v158 == v159) T{bool} goto (24, 28)
B24
v96 <- LoadField(v76 . _stack@4048458) T{_GrowableList?}
ParallelMove fp[-20] <- rbx
Branch if StrictCompare:158(===, v96, v0 T{Null?}) goto (25, 26)
B25
ParallelMove rdi <- C, rsi <- C
v103 <- StaticCall:164( _GrowableList@0150898.<0> v101, v460 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax, rdx <- rax, rcx <- fp[-17]
StoreField(v76 T{_SyncStarIterator} . _stack@4048458 = v103 T{_GrowableList})
ParallelMove rax <- rdx goto:172 B27
B26
ParallelMove rcx <- rax
ParallelMove rax <- fp[-20] goto:174 B27
B27
ParallelMove fp[-23] <- rax
v98 <- LoadField(v76 . _state@4048458) T{_SuspendState?}
ParallelMove fp[-22] <- rdx
CheckNull:178(v98, CastError) T{_SuspendState}
v285 <- LoadField(v97 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v290 <- LoadField(v97 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v291 <- LoadField(v290 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rbx <- rbx
v453 <- UnboxInt64([non-speculative], v285 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-24] <- rbx
ParallelMove rdi <- rdi
v454 <- UnboxInt64([non-speculative], v291 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v453 T{_Smi} == v454 T{_Smi}) T{bool} goto (40, 41)
B40
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v97 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B42
B41
B42
ParallelMove rax <- rdi
v178 <- BinaryInt64Op(+ [tr], v453 T{_Smi}, v461 T{_Smi}) [1, 576460752303423488] int64
v455 <- BoxInt64(v178) [1, 576460752303423488] T{_Smi}
StoreField(v97 T{_GrowableList} . GrowableObjectArray.length = v455, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound:40(v178 T{_Smi}, v453 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v181 <- LoadField(v97 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-22]
StoreIndexed:40([_List] v181, v453 T{_Smi}, v98 T{_SuspendState})
v99 <- LoadField(v92 T{_SyncStarIterable} . _stateAtStart@4048458) T{_SuspendState?}
ParallelMove fp[-22] <- rdx
CheckNull:184(v99, CastError) T{_SuspendState}
ParallelMove rax <- rdx
v191 <- Call1ArgStub:10(CloneSuspendState(v99 T{_SuspendState})) T{*?}
ParallelMove rax <- fp[-17], rcx <- rax
StoreField(v191 T{_SuspendState} . SuspendState.function_data = v76 T{_SyncStarIterator})
ParallelMove rax <- rcx, rsi <- fp[-17]
StoreField(v76 T{_SyncStarIterator} . _state@4048458 = v191 T{_SuspendState})
ParallelMove rsi <- rsi, rbx <- fp[-18], rdx <- fp[-19], rcx <- C, rax <- C goto:212 B32
B28
ParallelMove rsi <- rax
ParallelMove rdi <- fp[-21] goto:196 B29
B29
v542 <- LoadClassId(<non-smi> v92 T{Iterable<X0>?}) int64
ParallelMove rcx <- rcx, rdi <- rdi
v95 <- DispatchTableCall( cid=v542 Iterable.iterator<0>, v92 T{Iterable<X0>?}) T{*?}
ParallelMove rax <- rax, rsi <- fp[-17]
StoreField(v76 T{_SyncStarIterator} . _yieldStarIterator@4048458 = v95 T{Iterator<X0>})
ParallelMove rsi <- rsi, rbx <- fp[-18], rdx <- fp[-19], rcx <- C, rax <- C goto:204 B30
B33
ParallelMove rax <- C
DartReturn:220(v72)
B71
B70
B22
ParallelMove rax <- fp[-15], rbx <- fp[-16]
ReThrow:132(v123, v124)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check null (cast) operation
slow path check bound operation
slow path check null (cast) operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- fp[3]
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- fp[2], rdx <- rdx, rcx <- C
AssertAssignable:4(v3, v4, 'value', instantiator_type_args(v5), function_type_args(v0)) T{Iterable<X0>??}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[2], rcx <- fp[3]
StoreField(v2 . _yieldStarIterable@4048458 = v3 T{Iterable<X0>??})
ParallelMove rax <- C
DartReturn:6(v0)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- fp[3]
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- fp[2], rdx <- rdx, rcx <- C
AssertAssignable:4(v3, v4, 'value', instantiator_type_args(v5), function_type_args(v0)) T{X0??}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[2], rcx <- fp[3]
StoreField(v2 . _current@4048458 = v3 T{X0??})
ParallelMove rax <- C
DartReturn:6(v0)
B0
B1
ParallelMove r10 <- C
TailCall(_iso_stub_ResumeStub(v0))
Checking for cid 77 (_SuspendState)
PrologueOffset = 0
Copy frame from SuspendState
Transfer control
Call runtime to throw exception or deopt
Checking for concrete finalized classes:
 * 87 (_Set)
 * 88 (_ConstSet)
 * 89 (_List)
 * 90 (_ImmutableList)
 * 91 (_GrowableList)
 * 539 (SkipIterable)
 * 540 (EfficientLengthSkipIterable)
 * 541 (MappedIterable)
 * 542 (EfficientLengthMappedIterable)
 * 543 (_LineSplitIterable)
 * 544 (_CompactIterableImmutable)
 * 545 (_CompactIterable)
 * 546 (_SyncStarIterable)
 * 547 (_StringAllMatchesIterable)
 * 548 (_AllMatchesIterable)
 * 550 (EmptyIterable)
 * 552 (MappedListIterable)
 * 553 (SubListIterable)
 * 555 (_HashMapValueIterable)
 * 556 (_HashMapKeyIterable)
Not checking the following concrete implementors of Iterable:
 * 111(_Int8List): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 112(_Int8ArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 113(_ExternalInt8Array): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 114(_UnmodifiableInt8ArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 115(_Uint8List): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 116(_Uint8ArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 117(_ExternalUint8Array): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 118(_UnmodifiableUint8ArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 119(_Uint8ClampedList): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 120(_Uint8ClampedArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 121(_ExternalUint8ClampedArray): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 122(_UnmodifiableUint8ClampedArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 123(_Int16List): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 124(_Int16ArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 125(_ExternalInt16Array): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 126(_UnmodifiableInt16ArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 127(_Uint16List): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 128(_Uint16ArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 129(_ExternalUint16Array): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 130(_UnmodifiableUint16ArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 131(_Int32List): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 132(_Int32ArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 133(_ExternalInt32Array): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 134(_UnmodifiableInt32ArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 135(_Uint32List): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 136(_Uint32ArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 137(_ExternalUint32Array): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 138(_UnmodifiableUint32ArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 139(_Int64List): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 140(_Int64ArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 141(_ExternalInt64Array): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 142(_UnmodifiableInt64ArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 143(_Uint64List): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 144(_Uint64ArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 145(_ExternalUint64Array): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 146(_UnmodifiableUint64ArrayView): cannot check that Iterable<int> is a subtype of Iterable<X0>?
 * 147(_Float32List): cannot check that Iterable<double> is a subtype of Iterable<X0>?
 * 148(_Float32ArrayView): cannot check that Iterable<double> is a subtype of Iterable<X0>?
 * 149(_ExternalFloat32Array): cannot check that Iterable<double> is a subtype of Iterable<X0>?
 * 150(_UnmodifiableFloat32ArrayView): cannot check that Iterable<double> is a subtype of Iterable<X0>?
 * 151(_Float64List): cannot check that Iterable<double> is a subtype of Iterable<X0>?
 * 152(_Float64ArrayView): cannot check that Iterable<double> is a subtype of Iterable<X0>?
 * 153(_ExternalFloat64Array): cannot check that Iterable<double> is a subtype of Iterable<X0>?
 * 154(_UnmodifiableFloat64ArrayView): cannot check that Iterable<double> is a subtype of Iterable<X0>?
 * 155(_Float32x4List): cannot check that Iterable<Float32x4> is a subtype of Iterable<X0>?
 * 156(_Float32x4ArrayView): cannot check that Iterable<Float32x4> is a subtype of Iterable<X0>?
 * 157(_ExternalFloat32x4Array): cannot check that Iterable<Float32x4> is a subtype of Iterable<X0>?
 * 158(_UnmodifiableFloat32x4ArrayView): cannot check that Iterable<Float32x4> is a subtype of Iterable<X0>?
 * 159(_Int32x4List): cannot check that Iterable<Int32x4> is a subtype of Iterable<X0>?
 * 160(_Int32x4ArrayView): cannot check that Iterable<Int32x4> is a subtype of Iterable<X0>?
 * 161(_ExternalInt32x4Array): cannot check that Iterable<Int32x4> is a subtype of Iterable<X0>?
 * 162(_UnmodifiableInt32x4ArrayView): cannot check that Iterable<Int32x4> is a subtype of Iterable<X0>?
 * 163(_Float64x2List): cannot check that Iterable<Float64x2> is a subtype of Iterable<X0>?
 * 164(_Float64x2ArrayView): cannot check that Iterable<Float64x2> is a subtype of Iterable<X0>?
 * 165(_ExternalFloat64x2Array): cannot check that Iterable<Float64x2> is a subtype of Iterable<X0>?
 * 166(_UnmodifiableFloat64x2ArrayView): cannot check that Iterable<Float64x2> is a subtype of Iterable<X0>?
 * 564(CodeUnits): cannot check that Iterable<int> is a subtype of Iterable<X0>?
Generating check for type argument 0: X0
Checking instantiated type parameter for possible top types
Checking for legacy or non-nullable instance type argument
Checking instance type argument for possible bottom types
Checking for legacy or nullable instantiated type parameter
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . _map@3220832 {final}) T{_Map}
ParallelMove rdi <- rax, rsi <- rsi
v5 <- StaticCall:12( containsKey<0> v4, v3, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
DartReturn:14(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _host@0150898 {final}) T{String??}
ParallelMove fp[-1] <- rax
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:18(v11)
B4
ParallelMove rdi <- rax, rsi <- C
v5 <- StaticCall:22( startsWith<0> v3 T{String?}, v4, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:26(===, v5 T{bool}, v6) goto (5, 6)
BoolTest
B5
ParallelMove rdi <- fp[-1]
v17 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rax <- rax
v26 <- UnboxInt64([non-speculative], v17 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rax <- rax
v9 <- BinaryInt64Op(- [tr], v26 T{_Smi}, v28 T{_Smi}) [v26-1, v26-1] int64
v27 <- BoxInt64(v9) [v26-1, v26-1] T{_Smi}
MoveArgument(sp[0] <- v27)
ParallelMove rdi <- rdi, rsi <- C
v10 <- StaticCall:36( substring<0> v3 T{String?}, v28 T{_Smi}, v27, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:38(v10)
B6
ParallelMove rdi <- fp[-1]
ParallelMove rax <- rdi
DartReturn:42(v3 T{String?})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _hostStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v3, v20 T{_Smi}) T{bool} goto (3, 4)
B3
v9 <- LoadField(v2 . _uri@0150898 {final}) T{String}
v11 <- LoadField(v2 . _portStart@0150898 {final}) [-9223372036854775808, 9223372036854775807] int64
v18 <- BoxInt64(v11) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v18 T{int})
ParallelMove rdi <- rcx, rsi <- rsi
v12 <- StaticCall:28( substring<0> v9, v3 T{int}, v18 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:34 B5
B4
ParallelMove rax <- C goto:36 B5
B5
ParallelMove rax <- rax
DartReturn:38(v8)
CheckStackOverflowSlowPath
B0
B9
Enter frame
PrologueOffset = 0
ParallelMove fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v7 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- C, rdx <- rbx, rcx <- C, fp[-1] <- rbx
t0 <- AssertAssignable:10(v0, v6, 'value', instantiator_type_args(v7), function_type_args(v0)) T{Null?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-2]
v10 <- LoadField(v2 . future {final}) T{_Future}
ParallelMove fp[-3] <- rdi
v30 <- LoadField(v10 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v52 <- IntConverter(int64->uint32[tr], v30) uint32
ParallelMove rcx <- C
ParallelMove rax <- rax
v32 <- BinaryUint32Op(& [tr], v52 T{int}, v54 T{_Smi}) [0, 30] uint32
ParallelMove rax <- rax
v53 <- IntConverter(uint32->int64, v32) int64
Branch if EqualityCompare(v53 T{_Smi} != v48 T{_Smi}) T{bool} goto (3, 4)
B4
ParallelMove rax <- C, rdx <- fp[-1], rcx <- C
t1 <- AssertAssignable:34(v0 T{Null?}, v14, '', instantiator_type_args(v7 T{TypeArguments}), function_type_args(v0 T{Null?})) T{FutureOr<X0>?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-3], rsi <- C
StaticCall:36( _asyncComplete@4048458<0> v10 T{_Future}, v0, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:38(v0 T{Null?})
B3
v17 <- AllocateObject:24(cls=StateError, <not-aliased>) T{StateError}
ParallelMove rcx <- rax, rax <- C
StoreField(v17 T{StateError} . message = v18 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:28(v17)
CheckStackOverflowSlowPath
B0
B9
Enter frame
PrologueOffset = 0
ParallelMove fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v7 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- C, rdx <- rbx, rcx <- C, fp[-1] <- rbx
t0 <- AssertAssignable:10(v0, v6, 'value', instantiator_type_args(v7), function_type_args(v0)) T{Null?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-2]
v10 <- LoadField(v2 . future {final}) T{_Future}
ParallelMove fp[-3] <- rdi
v30 <- LoadField(v10 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v52 <- IntConverter(int64->uint32[tr], v30) uint32
ParallelMove rcx <- C
ParallelMove rax <- rax
v32 <- BinaryUint32Op(& [tr], v52 T{int}, v54 T{_Smi}) [0, 30] uint32
ParallelMove rax <- rax
v53 <- IntConverter(uint32->int64, v32) int64
Branch if EqualityCompare(v53 T{_Smi} != v48 T{_Smi}) T{bool} goto (3, 4)
B4
ParallelMove rax <- C, rdx <- fp[-1], rcx <- C
t1 <- AssertAssignable:34(v0 T{Null?}, v14, '', instantiator_type_args(v7 T{TypeArguments}), function_type_args(v0 T{Null?})) T{FutureOr<X0>?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-3], rsi <- C
StaticCall:36( _complete@4048458<0> v10 T{_Future}, v0, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:38(v0 T{Null?})
B3
v17 <- AllocateObject:24(cls=StateError, <not-aliased>) T{StateError}
ParallelMove rcx <- rax, rax <- C
StoreField(v17 T{StateError} . message = v18 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:28(v17)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . _current@4048458) T{X0??}
ParallelMove fp[-1] <- rbx
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
v6 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
t0 <- AssertAssignable:18(v3 T{X0??}, v5, ' in type cast', instantiator_type_args(v6), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove  goto:24 B5
B4
B5
ParallelMove rax <- fp[-1]
DartReturn:28(v3 T{X0??})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove r8 <- rdx, rdx <- r8
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx, rbx <- rbx, r8 <- r8
v7 <- StaticCall:10( _createSubscription@4048458<0> v2, v3, v6, v5, v4, using unchecked entrypoint, result_type = T{!null}) T{StreamSubscription<X0>}
ParallelMove rax <- rax
DartReturn:14(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v7 <- LoadField(v2 . _controller@4048458) T{_StreamControllerLifecycle<X0>}
v9 <- LoadClassId(<non-smi> v7) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- rsi, rdx <- rdx, rbx <- rbx, r8 <- r8
v8 <- DispatchTableCall( cid=v9 _StreamControllerLifecycle._subscribe<0>, v7, v3, v4, v5, v6) T{*?}
ParallelMove rax <- rax
DartReturn:14(v8 T{StreamSubscription<X0>})
CheckStackOverflowSlowPath
B0
B1
v3 <- LoadField(v2 . next) T{_DelayedEvent<dynamic>??}
ParallelMove rax <- rax
DartReturn:4(v3)
B0
B2
ParallelMove rax <- C
DartReturn:10(v0)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- C, rdx <- C
v3 <- AllocateClosure:6(v2, v0) T{_Closure}
ParallelMove rax <- rax
DartReturn:8(v3)
B0
B1
Enter frame
PrologueOffset = 0
v2 <- LoadStaticField:4(_httpConnectionHook@17463476, CallsInitializer) T{_Closure}
ParallelMove rax <- rax
DartReturn:6(v2)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove rcx <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v94 <- LoadField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rdx
v156 <- IntConverter(int64->uint32[tr], v94) uint32
ParallelMove rbx <- rbx
v96 <- BinaryUint32Op(& [tr], v156 T{int}, v162 T{_Smi}) [0, 8] uint32
ParallelMove rbx <- rbx
v157 <- IntConverter(uint32->int64, v96) int64
Branch if EqualityCompare(v157 T{_Smi} != v136 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:20(v0)
B4
Branch if RelationalOp(>=, v94 T{int}, v137 T{_Smi}) T{bool} goto (5, 18)
B5
ParallelMove rdi <- rcx
StaticCall:34( _decrementPauseCount@4048458<0> v2, using unchecked entrypoint)
ParallelMove rsi <- fp[-1]
v79 <- LoadField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v79, v137 T{_Smi}) T{bool} goto (6, 16)
B6
ParallelMove rcx <- C
ParallelMove rdx <- rax
v158 <- IntConverter(int64->uint32[tr], v79 T{int}) uint32
ParallelMove rdx <- rdx
v70 <- BinaryUint32Op(& [tr], v158 T{int}, v163 T{_Smi}) [0, 128] uint32
ParallelMove rdx <- rdx
v159 <- IntConverter(uint32->int64, v70) int64
Branch if EqualityCompare(v159 T{_Smi} != v136 T{_Smi}) T{bool} goto (7, 10)
B7
v14 <- LoadField(v2 . _pending@4048458) T{_PendingEvents?}
CheckNull:56(v14, CastError) T{_PendingEvents}
v62 <- LoadField(v14 T{_PendingEvents} . lastPendingEvent) T{_DelayedEvent<dynamic>??}
Branch if StrictCompare:12(!==, v62, v0 T{Null?}) T{bool} goto (8, 11)
B8
ParallelMove rdi <- rdi, rsi <- rsi
StaticCall:74( schedule<0> v14 T{_PendingEvents}, v2)
ParallelMove  goto:118 B15
B11
B10
B9
ParallelMove rax <- rax
v11 <- BinaryInt64Op(& [tr], v79 T{int}, v113) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v11 T{int} <int64>)
ParallelMove rax <- rax
v160 <- IntConverter(int64->uint32[tr], v11 T{int}) uint32
ParallelMove rax <- rax
v52 <- BinaryUint32Op(& [tr], v160 T{int}, v164 T{_Smi}) [0, 64] uint32
ParallelMove rax <- rax
v161 <- IntConverter(uint32->int64, v52) int64
Branch if EqualityCompare(v161 T{_Smi} == v136 T{_Smi}) T{bool} goto (12, 13)
B12
v37 <- LoadClassId(v2) [455, 456] int64
Branch if EqualityCompare:104(v37 == v38) goto (20, 23)
B20
ParallelMove rbx <- C, rdx <- rsi
v25 <- AllocateClosure:6(v27 T{Function}, v2 T{_BufferingStreamSubscription<X0>}) T{_Closure}
ParallelMove rax <- rax
ParallelMove rsi <- rax goto:8 B24
B23
ParallelMove rbx <- C, rdx <- fp[-1]
v34 <- AllocateClosure:6(v36 T{Function}, v2 T{_BroadcastSubscription}) T{_Closure}
ParallelMove rax <- rax
ParallelMove rsi <- rax goto:8 B24
B24
ParallelMove rdi <- fp[-1], rsi <- rsi
StaticCall:106( _guardCallback@4048458<0> v2, v39, using unchecked entrypoint)
ParallelMove  goto:112 B14
B13
B14
B15
B16
B17
B18
B19
ParallelMove rax <- C
DartReturn:138(v0)
CheckStackOverflowSlowPath
slow path check null (cast) operation
B0
B1
v3 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v5 <- BinaryInt64Op(- [tr], v3, v13 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v5 T{int} <int64>)
ParallelMove rax <- C
DartReturn:16(v0)
B0
B1
ParallelMove rcx <- C
v3 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v14 <- IntConverter(int64->uint32[tr], v3) uint32
ParallelMove rdx <- rdx
v5 <- BinaryUint32Op(& [tr], v14 T{int}, v16 T{_Smi}) [0, 1] uint32
ParallelMove rdx <- rdx
v15 <- IntConverter(uint32->int64, v5) int64
v7 <- EqualityCompare(v15 T{_Smi} != v12 T{_Smi}) T{bool}
ParallelMove rax <- rax
DartReturn:18(v7 T{bool})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove rcx <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v6 <- BinaryInt64Op(& [tr], v3, v37) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v6 T{int} <int64>)
ParallelMove rdx <- rdx
v51 <- IntConverter(int64->uint32[tr], v6 T{int}) uint32
ParallelMove rdx <- rdx
v28 <- BinaryUint32Op(& [tr], v51 T{int}, v53 T{_Smi}) [0, 8] uint32
ParallelMove rdx <- rdx
v52 <- IntConverter(uint32->int64, v28) int64
Branch if EqualityCompare(v52 T{_Smi} == v44 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rdi <- rcx
StaticCall:28( _cancel@4048458<0> v2, using unchecked entrypoint)
ParallelMove  goto:34 B5
B4
B5
v9 <- LoadField(v2 . _cancelFuture@4048458) T{_Future?}
Branch if StrictCompare:40(===, v9, v0) goto (6, 7)
B6
v15 <- LoadStaticField:4(_nullFuture@4048458, CallsInitializer) T{_Future}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:52 B8
B7
ParallelMove rax <- rcx goto:54 B8
B8
ParallelMove rax <- rax
DartReturn:56(v10)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove rdx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v80 <- LoadField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rcx
v140 <- IntConverter(int64->uint32[tr], v80) uint32
ParallelMove rbx <- rbx
v82 <- BinaryUint32Op(& [tr], v140 T{int}, v145 T{_Smi}) [0, 8] uint32
ParallelMove rbx <- rbx
v141 <- IntConverter(uint32->int64, v82) int64
Branch if EqualityCompare(v141 T{_Smi} != v117 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:20(v0)
B4
ParallelMove rax <- C
ParallelMove rbx <- rcx
v139 <- IntConverter(int64->uint32[tr], v80 T{int}) uint32
ParallelMove rbx <- rbx
v66 <- BinaryUint32Op(& [tr], v139 T{int}, v146 T{_Smi}) [0, 4] uint32
ParallelMove rbx <- rbx
v142 <- IntConverter(uint32->int64, v66) int64
ParallelMove fp[-1] <- rbx
ParallelMove rax <- rcx
v9 <- BinaryInt64Op(+ [tr], v80 T{int}, v118 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v11 <- BinaryInt64Op(| [tr], v9, v119 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458 = v11 T{int} <int64>)
Branch if RelationalOp(<, v80 T{int}, v118 T{_Smi}) T{bool} goto (5, 9)
B5
v16 <- LoadField(v2 . _pending@4048458) T{_PendingEvents?}
Branch if StrictCompare:46(===, v16, v0) goto (6, 7)
B6
B7
ParallelMove rdi <- rdi
v17 <- StaticCall:54( cancelSchedule<0> v16 T{_PendingEvents}, using unchecked entrypoint) T{void?}
ParallelMove  goto:60 B8
B8
B9
B10
Branch if EqualityCompare(v142 T{_Smi} == v117 T{_Smi}) T{bool} goto (11, 14)
B11
ParallelMove rax <- fp[-2], rcx <- C
v45 <- LoadField(v2 T{_BufferingStreamSubscription<X0>} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v143 <- IntConverter(int64->uint32[tr], v45) uint32
ParallelMove rdx <- rdx
v47 <- BinaryUint32Op(& [tr], v143 T{int}, v147 T{_Smi}) [0, 64] uint32
ParallelMove rdx <- rdx
v144 <- IntConverter(uint32->int64, v47) int64
Branch if EqualityCompare(v144 T{_Smi} == v117 T{_Smi}) T{bool} goto (12, 15)
B12
v38 <- LoadClassId(v2) [455, 456] int64
Branch if EqualityCompare:88(v38 == v39) goto (17, 20)
B17
ParallelMove rbx <- C, rdx <- rax
v26 <- AllocateClosure:6(v28 T{Function}, v2 T{_BufferingStreamSubscription<X0>}) T{_Closure}
ParallelMove rax <- rax
ParallelMove rsi <- rax goto:8 B21
B20
ParallelMove rbx <- C, rdx <- fp[-2]
v35 <- AllocateClosure:6(v37 T{Function}, v2 T{_BroadcastSubscription}) T{_Closure}
ParallelMove rax <- rax
ParallelMove rsi <- rax goto:8 B21
B21
ParallelMove rdi <- fp[-2], rsi <- rsi
StaticCall:90( _guardCallback@4048458<0> v2, v40, using unchecked entrypoint)
ParallelMove  goto:104 B16
B15
B14
B13
B16
ParallelMove rax <- C
DartReturn:108(v0)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- rsi
StoreField(v2 . next = v3)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
Enter frame
PrologueOffset = 0
v4 <- AllocateObject:10(cls=StateError) T{StateError}
ParallelMove rcx <- rax, rax <- C
StoreField(v4 T{StateError} . message = v5 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:14(v4)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rsi <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _controller@4048458 {final}) T{_StreamControllerLifecycle<X0>}
v4 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- rsi
DispatchTableCall( cid=v4 _StreamControllerLifecycle._recordResume<0>, v3, v2)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rsi <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _controller@4048458 {final}) T{_StreamControllerLifecycle<X0>}
v4 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- rsi
DispatchTableCall( cid=v4 _StreamControllerLifecycle._recordPause<0>, v3, v2)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-3] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _table@3220832 {final}) T{_HashBase}
ParallelMove fp[-2] <- rbx
v4 <- LoadField(v2 . _data@3220832 {final}) T{_List}
ParallelMove fp[-1] <- r8
v5 <- LoadField(v2 . _checkSum@3220832 {final}) [-9223372036854775808, 9223372036854775807] int64
v100 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rbx, rsi <- r8, rdx <- rdx
v6 <- DispatchTableCall( cid=v100 _HashBase._isModifiedSince<0>, v3, v4, v5) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:20(===, v6 T{bool}, v7) goto (3, 4)
BoolTest
B4
ParallelMove rcx <- fp[-3], rdx <- fp[-1]
v9 <- LoadField:82(v2 . _step@3220832 {final}) [-9223372036854775808, 9223372036854775807] int64
v12 <- LoadField:82(v2 . _len@3220832 {final}) [-9223372036854775808, 9223372036854775807] int64
v28 <- LoadField:82(v4 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove r9 <- r8
v72 <- UnboxInt64:82([non-speculative], v28) [0, 576460752303423487] int64
ParallelMove  goto:82 B6
B6
  Loop 0
CheckStackOverflow:76(stack=0, loop=1)
v8 <- LoadField(v2 . _offset@3220832) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- rax
v10 <- BinaryInt64Op(+ [tr], v8, v9) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_CompactIterator} . _offset@3220832 = v10 T{int} <int64>)
Branch if RelationalOp(<, v10 T{int}, v12) T{bool} goto (5, 9)
B5
  Loop 0
ParallelMove rax <- r9, rbx <- r10
GenericCheckBound:62(v72 T{_Smi}, v10 T{int}) [-9223372036854775808, 9223372036854775807] int64
v81 <- LoadIndexed:62([_List] v4 T{_List}, v10 T{int}) T{*?}
Branch if StrictCompare:10(===, v81 T{Object??}, v4 T{_List}) T{bool} goto (7, 10)
B7
B10
B9
B8
Branch if RelationalOp(<, v10 T{int}, v12 T{int}) T{bool} goto (11, 12)
B11
ParallelMove r8 <- r8
v74 <- UnboxInt64([non-speculative], v28 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- r8, rbx <- r10
GenericCheckBound:112(v74 T{_Smi}, v10 T{int}) [-9223372036854775808, 9223372036854775807] int64
v82 <- LoadIndexed:112([_List] v4 T{_List}, v10 T{int}) T{*?}
ParallelMove rax <- rax
StoreField(v2 T{_CompactIterator} . _current@3220832 = v82 T{X0??})
ParallelMove rax <- C
DartReturn:116(v7)
B12
ParallelMove rax <- C
StoreField(v2 T{_CompactIterator} . _current@3220832 = v0 T{Null?})
ParallelMove rax <- C
DartReturn:122(v17)
B3
ParallelMove rax <- fp[-2]
v26 <- AllocateObject:26(cls=ConcurrentModificationError, <not-aliased>) T{ConcurrentModificationError}
ParallelMove rcx <- rax, rax <- fp[-2]
StoreField(v26 T{ConcurrentModificationError} . modifiedObject = v3 T{_HashBase}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:32(v26)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
v3 <- LoadField(v2 . _offset@3220832) [-9223372036854775808, 9223372036854775807] int64
v4 <- LoadField(v2 . _step@3220832 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v5 <- BinaryInt64Op(+ [tr], v3, v4) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{_CompactIteratorImmutable} . _offset@3220832 = v5 T{int} <int64>)
v7 <- LoadField(v2 . _len@3220832 {final}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v5 T{int}, v7) T{bool} goto (3, 4)
B3
v11 <- LoadField(v2 . _data@3220832 {final}) T{_ImmutableList}
v14 <- LoadField(v11 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rsi <- rsi
v34 <- UnboxInt64([non-speculative], v14) [0, 576460752303423487] int64
ParallelMove rax <- rsi, rbx <- rcx
GenericCheckBound:36(v34 T{_Smi}, v5 T{int}) [-9223372036854775808, 9223372036854775807] int64
v36 <- LoadIndexed:36([_List] v11, v5 T{int}) T{*?}
ParallelMove rax <- rax
StoreField(v2 T{_CompactIteratorImmutable} . _current@3220832 = v36 T{X0??})
ParallelMove rax <- C
DartReturn:40(v9)
B4
ParallelMove rcx <- C
StoreField(v2 T{_CompactIteratorImmutable} . _current@3220832 = v0 T{Null?})
ParallelMove rax <- C
DartReturn:46(v10)
slow path check bound operation
PrologueOffset = 108
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . _map@3220832 {final}) T{_Map}
ParallelMove rdi <- rax, rsi <- rsi, fp[-1] <- rax
v12 <- StaticCall:10( _getValueOrData@3220832<0> v4 T{_Map}, v3 T{Object??}, using unchecked entrypoint) T{Object??}
ParallelMove rax <- rax, rcx <- fp[-1]
v19 <- LoadField(v4 T{_Map} . LinkedHashBase.data) T{_List}
Branch if StrictCompare:14(===, v19 T{_List}, v12) goto (5, 6)
B5
ParallelMove rax <- C goto:24 B7
B6
B7
ParallelMove rax <- rax
DartReturn:14(v14 T{X1??})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . _current@3220832) T{X0??}
ParallelMove fp[-1] <- rbx
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
v6 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
t0 <- AssertAssignable:18(v3 T{X0??}, v5, ' in type cast', instantiator_type_args(v6), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove  goto:24 B5
B4
B5
ParallelMove rax <- fp[-1]
DartReturn:28(v3 T{X0??})
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . _current@3220832) T{X0??}
ParallelMove fp[-1] <- rbx
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
v6 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
t0 <- AssertAssignable:18(v3 T{X0??}, v5, ' in type cast', instantiator_type_args(v6), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove  goto:24 B5
B4
B5
ParallelMove rax <- fp[-1]
DartReturn:28(v3 T{X0??})
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . _map@3220832 {final}) T{_Map}
ParallelMove fp[-1] <- rax
v9 <- LoadField(v3 T{_Map} . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx
v10 <- AllocateObject:10(cls=_CompactIterable, v9, <not-aliased>) T{_CompactIterable}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v10 T{_CompactIterable} . _table@3220832 = v3 T{_Map}, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v10 T{_CompactIterable} . _offset@3220832 = v14 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v10 T{_CompactIterable} . _step@3220832 = v30 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:14(v10)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . _map@3220832 {final}) T{_Map}
ParallelMove rdi <- rax, rsi <- rsi
StaticCall:12( forEach<0> v4, v3, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _iterable@9040228 {final}) T{Iterable<X0>}
ParallelMove fp[-1] <- rax
v58 <- LoadClassId(<non-smi> v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v4 <- DispatchTableCall( cid=v58 Iterable.length<0>, v3) T{int}
ParallelMove rcx <- rax, rax <- fp[-2]
v5 <- LoadField(v2 . _length@9040228 {final}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v56 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v5 != v56 T{int}) T{bool} goto (3, 4)
B4
v8 <- LoadField(v2 . _index@9040228) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v8, v56 T{int}) T{bool} goto (5, 6)
B5
ParallelMove rcx <- C
StoreField(v2 T{ListIterator} . _current@9040228 = v0 T{Null?})
ParallelMove rax <- C
DartReturn:50(v16)
B6
ParallelMove rdi <- fp[-1]
v59 <- LoadClassId(<non-smi> v3 T{Iterable<X0>}) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- rsi
v12 <- DispatchTableCall( cid=v59 Iterable.elementAt<0>, v3 T{Iterable<X0>}, v8 T{int}) T{*?}
ParallelMove rax <- rax, rcx <- fp[-2]
StoreField(v2 T{ListIterator} . _current@9040228 = v12 T{X0?})
v13 <- LoadField(v2 . _index@9040228) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v15 <- BinaryInt64Op(+ [tr], v13, v57 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreField(v2 T{ListIterator} . _index@9040228 = v15 T{int} <int64>)
ParallelMove rax <- C
DartReturn:68(v7)
B3
ParallelMove rdi <- fp[-1]
v17 <- AllocateObject:26(cls=ConcurrentModificationError, <not-aliased>) T{ConcurrentModificationError}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v17 T{ConcurrentModificationError} . modifiedObject = v3 T{Iterable<X0>}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:32(v17)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . _current@9040228) T{X0??}
ParallelMove fp[-1] <- rbx
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
v6 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
t0 <- AssertAssignable:18(v3 T{X0??}, v5, ' in type cast', instantiator_type_args(v6), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove  goto:24 B5
B4
B5
ParallelMove rax <- fp[-1]
DartReturn:28(v3 T{X0??})
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v30 <- LoadField(v2 T{__Int8ArrayView&_TypedListView&_IntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v37 <- UnboxInt64([non-speculative], v30 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v37 T{_Smi}, v41 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rcx <- rax
v10 <- BinaryInt64Op(- [tr], v37 T{_Smi}, v42 T{_Smi}) [v37-1, v37-1] int64
ParallelMove rax <- rax, rbx <- rcx
t0 <- GenericCheckBound:26(v37 T{_Smi}, v10 T{int}) [-9223372036854775808, 9223372036854775807] int64
v45 <- LoadField(v2 T{_Uint8ArrayView} . PointerBase.data, MayLoadInnerPointer) untagged
v25 <- LoadIndexed([_Uint8ArrayView] v45 T{_Uint8ArrayView}, v10 T{int}) [0, 255] int64
v40 <- BoxInt64(v25 T{_Smi}) [0, 255] T{_Smi}
ParallelMove rax <- rax
DartReturn:28(v40 T{_Smi})
B4
v7 <- StaticCall:32( noElement<0> ) T{StateError}
ParallelMove rax <- rax
Throw:34(v7)
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v21 <- LoadField(v2 T{__Int8List&_TypedList&_IntListMixin} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v28 <- UnboxInt64([non-speculative], v21 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v28 T{_Smi}, v31 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- rax
v10 <- BinaryInt64Op(- [tr], v28 T{_Smi}, v32 T{_Smi}) [v28-1, v28-1] int64
v30 <- BoxInt64(v10) [v28-1, v28-1] T{_Smi}
v33 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v30)
ParallelMove rcx <- rax
v11 <- DispatchTableCall( cid=v33 List.[]<0>, v2, v30) T{*?}
ParallelMove rax <- rax
DartReturn:28(v11 T{_Smi})
B4
v7 <- StaticCall:32( noElement<0> ) T{StateError}
ParallelMove rax <- rax
Throw:34(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _position@7027147) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax
v5 <- BinaryInt64Op(+ [tr], v3, v38 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-1] <- rdx
v6 <- LoadField(v2 . _length@7027147 {final}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v5, v6) T{bool} goto (3, 4)
B3
v11 <- LoadField(v2 . _array@7027147 {final}) T{List<X0>}
v37 <- BoxInt64(v5) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v39 <- LoadClassId(<non-smi> v11) int64
MoveArgument(sp[1] <- v11)
MoveArgument(sp[0] <- v37 T{int})
ParallelMove rcx <- rbx
v12 <- DispatchTableCall( cid=v39 List.[]<0>, v11, v37 T{int}) T{*?}
ParallelMove rax <- rax, rcx <- fp[-2]
StoreField(v2 T{_TypedListIterator} . _current@7027147 = v12 T{X0})
ParallelMove rdx <- fp[-1]
StoreField(v2 T{_TypedListIterator} . _position@7027147 = v5 T{int} <int64>)
ParallelMove rax <- C
DartReturn:34(v8)
B4
ParallelMove rdx <- C, rcx <- rdi
StoreField(v2 T{_TypedListIterator} . _position@7027147 = v6 T{int} <int64>)
StoreField(v2 T{_TypedListIterator} . _current@7027147 = v0 T{Null?})
ParallelMove rax <- C
DartReturn:44(v10)
CheckStackOverflowSlowPath
B0
B36
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v90 <- LoadField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin<X0>} . ImmutableLinkedHashBase.data {final}) T{_ImmutableList}
v95 <- LoadField(v90 T{_ImmutableList} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v206 <- UnboxInt64([non-speculative], v95 T{_Smi}) [0, 576460752303423487] int64
Branch if RelationalOp(>, v206 T{_Smi}, v214 T{_Smi}) T{bool} goto (37, 38)
B37
ParallelMove rax <- rcx goto:48 B46
B38
Branch if RelationalOp(<, v206 T{_Smi}, v214 T{_Smi}) T{bool} goto (39, 43)
B39
ParallelMove rax <- C goto:62 B46
B43
ParallelMove rax <- rcx goto:98 B46
B46
ParallelMove rax <- rax
v132 <- BinaryInt64Op(- [tr], v126 T{_Smi}, v215 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rdx <- rax
v133 <- ShiftInt64Op(>> [tr], v132, v215 T{_Smi}) [-1, 288230376151711743] int64
ParallelMove rax <- rax
v134 <- BinaryInt64Op(| [tr], v132, v133) [-576460752303423488, 576460752303423487] int64
ParallelMove rdx <- rax
v136 <- ShiftInt64Op(>> [tr], v134, v216 T{_Smi}) [-144115188075855872, 144115188075855871] int64
ParallelMove rax <- rax
v137 <- BinaryInt64Op(| [tr], v134, v136) [-576460752303423488, 576460752303423487] int64
ParallelMove rdx <- rax
v139 <- ShiftInt64Op(>> [tr], v137, v217 T{_Smi}) [-36028797018963968, 36028797018963967] int64
ParallelMove rax <- rax
v140 <- BinaryInt64Op(| [tr], v137, v139) [-576460752303423488, 576460752303423487] int64
ParallelMove rdx <- rax
v142 <- ShiftInt64Op(>> [tr], v140, v214 T{_Smi}) [-2251799813685248, 2251799813685247] int64
ParallelMove rax <- rax
v143 <- BinaryInt64Op(| [tr], v140, v142) [-576460752303423488, 576460752303423487] int64
ParallelMove rdx <- rax
v145 <- ShiftInt64Op(>> [tr], v143, v218 T{_Smi}) [-8796093022208, 8796093022207] int64
ParallelMove rax <- rax
v146 <- BinaryInt64Op(| [tr], v143, v145) [-576460752303423488, 576460752303423487] int64
ParallelMove rdx <- rax
v148 <- ShiftInt64Op(>> [tr], v146, v219 T{_Smi}) [-134217728, 134217727] int64
ParallelMove rax <- rax
v149 <- BinaryInt64Op(| [tr], v146, v148) [-576460752303423488, 576460752303423487] int64
ParallelMove rax <- rax
v150 <- BinaryInt64Op(+ [tr], v149, v215 T{_Smi}) [-576460752303423487, 576460752303423488] int64
Branch if EqualityCompare(v206 T{_Smi} == v220 T{_Smi}) T{bool} goto (3, 4)
B3
v85 <- LoadStaticField:4(_uninitializedIndex@3220832, CallsInitializer) T{_Uint32List}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:40 B5
B4
v209 <- BoxInt64(v150 T{int}) [-576460752303423487, 576460752303423488] T{_Smi}
ParallelMove rax <- rcx
v82 <- AllocateTypedData:10(v209) T{_Uint32List}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:42 B5
B5
ParallelMove rax <- rcx
StoreField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin<X0>} . ImmutableLinkedHashBase.index = v15)
v36 <- LoadField(v15 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare(===, v36 T{_Smi}, v66 T{_Smi}) T{bool} goto (14, 18)
B14
ParallelMove rcx <- C goto:20 B19
B18
MoveArgument(sp[0] <- v36 T{_Smi})
v44 <- StaticCall:24( get:bitLength<0> v36 T{_Smi}, recognized_kind = Smi_bitLength, result_type = T{_Smi}) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
ParallelMove rax <- rax
v212 <- UnboxInt64([non-speculative], v44) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rax <- rax
v46 <- BinaryInt64Op(- [tr], v212 T{_Smi}, v216 T{_Smi}) [-4611686018427387906, 4611686018427387901] int64
ParallelMove rcx <- C
v54 <- BinaryInt64Op(- [tr], v219 T{_Smi}, v46) [-4611686018427387869, 4611686018427387938] int64
ParallelMove rcx <- rcx
ParallelMove rax <- C
v55 <- ShiftInt64Op(<< [tr], v215 T{_Smi}, v54) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v56 <- BinaryInt64Op(- [tr], v55, v215 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax, rdi <- fp[-1] goto:58 B19
B19
v213 <- BoxInt64(v70 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.hash_mask = v213 T{int}, NoStoreBarrier)
ParallelMove rdi <- rdi
StaticCall:54( _rehash@3220832<0> v2, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:56(v0)
CheckStackOverflowSlowPath
slow path int64 shift operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
Branch if EqualityCompare(v2 == v35 T{_Smi}) T{bool} goto (3, 7)
B3
ParallelMove rax <- C
DartReturn:20(v36 T{_Smi})
B7
v33 <- BoxInt64(v2) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v41 <- LoadClassId(v33 T{int}) int64
MoveArgument(sp[0] <- v33 T{int})
ParallelMove rcx <- rcx
v6 <- DispatchTableCall( cid=v41 int.bitLength<0>, v33 T{int}) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v34 <- UnboxInt64([non-speculative], v6 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rax <- rax
v8 <- BinaryInt64Op(- [tr], v34 T{_Smi}, v37 T{_Smi}) [-4611686018427387906, 4611686018427387901] int64
ParallelMove rdx <- C
v16 <- BinaryInt64Op(- [tr], v38 T{_Smi}, v8) [-4611686018427387869, 4611686018427387938] int64
ParallelMove rcx <- rdx
ParallelMove rdx <- C
v17 <- ShiftInt64Op(<< [tr], v35 T{_Smi}, v16) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v18 <- BinaryInt64Op(- [tr], v17, v35 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rdx
DartReturn:58(v18 T{int})
CheckStackOverflowSlowPath
slow path int64 shift operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v77 <- LoadField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.deleted_keys) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v100 <- UnboxInt64([non-speculative], v77 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax
v5 <- ShiftInt64Op(<< [tr], v100 T{_Smi}, v109 T{_Smi}) [0, 9223372036854775806] int64
v82 <- LoadField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v101 <- UnboxInt64([non-speculative], v82 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v5, v101 T{_Smi}) T{bool} goto (3, 4)
B3
v92 <- LoadField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin<X0>} . ImmutableLinkedHashBase.index) T{_Uint32List?}
CheckNull:12(v92, CastError) T{_Uint32List}
v57 <- LoadField(v92 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v62 <- LoadField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.hash_mask) [0, 4611686018427387903] T{_Smi}
v67 <- LoadField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin<X0>} . ImmutableLinkedHashBase.data {final}) T{_ImmutableList}
ParallelMove rdx <- rdx
v102 <- UnboxInt64([non-speculative], v57 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax
v103 <- UnboxInt64([non-speculative], v62 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- rdi, rsi <- rdx, rdx <- rax, rbx <- rbx, r8 <- rcx
StaticCall:36( _init@3220832<0> v2, v102 T{_Smi}, v103 T{_Smi}, v67 T{_ImmutableList}, v101 T{_Smi}, using unchecked entrypoint)
ParallelMove  goto:58 B5
B4
v87 <- LoadField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin<X0>} . ImmutableLinkedHashBase.index) T{_Uint32List?}
CheckNull:12(v87, CastError) T{_Uint32List}
v31 <- LoadField(v87 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v105 <- UnboxInt64([non-speculative], v31 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdx <- rdx
v11 <- ShiftInt64Op(<< [tr], v105 T{_Smi}, v109 T{_Smi}) [0, 9223372036854775806] int64
v36 <- LoadField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.hash_mask) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v106 <- UnboxInt64([non-speculative], v36 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax
v13 <- ShiftInt64Op(>> [tr], v106 T{_Smi}, v109 T{_Smi}) [0, 2305843009213693951] int64
v41 <- LoadField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin<X0>} . ImmutableLinkedHashBase.data {final}) T{_ImmutableList}
ParallelMove rdi <- rdi, rsi <- rdx, rdx <- rax, rbx <- rbx, r8 <- rcx
StaticCall:54( _init@3220832<0> v2, v11, v13, v41 T{_ImmutableList}, v101 T{_Smi}, using unchecked entrypoint)
ParallelMove  goto:60 B5
B5
ParallelMove rax <- C
DartReturn:62(v0)
CheckStackOverflowSlowPath
slow path check null (cast) operation
slow path check null (cast) operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rbx, fp[-3] <- rdi, fp[-4] <- rbx, fp[-5] <- r8
CheckStackOverflow:8(stack=0, loop=0)
Branch if RelationalOp(<, v3, v166 T{_Smi}) T{bool} goto (38, 4)
B38
ParallelMove rsi <- C, rdx <- C goto:26 B5
B4
B5
ParallelMove fp[-1] <- rsi, fp[-2] <- rdx
v156 <- BoxInt64(v10 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v52 <- AllocateTypedData:10(v156 T{int}) T{_Uint32List}
ParallelMove rax <- rax, rcx <- fp[-3]
StoreField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin<X0>} . ImmutableLinkedHashBase.index = v52 T{_Uint32List})
ParallelMove rdx <- fp[-2]
v157 <- BoxInt64(v11 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.hash_mask = v157 T{int}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
v15 <- ShiftInt64Op(>> [tr], v10, v167 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v158 <- BoxInt64(v15 T{int}) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rbx <- C, r10 <- r10
v71 <- CreateArray:10(v13 T{TypeArguments}, v158) T{_List}
ParallelMove rax <- rax, rcx <- fp[-3]
StoreField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.data = v71 T{_List})
StoreField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.used_data = v17 T{_Smi}, NoStoreBarrier)
StoreField(v2 T{__ConstSet&_HashVMImmutableBase&SetMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.deleted_keys = v17 T{_Smi}, NoStoreBarrier)
ParallelMove rdx <- fp[-4]
v28 <- LoadField:86(v5 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rsi <- rax
v159 <- UnboxInt64:86([non-speculative], v28) [0, 576460752303423487] int64
ParallelMove r8 <- C, rdi <- fp[-5] goto:86 B11
B11
  Loop 0
CheckStackOverflow:90(stack=0, loop=1)
Branch if RelationalOp(<, v18, v6) T{bool} goto (6, 7)
B6
  Loop 0
ParallelMove rax <- rsi, rbx <- r8
GenericCheckBound:60(v159 T{_Smi}, v18) [-9223372036854775808, 9223372036854775807] int64
v169 <- LoadIndexed:60([_List] v5, v18 T{int}) T{*?}
Branch if StrictCompare:10(!==, v169 T{Object??}, v5 T{_ImmutableList}) T{bool} goto (13, 10)
B10
  Loop 0
ParallelMove r8 <- r8
v23 <- BinaryInt64Op(+ [tr], v18 T{int}, v167 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- r8 goto:88 B11
B7
ParallelMove rax <- C
DartReturn:92(v0)
B13
v25 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rax, rdx <- rdx, rcx <- C
t1 <- AssertAssignable:72(v169 T{*?}, v24, '', instantiator_type_args(v25), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
v37 <- StaticCall:10( _throwUnmodifiable@3220832<0> ) T{Never}
v38 <- AllocateObject:12(cls=ReachabilityError, <not-aliased>) T{ReachabilityError}
ParallelMove rcx <- rax, rax <- C
StoreField(v38 T{ReachabilityError} . _message@9040228 = v132 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v38)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
v2 <- AllocateObject:10(cls=UnsupportedError) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v2 T{UnsupportedError} . message = v3 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:14(v2)
B0
B36
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v89 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.data) T{_List}
v94 <- LoadField(v89 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rcx <- rcx
v200 <- UnboxInt64([non-speculative], v94 T{_Smi}) [0, 576460752303423487] int64
Branch if RelationalOp(>, v200 T{_Smi}, v208 T{_Smi}) T{bool} goto (37, 38)
B37
ParallelMove rax <- rcx goto:48 B46
B38
Branch if RelationalOp(<, v200 T{_Smi}, v208 T{_Smi}) T{bool} goto (39, 43)
B39
ParallelMove rax <- C goto:62 B46
B43
ParallelMove rax <- rcx goto:98 B46
B46
ParallelMove rax <- rax
v131 <- BinaryInt64Op(- [tr], v125 T{_Smi}, v209 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rdx <- rax
v132 <- ShiftInt64Op(>> [tr], v131, v209 T{_Smi}) [-1, 288230376151711743] int64
ParallelMove rax <- rax
v133 <- BinaryInt64Op(| [tr], v131, v132) [-576460752303423488, 576460752303423487] int64
ParallelMove rdx <- rax
v135 <- ShiftInt64Op(>> [tr], v133, v210 T{_Smi}) [-144115188075855872, 144115188075855871] int64
ParallelMove rax <- rax
v136 <- BinaryInt64Op(| [tr], v133, v135) [-576460752303423488, 576460752303423487] int64
ParallelMove rdx <- rax
v138 <- ShiftInt64Op(>> [tr], v136, v211 T{_Smi}) [-36028797018963968, 36028797018963967] int64
ParallelMove rax <- rax
v139 <- BinaryInt64Op(| [tr], v136, v138) [-576460752303423488, 576460752303423487] int64
ParallelMove rdx <- rax
v141 <- ShiftInt64Op(>> [tr], v139, v208 T{_Smi}) [-2251799813685248, 2251799813685247] int64
ParallelMove rax <- rax
v142 <- BinaryInt64Op(| [tr], v139, v141) [-576460752303423488, 576460752303423487] int64
ParallelMove rdx <- rax
v144 <- ShiftInt64Op(>> [tr], v142, v212 T{_Smi}) [-8796093022208, 8796093022207] int64
ParallelMove rax <- rax
v145 <- BinaryInt64Op(| [tr], v142, v144) [-576460752303423488, 576460752303423487] int64
ParallelMove rdx <- rax
v147 <- ShiftInt64Op(>> [tr], v145, v213 T{_Smi}) [-134217728, 134217727] int64
ParallelMove rax <- rax
v148 <- BinaryInt64Op(| [tr], v145, v147) [-576460752303423488, 576460752303423487] int64
ParallelMove rax <- rax
v149 <- BinaryInt64Op(+ [tr], v148, v209 T{_Smi}) [-576460752303423487, 576460752303423488] int64
Branch if EqualityCompare(v200 T{_Smi} == v214 T{_Smi}) T{bool} goto (3, 4)
B3
v84 <- LoadStaticField:4(_uninitializedIndex@3220832, CallsInitializer) T{_Uint32List}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:40 B5
B4
v203 <- BoxInt64(v149 T{int}) [-576460752303423487, 576460752303423488] T{_Smi}
ParallelMove rax <- rcx
v81 <- AllocateTypedData:10(v203) T{_Uint32List}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:42 B5
B5
ParallelMove rax <- rcx
StoreField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.index = v15)
v35 <- LoadField(v15 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare(===, v35 T{_Smi}, v65 T{_Smi}) T{bool} goto (14, 18)
B14
ParallelMove rcx <- C goto:20 B19
B18
MoveArgument(sp[0] <- v35 T{_Smi})
v43 <- StaticCall:24( get:bitLength<0> v35 T{_Smi}, recognized_kind = Smi_bitLength, result_type = T{_Smi}) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
ParallelMove rax <- rax
v206 <- UnboxInt64([non-speculative], v43) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rax <- rax
v45 <- BinaryInt64Op(- [tr], v206 T{_Smi}, v210 T{_Smi}) [-4611686018427387906, 4611686018427387901] int64
ParallelMove rcx <- C
v53 <- BinaryInt64Op(- [tr], v213 T{_Smi}, v45) [-4611686018427387869, 4611686018427387938] int64
ParallelMove rcx <- rcx
ParallelMove rax <- C
v54 <- ShiftInt64Op(<< [tr], v209 T{_Smi}, v53) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v55 <- BinaryInt64Op(- [tr], v54, v209 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax, rdi <- fp[-1] goto:58 B19
B19
v207 <- BoxInt64(v69 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.hash_mask = v207 T{int}, NoStoreBarrier)
ParallelMove rdi <- rdi
StaticCall:54( _rehash@3220832<0> v2, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:56(v0)
CheckStackOverflowSlowPath
slow path int64 shift operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v75 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.deleted_keys) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v88 <- UnboxInt64([non-speculative], v75 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax
v5 <- ShiftInt64Op(<< [tr], v88 T{_Smi}, v96 T{_Smi}) [0, 9223372036854775806] int64
v80 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v89 <- UnboxInt64([non-speculative], v80 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(>, v5, v89 T{_Smi}) T{bool} goto (3, 4)
B3
v50 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.index) T{_Uint32List}
v55 <- LoadField(v50 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
v60 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.hash_mask) [0, 4611686018427387903] T{_Smi}
v65 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.data) T{_List}
ParallelMove rdx <- rdx
v90 <- UnboxInt64([non-speculative], v55 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax
v91 <- UnboxInt64([non-speculative], v60 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- rdi, rsi <- rdx, rdx <- rax, rbx <- rbx, r8 <- rcx
StaticCall:36( _init@3220832<0> v2, v90 T{_Smi}, v91 T{_Smi}, v65 T{_List}, v89 T{_Smi}, using unchecked entrypoint)
ParallelMove  goto:58 B5
B4
v25 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.index) T{_Uint32List}
v30 <- LoadField(v25 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v93 <- UnboxInt64([non-speculative], v30 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdx <- rdx
v11 <- ShiftInt64Op(<< [tr], v93 T{_Smi}, v96 T{_Smi}) [0, 9223372036854775806] int64
v35 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.hash_mask) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v94 <- UnboxInt64([non-speculative], v35 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax
v13 <- ShiftInt64Op(>> [tr], v94 T{_Smi}, v96 T{_Smi}) [0, 2305843009213693951] int64
v40 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.data) T{_List}
ParallelMove rdi <- rdi, rsi <- rdx, rdx <- rax, rbx <- rbx, r8 <- rcx
StaticCall:54( _init@3220832<0> v2, v11, v13, v40 T{_List}, v89 T{_Smi}, using unchecked entrypoint)
ParallelMove  goto:60 B5
B5
ParallelMove rax <- C
DartReturn:62(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rbx, fp[-3] <- rdi, fp[-4] <- rbx, fp[-5] <- r8
CheckStackOverflow:8(stack=0, loop=0)
Branch if RelationalOp(<, v3, v150 T{_Smi}) T{bool} goto (37, 4)
B37
ParallelMove rsi <- C, rdx <- C goto:26 B5
B4
B5
ParallelMove fp[-1] <- rsi, fp[-2] <- rdx
v145 <- BoxInt64(v10 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v51 <- AllocateTypedData:10(v145 T{int}) T{_Uint32List}
ParallelMove rax <- rax, rdi <- fp[-3]
StoreField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.index = v51 T{_Uint32List})
ParallelMove rcx <- fp[-2]
v146 <- BoxInt64(v11 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.hash_mask = v146 T{int}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
v15 <- ShiftInt64Op(>> [tr], v10, v151 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v147 <- BoxInt64(v15 T{int}) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rbx <- C, r10 <- r10
v70 <- CreateArray:10(v13 T{TypeArguments}, v147) T{_List}
ParallelMove rax <- rax, rdi <- fp[-3]
StoreField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.data = v70 T{_List})
StoreField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.used_data = v17 T{_Smi}, NoStoreBarrier)
StoreField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.deleted_keys = v17 T{_Smi}, NoStoreBarrier)
ParallelMove rsi <- fp[-4]
v28 <- LoadField:86(v5 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove r8 <- rax
v148 <- UnboxInt64:86([non-speculative], v28) [0, 576460752303423487] int64
ParallelMove fp[-2] <- r8
v25 <- LoadField:86(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove fp[-7] <- r9
ParallelMove r12 <- C goto:86 B11
B11
  Loop 0
ParallelMove fp[-1] <- r12
CheckStackOverflow:90(stack=0, loop=1)
Branch if RelationalOp(<, v18, v6) T{bool} goto (6, 7)
B6
  Loop 0
ParallelMove rax <- r8, rbx <- r12
GenericCheckBound:60(v148 T{_Smi}, v18) [-9223372036854775808, 9223372036854775807] int64
v153 <- LoadIndexed:60([_List] v5, v18 T{int}) T{*?}
ParallelMove fp[-6] <- rbx
Branch if StrictCompare:10(!==, v153 T{Object??}, v5 T{_List}) T{bool} goto (8, 9)
B8
  Loop 0
ParallelMove rax <- rbx, rdx <- r9, rcx <- C
t1 <- AssertAssignable:72(v153 T{*?}, v24, '', instantiator_type_args(v25), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-3], rsi <- fp[-6]
v37 <- StaticCall:10( _hashCode@3220832<0> v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>}, v153 T{X0?}, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-3], rsi <- fp[-6], rdx <- rax
v38 <- StaticCall:12( _add@3220832<0> v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>}, v153 T{X0?}, v37, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove  goto:80 B10
B9
B10
  Loop 0
ParallelMove rcx <- fp[-1]
v23 <- BinaryInt64Op(+ [tr], v18 T{int}, v151 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- rcx, rdi <- fp[-3], rsi <- fp[-4], r9 <- fp[-7], r8 <- fp[-2] goto:88 B11
B7
ParallelMove rax <- C
DartReturn:92(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-2] <- rdx, fp[-8] <- rdi, fp[-9] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v140 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.index) T{_Uint32List}
v145 <- LoadField(v140 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- r8
v232 <- UnboxInt64([non-speculative], v145 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove r9 <- rax
v8 <- BinaryInt64Op(- [tr], v232 T{_Smi}, v257 T{_Smi}) [v232-1, v232-1] int64
ParallelMove fp[-7] <- r9
ParallelMove r10 <- rax
v9 <- ShiftInt64Op(>> [tr], v232 T{_Smi}, v257 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-6] <- r10
v150 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.hash_mask) [0, 4611686018427387903] T{_Smi}
ParallelMove rbx <- rbx
v233 <- UnboxInt64([non-speculative], v150 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove r12 <- rdx
v159 <- BinaryInt64Op(& [tr], v4 T{int}, v233 T{_Smi}) [0, 4611686018427387903] int64
Branch if EqualityCompare(v159 == v258 T{_Smi}) T{bool} goto (60, 61)
B60
ParallelMove r12 <- r10 goto:32 B62
B61
ParallelMove r12 <- r12
v165 <- BinaryInt64Op(* [tr], v159, v9 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- r12 goto:34 B62
B62
ParallelMove fp[-5] <- r12
ParallelMove rbx <- rdx
v178 <- BinaryInt64Op(& [tr], v4 T{int}, v8 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r13 <- rbx
v180 <- ShiftInt64Op(<< [tr], v178, v257 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r13 <- r13
v181 <- BinaryInt64Op(+ [tr], v180, v178) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r13 <- r13
v182 <- BinaryInt64Op(& [tr], v181, v8 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax, rbx <- r13
GenericCheckBound:28(v232 T{_Smi}, v182 T{int}) [-9223372036854775808, 9223372036854775807] int64
v259 <- LoadIndexed:28([_Uint32List] v140 T{_Uint32List}, v182 T{int}) [0, 4294967295] uint32
ParallelMove r8 <- r8
v289 <- UnboxInt64([non-speculative], v145) int64
ParallelMove r13 <- r13, r8 <- C, rbx <- rax, rcx <- rcx, rax <- r8 goto:126 B15
B15
  Loop 0
ParallelMove fp[-1] <- rcx, fp[-3] <- r13, fp[-4] <- r8
CheckStackOverflow:124(stack=0, loop=1)
ParallelMove rbx <- rbx
v238 <- IntConverter(uint32->int64, v18) [0, 4294967295] int64
Branch if EqualityCompare(v238 T{_Smi} != v258 T{_Smi}) T{bool} goto (14, 16)
B14
  Loop 0
Branch if EqualityCompare(v238 T{_Smi} == v257 T{_Smi}) T{bool} goto (3, 7)
B3
  Loop 0
Branch if RelationalOp(<, v17, v258 T{_Smi}) T{bool} goto (4, 5)
B4
  Loop 0
ParallelMove r8 <- r13 goto:62 B6
B5
B6
  Loop 0
ParallelMove r8 <- r8, rdx <- rdi, rsi <- r9 goto:108 B13
B7
  Loop 0
ParallelMove rcx <- r12
v37 <- BinaryInt64Op(^ [tr], v166 T{int}, v238 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v37, v9) T{bool} goto (8, 11)
B8
  Loop 0
v126 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.data) T{_List}
v53 <- LoadField(v126 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rbx <- rbx
v239 <- UnboxInt64([non-speculative], v53) [0, 576460752303423487] int64
ParallelMove rax <- rbx, rbx <- rcx, rdx <- rax
GenericCheckBound:80(v239 T{_Smi}, v37) [-9223372036854775808, 9223372036854775807] int64
v260 <- LoadIndexed:80([_List] v126 T{_List}, v37 T{int}) T{*?}
v292 <- LoadClassId(v3 T{X0?}) int64
MoveArgument(sp[1] <- v3 T{X0?})
MoveArgument(sp[0] <- v260 T{Object??})
ParallelMove rcx <- rcx
v135 <- DispatchTableCall( cid=v292 Object.==<0>, v3 T{X0?}, v260 T{Object??}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:86(===, v135 T{bool}, v22) goto (9, 12)
BoolTest
B12
B9
ParallelMove rax <- C
DartReturn:94(v42)
B11
B10
  Loop 0
ParallelMove r8 <- fp[-4], rdx <- fp[-8], rsi <- fp[-7] goto:110 B13
B13
  Loop 0
ParallelMove rdi <- fp[-3]
v115 <- BinaryInt64Op(+ [tr], v16 T{int}, v257 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi
v116 <- BinaryInt64Op(& [tr], v115, v8 T{int}) [-9223372036854775808, 9223372036854775807] int64
v121 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.index) T{_Uint32List}
v56 <- LoadField(v121 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- r9
v241 <- UnboxInt64([non-speculative], v56) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound:116(v241 T{_Smi}, v116 T{int}) [-9223372036854775808, 9223372036854775807] int64
v261 <- LoadIndexed:116([_Uint32List] v121 T{_Uint32List}, v116 T{int}) [0, 4294967295] uint32
ParallelMove r9 <- r9
v291 <- UnboxInt64([non-speculative], v56) int64
ParallelMove r13 <- rdi, r8 <- r8, rbx <- rbx, rcx <- rcx, rax <- r9, rdi <- rdx, rsi <- fp[-9], r9 <- rsi, r10 <- fp[-6], r12 <- fp[-5] goto:122 B15
B16
ParallelMove rdx <- rdi
v97 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
v102 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.data) T{_List}
ParallelMove fp[-10] <- rsi
v107 <- LoadField(v102 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdi <- rcx
v243 <- UnboxInt64([non-speculative], v97 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove fp[-7] <- rdi
ParallelMove r8 <- rbx
v244 <- UnboxInt64([non-speculative], v107 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-6] <- r8
Branch if EqualityCompare(v243 T{_Smi} == v244 T{_Smi}) T{bool} goto (17, 18)
B17
ParallelMove rdi <- rdx
StaticCall:146( _rehash@3220832<0> v2, using unchecked entrypoint)
ParallelMove rdi <- fp[-8], rsi <- fp[-9], rdx <- fp[-2]
StaticCall:148( _add@3220832<0> v2, v3, v4, using unchecked entrypoint)
ParallelMove  goto:190 B22
B18
ParallelMove rcx <- fp[-4]
Branch if RelationalOp(>=, v17, v258 T{_Smi}) T{bool} goto (19, 20)
B19
ParallelMove r9 <- rcx goto:166 B21
B20
ParallelMove r9 <- fp[-3] goto:168 B21
B21
ParallelMove r10 <- fp[-5]
v31 <- BinaryInt64Op(| [tr], v166 T{int}, v243 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax, rbx <- r9
GenericCheckBound:176(v266 T{_Smi}, v28) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- r10
v262 <- IntConverter(int64->uint32[tr], v31) [0, 4294967295] uint32
StoreIndexed:176([_Uint32List] v254 T{_Uint32List}, v28 T{int}, v262 T{_Smi}, NoStoreBarrier)
ParallelMove rdx <- rdi
v34 <- BinaryInt64Op(+ [tr], v243 T{_Smi}, v257 T{_Smi}) [1, 4611686018427387904] int64
v251 <- BoxInt64(v34 T{int}) [1, 4611686018427387904] T{int}
ParallelMove rax <- rax
StoreField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.used_data = v251 T{int}, NoStoreBarrier)
v62 <- LoadField(v102 T{_List} . Array.type_arguments {final}) T{TypeArguments?}
ParallelMove rax <- fp[-9], rdx <- rdx, rcx <- C
AssertAssignable:186(v3, v63, 'value', instantiator_type_args(v62), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-6], rbx <- fp[-7]
GenericCheckBound:186(v244 T{_Smi}, v243 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rdx <- fp[-10], rax <- fp[-9], rcx <- fp[-7]
StoreIndexed:186([_List] v102 T{_List}, v243 T{_Smi}, v3 T{X0?})
ParallelMove  goto:192 B22
B22
ParallelMove rax <- C
DartReturn:194(v22)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-3] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v171 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . ImmutableLinkedHashBase.data {final}) T{_ImmutableList}
ParallelMove fp[-2] <- rax
v176 <- LoadField(v171 T{_ImmutableList} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rcx
v217 <- UnboxInt64([non-speculative], v176 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-1] <- rdx
Branch if EqualityCompare(v217 T{_Smi} == v233 T{_Smi}) T{bool} goto (3, 4)
B3
v166 <- LoadStaticField:4(_uninitializedIndex@3220832, CallsInitializer) T{_Uint32List}
ParallelMove rax <- rax
ParallelMove rdx <- rax goto:36 B5
B4
ParallelMove rax <- rcx
v163 <- AllocateTypedData:10(v176 T{_Smi}) T{_Uint32List}
ParallelMove rax <- rax
ParallelMove rdx <- rax goto:38 B5
B5
ParallelMove rax <- rdx
StoreField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . ImmutableLinkedHashBase.index = v11)
v92 <- LoadField(v11 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare(===, v92 T{_Smi}, v29 T{_Smi}) T{bool} goto (35, 39)
B35
ParallelMove rdx <- C goto:20 B40
B39
MoveArgument(sp[0] <- v92 T{_Smi})
v100 <- StaticCall:24( get:bitLength<0> v92 T{_Smi}, recognized_kind = Smi_bitLength, result_type = T{_Smi}) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
ParallelMove rax <- rax
v219 <- UnboxInt64([non-speculative], v100) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rax <- rax
v102 <- BinaryInt64Op(- [tr], v219 T{_Smi}, v236 T{_Smi}) [-4611686018427387906, 4611686018427387901] int64
ParallelMove rcx <- C
v110 <- BinaryInt64Op(- [tr], v237 T{_Smi}, v102) [-4611686018427387869, 4611686018427387938] int64
ParallelMove rcx <- rcx
ParallelMove rax <- C
v111 <- ShiftInt64Op(<< [tr], v234 T{_Smi}, v110) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v112 <- BinaryInt64Op(- [tr], v111, v234 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rcx <- fp[-3] goto:58 B40
B40
v220 <- BoxInt64(v124 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.hash_mask = v220 T{int}, NoStoreBarrier)
v135 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
StoreField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.used_data = v5 T{_Smi}, NoStoreBarrier)
StoreField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.deleted_keys = v5 T{_Smi}, NoStoreBarrier)
ParallelMove rdx <- rax
v221 <- UnboxInt64:108([non-speculative], v135 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C, rsi <- fp[-2] goto:108 B11
B11
  Loop 0
ParallelMove fp[-5] <- rdi
CheckStackOverflow:112(stack=0, loop=1)
Branch if RelationalOp(<, v16, v221 T{_Smi}) T{bool} goto (6, 7)
B6
  Loop 0
ParallelMove rax <- fp[-1], rbx <- rdi
GenericCheckBound:72(v217 T{_Smi}, v16) [-9223372036854775808, 9223372036854775807] int64
v238 <- LoadIndexed:72([_List] v171 T{_ImmutableList}, v16 T{int}) T{*?}
Branch if StrictCompare:10(!==, v238 T{Object??}, v171 T{_ImmutableList}) T{bool} goto (18, 10)
B10
  Loop 0
ParallelMove rdi <- rdi
v24 <- BinaryInt64Op(+ [tr], v16 T{int}, v236 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:110 B11
B7
ParallelMove rax <- C
DartReturn:114(v0)
B18
v26 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rax, rdx <- rbx, rcx <- C, fp[-4] <- rbx
t1 <- AssertAssignable:86(v238 T{*?}, v25, ' in type cast', instantiator_type_args(v26), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[-5]
v30 <- BinaryInt64Op(+ [tr], v16 T{int}, v234 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-1], rbx <- rcx
GenericCheckBound:92(v217 T{_Smi}, v30) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-2]
v239 <- LoadIndexed:92([_List] v171 T{_ImmutableList}, v30 T{int}) T{*?}
ParallelMove rax <- rdx, rdx <- fp[-4], rcx <- C
t2 <- AssertAssignable:94(v239 T{*?}, v32, ' in type cast', instantiator_type_args(v26 T{TypeArguments}), function_type_args(v0)) T{X1?}
AssertAssignable for compile-time type
TTSCall
v55 <- AllocateObject:14(cls=UnsupportedError, <not-aliased>) T{UnsupportedError}
ParallelMove rcx <- rax, rax <- C
StoreField(v55 T{UnsupportedError} . message = v57 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:18(v55)
CheckStackOverflowSlowPath
slow path int64 shift operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v167 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.data) T{_List}
v172 <- LoadField(v167 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
Branch if StrictCompare(===, v172 T{_Smi}, v5 T{_Smi}) T{bool} goto (3, 4)
B3
v162 <- LoadStaticField:4(_uninitializedIndex@3220832, CallsInitializer) T{_Uint32List}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:36 B5
B4
ParallelMove rax <- rcx
v159 <- AllocateTypedData:10(v172 T{_Smi}) T{_Uint32List}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:38 B5
B5
ParallelMove rax <- rcx
StoreField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.index = v11)
v88 <- LoadField(v11 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare(===, v88 T{_Smi}, v29 T{_Smi}) T{bool} goto (34, 38)
B34
ParallelMove rcx <- C goto:20 B39
B38
MoveArgument(sp[0] <- v88 T{_Smi})
v96 <- StaticCall:24( get:bitLength<0> v88 T{_Smi}, recognized_kind = Smi_bitLength, result_type = T{_Smi}) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
ParallelMove rax <- rax
v200 <- UnboxInt64([non-speculative], v96) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rax <- rax
v98 <- BinaryInt64Op(- [tr], v200 T{_Smi}, v213 T{_Smi}) [-4611686018427387906, 4611686018427387901] int64
ParallelMove rcx <- C
v106 <- BinaryInt64Op(- [tr], v214 T{_Smi}, v98) [-4611686018427387869, 4611686018427387938] int64
ParallelMove rcx <- rcx
ParallelMove rax <- C
v107 <- ShiftInt64Op(<< [tr], v211 T{_Smi}, v106) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v108 <- BinaryInt64Op(- [tr], v107, v211 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax, rdi <- fp[-1] goto:58 B39
B39
v201 <- BoxInt64(v120 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.hash_mask = v201 T{int}, NoStoreBarrier)
v131 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
StoreField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.used_data = v5 T{_Smi}, NoStoreBarrier)
StoreField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.deleted_keys = v5 T{_Smi}, NoStoreBarrier)
ParallelMove rsi <- rax
v202 <- UnboxInt64:108([non-speculative], v131 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove fp[-7] <- rsi
v26 <- LoadField:108(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove fp[-6] <- r8
ParallelMove r9 <- C goto:108 B11
B11
  Loop 0
ParallelMove fp[-5] <- r9
CheckStackOverflow:112(stack=0, loop=1)
Branch if RelationalOp(<, v16, v202 T{_Smi}) T{bool} goto (6, 7)
B6
  Loop 0
v60 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.data) T{_List}
ParallelMove fp[-4] <- r10
v36 <- LoadField(v60 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove r12 <- rax
v203 <- UnboxInt64([non-speculative], v36) [0, 576460752303423487] int64
ParallelMove rax <- r12, rbx <- r9, fp[-3] <- r12
GenericCheckBound:72(v203 T{_Smi}, v16) [-9223372036854775808, 9223372036854775807] int64
v215 <- LoadIndexed:72([_List] v60 T{_List}, v16 T{int}) T{*?}
ParallelMove fp[-2] <- rbx
Branch if StrictCompare:10(!==, v215 T{Object??}, v60 T{_List}) T{bool} goto (8, 9)
B8
  Loop 0
ParallelMove rax <- rbx, rdx <- r8, rcx <- C
t1 <- AssertAssignable:86(v215 T{*?}, v25, ' in type cast', instantiator_type_args(v26), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rcx <- fp[-5]
v30 <- BinaryInt64Op(+ [tr], v16 T{int}, v211 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-3], rbx <- rcx
GenericCheckBound:92(v203 T{_Smi}, v30) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-4]
v216 <- LoadIndexed:92([_List] v60 T{_List}, v30 T{int}) T{*?}
ParallelMove rax <- rbx, rdx <- fp[-6], rcx <- C, fp[-8] <- rbx
t2 <- AssertAssignable:94(v216 T{*?}, v32, ' in type cast', instantiator_type_args(v26 T{TypeArguments}), function_type_args(v0)) T{X1?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
v55 <- StaticCall:14( _hashCode@3220832<0> v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>}, v215 T{X0?}, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-1], rsi <- fp[-2], rdx <- fp[-8], rbx <- rax
StaticCall:16( _set@3220832<0> v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>}, v215 T{X0?}, v216 T{X1?}, v55, using unchecked entrypoint)
ParallelMove  goto:102 B10
B9
B10
  Loop 0
ParallelMove rcx <- fp[-5]
v24 <- BinaryInt64Op(+ [tr], v16 T{int}, v213 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- rcx, rdi <- fp[-1], r8 <- fp[-6], rsi <- fp[-7] goto:110 B11
B7
ParallelMove rax <- C
DartReturn:114(v0)
CheckStackOverflowSlowPath
slow path int64 shift operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . _current@7027147) T{X0??}
ParallelMove fp[-1] <- rbx
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
v6 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
t0 <- AssertAssignable:18(v3 T{X0??}, v5, ' in type cast', instantiator_type_args(v6), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove  goto:24 B5
B4
B5
ParallelMove rax <- fp[-1]
DartReturn:28(v3 T{X0??})
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v25 <- LoadField(v2 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v32 <- UnboxInt64([non-speculative], v25 T{_Smi}) [0, 576460752303423487] int64
Branch if RelationalOp(>, v32 T{_Smi}, v36 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rcx <- rax
v10 <- BinaryInt64Op(- [tr], v32 T{_Smi}, v37 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:26(v32 T{_Smi}, v10) [-9223372036854775808, 9223372036854775807] int64
v14 <- LoadField(v2 . GrowableObjectArray.data) T{_List}
v38 <- LoadIndexed:26([_List] v14, v10 T{int}) T{X0}
ParallelMove rax <- rdx
DartReturn:28(v38 T{X0})
B4
v7 <- StaticCall:32( noElement<0> ) T{StateError}
ParallelMove rax <- rax
Throw:34(v7)
CheckStackOverflowSlowPath
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v32 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove fp[-3] <- rax
ParallelMove rcx <- rax
v46 <- UnboxInt64([non-speculative], v32 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(>, v47 T{_Smi}, v46 T{_Smi}) T{bool} goto (4, 7)
B7
ParallelMove rdx <- C
v10 <- AllocateObject:50(cls=_StringAllMatchesIterable, v9, <not-aliased>) T{_StringAllMatchesIterable}
ParallelMove rcx <- rax, rax <- fp[-2]
StoreField(v10 T{_StringAllMatchesIterable} . _input@0150898 = v3 T{String}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v10 T{_StringAllMatchesIterable} . _pattern@0150898 = v2 T{_StringBase}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v10 T{_StringAllMatchesIterable} . _index@0150898 = v47 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rcx
DartReturn:54(v10)
B4
v11 <- AllocateObject:40(cls=RangeError) T{RangeError}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
MoveArgument(sp[4] <- v11)
MoveArgument(sp[3] <- v4)
MoveArgument(sp[2] <- v4)
MoveArgument(sp[1] <- v32 T{_Smi})
MoveArgument(sp[0] <- v13)
StaticCall:44( RangeError.range<0> v11, v4, v4, v32 T{_Smi}, v13)
ParallelMove rax <- fp[-1]
Throw:46(v11)
CheckStackOverflowSlowPath
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rdx, fp[-2] <- rdi, fp[-3] <- rsi, fp[-4] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v6 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rsi, rdx <- r8, rcx <- C, fp[-1] <- r8
t0 <- AssertAssignable:10(v3, v5, 'key', instantiator_type_args(v6), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-4], rdx <- fp[-1], rcx <- C
t0 <- AssertAssignable:12(v4, v8, 'value', instantiator_type_args(v6 T{TypeArguments}), function_type_args(v0)) T{X1?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-2], rsi <- fp[-3]
v11 <- StaticCall:14( _hashCode@3220832<0> v2, v3 T{X0?}, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-2], rsi <- fp[-3], rdx <- fp[-4], rbx <- rax
StaticCall:16( _set@3220832<0> v2, v3 T{X0?}, v4 T{X1?}, v11, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:18(v0)
CheckStackOverflowSlowPath
B0
B3
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v31 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove fp[-3] <- rax
ParallelMove rcx <- rax
v45 <- UnboxInt64([non-speculative], v31 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(>, v46 T{_Smi}, v45 T{_Smi}) T{bool} goto (4, 7)
B7
ParallelMove rdx <- C
v10 <- AllocateObject:50(cls=_AllMatchesIterable, v9, <not-aliased>) T{_AllMatchesIterable}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v10 T{_AllMatchesIterable} . _re@0150898 = v2 T{_RegExp}, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreField(v10 T{_AllMatchesIterable} . _str@0150898 = v3 T{String}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v10 T{_AllMatchesIterable} . _start@0150898 = v46 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rcx
DartReturn:54(v10)
B4
v11 <- AllocateObject:40(cls=RangeError) T{RangeError}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
MoveArgument(sp[3] <- v11)
MoveArgument(sp[2] <- v4)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v31 T{_Smi})
StaticCall:44( RangeError.range<0> v11, v4, v4, v31 T{_Smi})
ParallelMove rax <- fp[-1]
Throw:46(v11)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v12 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin&_UnmodifiableMapMixin&_ImmutableLinkedHashMapMixin<X0, X1>} . ImmutableLinkedHashBase.index) T{_Uint32List?}
Branch if StrictCompare:12(===, v12, v0) goto (3, 4)
B3
ParallelMove rdi <- rax
StaticCall:18( _createIndex@3220832<0> v2, using unchecked entrypoint)
ParallelMove  goto:24 B5
B4
B5
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
v5 <- StaticCall:28( containsKey<0> v2, v3, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
DartReturn:30(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v12 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . ImmutableLinkedHashBase.data {final}) T{_ImmutableList}
ParallelMove rdi <- rdi, rsi <- rsi, fp[-1] <- rax
v5 <- StaticCall:12( _getValueOrData@3220832<0> v2, v3, using unchecked entrypoint) T{Object??}
ParallelMove rax <- rax, rcx <- fp[-1]
v6 <- StrictCompare:14(!==, v12 T{_ImmutableList}, v5) T{bool}
ParallelMove rax <- rdx
DartReturn:18(v6 T{bool})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rsi, fp[-3] <- rdi, fp[-4] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v147 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . ImmutableLinkedHashBase.index) T{_Uint32List?}
CheckNull:12(v147, CastError) T{_Uint32List}
v94 <- LoadField(v147 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rbx <- rbx
v189 <- UnboxInt64([non-speculative], v94 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdx <- rbx
v7 <- BinaryInt64Op(- [tr], v189 T{_Smi}, v205 T{_Smi}) [v189-1, v189-1] int64
ParallelMove fp[-2] <- rdx
ParallelMove rbx <- rbx
v8 <- ShiftInt64Op(>> [tr], v189 T{_Smi}, v205 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdi <- rcx, rsi <- rax, fp[-1] <- rbx
v9 <- StaticCall:18( _hashCode@3220832<0> v2, v3, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax, rdx <- fp[-3]
v99 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.hash_mask) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v190 <- UnboxInt64([non-speculative], v99 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rax
v108 <- BinaryInt64Op(& [tr], v9 T{int}, v190 T{_Smi}) [0, 4611686018427387903] int64
Branch if EqualityCompare(v108 == v206 T{_Smi}) T{bool} goto (36, 37)
B36
ParallelMove r8 <- fp[-1], rsi <- fp[-1] goto:32 B38
B37
ParallelMove rsi <- fp[-1]
ParallelMove rbx <- rbx
v114 <- BinaryInt64Op(* [tr], v108, v8 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rbx goto:34 B38
B38
ParallelMove fp[-9] <- r8
ParallelMove rax <- rax
v127 <- BinaryInt64Op(& [tr], v9 T{int}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
v129 <- ShiftInt64Op(<< [tr], v127, v205 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v130 <- BinaryInt64Op(+ [tr], v129, v127) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v131 <- BinaryInt64Op(& [tr], v130, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v152 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . ImmutableLinkedHashBase.index) T{_Uint32List?}
CheckNull:12(v152, CastError) T{_Uint32List}
v153 <- LoadField(v152 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v191 <- UnboxInt64([non-speculative], v153) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:28(v191 T{_Smi}, v131) [-9223372036854775808, 9223372036854775807] int64
v207 <- LoadIndexed:28([_Uint32List] v152 T{_Uint32List}, v131 T{int}) [0, 4294967295] uint32
v74 <- LoadField:116(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . ImmutableLinkedHashBase.data {final}) T{_ImmutableList}
ParallelMove fp[-8] <- r9
v39 <- LoadField:116(v74 T{_ImmutableList} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove r10 <- rbx
v196 <- UnboxInt64:116([non-speculative], v39) [0, 576460752303423487] int64
ParallelMove fp[-7] <- r10
ParallelMove r13 <- rcx, rax <- rax goto:116 B12
B12
  Loop 0
ParallelMove fp[-6] <- r13
CheckStackOverflow:114(stack=0, loop=1)
ParallelMove rax <- rax
v195 <- IntConverter(uint32->int64, v16) [0, 4294967295] int64
Branch if EqualityCompare(v195 T{_Smi} != v206 T{_Smi}) T{bool} goto (11, 13)
B11
  Loop 0
Branch if EqualityCompare(v195 T{_Smi} != v205 T{_Smi}) T{bool} goto (3, 9)
B3
  Loop 0
ParallelMove rcx <- r8
v29 <- BinaryInt64Op(^ [tr], v115 T{int}, v195 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v29, v8) T{bool} goto (4, 7)
B4
  Loop 0
ParallelMove rcx <- rcx
v32 <- ShiftInt64Op(<< [tr], v29, v205 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r10, rbx <- rcx, fp[-5] <- rcx
GenericCheckBound:64(v196 T{_Smi}, v32) [-9223372036854775808, 9223372036854775807] int64
v208 <- LoadIndexed:64([_List] v74 T{_ImmutableList}, v32 T{int}) T{*?}
v237 <- LoadClassId(v3 T{Object??}) int64
MoveArgument(sp[1] <- v3 T{Object??})
MoveArgument(sp[0] <- v208 T{Object??})
ParallelMove rcx <- rbx, rax <- rcx
v83 <- DispatchTableCall( cid=v237 Object.==<0>, v3 T{Object??}, v208 T{Object??}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:70(===, v83 T{bool}, v21) goto (5, 6)
BoolTest
B6
  Loop 0
ParallelMove rcx <- fp[-8] goto:90 B8
B5
ParallelMove rcx <- fp[-8]
ParallelMove rdx <- fp[-5]
v37 <- BinaryInt64Op(+ [tr], v32 T{int}, v205 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-7], rbx <- rdx
GenericCheckBound:80(v196 T{_Smi}, v37) [-9223372036854775808, 9223372036854775807] int64
v209 <- LoadIndexed:80([_List] v74 T{_ImmutableList}, v37 T{int}) T{*?}
ParallelMove rax <- rax
DartReturn:82(v209 T{*?})
B7
  Loop 0
ParallelMove rcx <- r9
ParallelMove  goto:92 B8
B8
B9
  Loop 0
ParallelMove rcx <- r9
ParallelMove  goto:100 B10
B10
  Loop 0
ParallelMove rdi <- fp[-6]
v57 <- BinaryInt64Op(+ [tr], v15 T{int}, v205 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi
v58 <- BinaryInt64Op(& [tr], v57, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v142 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . ImmutableLinkedHashBase.index) T{_Uint32List?}
CheckNull:12(v142, CastError) T{_Uint32List}
v156 <- LoadField(v142 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r9 <- r9
v200 <- UnboxInt64([non-speculative], v156) [0, 4611686018427387903] int64
ParallelMove rax <- r9, rbx <- rdi
GenericCheckBound:106(v200 T{_Smi}, v58) [-9223372036854775808, 9223372036854775807] int64
v210 <- LoadIndexed:106([_Uint32List] v142 T{_Uint32List}, v58 T{int}) [0, 4294967295] uint32
ParallelMove r13 <- rdi, rax <- rax, rdi <- rsi, rsi <- fp[-1], r9 <- rcx, r8 <- fp[-9], r10 <- fp[-7] goto:112 B12
B13
ParallelMove rcx <- r9
ParallelMove rax <- rcx
DartReturn:122(v74 T{_ImmutableList})
CheckStackOverflowSlowPath
slow path check null (cast) operation
slow path check null (cast) operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check null (cast) operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v12 <- LoadClassId(v3) [1, 617] T{_Smi}
ParallelMove rax <- rax
v26 <- UnboxInt64([non-speculative], v12) [1, 617] int64
ParallelMove fp[-1] <- rax
Branch if RelationalOp(<, v26 T{_Smi}, v30 T{_Smi}) T{bool} goto (5, 3)
B5
ParallelMove rax <- rsi goto:36 B4
B3
v15 <- LoadStaticField:4(cidSymbol, CallsInitializer) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
ParallelMove rax <- rax
v27 <- UnboxInt64([non-speculative], v15 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rcx <- fp[-1]
Branch if EqualityCompare(v26 T{_Smi} == v27 T{_Smi}) T{bool} goto (6, 7)
B6
ParallelMove rax <- fp[-2] goto:40 B4
B4
v31 <- LoadClassId(v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v11 <- DispatchTableCall( cid=v31 Object.hashCode<0>, v3) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v28 <- UnboxInt64([non-speculative], v11 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
DartReturn:44(v28 T{int})
B7
ParallelMove rax <- fp[-2]
MoveArgument(sp[0] <- v3)
v10 <- StaticCall:48( identityHashCode<0> v3, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v29 <- UnboxInt64([non-speculative], v10) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
DartReturn:50(v29 T{int})
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- C
DartReturn:8(v5 T{_Smi})
B0
B39
Enter frame
PrologueOffset = 0
ParallelMove fp[-4] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v102 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin&_UnmodifiableMapMixin&_ImmutableLinkedHashMapMixin<X0, X1>} . ImmutableLinkedHashBase.data {final}) T{_ImmutableList}
ParallelMove fp[-3] <- rcx
v107 <- LoadField(v102 T{_ImmutableList} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rax
v218 <- UnboxInt64([non-speculative], v107 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-2] <- rdx
Branch if RelationalOp(>, v218 T{_Smi}, v234 T{_Smi}) T{bool} goto (40, 41)
B40
ParallelMove rax <- rdx goto:48 B49
B41
Branch if RelationalOp(<, v218 T{_Smi}, v234 T{_Smi}) T{bool} goto (42, 46)
B42
ParallelMove rax <- C goto:62 B49
B46
ParallelMove rax <- rdx goto:98 B49
B49
ParallelMove rax <- rax
v144 <- BinaryInt64Op(- [tr], v138 T{_Smi}, v235 T{_Smi}) [-1, 576460752303423486] int64
ParallelMove rbx <- rax
v145 <- ShiftInt64Op(>> [tr], v144, v235 T{_Smi}) [-1, 288230376151711743] int64
ParallelMove rax <- rax
v146 <- BinaryInt64Op(| [tr], v144, v145) [-576460752303423488, 576460752303423487] int64
ParallelMove rbx <- rax
v148 <- ShiftInt64Op(>> [tr], v146, v236 T{_Smi}) [-144115188075855872, 144115188075855871] int64
ParallelMove rax <- rax
v149 <- BinaryInt64Op(| [tr], v146, v148) [-576460752303423488, 576460752303423487] int64
ParallelMove rbx <- rax
v151 <- ShiftInt64Op(>> [tr], v149, v237 T{_Smi}) [-36028797018963968, 36028797018963967] int64
ParallelMove rax <- rax
v152 <- BinaryInt64Op(| [tr], v149, v151) [-576460752303423488, 576460752303423487] int64
ParallelMove rbx <- rax
v154 <- ShiftInt64Op(>> [tr], v152, v234 T{_Smi}) [-2251799813685248, 2251799813685247] int64
ParallelMove rax <- rax
v155 <- BinaryInt64Op(| [tr], v152, v154) [-576460752303423488, 576460752303423487] int64
ParallelMove rbx <- rax
v157 <- ShiftInt64Op(>> [tr], v155, v238 T{_Smi}) [-8796093022208, 8796093022207] int64
ParallelMove rax <- rax
v158 <- BinaryInt64Op(| [tr], v155, v157) [-576460752303423488, 576460752303423487] int64
ParallelMove rbx <- rax
v160 <- ShiftInt64Op(>> [tr], v158, v239 T{_Smi}) [-134217728, 134217727] int64
ParallelMove rax <- rax
v161 <- BinaryInt64Op(| [tr], v158, v160) [-576460752303423488, 576460752303423487] int64
ParallelMove rbx <- rax
v162 <- BinaryInt64Op(+ [tr], v161, v235 T{_Smi}) [-576460752303423487, 576460752303423488] int64
ParallelMove fp[-1] <- rbx
v221 <- BoxInt64(v162 T{int}) [-576460752303423487, 576460752303423488] T{_Smi}
ParallelMove rax <- rax
v171 <- AllocateTypedData:10(v221) T{_Uint32List}
ParallelMove rdi <- fp[-1], rax <- rax
ParallelMove fp[-5] <- rax
v10 <- StaticCall:20( _indexSizeToHashMask@3220832<0> v162 T{int}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rax, rdi <- fp[-4]
ParallelMove fp[-9] <- rsi
v19 <- LoadField:60(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove fp[-8] <- r8
ParallelMove r12 <- C, r9 <- fp[-5] goto:60 B5
B5
  Loop 0
ParallelMove fp[-7] <- r12
CheckStackOverflow:64(stack=0, loop=1)
v97 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin&_UnmodifiableMapMixin&_ImmutableLinkedHashMapMixin<X0, X1>} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v222 <- UnboxInt64([non-speculative], v97 T{_Smi}) [0, 4611686018427387903] int64
Branch if RelationalOp(<, v12, v222 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
ParallelMove rax <- fp[-2], rbx <- r12
GenericCheckBound:40(v218 T{_Smi}, v12) [-9223372036854775808, 9223372036854775807] int64
v241 <- LoadIndexed:40([_List] v102 T{_ImmutableList}, v12 T{int}) T{*?}
ParallelMove rax <- rbx, rdx <- r8, rcx <- C, fp[-6] <- rbx
t0 <- AssertAssignable:42(v241 T{*?}, v18, ' in type cast', instantiator_type_args(v19), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rsi <- fp[-6]
v61 <- LoadClassId(v241 T{X0?}) [1, 617] T{_Smi}
ParallelMove rax <- rax
v226 <- UnboxInt64([non-speculative], v61) [1, 617] int64
ParallelMove fp[-10] <- rax
Branch if RelationalOp(<, v226 T{_Smi}, v242 T{_Smi}) T{bool} goto (16, 14)
B16
B14
  Loop 0
v174 <- LoadStaticField:4(cidSymbol, CallsInitializer) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
ParallelMove rax <- rax
v227 <- UnboxInt64([non-speculative], v174 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rcx <- fp[-10]
Branch if EqualityCompare(v226 T{_Smi} == v227 T{_Smi}) T{bool} goto (17, 18)
B17
  Loop 0
ParallelMove rsi <- fp[-6] goto:40 B15
B15
  Loop 0
v255 <- LoadClassId(v241 T{X0?}) int64
MoveArgument(sp[0] <- v241 T{X0?})
ParallelMove rcx <- rcx
v60 <- DispatchTableCall( cid=v255 Object.hashCode<0>, v241 T{X0?}) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v228 <- UnboxInt64([non-speculative], v60 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax goto:44 B20
B18
  Loop 0
MoveArgument(sp[0] <- v241 T{X0?})
v59 <- StaticCall:48( identityHashCode<0> v241 T{X0?}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v229 <- UnboxInt64([non-speculative], v59) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax goto:50 B20
B20
  Loop 0
ParallelMove rcx <- rdx
v80 <- BinaryInt64Op(& [tr], v71 T{int}, v10 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v80 == v240 T{_Smi}) T{bool} goto (23, 24)
B23
  Loop 0
ParallelMove rcx <- fp[-1]
v88 <- ShiftInt64Op(>> [tr], v162 T{int}, v235 T{_Smi}) [-288230376151711744, 288230376151711744] int64
ParallelMove r10 <- rcx goto:32 B25
B24
  Loop 0
ParallelMove rbx <- fp[-1]
v85 <- ShiftInt64Op(>> [tr], v162 T{int}, v235 T{_Smi}) [-288230376151711744, 288230376151711744] int64
ParallelMove rcx <- rcx
v86 <- BinaryInt64Op(* [tr], v80, v85) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- rcx goto:34 B25
B25
  Loop 0
ParallelMove rdi <- fp[-4], rsi <- fp[-6], rdx <- rdx, rbx <- r10, r8 <- fp[-1], r9 <- rcx, fp[-10] <- r10
v23 <- StaticCall:48( _findValueOrInsertPoint@3220832<0> v2, v241 T{X0?}, v71 T{int}, v87 T{int}, v162 T{int}, v171 T{_Uint32List}, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
ParallelMove rcx <- rax
v24 <- UnaryInt64Op(unary-, v23) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-7]
v26 <- ShiftInt64Op(>> [tr], v12 T{int}, v235 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rsi <- fp[-10]
v27 <- BinaryInt64Op(| [tr], v87 T{int}, v26) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-1], rbx <- rcx
GenericCheckBound:56(v162 T{_Smi}, v24) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v243 <- IntConverter(int64->uint32[tr], v27) [0, 4294967295] uint32
ParallelMove rax <- fp[-5]
StoreIndexed:56([_Uint32List] v171 T{_Uint32List}, v24 T{int}, v243 T{_Smi}, NoStoreBarrier)
ParallelMove rcx <- fp[-7]
v29 <- BinaryInt64Op(+ [tr], v12 T{int}, v236 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- rcx, rdi <- fp[-4], rsi <- fp[-9], r8 <- fp[-8], r9 <- rax goto:62 B5
B4
ParallelMove rcx <- rdi, rax <- r9
ParallelMove rax <- rax
StoreField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin&_UnmodifiableMapMixin&_ImmutableLinkedHashMapMixin<X0, X1>} . ImmutableLinkedHashBase.index = v171 T{_Uint32List})
ParallelMove rax <- C
DartReturn:68(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdx, rdx <- rbx, fp[-1] <- rbx, fp[-10] <- rsi, fp[-11] <- r9
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove r10 <- r8
v9 <- BinaryInt64Op(- [tr], v6, v126 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-9] <- r10
ParallelMove r8 <- r8
v10 <- ShiftInt64Op(>> [tr], v6, v126 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove fp[-8] <- r8
ParallelMove rax <- rax
v80 <- BinaryInt64Op(& [tr], v4 T{int}, v9 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax
v82 <- ShiftInt64Op(<< [tr], v80, v126 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v83 <- BinaryInt64Op(+ [tr], v82, v80) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v84 <- BinaryInt64Op(& [tr], v83, v9 T{int}) [-9223372036854775808, 9223372036854775807] int64
v42 <- LoadField(v7 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r12 <- rax
v116 <- UnboxInt64([non-speculative], v42) [0, 4611686018427387903] int64
ParallelMove rax <- r12, rbx <- rcx, fp[-7] <- r12
GenericCheckBound:18(v116 T{_Smi}, v84 T{int}) [-9223372036854775808, 9223372036854775807] int64
v127 <- LoadIndexed:18([_Uint32List] v7, v84 T{int}) [0, 4294967295] uint32
v64 <- LoadField:118(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . ImmutableLinkedHashBase.data {final}) T{_ImmutableList}
ParallelMove fp[-6] <- r13
v45 <- LoadField:118(v64 T{_ImmutableList} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdi <- rbx
v121 <- UnboxInt64:118([non-speculative], v45) [0, 576460752303423487] int64
ParallelMove fp[-5] <- rdi
ParallelMove rbx <- rcx, rcx <- C, rax <- rax goto:118 B15
B15
  Loop 0
ParallelMove fp[-2] <- rbx, fp[-3] <- rcx
CheckStackOverflow:116(stack=0, loop=1)
ParallelMove rax <- rax
v120 <- IntConverter(uint32->int64, v16) [0, 4294967295] int64
Branch if EqualityCompare(v120 T{_Smi} != v128 T{_Smi}) T{bool} goto (14, 16)
B14
  Loop 0
Branch if EqualityCompare(v120 T{_Smi} == v126 T{_Smi}) T{bool} goto (3, 7)
B3
  Loop 0
Branch if RelationalOp(<, v15, v128 T{_Smi}) T{bool} goto (4, 5)
B4
  Loop 0
ParallelMove rcx <- rbx goto:52 B6
B5
B6
  Loop 0
ParallelMove rcx <- rcx, rdx <- r9, rsi <- r10 goto:102 B13
B7
  Loop 0
ParallelMove rdx <- fp[-1]
v27 <- BinaryInt64Op(^ [tr], v5, v120 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v27, v10) T{bool} goto (8, 11)
B8
  Loop 0
ParallelMove rdx <- rdx
v30 <- ShiftInt64Op(<< [tr], v27, v126 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rdi, rbx <- rdx, fp[-4] <- rdx
GenericCheckBound:74(v121 T{_Smi}, v30) [-9223372036854775808, 9223372036854775807] int64
v129 <- LoadIndexed:74([_List] v64 T{_ImmutableList}, v30 T{int}) T{*?}
v149 <- LoadClassId(v3 T{X0?}) int64
MoveArgument(sp[1] <- v3 T{X0?})
MoveArgument(sp[0] <- v129 T{Object??})
ParallelMove rcx <- rbx, rax <- rcx
v73 <- DispatchTableCall( cid=v149 Object.==<0>, v3 T{X0?}, v129 T{Object??}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:80(===, v73 T{bool}, v21) goto (9, 10)
BoolTest
B10
B9
ParallelMove rcx <- fp[-4]
v34 <- BinaryInt64Op(+ [tr], v30 T{int}, v126 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx
DartReturn:88(v34)
B11
B12
  Loop 0
ParallelMove rcx <- fp[-3], rdx <- fp[-11], rsi <- fp[-9] goto:104 B13
B13
  Loop 0
ParallelMove rdi <- fp[-2]
v58 <- BinaryInt64Op(+ [tr], v14 T{int}, v126 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi
v59 <- BinaryInt64Op(& [tr], v58, v9 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-7], rbx <- rdi
GenericCheckBound:108(v116 T{_Smi}, v59 T{int}) [-9223372036854775808, 9223372036854775807] int64
v130 <- LoadIndexed:108([_Uint32List] v7, v59 T{int}) [0, 4294967295] uint32
ParallelMove rbx <- rdi, rcx <- rcx, rax <- rax, rsi <- fp[-10], r9 <- rdx, r10 <- rsi, r8 <- fp[-8], r13 <- fp[-6], r12 <- fp[-7], rdi <- fp[-5] goto:114 B15
B16
Branch if RelationalOp(>=, v15, v128 T{_Smi}) T{bool} goto (17, 18)
B17
ParallelMove rcx <- rcx
v25 <- UnaryInt64Op(unary-, v15) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx goto:140 B19
B18
ParallelMove rcx <- fp[-2]
v23 <- UnaryInt64Op(unary-, v14) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx goto:142 B19
B19
ParallelMove rax <- rax
DartReturn:144(v24)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v12 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.data) T{_List}
ParallelMove rdi <- rdi, rsi <- rsi, fp[-1] <- rax
v5 <- StaticCall:12( _getValueOrData@3220832<0> v2, v3, using unchecked entrypoint) T{Object??}
ParallelMove rax <- rax, rcx <- fp[-1]
v6 <- StrictCompare:14(!==, v12 T{_List}, v5) T{bool}
ParallelMove rax <- rdx
DartReturn:18(v6 T{bool})
CheckStackOverflowSlowPath
B0
B1
v22 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase<X0, X1>} . LinkedHashBase.data) T{_List}
Branch if StrictCompare:14(!==, v22 T{_List}, v3) goto (5, 4)
B5
ParallelMove rax <- C goto:30 B3
B4
v27 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase<X0, X1>} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
v32 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase<X0, X1>} . LinkedHashBase.deleted_keys) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v33 <- UnboxInt64([non-speculative], v27 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v34 <- UnboxInt64([non-speculative], v32 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rcx <- rcx
v17 <- BinaryInt64Op(+ [tr], v33 T{_Smi}, v34 T{_Smi}) [0, 9223372036854775806] int64
v7 <- EqualityCompare(v17 T{int} != v4) T{bool}
ParallelMove rax <- rbx goto:26 B3
B3
ParallelMove rax <- rax
DartReturn:32(v9)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax
v5 <- StaticCall:10( get:lengthInBytes<0> v2, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rax, rsi <- fp[-2], rdx <- fp[-3]
StaticCall:14( _rangeCheck@7027147<0> v5, v3, v4 T{int})
ParallelMove rax <- fp[-1]
v8 <- LoadField(v2 . _data@7027147 {final}) T{_TypedList}
ParallelMove fp[-4] <- rcx
v19 <- AllocateObject:18(cls=_Uint8ArrayView) T{_Uint8ArrayView}
ParallelMove rdx <- rax, rcx <- fp[-4]
StoreField(v19 . TypedDataView.typed_data = v8 T{_TypedList}, NoStoreBarrier)
ParallelMove rsi <- fp[-2]
v24 <- BoxInt64(v3 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v19 . TypedDataView.offset_in_bytes = v24 T{int}, NoStoreBarrier)
ParallelMove rdi <- fp[-3]
v25 <- BoxInt64(v4 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v19 . TypedDataBase.length = v25 T{int}, NoStoreBarrier)
v21 <- LoadField(v8 T{_TypedList} . PointerBase.data, MayLoadInnerPointer) untagged
v22 <- UnboxedConstant(#0) [0, 0] int64
v23 <- CalculateElementAddress(v21, v22, v3 T{int}, index_scale=1) untagged
StoreField(v19 . PointerBase.data = v23 <untagged>, NoStoreBarrier, MayStoreInnerPointer)
ParallelMove rax <- rdx
DartReturn:20(v19 T{_Uint8ArrayView})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdx, fp[-2] <- rsi
Branch if RelationalOp(<, v4, v84 T{_Smi}) T{bool} goto (3, 4)
B4
Branch if RelationalOp(<, v3, v84 T{_Smi}) T{bool} goto (5, 6)
B6
ParallelMove rax <- rsi
v9 <- BinaryInt64Op(+ [tr], v3, v4) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-3] <- rax
Branch if RelationalOp(>, v9, v2) T{bool} goto (7, 8)
B8
ParallelMove rax <- C
DartReturn:68(v0)
B3
v14 <- AllocateObject:20(cls=RangeError) T{RangeError}
ParallelMove rcx <- rax, rax <- C
StoreField(v14 T{RangeError} . message = v22 T{_OneByteString}, NoStoreBarrier)
ParallelMove rdx <- fp[-1]
v82 <- BoxInt64(v4 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v14 T{RangeError} . invalidValue = v82 T{int}, NoStoreBarrier)
ParallelMove rdx <- C
StoreField(v14 T{RangeError} . _hasValue@0150898 = v7 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:24(v14)
B5
ParallelMove rdx <- C, rax <- C
v13 <- AllocateObject:38(cls=RangeError) T{RangeError}
ParallelMove rdx <- rax, rcx <- C
StoreField(v13 T{RangeError} . message = v22 T{_OneByteString}, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
v81 <- BoxInt64(v3 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v13 T{RangeError} . invalidValue = v81 T{int}, NoStoreBarrier)
ParallelMove rbx <- C
StoreField(v13 T{RangeError} . _hasValue@0150898 = v7 T{bool}, NoStoreBarrier)
ParallelMove rax <- rdx
Throw:42(v13)
B7
ParallelMove rbx <- C, rcx <- C
v11 <- AllocateObject:58(cls=RangeError) T{RangeError}
ParallelMove rcx <- rax, rax <- C
StoreField(v11 T{RangeError} . message = v22 T{_OneByteString}, NoStoreBarrier)
ParallelMove rdx <- fp[-3]
v83 <- BoxInt64(v9 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v11 T{RangeError} . invalidValue = v83 T{int}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v11 T{RangeError} . _hasValue@0150898 = v7 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:64(v11)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _data@7027147 {final}) T{_TypedList}
v16 <- LoadField(v3 T{_TypedList} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove fp[-1] <- rdx
v18 <- LoadClassId(<non-smi> v3 T{_TypedList}) int64
ParallelMove rcx <- rcx, rdi <- rax
v10 <- DispatchTableCall( cid=v18 _TypedList.elementSizeInBytes<0>, v3 T{_TypedList}) int64
ParallelMove rax <- rax
ParallelMove rcx <- fp[-1]
v17 <- UnboxInt64([non-speculative], v16 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rcx <- rcx
v11 <- BinaryInt64Op(* [tr], v17 T{_Smi}, v10 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx
DartReturn:14(v11 T{int})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v10 <- LoadField(v2 T{_TypedList} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove fp[-1] <- rax
v12 <- LoadClassId(<non-smi> v2) int64
ParallelMove rcx <- rcx, rdi <- rdi
v4 <- DispatchTableCall( cid=v12 _TypedList.elementSizeInBytes<0>, v2) int64
ParallelMove rax <- rax
ParallelMove rcx <- fp[-1]
v11 <- UnboxInt64([non-speculative], v10 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rcx <- rcx
v5 <- BinaryInt64Op(* [tr], v11 T{_Smi}, v4 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx
DartReturn:16(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- fp[3]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[2]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v12 <- LoadField(v2 . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rsi <- rsi
v6 <- LoadIndexed([_Float64x2ArrayView] v12 T{_Float64x2ArrayView}, v7 T{int}) float64x2
v9 <- Box(v6) T{_Float64x2}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Float64x2})
slow path check bound operation
Box slow path allocation of _Float64x2
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- fp[3]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[2]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v6 <- LoadIndexed([_Float64x2List] v2, v7 T{int}) float64x2
v9 <- Box(v6) T{_Float64x2}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Float64x2})
slow path check bound operation
Box slow path allocation of _Float64x2
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- fp[3]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[2]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v12 <- LoadField(v2 . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rsi <- rsi
v6 <- LoadIndexed([_Int32x4ArrayView] v12 T{_Int32x4ArrayView}, v7 T{int}) int32x4
v9 <- Box(v6) T{_Int32x4}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Int32x4})
slow path check bound operation
Box slow path allocation of _Int32x4
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- fp[3]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[2]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v6 <- LoadIndexed([_Int32x4List] v2, v7 T{int}) int32x4
v9 <- Box(v6) T{_Int32x4}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Int32x4})
slow path check bound operation
Box slow path allocation of _Int32x4
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- fp[3]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[2]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v12 <- LoadField(v2 . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rsi <- rsi
v6 <- LoadIndexed([_Float32x4ArrayView] v12 T{_Float32x4ArrayView}, v7 T{int}) float32x4
v9 <- Box(v6) T{_Float32x4}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Float32x4})
slow path check bound operation
Box slow path allocation of _Float32x4
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- fp[3]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[2]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v6 <- LoadIndexed([_Float32x4List] v2, v7 T{int}) float32x4
v9 <- Box(v6) T{_Float32x4}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Float32x4})
slow path check bound operation
Box slow path allocation of _Float32x4
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- fp[3]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[2]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v12 <- LoadField(v2 . PointerBase.data, MayLoadInnerPointer) untagged
v6 <- LoadIndexed([_Float64ArrayView] v12 T{_Float64ArrayView}, v7 T{int}) double
v9 <- Box(v6) T{_Double}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Double})
slow path check bound operation
Box slow path allocation of _Double
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- fp[3]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[2]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v6 <- LoadIndexed([_Float64List] v2, v7 T{int}) double
v9 <- Box(v6) T{_Double}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Double})
slow path check bound operation
Box slow path allocation of _Double
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- fp[3]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[2]
v8 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v9 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v9 T{_Smi}, v8 T{int}) [-9223372036854775808, 9223372036854775807] int64
v13 <- LoadField(v2 . PointerBase.data, MayLoadInnerPointer) untagged
v6 <- LoadIndexed([_Float32ArrayView] v13 T{_Float32ArrayView}, v8 T{int}) float
ParallelMove xmm0 <- xmm0
v7 <- FloatToDouble(v6) double
v10 <- Box(v7) T{_Double}
ParallelMove rax <- rax
DartReturn:12(v10 T{_Double})
slow path check bound operation
Box slow path allocation of _Double
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- fp[3]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[2]
v8 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v9 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v9 T{_Smi}, v8 T{int}) [-9223372036854775808, 9223372036854775807] int64
v6 <- LoadIndexed([_Float32List] v2, v8 T{int}) float
ParallelMove xmm0 <- xmm0
v7 <- FloatToDouble(v6) double
v10 <- Box(v7) T{_Double}
ParallelMove rax <- rax
DartReturn:12(v10 T{_Double})
slow path check bound operation
Box slow path allocation of _Double
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- fp[3]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[2]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v12 <- LoadField(v2 . PointerBase.data, MayLoadInnerPointer) untagged
v6 <- LoadIndexed([_Int64ArrayView] v12 T{_Int64ArrayView}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v9 <- BoxInt64(v6) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
DartReturn:12(v9 T{int})
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- fp[3]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- fp[2]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v6 <- LoadIndexed([_Int64List] v2, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v9 <- BoxInt64(v6) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
DartReturn:12(v9 T{int})
slow path check bound operation
B0
B1
ParallelMove rcx <- sp[2]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- sp[1]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v12 <- LoadField(v2 . PointerBase.data, MayLoadInnerPointer) untagged
v6 <- LoadIndexed([_Uint32ArrayView] v12 T{_Uint32ArrayView}, v7 T{int}) [0, 4294967295] uint32
v9 <- BoxSmallInt(v6) [0, 4294967295] T{_Smi}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Smi})
slow path check bound operation
PrologueOffset = 55
B0
B1
ParallelMove rcx <- sp[2]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- sp[1]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v6 <- LoadIndexed([_Uint32List] v2, v7 T{int}) [0, 4294967295] uint32
v9 <- BoxSmallInt(v6) [0, 4294967295] T{_Smi}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Smi})
slow path check bound operation
PrologueOffset = 52
B0
B1
ParallelMove rcx <- sp[2]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- sp[1]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v12 <- LoadField(v2 . PointerBase.data, MayLoadInnerPointer) untagged
v6 <- LoadIndexed([_Int32ArrayView] v12 T{_Int32ArrayView}, v7 T{int}) [-2147483648, 2147483647] int32
v9 <- BoxSmallInt(v6) [-2147483648, 2147483647] T{_Smi}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Smi})
slow path check bound operation
PrologueOffset = 57
B0
B1
ParallelMove rcx <- sp[2]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- sp[1]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v6 <- LoadIndexed([_Int32List] v2, v7 T{int}) [-2147483648, 2147483647] int32
v9 <- BoxSmallInt(v6) [-2147483648, 2147483647] T{_Smi}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Smi})
slow path check bound operation
PrologueOffset = 54
B0
B1
ParallelMove rcx <- sp[2]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- sp[1]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v12 <- LoadField(v2 . PointerBase.data, MayLoadInnerPointer) untagged
v6 <- LoadIndexed([_Uint16ArrayView] v12 T{_Uint16ArrayView}, v7 T{int}) [0, 65535] int64
v9 <- BoxInt64(v6) [0, 65535] T{_Smi}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Smi})
slow path check bound operation
PrologueOffset = 58
B0
B1
ParallelMove rcx <- sp[2]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- sp[1]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v6 <- LoadIndexed([_Uint16List] v2, v7 T{int}) [0, 65535] int64
v9 <- BoxInt64(v6) [0, 65535] T{_Smi}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Smi})
slow path check bound operation
PrologueOffset = 55
B0
B1
ParallelMove rcx <- sp[2]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- sp[1]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v12 <- LoadField(v2 . PointerBase.data, MayLoadInnerPointer) untagged
v6 <- LoadIndexed([_Int16ArrayView] v12 T{_Int16ArrayView}, v7 T{int}) [-32768, 32767] int64
v9 <- BoxInt64(v6) [-32768, 32767] T{_Smi}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Smi})
slow path check bound operation
PrologueOffset = 58
B0
B1
ParallelMove rcx <- sp[2]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- sp[1]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v6 <- LoadIndexed([_Int16List] v2, v7 T{int}) [-32768, 32767] int64
v9 <- BoxInt64(v6) [-32768, 32767] T{_Smi}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Smi})
slow path check bound operation
PrologueOffset = 55
B0
B1
ParallelMove rcx <- sp[2]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- sp[1]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v12 <- LoadField(v2 . PointerBase.data, MayLoadInnerPointer) untagged
v6 <- LoadIndexed([_Uint8ArrayView] v12 T{_Uint8ArrayView}, v7 T{int}) [0, 255] int64
v9 <- BoxInt64(v6) [0, 255] T{_Smi}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Smi})
slow path check bound operation
PrologueOffset = 58
B0
B1
ParallelMove rcx <- sp[2]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- sp[1]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v6 <- LoadIndexed([_Uint8List] v2, v7 T{int}) [0, 255] int64
v9 <- BoxInt64(v6) [0, 255] T{_Smi}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Smi})
slow path check bound operation
PrologueOffset = 55
B0
B1
ParallelMove rcx <- sp[2]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- sp[1]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v12 <- LoadField(v2 . PointerBase.data, MayLoadInnerPointer) untagged
v6 <- LoadIndexed([_Int8ArrayView] v12 T{_Int8ArrayView}, v7 T{int}) [-128, 127] int64
v9 <- BoxInt64(v6) [-128, 127] T{_Smi}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Smi})
slow path check bound operation
PrologueOffset = 58
B0
B1
ParallelMove rcx <- sp[2]
v4 <- LoadField(v2 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- sp[1]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 4611686018427387903] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v6 <- LoadIndexed([_Int8List] v2, v7 T{int}) [-128, 127] int64
v9 <- BoxInt64(v6) [-128, 127] T{_Smi}
ParallelMove rax <- rax
DartReturn:12(v9 T{_Smi})
slow path check bound operation
PrologueOffset = 55
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
Branch if RelationalOp(<, v4, v128 T{_Smi}) T{bool} goto (5, 3)
B3
v91 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rax
v120 <- UnboxInt64([non-speculative], v91 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(>, v4, v120 T{_Smi}) T{bool} goto (6, 7)
B7
v76 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove r8 <- rax
v121 <- UnboxInt64([non-speculative], v76 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rax <- rdx
v11 <- BinaryInt64Op(+ [tr], v4, v121 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v11, v120 T{_Smi}) T{bool} goto (8, 9)
B8
ParallelMove rax <- C
DartReturn:66(v0)
B9
v42 <- LoadClassId:108(v3 T{_StringBase}) [93, 94] T{_Smi}
v59 <- LoadClassId:108(v2 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove r12 <- C goto:108 B14
B14
  Loop 0
CheckStackOverflow:112(stack=0, loop=1)
Branch if RelationalOp(<, v14, v121 T{_Smi}) T{bool} goto (10, 11)
B10
  Loop 0
ParallelMove r13 <- rdx
v18 <- BinaryInt64Op(+ [tr], v4, v14) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx, rbx <- r13
t0 <- GenericCheckBound:88(v120 T{_Smi}, v18 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:88(===, v42, v50 T{_Smi}) goto (21, 22)
B21
  Loop 0
v46 <- LoadIndexed([_OneByteString] v3 T{_OneByteString}, v18 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:88 B20
B22
  Loop 0
v44 <- LoadIndexed([_TwoByteString] v3 T{_StringBase}, v18 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:88 B20
B20
  Loop 0
Branch if StrictCompare:90(===, v59, v50 T{_Smi}) goto (26, 27)
B26
  Loop 0
v63 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v14 T{int}) [0, 255] int64
ParallelMove rbx <- rbx goto:90 B25
B27
  Loop 0
v61 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v14 T{int}) [0, 65535] int64
ParallelMove rbx <- rbx goto:90 B25
B25
  Loop 0
Branch if EqualityCompare(v45 T{_Smi} != v62 T{_Smi}) T{bool} goto (12, 13)
B13
  Loop 0
ParallelMove r12 <- r12
v23 <- BinaryInt64Op(+ [tr], v14 T{int}, v129 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- r12 goto:110 B14
B12
ParallelMove rax <- C
DartReturn:102(v0)
B11
v17 <- AllocateObject:114(cls=_StringMatch, <not-aliased>) T{_StringMatch}
ParallelMove rax <- rax, rcx <- fp[-2]
StoreField(v17 T{_StringMatch} . start = v4 T{int} <int64>, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
StoreField(v17 T{_StringMatch} . pattern = v2 T{_StringBase}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:118(v17)
B5
ParallelMove rcx <- rdx
ParallelMove  goto:34 B4
B6
ParallelMove rcx <- rdx
ParallelMove  goto:38 B4
B4
v86 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove fp[-3] <- rdx
v119 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v24 <- AllocateObject:40(cls=RangeError) T{RangeError}
ParallelMove rax <- rax
ParallelMove fp[-4] <- rax
MoveArgument(sp[3] <- v24)
MoveArgument(sp[2] <- v119 T{int})
MoveArgument(sp[1] <- v5)
MoveArgument(sp[0] <- v86 T{_Smi})
StaticCall:44( RangeError.range<0> v24, v119 T{int}, v5, v86 T{_Smi})
ParallelMove rax <- fp[-4]
Throw:46(v24)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(String_toUpperCase) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{String})
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rcx <- fp[2]
v106 <- LoadField:172(v2 T{_OneByteString} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rsi <- rdx
v147 <- UnboxInt64:172([non-speculative], v106 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-2] <- rsi
ParallelMove r8 <- C, rdi <- C goto:172 B22
B22
  Loop 3
ParallelMove fp[-1] <- r8
CheckStackOverflow:176(stack=0, loop=1)
Branch if RelationalOp(<, v4, v147 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 3
v176 <- LoadIndexed:26([_OneByteString] v2, v4 T{int}) [0, 255] int64
v178 <- LoadIndexed:28([_OneByteString] v9, v176 T{_Smi}) [0, 255] int64
Branch if EqualityCompare(v176 T{_Smi} == v178) T{bool} goto (6, 7)
B6
  Loop 3
ParallelMove r8 <- r8
v35 <- BinaryInt64Op(+ [tr], v4 T{int}, v179 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- r8 goto:174 B22
B7
ParallelMove r9 <- r8 goto:102 B15
B15
  Loop 2
CheckStackOverflow:106(stack=0, loop=2)
Branch if RelationalOp(<, v12, v147 T{_Smi}) T{bool} goto (8, 9)
B8
  Loop 2
ParallelMove rax <- rsi, rbx <- r9
GenericCheckBound:62(v147 T{_Smi}, v12) [-9223372036854775808, 9223372036854775807] int64
v180 <- LoadIndexed:62([_OneByteString] v2, v12 T{int}) [0, 255] int64
v181 <- LoadIndexed:64([_OneByteString] v9, v180 T{_Smi}) [0, 255] int64
Branch if EqualityCompare(v181 == v175 T{_Smi}) T{bool} goto (10, 13)
B10
  Loop 2
Branch if EqualityCompare(v180 T{_Smi} != v175 T{_Smi}) T{bool} goto (11, 14)
B14
B11
MoveArgument(sp[0] <- v2)
v34 <- StaticCall:86( toUpperCase<0> v2, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:88(v34)
B13
B12
  Loop 2
ParallelMove r9 <- r9
v32 <- BinaryInt64Op(+ [tr], v12 T{int}, v179 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- r9 goto:104 B15
B9
MoveArgument(sp[0] <- v106 T{_Smi})
v96 <- StaticCall:10( allocateOneByteString<0> v106 T{_Smi}, recognized_kind = AllocateOneByteString, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove rcx <- rax
ParallelMove rdi <- C, rdx <- fp[2], rsi <- fp[-1] goto:132 B18
B18
  Loop 1
CheckStackOverflow:136(stack=0, loop=2)
Branch if RelationalOp(<, v18, v4 T{int}) T{bool} goto (16, 17)
B16
  Loop 1
ParallelMove rax <- fp[-2], rbx <- rdi
GenericCheckBound:126(v147 T{_Smi}, v18) [-9223372036854775808, 9223372036854775807] int64
v182 <- LoadIndexed:126([_OneByteString] v2, v18 T{int}) [0, 255] int64
ParallelMove rax <- rax
StoreIndexed:10([_OneByteString] v96 T{_OneByteString}, v18 T{int}, v182 T{_Smi}, NoStoreBarrier)
ParallelMove rdi <- rdi
v28 <- BinaryInt64Op(+ [tr], v18 T{int}, v179 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:134 B18
B17
ParallelMove r8 <- rsi, rdi <- C, rsi <- fp[-2] goto:162 B21
B21
  Loop 0
CheckStackOverflow:166(stack=0, loop=2)
Branch if RelationalOp(<, v20, v147 T{_Smi}) T{bool} goto (19, 20)
B19
  Loop 0
ParallelMove rax <- rsi, rbx <- r8
GenericCheckBound:154(v147 T{_Smi}, v20) [-9223372036854775808, 9223372036854775807] int64
v183 <- LoadIndexed:154([_OneByteString] v2, v20 T{int}) [0, 255] int64
v184 <- LoadIndexed:156([_OneByteString] v9, v183 T{_Smi}) [0, 255] int64
ParallelMove rax <- rax
StoreIndexed:10([_OneByteString] v96 T{_OneByteString}, v20 T{int}, v184 T{_Smi}, NoStoreBarrier)
ParallelMove r8 <- r8
v26 <- BinaryInt64Op(+ [tr], v20 T{int}, v179 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- r8 goto:164 B21
B20
ParallelMove rax <- rcx
DartReturn:168(v96 T{_OneByteString})
B4
ParallelMove rdx <- rcx
ParallelMove rax <- rdx
DartReturn:178(v2)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v35 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v58 <- UnboxInt64([non-speculative], v35 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdx <- C
v8 <- BinaryInt64Op(- [tr], v60 T{_Smi}, v58 T{_Smi}) [-2305843009213693945, 6] int64
ParallelMove fp[-1] <- rdx
Branch if RelationalOp(<=, v8, v61 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- rax
DartReturn:24(v2)
B4
v12 <- AllocateObject:28(cls=StringBuffer) T{StringBuffer}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-3] <- rax
StaticCall:30( StringBuffer.<0> v12)
ParallelMove rcx <- C goto:50 B7
B7
  Loop 0
ParallelMove fp[-4] <- rcx
CheckStackOverflow:54(stack=0, loop=1)
Branch if RelationalOp(<, v13, v8) T{bool} goto (12, 6)
B12
  Loop 0
ParallelMove rdi <- fp[-3]
StaticCall:26( _consumeBuffer@0150898<0> v12 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-3], rsi <- C
StaticCall:28( _addPart@0150898<0> v12 T{StringBuffer}, v6 T{_OneByteString}, using unchecked entrypoint)
ParallelMove rax <- fp[-4]
v17 <- BinaryInt64Op(+ [tr], v13, v62 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax goto:52 B7
B6
ParallelMove rdi <- fp[-3], rsi <- fp[-2]
StaticCall:56( write<0> v12, v2, using unchecked entrypoint)
MoveArgument(sp[0] <- v12)
v15 <- StaticCall:58( toString<0> v12, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:60(v15)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B4
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-3] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v103 <- LoadField(v2 T{_OneByteString} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v134 <- UnboxInt64([non-speculative], v103 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-2] <- rcx
ParallelMove rdx <- C
v12 <- BinaryInt64Op(- [tr], v142 T{_Smi}, v134 T{_Smi}) [-2305843009213693945, 6] int64
ParallelMove fp[-1] <- rdx
Branch if RelationalOp(<=, v12, v143 T{_Smi}) T{bool} goto (5, 7)
B5
ParallelMove rax <- rax
DartReturn:42(v2)
B7
ParallelMove rbx <- rdx
v17 <- BinaryInt64Op(+ [tr], v12 T{int}, v134 T{_Smi}) [-2305843009213693945, 2305843009213693957] int64
v135 <- BoxInt64(v17 T{int}) [-2305843009213693945, 2305843009213693957] T{_Smi}
MoveArgument(sp[0] <- v135)
v98 <- StaticCall:10( allocateOneByteString<0> v135, recognized_kind = AllocateOneByteString, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove rcx <- rax
ParallelMove rsi <- C, rbx <- C, rdx <- fp[-1] goto:86 B10
B10
  Loop 1
CheckStackOverflow:90(stack=0, loop=1)
Branch if RelationalOp(<, v43, v12) T{bool} goto (8, 18)
B8
  Loop 1
ParallelMove rax <- rsi
v45 <- BinaryInt64Op(+ [tr], v42, v144 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:10([_OneByteString] v98 T{_OneByteString}, v42 T{int}, v122 T{_Smi}, NoStoreBarrier)
ParallelMove rbx <- rbx
v46 <- BinaryInt64Op(+ [tr], v43, v144 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rax, rbx <- rbx goto:88 B10
B18
ParallelMove rdi <- rsi, rsi <- C, rdx <- fp[-3], rbx <- fp[-2] goto:172 B21
B21
  Loop 0
CheckStackOverflow:176(stack=0, loop=1)
Branch if RelationalOp(<, v36, v134 T{_Smi}) T{bool} goto (19, 20)
B19
  Loop 0
ParallelMove r8 <- rdi
v38 <- BinaryInt64Op(+ [tr], v35, v144 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v145 <- LoadIndexed:166([_OneByteString] v2, v36 T{int}) [0, 255] int64
ParallelMove rax <- rax
StoreIndexed:10([_OneByteString] v98 T{_OneByteString}, v35 T{int}, v145 T{_Smi}, NoStoreBarrier)
ParallelMove rsi <- rsi
v40 <- BinaryInt64Op(+ [tr], v36 T{int}, v144 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- r8, rsi <- rsi goto:174 B21
B20
ParallelMove rax <- rcx
DartReturn:178(v98 T{_OneByteString})
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v0)
v5 <- NativeCall(StringBase_substringUnchecked) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v5, v6, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v5 T{String})
B0
B1
Intrinsic
Enter frame
PrologueOffset = 207
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v0)
v5 <- NativeCall(OneByteString_substringUnchecked) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v5, v6, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v5 T{String})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rsi <- rdi, rdi <- rsi, fp[-3] <- rdi, fp[-4] <- rsi
v6 <- LoadField(v4 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v8 <- BinarySmiOp:4(- [tr], v6, v7) [-2, 4611686018427387901] T{_Smi}
Branch if RelationalOp:6(<=, v9, v8) T{bool} goto (2, 3)
B2
v36 <- LoadIndexedUnsafe(rbp[v8 T{_Smi} + 8]) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- rcx
v96 <- UnboxInt64([non-speculative], v36) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx goto:20 B5
B3
ParallelMove rcx <- C goto:18 B5
B5
CheckStackOverflow:26(stack=0, loop=0)
Branch if RelationalOp(<, v13, v110 T{_Smi}) T{bool} goto (8, 6)
B6
v65 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rax <- rax
v98 <- UnboxInt64([non-speculative], v65 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-5] <- rax
Branch if RelationalOp(>, v13, v98 T{_Smi}) T{bool} goto (9, 10)
B10
v39 <- LoadClassId(v3) [78, 94] int64
Branch if TestRange(v39 in [93-94]) T{bool} goto (11, 17)
B11
v55 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v100 <- UnboxInt64([non-speculative], v55 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove r8 <- rax
v27 <- BinaryInt64Op(- [tr], v98 T{_Smi}, v100 T{_Smi}) [v98-2305843009213693951, v98] int64
ParallelMove fp[-2] <- r8
ParallelMove rcx <- rcx goto:114 B16
B16
  Loop 1
ParallelMove fp[-1] <- rcx
CheckStackOverflow:118(stack=0, loop=1)
Branch if RelationalOp(<=, v28, v27) T{bool} goto (12, 13)
B12
  Loop 1
v101 <- BoxInt64(v28) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v101 T{int})
MoveArgument(sp[0] <- v3 T{String})
v31 <- StaticCall:98( _substringMatches@0150898<0> v2, v101 T{int}, v3 T{String}, using unchecked entrypoint, recognized_kind = StringBaseSubstringMatches, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:102(===, v31 T{bool}, v11) goto (14, 15)
BoolTest
B15
  Loop 1
ParallelMove rax <- fp[-1]
v32 <- BinaryInt64Op(+ [tr], v28, v111 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax, rsi <- fp[-3], rdi <- fp[-4], r8 <- fp[-2] goto:116 B16
B14
ParallelMove rax <- fp[-1]
DartReturn:108(v28)
B13
ParallelMove rax <- C
DartReturn:122(v79)
B17
ParallelMove r8 <- rcx goto:156 B22
B22
  Loop 0
ParallelMove fp[-1] <- r8
CheckStackOverflow:160(stack=0, loop=1)
Branch if RelationalOp(<=, v19, v98 T{_Smi}) T{bool} goto (18, 19)
B18
  Loop 0
v135 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rbx, rsi <- fp[-3], rdx <- r8
v23 <- DispatchTableCall( cid=v135 Pattern.matchAsPrefix<0>, v3, v2, v19) T{Match??}
ParallelMove rax <- rax
Branch if StrictCompare:144(!==, v23 T{Match??}, v0) goto (20, 21)
B21
  Loop 0
ParallelMove rax <- fp[-1]
v24 <- BinaryInt64Op(+ [tr], v19, v111 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rax, rax <- fp[-5] goto:158 B22
B20
ParallelMove rax <- fp[-1]
DartReturn:150(v19)
B19
ParallelMove rax <- C
DartReturn:164(v79)
B8
B9
B7
v60 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove fp[-4] <- rdx
v97 <- BoxInt64(v13) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-3] <- rax
v33 <- AllocateObject:58(cls=RangeError) T{RangeError}
ParallelMove rax <- rax
ParallelMove fp[-6] <- rax
MoveArgument(sp[4] <- v33)
MoveArgument(sp[3] <- v97 T{int})
MoveArgument(sp[2] <- v12)
MoveArgument(sp[1] <- v60 T{_Smi})
MoveArgument(sp[0] <- v35)
StaticCall:62( RangeError.range<0> v33, v97 T{int}, v12, v60 T{_Smi}, v35)
ParallelMove rax <- fp[-6]
Throw:64(v33)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v6 <- LoadField(v4 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v8 <- BinarySmiOp:4(- [tr], v6, v7) [-2, 4611686018427387901] T{_Smi}
Branch if RelationalOp:6(<=, v9, v8) T{bool} goto (2, 3)
B2
v37 <- LoadIndexedUnsafe(rbp[v8 T{_Smi} + 8]) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- rcx
v112 <- UnboxInt64([non-speculative], v37) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx goto:20 B5
B3
ParallelMove rcx <- C goto:18 B5
B5
CheckStackOverflow:26(stack=0, loop=0)
v38 <- LoadClassId(v3) [78, 94] T{_Smi}
ParallelMove rax <- rdx
v115 <- UnboxInt64([non-speculative], v38) [78, 94] int64
Branch if EqualityCompare(v115 T{_Smi} == v128 T{_Smi}) T{bool} goto (8, 6)
B8
B6
Branch if EqualityCompare(v115 T{_Smi} == v129 T{_Smi}) T{bool} goto (9, 24)
B9
B7
v63 <- LoadField(v2 T{_OneByteString} . String.length {final}) [0, 2305843009213693951] T{_Smi}
v68 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rbx <- rbx
v118 <- UnboxInt64([non-speculative], v68 T{_Smi}) [0, 2305843009213693951] int64
Branch if EqualityCompare(v118 T{_Smi} == v130 T{_Smi}) T{bool} goto (10, 21)
B10
Branch if RelationalOp(>=, v13, v127 T{_Smi}) T{bool} goto (11, 22)
B11
ParallelMove r8 <- rax
v117 <- UnboxInt64([non-speculative], v63 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(<, v13, v117 T{_Smi}) T{bool} goto (12, 23)
B12
ParallelMove rax <- rbx, rbx <- C
t0 <- GenericCheckBound:92(v118 T{_Smi}, v127 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
Branch if StrictCompare:92(===, v38 T{_Smi}, v15 T{_Smi}) goto (31, 32)
B31
v55 <- LoadIndexed([_OneByteString] v3 T{_OneByteString}, v127 T{_Smi}) [0, 255] int64
ParallelMove rdx <- rax goto:92 B30
B32
v53 <- LoadIndexed([_TwoByteString] v3 T{_StringBase}, v127 T{_Smi}) [0, 65535] int64
ParallelMove rdx <- rax goto:92 B30
B30
Branch if RelationalOp(>, v54 T{_Smi}, v131 T{_Smi}) T{bool} goto (13, 14)
B13
ParallelMove rax <- C
DartReturn:106(v86)
B14
B19
  Loop 0
CheckStackOverflow:146(stack=0, loop=1)
Branch if RelationalOp(<, v30, v117 T{_Smi}) T{bool} goto (15, 16)
B15
  Loop 0
ParallelMove rax <- r8, rbx <- rcx
GenericCheckBound:124(v117 T{_Smi}, v30) [-9223372036854775808, 9223372036854775807] int64
v132 <- LoadIndexed:124([_OneByteString] v2, v30 T{int}) [0, 255] int64
Branch if EqualityCompare(v132 == v54 T{_Smi}) T{bool} goto (17, 18)
B18
  Loop 0
ParallelMove rcx <- rcx
v35 <- BinaryInt64Op(+ [tr], v30 T{int}, v130 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx goto:144 B19
B17
ParallelMove rax <- rcx
DartReturn:136(v30 T{int})
B16
ParallelMove rax <- C
DartReturn:150(v86)
B23
B22
B21
B20
B24
B25
v113 <- BoxInt64(v13) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v113 T{int})
ParallelMove rdi <- rdi, rsi <- rsi
v21 <- StaticCall:174( indexOf<0> v2, v3, v113 T{int}, using unchecked entrypoint, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
DartReturn:176(v21)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
Branch if RelationalOp(<, v4, v45 T{_Smi}) T{bool} goto (5, 3)
B3
v30 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rax <- rax
v44 <- UnboxInt64([non-speculative], v30 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(>, v4, v44 T{_Smi}) T{bool} goto (6, 7)
B7
v43 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v43 T{int})
v10 <- StaticCall:50( _ExecuteMatchSticky@0150898<0> v2, v3, v43 T{int}, using unchecked entrypoint, recognized_kind = RegExp_ExecuteMatchSticky) T{List<int>??}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
Branch if StrictCompare:52(===, v10, v0) goto (8, 9)
B8
ParallelMove rax <- C
DartReturn:58(v0)
B9
v11 <- AllocateObject:62(cls=_RegExpMatch, <not-aliased>) T{_RegExpMatch}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v11 T{_RegExpMatch} . _match@0150898 = v10 T{List<int>}, NoStoreBarrier)
ParallelMove rax <- rcx
DartReturn:66(v11)
B5
B6
B4
v25 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove fp[-2] <- rcx
v42 <- BoxInt64(v4) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v12 <- AllocateObject:40(cls=RangeError) T{RangeError}
ParallelMove rax <- rax
ParallelMove fp[-3] <- rax
MoveArgument(sp[3] <- v12)
MoveArgument(sp[2] <- v42 T{int})
MoveArgument(sp[1] <- v5)
MoveArgument(sp[0] <- v25 T{_Smi})
StaticCall:44( RangeError.range<0> v12, v42 T{int}, v5, v25 T{_Smi})
ParallelMove rax <- fp[-3]
Throw:46(v12)
CheckStackOverflowSlowPath
B0
B1
Intrinsic
Enter frame
PrologueOffset = 0
MoveArgument(sp[3] <- v2)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v0)
v5 <- NativeCall(RegExp_ExecuteMatchSticky) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v5, v6, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{List<int>??}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v5 T{List<int>??})
B0
B1
ParallelMove rcx <- sp[2]
v4 <- LoadField(v2 . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rsi <- sp[1]
v8 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v9 <- UnboxInt64([non-speculative], v4) [0, 576460752303423487] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v9 T{_Smi}, v8 T{int}) [-9223372036854775808, 9223372036854775807] int64
v6 <- LoadField(v2 . GrowableObjectArray.data) T{_List}
v7 <- LoadIndexed([_List] v6, v8 T{int}) T{X0?}
ParallelMove rax <- rax
DartReturn:12(v7)
slow path check bound operation
PrologueOffset = 52
B0
B1
ParallelMove rcx <- sp[2]
v4 <- LoadField(v2 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rsi <- sp[1]
v7 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v8 <- UnboxInt64([non-speculative], v4) [0, 576460752303423487] int64
ParallelMove rax <- rdx, rbx <- rsi
t0 <- GenericCheckBound:10(v8 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v6 <- LoadIndexed([_List] v2, v7 T{int}) T{*?}
ParallelMove rax <- rax
DartReturn:12(v6)
slow path check bound operation
PrologueOffset = 48
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v4 <- StaticCall:10( _throwUnmodifiable@3220832<0> ) T{Never}
v5 <- AllocateObject:12(cls=ReachabilityError) T{ReachabilityError}
ParallelMove rcx <- rax, rax <- C
StoreField(v5 T{ReachabilityError} . _message@9040228 = v11 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:16(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-3] <- rdi, fp[-4] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v113 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.index) T{_Uint32List}
v118 <- LoadField(v113 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v206 <- UnboxInt64([non-speculative], v118 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rcx
v7 <- BinaryInt64Op(- [tr], v206 T{_Smi}, v230 T{_Smi}) [v206-1, v206-1] int64
ParallelMove fp[-2] <- rax
ParallelMove rcx <- rcx
v8 <- ShiftInt64Op(>> [tr], v206 T{_Smi}, v230 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-1] <- rcx
MoveArgument(sp[0] <- v3 T{FinalizerEntry})
v179 <- StaticCall:10( _getHash@0150898<0> v3 T{FinalizerEntry}, recognized_kind = Object_getHash, result_type = T{_Smi}) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax, rsi <- fp[-3]
v130 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.hash_mask) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v208 <- UnboxInt64([non-speculative], v179 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rcx <- rcx
v209 <- UnboxInt64([non-speculative], v130 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdx <- rax
v139 <- BinaryInt64Op(& [tr], v208 T{_Smi}, v209 T{_Smi}) [0, 4611686018427387903] int64
Branch if EqualityCompare(v139 == v231 T{_Smi}) T{bool} goto (47, 48)
B47
ParallelMove rdi <- fp[-1], rcx <- fp[-1] goto:32 B49
B48
ParallelMove rcx <- fp[-1]
ParallelMove rdx <- rdx
v145 <- BinaryInt64Op(* [tr], v139, v8 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdx goto:34 B49
B49
ParallelMove fp[-5] <- rdi
ParallelMove rax <- rax
v158 <- BinaryInt64Op(& [tr], v208 T{_Smi}, v7 T{int}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rbx <- rax
v160 <- ShiftInt64Op(<< [tr], v158, v230 T{_Smi}) [-9223372036854775808, 9223372036854775806] int64
ParallelMove rbx <- rbx
v161 <- BinaryInt64Op(+ [tr], v160, v158) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rbx
v162 <- BinaryInt64Op(& [tr], v161, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v167 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.index) T{_Uint32List}
v36 <- LoadField(v167 T{_Uint32List} . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r10 <- rax
v210 <- UnboxInt64([non-speculative], v36) [0, 4611686018427387903] int64
ParallelMove rax <- r10, rbx <- r8, fp[-6] <- r10
GenericCheckBound:28(v210 T{_Smi}, v162 T{int}) [-9223372036854775808, 9223372036854775807] int64
v232 <- LoadIndexed:28([_Uint32List] v167 T{_Uint32List}, v162 T{int}) [0, 4294967295] uint32
v99 <- LoadField:122(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.data) T{_List}
ParallelMove fp[-8] <- r12
v39 <- LoadField:122(v99 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove r13 <- rbx
v215 <- UnboxInt64:122([non-speculative], v39) [0, 576460752303423487] int64
ParallelMove rbx <- r8, rax <- rax, r8 <- fp[-4] goto:122 B12
B12
  Loop 0
CheckStackOverflow:120(stack=0, loop=1)
ParallelMove rax <- rax
v214 <- IntConverter(uint32->int64, v16) [0, 4294967295] int64
Branch if EqualityCompare(v214 T{_Smi} != v231 T{_Smi}) T{bool} goto (11, 13)
B11
  Loop 0
Branch if EqualityCompare(v214 T{_Smi} != v230 T{_Smi}) T{bool} goto (3, 9)
B3
  Loop 0
ParallelMove rdi <- fp[-5]
v27 <- BinaryInt64Op(^ [tr], v146 T{int}, v214 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-7] <- rdi
Branch if RelationalOp(<, v27, v8) T{bool} goto (4, 7)
B4
  Loop 0
ParallelMove rax <- r13, rbx <- rdi, rcx <- rbx, r10 <- C
GenericCheckBound:60(v215 T{_Smi}, v27) [-9223372036854775808, 9223372036854775807] int64
v233 <- LoadIndexed:60([_List] v99 T{_List}, v27 T{int}) T{*?}
Branch if StrictCompare:10(===, v3 T{FinalizerEntry}, v233 T{*?}) T{bool} goto (5, 8)
B8
  Loop 0
ParallelMove rdi <- rsi, rsi <- r12 goto:98 B6
B5
ParallelMove rax <- fp[-6], rbx <- rcx
GenericCheckBound:76(v210 T{_Smi}, v15) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:76([_Uint32List] v167 T{_Uint32List}, v15 T{int}, v180 T{_Smi}, NoStoreBarrier)
v78 <- LoadField(v99 T{_List} . Array.type_arguments {final}) T{TypeArguments?}
ParallelMove rax <- r12, rdx <- rdx, rcx <- C
AssertAssignable:10(v99 T{_List}, v83 T{_TypeParameter}, 'value', instantiator_type_args(v78), function_type_args(v0 T{Null?})) T{X0}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[-7], rsi <- fp[-8]
StoreIndexed:10([_List] v99, v27 T{int}, v99, NoStoreBarrier)
ParallelMove rdi <- fp[-3]
v88 <- LoadField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.deleted_keys) [0, 4611686018427387903] T{_Smi}
ParallelMove r12 <- r12
v221 <- UnboxInt64([non-speculative], v88 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove r12 <- r12
v35 <- BinaryInt64Op(+ [tr], v221 T{_Smi}, v230 T{_Smi}) [1, 4611686018427387904] int64
v222 <- BoxInt64(v35 T{int}) [1, 4611686018427387904] T{int}
ParallelMove rax <- rax
StoreField(v2 T{__Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin<X0>} . LinkedHashBase.deleted_keys = v222 T{int}, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:88(v20)
B7
  Loop 0
ParallelMove rdi <- rsi, rcx <- rbx, rsi <- r12, r10 <- C
ParallelMove  goto:94 B6
B6
B9
  Loop 0
ParallelMove rdi <- rsi, rcx <- rbx, rsi <- r12, r10 <- C
ParallelMove  goto:106 B10
B10
  Loop 0
ParallelMove rcx <- rcx
v55 <- BinaryInt64Op(+ [tr], v15 T{int}, v230 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v56 <- BinaryInt64Op(& [tr], v55, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-6], rbx <- rcx
GenericCheckBound:112(v210 T{_Smi}, v56 T{int}) [-9223372036854775808, 9223372036854775807] int64
v234 <- LoadIndexed:112([_Uint32List] v167 T{_Uint32List}, v56 T{int}) [0, 4294967295] uint32
ParallelMove rbx <- rcx, rax <- rax, rsi <- rdi, rcx <- fp[-1], r12 <- rsi goto:118 B12
B13
ParallelMove rax <- C
DartReturn:126(v21)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v21 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin&_UnmodifiableMapMixin&_ImmutableLinkedHashMapMixin<X0, X1>} . ImmutableLinkedHashBase.index) T{_Uint32List?}
Branch if StrictCompare:12(===, v21, v0) goto (3, 4)
B3
ParallelMove rdi <- rax
StaticCall:18( _createIndex@3220832<0> v2, using unchecked entrypoint)
ParallelMove  goto:24 B5
B4
B5
ParallelMove rdi <- rax, rsi <- fp[-2]
v14 <- StaticCall:10( _getValueOrData@3220832<0> v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin&_UnmodifiableMapMixin&_ImmutableLinkedHashMapMixin<X0, X1>}, v3 T{Object??}, using unchecked e
ParallelMove rax <- rax, rcx <- fp[-1]
v26 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin&_UnmodifiableMapMixin&_ImmutableLinkedHashMapMixin<X0, X1>} . ImmutableLinkedHashBase.data {final}) T{_ImmutableList}
Branch if StrictCompare:14(===, v26 T{_ImmutableList}, v14) goto (8, 9)
B8
ParallelMove rax <- C goto:24 B10
B9
B10
ParallelMove rax <- rax
DartReturn:30(v16 T{X1??})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax, rsi <- rsi
v4 <- StaticCall:10( _getValueOrData@3220832<0> v2, v3, using unchecked entrypoint) T{Object??}
ParallelMove rax <- rax, rcx <- fp[-1]
v11 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . ImmutableLinkedHashBase.data {final}) T{_ImmutableList}
Branch if StrictCompare:14(===, v11 T{_ImmutableList}, v4) goto (3, 4)
B3
ParallelMove rax <- C goto:24 B5
B4
B5
ParallelMove rax <- rax
DartReturn:28(v6)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax, rsi <- rsi
v4 <- StaticCall:10( _getValueOrData@3220832<0> v2, v3, using unchecked entrypoint) T{Object??}
ParallelMove rax <- rax, rcx <- fp[-1]
v11 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.data) T{_List}
Branch if StrictCompare:14(===, v11 T{_List}, v4) goto (3, 4)
B3
ParallelMove rax <- C goto:24 B5
B4
B5
ParallelMove rax <- rax
DartReturn:28(v6)
CheckStackOverflowSlowPath
B0
B5
Enter frame
PrologueOffset = 0
ParallelMove rax <- rsi, fp[-1] <- rsi
CheckStackOverflow:26(stack=0, loop=0)
v27 <- LoadClassId(v3) [78, 94] int64
Branch if TestRange(v27 in [93-94]) T{bool} goto (7, 12)
B7
v39 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove fp[-2] <- rcx
ParallelMove rdx <- rcx
v50 <- UnboxInt64([non-speculative], v39 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(>, v51 T{_Smi}, v50 T{_Smi}) T{bool} goto (8, 11)
B11
v54 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[0] <- v12)
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- rax
v21 <- DispatchTableCall( cid=v54 _StringBase.indexOf<0>, v2, v3 T{String}, v12) int64
ParallelMove rax <- rax
v22 <- RelationalOp(>=, v21 T{int}, v51 T{_Smi}) T{bool}
ParallelMove rax <- rcx
DartReturn:82(v22)
B12
ParallelMove rdi <- rdi, rsi <- C
v15 <- StaticCall:86( substring<0> v2, v51 T{_Smi}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax, rdi <- fp[-1]
v55 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- rax
v16 <- DispatchTableCall( cid=v55 Pattern.allMatches<0>, v3, v15) T{Iterable<Match>}
ParallelMove rdi <- rax
v17 <- StaticCall:90( get:isNotEmpty<0> v16 T{Iterable<Match>}, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
DartReturn:92(v17)
B8
v23 <- AllocateObject:68(cls=RangeError) T{RangeError}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
MoveArgument(sp[3] <- v23)
MoveArgument(sp[2] <- v12)
MoveArgument(sp[1] <- v12)
MoveArgument(sp[0] <- v39 T{_Smi})
StaticCall:72( RangeError.range<0> v23, v12, v12, v39 T{_Smi})
ParallelMove rax <- fp[-1]
Throw:74(v23)
CheckStackOverflowSlowPath
B0
B5
Enter frame
PrologueOffset = 0
CheckStackOverflow:26(stack=0, loop=0)
v36 <- LoadClassId(v3) [78, 94] T{_Smi}
ParallelMove rax <- rcx
v108 <- UnboxInt64([non-speculative], v36) [78, 94] int64
Branch if EqualityCompare(v108 T{_Smi} == v120 T{_Smi}) T{bool} goto (8, 6)
B8
B6
Branch if EqualityCompare(v108 T{_Smi} == v121 T{_Smi}) T{bool} goto (9, 24)
B9
B7
v61 <- LoadField(v2 T{_OneByteString} . String.length {final}) [0, 2305843009213693951] T{_Smi}
v66 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v111 <- UnboxInt64([non-speculative], v66 T{_Smi}) [0, 2305843009213693951] int64
Branch if EqualityCompare(v111 T{_Smi} == v122 T{_Smi}) T{bool} goto (11, 21)
B11
ParallelMove r8 <- rax
v110 <- UnboxInt64([non-speculative], v61 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(<, v123 T{_Smi}, v110 T{_Smi}) T{bool} goto (12, 23)
B12
ParallelMove rax <- rdx, rbx <- C
t0 <- GenericCheckBound:92(v111 T{_Smi}, v123 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
Branch if StrictCompare:92(===, v36 T{_Smi}, v14 T{_Smi}) goto (31, 32)
B31
v53 <- LoadIndexed([_OneByteString] v3 T{_OneByteString}, v123 T{_Smi}) [0, 255] int64
ParallelMove rax <- rax goto:92 B30
B32
v51 <- LoadIndexed([_TwoByteString] v3 T{_StringBase}, v123 T{_Smi}) [0, 65535] int64
ParallelMove rax <- rax goto:92 B30
B30
Branch if RelationalOp(>, v52 T{_Smi}, v124 T{_Smi}) T{bool} goto (13, 14)
B13
ParallelMove rax <- C
DartReturn:104(v31)
B14
ParallelMove rcx <- C goto:140 B19
B19
  Loop 0
CheckStackOverflow:144(stack=0, loop=1)
Branch if RelationalOp(<, v29, v110 T{_Smi}) T{bool} goto (15, 16)
B15
  Loop 0
v125 <- LoadIndexed:122([_OneByteString] v2, v29 T{int}) [0, 255] int64
Branch if EqualityCompare(v125 == v52 T{_Smi}) T{bool} goto (17, 18)
B18
  Loop 0
ParallelMove rcx <- rcx
v34 <- BinaryInt64Op(+ [tr], v29 T{int}, v122 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx goto:142 B19
B17
ParallelMove rax <- C
DartReturn:134(v11)
B16
ParallelMove rax <- C
DartReturn:146(v31)
B23
B21
B20
B24
B25
MoveArgument(sp[0] <- v12)
ParallelMove rdi <- rdi, rsi <- rsi
v20 <- StaticCall:170( contains<0> v2, v3, v12, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
DartReturn:172(v20)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(String_toLowerCase) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{String}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{String})
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v83 <- LoadField:110(v2 T{_OneByteString} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rcx
v108 <- UnboxInt64:110([non-speculative], v83 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-2] <- rdx
ParallelMove rsi <- C, rbx <- C goto:110 B14
B14
  Loop 2
ParallelMove fp[-1] <- rsi
CheckStackOverflow:114(stack=0, loop=1)
Branch if RelationalOp(<, v4, v108 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 2
v127 <- LoadIndexed:26([_OneByteString] v2, v4 T{int}) [0, 255] int64
v129 <- LoadIndexed:28([_OneByteString] v9, v127 T{_Smi}) [0, 255] int64
Branch if EqualityCompare(v127 T{_Smi} == v129) T{bool} goto (6, 7)
B6
  Loop 2
ParallelMove rsi <- rsi
v25 <- BinaryInt64Op(+ [tr], v4 T{int}, v130 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:112 B14
B7
MoveArgument(sp[0] <- v83 T{_Smi})
v78 <- StaticCall:10( allocateOneByteString<0> v83 T{_Smi}, recognized_kind = AllocateOneByteString, result_type = T{_OneByteString}) T{_OneByteString}
ParallelMove rcx <- rax
ParallelMove rdi <- C, rdx <- fp[2], rsi <- fp[-1] goto:70 B10
B10
  Loop 1
CheckStackOverflow:74(stack=0, loop=2)
Branch if RelationalOp(<, v14, v4 T{int}) T{bool} goto (8, 9)
B8
  Loop 1
ParallelMove rax <- fp[-2], rbx <- rdi
GenericCheckBound:64(v108 T{_Smi}, v14) [-9223372036854775808, 9223372036854775807] int64
v131 <- LoadIndexed:64([_OneByteString] v2, v14 T{int}) [0, 255] int64
ParallelMove rax <- rax
StoreIndexed:10([_OneByteString] v78 T{_OneByteString}, v14 T{int}, v131 T{_Smi}, NoStoreBarrier)
ParallelMove rdi <- rdi
v24 <- BinaryInt64Op(+ [tr], v14 T{int}, v130 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:72 B10
B9
ParallelMove r8 <- rsi, rdi <- C, rsi <- fp[-2] goto:100 B13
B13
  Loop 0
CheckStackOverflow:104(stack=0, loop=2)
Branch if RelationalOp(<, v16, v108 T{_Smi}) T{bool} goto (11, 12)
B11
  Loop 0
ParallelMove rax <- rsi, rbx <- r8
GenericCheckBound:92(v108 T{_Smi}, v16) [-9223372036854775808, 9223372036854775807] int64
v132 <- LoadIndexed:92([_OneByteString] v2, v16 T{int}) [0, 255] int64
v133 <- LoadIndexed:94([_OneByteString] v9, v132 T{_Smi}) [0, 255] int64
ParallelMove rax <- rax
StoreIndexed:10([_OneByteString] v78 T{_OneByteString}, v16 T{int}, v133 T{_Smi}, NoStoreBarrier)
ParallelMove r8 <- r8
v22 <- BinaryInt64Op(+ [tr], v16 T{int}, v130 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- r8 goto:102 B13
B12
ParallelMove rax <- rcx
DartReturn:106(v78 T{_OneByteString})
B4
ParallelMove rdx <- rax
ParallelMove rax <- rdx
DartReturn:116(v2)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, rdi <- rsi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v177 <- LoadField(v3 T{_OneByteString} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v177, v10 T{_Smi}) T{bool} goto (3, 4)
B3
v148 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v306 <- UnboxInt64([non-speculative], v148 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdi <- C, rsi <- rcx
v157 <- StaticCall:10( _GrowableList@0150898.<0> v12 T{TypeArguments}, v306 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rcx <- rax
ParallelMove fp[-5] <- rcx
v236 <- LoadField:36(v157 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rax
v308 <- UnboxInt64:36([non-speculative], v236 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-4] <- rdx
v168 <- LoadField:36(v157 . GrowableObjectArray.data) T{_List}
ParallelMove fp[-3] <- rsi
ParallelMove rdi <- C goto:36 B76
B76
  Loop 1
ParallelMove fp[-2] <- rdi
CheckStackOverflow:40(stack=0, loop=1)
Branch if RelationalOp(<, v159, v308 T{_Smi}) T{bool} goto (74, 75)
B74
  Loop 1
v307 <- BoxInt64(v159 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v2 T{_StringBase})
MoveArgument(sp[0] <- v307 T{int})
v245 <- StaticCall:10( []<0> v2 T{_StringBase}, v307 T{int}, using unchecked entrypoint, recognized_kind = StringBaseCharAt, result_type = T{!null}) T{String}
ParallelMove rdx <- fp[-3], rax <- rax, rcx <- fp[-2]
StoreIndexed:32([_List] v168, v159 T{int}, v245)
ParallelMove rcx <- rcx
v165 <- BinaryInt64Op(+ [tr], v159 T{int}, v352 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rcx, rcx <- fp[-5], rsi <- fp[-3], rdx <- fp[-4] goto:38 B76
B75
ParallelMove rax <- fp[-5]
DartReturn:28(v157 T{_GrowableList})
B4
v135 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdi <- rdi, rsi <- rax, fp[-3] <- rcx
v8 <- StaticCall:34( allMatches<0> v3, v2, using unchecked entrypoint, result_type = T{_StringAllMatchesIterable}) T{_StringAllMatchesIterable}
ParallelMove rax <- rax
v140 <- LoadField(v8 T{_StringAllMatchesIterable} . _input@0150898 {final}) T{String}
ParallelMove fp[-6] <- rcx
v141 <- LoadField(v8 T{_StringAllMatchesIterable} . _pattern@0150898 {final}) T{String}
ParallelMove fp[-5] <- rdx
v143 <- AllocateObject:16(cls=_StringAllMatchesIterator) T{_StringAllMatchesIterator}
ParallelMove rcx <- rax, rax <- fp[-6]
ParallelMove fp[-7] <- rcx
StoreField(v143 T{_StringAllMatchesIterator} . _input@0150898 = v140 T{String}, NoStoreBarrier)
ParallelMove rax <- fp[-5]
StoreField(v143 T{_StringAllMatchesIterator} . _pattern@0150898 = v141 T{String}, NoStoreBarrier)
ParallelMove rsi <- C
StoreField(v143 T{_StringAllMatchesIterator} . _index@0150898 = v351 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- fp[-3]
v313 <- UnboxInt64([non-speculative], v135 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-2] <- rax
Branch if EqualityCompare(v313 T{_Smi} == v351 T{_Smi}) T{bool} goto (5, 8)
B5
ParallelMove rdi <- rcx
v35 <- StaticCall:46( moveNext<0> v143, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:50(===, v35 T{bool}, v6) goto (6, 9)
BoolTest
B6
ParallelMove rdi <- C, rsi <- C
v36 <- StaticCall:58( _GrowableList@0150898.<0> v12, v351 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
DartReturn:60(v36)
B9
B8
B7
ParallelMove rdi <- C, rsi <- C
v13 <- StaticCall:72( _GrowableList@0150898.<0> v12, v351 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
ParallelMove fp[-5] <- rax
ParallelMove rsi <- C, rbx <- C goto:194 B24
B24
  Loop 0
ParallelMove fp[-4] <- rsi, fp[-8] <- rbx
CheckStackOverflow:192(stack=0, loop=1)
Branch if EqualityCompare(v14 == v313 T{_Smi}) T{bool} goto (12, 10)
B10
  Loop 0
ParallelMove rdi <- rcx
v20 <- StaticCall:88( moveNext<0> v143, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:92(!==, v20 T{bool}, v6 T{bool}) goto (13, 15)
BoolTest
B15
  Loop 0
ParallelMove rbx <- fp[-7]
v103 <- LoadField(v143 T{_StringAllMatchesIterator} . _current@0150898) T{_StringMatch?}
ParallelMove fp[-6] <- rsi
Branch if StrictCompare:12(===, v103, v0 T{Null?}) goto (54, 55)
B54
  Loop 0
ParallelMove rax <- rsi, rdx <- C, rcx <- C
t0 <- AssertAssignable:18(v103 T{_StringMatch?}, v111 T{_Type}, ' in type cast', instantiator_type_args(v0 T{Null?}), function_type_args(v0 T{Null?})) T{Match}
AssertAssignable for compile-time type
TTSCall
ParallelMove  goto:24 B56
B55
B56
  Loop 0
v22 <- LoadField(v103 T{_StringMatch} . start {final}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v22 == v313 T{_Smi}) T{bool} goto (16, 17)
B17
  Loop 0
ParallelMove rdi <- fp[-4]
v77 <- LoadField(v103 T{_StringMatch} . pattern {final}) T{String}
v200 <- LoadField(v77 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rax <- rax
v328 <- UnboxInt64([non-speculative], v200 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove r8 <- rdx
v79 <- BinaryInt64Op(+ [tr], v22 T{int}, v328 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-9] <- r8
Branch if EqualityCompare(v14 == v79 T{int}) T{bool} goto (18, 22)
B18
  Loop 0
ParallelMove r9 <- fp[-8]
Branch if EqualityCompare(v79 T{int} == v15) T{bool} goto (19, 23)
B19
  Loop 0
ParallelMove rdi <- rdi
v32 <- BinaryInt64Op(+ [tr], v14, v352 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rdi, rbx <- r9, rcx <- fp[-5] goto:166 B20
B23
B22
  Loop 0
ParallelMove r9 <- fp[-8]
ParallelMove  goto:172 B21
B21
  Loop 0
v329 <- BoxInt64(v22 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- r9, rsi <- rax, rdx <- rcx
v50 <- StaticCall:30( checkValidRange<0> v15 T{int}, v329 T{int?}, v313 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-1], rsi <- fp[-8], rdx <- rax
v51 <- StaticCall:32( _substringUnchecked@0150898<0> v2 T{_StringBase}, v15 T{int}, v50, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rcx <- rax, rax <- fp[-5]
ParallelMove fp[-6] <- rcx
v189 <- LoadField(v13 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v194 <- LoadField(v13 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v195 <- LoadField(v194 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v333 <- UnboxInt64([non-speculative], v189 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-4] <- rdx
ParallelMove rsi <- rsi
v334 <- UnboxInt64([non-speculative], v195 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v333 T{_Smi} == v334 T{_Smi}) T{bool} goto (34, 35)
B34
  Loop 0
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v13 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B36
B35
B36
  Loop 0
ParallelMove rax <- rsi
v64 <- BinaryInt64Op(+ [tr], v333 T{_Smi}, v352 T{_Smi}) [1, 576460752303423488] int64
v335 <- BoxInt64(v64) [1, 576460752303423488] T{_Smi}
StoreField(v13 T{_GrowableList} . GrowableObjectArray.length = v335, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v64 T{_Smi}, v333 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v67 <- LoadField(v13 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-6]
StoreIndexed:40([_List] v67, v333 T{_Smi}, v51 T{String})
ParallelMove rsi <- fp[-9], rbx <- fp[-9] goto:184 B20
B20
  Loop 0
ParallelMove rsi <- rsi, rbx <- rbx, rax <- rcx goto:190 B24
B16
ParallelMove rcx <- fp[-5]
MoveArgument(sp[0] <- v135 T{_Smi})
ParallelMove rdi <- fp[-1], rsi <- fp[-8]
v33 <- StaticCall:132( substring<0> v2, v15, v135 T{_Smi}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rcx <- rax, rax <- fp[-5]
ParallelMove fp[-6] <- rcx
v205 <- LoadField(v13 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v210 <- LoadField(v13 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v211 <- LoadField(v210 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v323 <- UnboxInt64([non-speculative], v205 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-2] <- rdx
ParallelMove rsi <- rsi
v324 <- UnboxInt64([non-speculative], v211 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v323 T{_Smi} == v324 T{_Smi}) T{bool} goto (45, 46)
B45
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v13 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B47
B46
B47
ParallelMove rax <- rsi
v91 <- BinaryInt64Op(+ [tr], v323 T{_Smi}, v352 T{_Smi}) [1, 576460752303423488] int64
v325 <- BoxInt64(v91) [1, 576460752303423488] T{_Smi}
StoreField(v13 T{_GrowableList} . GrowableObjectArray.length = v325, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v91 T{_Smi}, v323 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v94 <- LoadField(v13 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-6]
StoreIndexed:40([_List] v94, v323 T{_Smi}, v33 T{String})
ParallelMove  goto:136 B14
B13
ParallelMove rcx <- fp[-5]
ParallelMove  goto:106 B11
B12
ParallelMove rcx <- rax
ParallelMove  goto:102 B11
B11
MoveArgument(sp[0] <- v135 T{_Smi})
ParallelMove rdi <- fp[-1], rsi <- fp[-8]
v34 <- StaticCall:108( substring<0> v2, v15, v135 T{_Smi}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rcx <- rax, rax <- fp[-5]
ParallelMove fp[-1] <- rcx
v216 <- LoadField(v13 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v221 <- LoadField(v13 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v222 <- LoadField(v221 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v316 <- UnboxInt64([non-speculative], v216 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-2] <- rdx
ParallelMove rsi <- rsi
v317 <- UnboxInt64([non-speculative], v222 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v316 T{_Smi} == v317 T{_Smi}) T{bool} goto (59, 60)
B59
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v13 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B61
B60
B61
ParallelMove rax <- rsi
v123 <- BinaryInt64Op(+ [tr], v316 T{_Smi}, v352 T{_Smi}) [1, 576460752303423488] int64
v318 <- BoxInt64(v123) [1, 576460752303423488] T{_Smi}
StoreField(v13 T{_GrowableList} . GrowableObjectArray.length = v318, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v123 T{_Smi}, v316 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v126 <- LoadField(v13 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-1]
StoreIndexed:40([_List] v126, v316 T{_Smi}, v34 T{String})
ParallelMove  goto:114 B14
B14
ParallelMove rax <- rcx
DartReturn:200(v13)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B3
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v25 <- LoadField(v3 T{_OneByteString} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rax <- rax
v33 <- UnboxInt64([non-speculative], v25 T{_Smi}) [0, 2305843009213693951] int64
Branch if EqualityCompare(v33 T{_Smi} == v37 T{_Smi}) T{bool} goto (4, 7)
B4
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:34(v33 T{_Smi}, v38 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v39 <- LoadIndexed:34([_OneByteString] v3, v38 T{_Smi}) [0, 255] int64
ParallelMove rdi <- rdi, rsi <- rax
v15 <- StaticCall:36( _splitWithCharCode@0150898<0> v2, v39, using unchecked entrypoint, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
DartReturn:38(v15)
B7
ParallelMove rdi <- rdi, rsi <- rsi
v9 <- StaticCall:50( split<0> v2, v3, using unchecked entrypoint, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
DartReturn:52(v9)
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- C, rsi <- C
v6 <- StaticCall:10( _GrowableList@0150898.<0> v4, v276 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rdx <- rax, rcx <- fp[-1]
ParallelMove fp[-5] <- rdx
v151 <- LoadField:56(v2 T{_OneByteString} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rsi <- rax
v247 <- UnboxInt64:56([non-speculative], v151 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-4] <- rsi
ParallelMove r9 <- C, r8 <- C goto:56 B8
B8
  Loop 0
ParallelMove fp[-3] <- r9
CheckStackOverflow:60(stack=0, loop=1)
Branch if RelationalOp(<, v7, v247 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
v249 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove r10 <- rax
v277 <- LoadIndexed:28([_OneByteString] v2, v7 T{int}) [0, 255] int64
Branch if EqualityCompare(v277 == v3) T{bool} goto (5, 6)
B5
  Loop 0
Branch if EqualityCompare(v8 T{int} == v7 T{int}) T{bool} goto (34, 35)
B34
  Loop 0
ParallelMove rcx <- C, rax <- rdx goto:20 B44
B35
  Loop 0
Branch if EqualityCompare(v8 T{int} == v276 T{_Smi}) T{bool} goto (36, 39)
B36
  Loop 0
Branch if EqualityCompare(v7 T{int} == v247 T{_Smi}) T{bool} goto (37, 40)
B37
  Loop 0
ParallelMove rcx <- rcx, rax <- rdx goto:46 B44
B40
B39
B38
  Loop 0
ParallelMove rax <- r8
v99 <- BinaryInt64Op(+ [tr], v8 T{int}, v278 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v99 == v7 T{int}) T{bool} goto (41, 42)
B41
  Loop 0
ParallelMove rax <- rsi, rbx <- r8
GenericCheckBound:70(v247 T{_Smi}, v8 T{int}) [-9223372036854775808, 9223372036854775807] int64
v279 <- LoadIndexed:70([_OneByteString] v2 T{_OneByteString}, v8 T{int}) [0, 255] int64
v109 <- BoxInt64(v279 T{_Smi}) [0, 255] T{_Smi}
v110 <- OneByteStringFromCharCode(v109) T{_OneByteString}
ParallelMove rcx <- rax, rax <- rdx goto:72 B44
B42
  Loop 0
v245 <- BoxInt64(v8 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v2 T{_OneByteString})
MoveArgument(sp[1] <- v245 T{int})
MoveArgument(sp[0] <- v249 T{int})
v101 <- StaticCall:76( _substringUncheckedNative@0150898<0> v2 T{_OneByteString}, v245 T{int}, v249 T{int}, using unchecked entrypoint, recognized_kind = OneByteString_substringUnchecked, result_type = T{!null}) T{_OneByteString}
ParallelMove rax <- rax
ParallelMove rcx <- rax, rax <- fp[-5] goto:78 B44
B44
  Loop 0
ParallelMove fp[-7] <- rcx
v177 <- LoadField(v6 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v182 <- LoadField(v6 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v183 <- LoadField(v182 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v256 <- UnboxInt64([non-speculative], v177 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-6] <- rdx
ParallelMove rsi <- rsi
v257 <- UnboxInt64([non-speculative], v183 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v256 T{_Smi} == v257 T{_Smi}) T{bool} goto (47, 48)
B47
  Loop 0
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v6 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B49
B48
B49
  Loop 0
ParallelMove rax <- rcx
v139 <- BinaryInt64Op(+ [tr], v256 T{_Smi}, v278 T{_Smi}) [1, 576460752303423488] int64
v258 <- BoxInt64(v139) [1, 576460752303423488] T{_Smi}
StoreField(v6 T{_GrowableList} . GrowableObjectArray.length = v258, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:40(v139 T{_Smi}, v256 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v142 <- LoadField(v6 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-7]
StoreIndexed:40([_List] v142, v256 T{_Smi}, v127)
ParallelMove rax <- fp[-3]
v19 <- BinaryInt64Op(+ [tr], v7 T{int}, v278 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rax goto:50 B7
B6
  Loop 0
ParallelMove rdi <- rdx
ParallelMove r8 <- r8 goto:52 B7
B7
  Loop 0
ParallelMove rax <- fp[-3]
v17 <- BinaryInt64Op(+ [tr], v7 T{int}, v278 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- rax, r8 <- r8, rcx <- fp[-1], rdx <- rdi, rsi <- fp[-4] goto:58 B8
B4
ParallelMove rdi <- rdx, rcx <- r9
Branch if EqualityCompare(v8 T{int} == v7 T{int}) T{bool} goto (12, 13)
B12
ParallelMove rcx <- C, rax <- rdi goto:20 B22
B13
Branch if EqualityCompare(v8 T{int} == v276 T{_Smi}) T{bool} goto (14, 17)
B14
ParallelMove rax <- fp[-4]
Branch if EqualityCompare(v7 T{int} == v247 T{_Smi}) T{bool} goto (15, 18)
B15
ParallelMove rcx <- fp[-1], rax <- rdi goto:46 B22
B18
B17
ParallelMove rax <- fp[-4]
ParallelMove  goto:52 B16
B16
ParallelMove rdx <- r8
v37 <- BinaryInt64Op(+ [tr], v8 T{int}, v278 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v37 == v7 T{int}) T{bool} goto (19, 20)
B19
ParallelMove rdx <- fp[-1]
ParallelMove rax <- rax, rbx <- r8
GenericCheckBound:70(v247 T{_Smi}, v8 T{int}) [-9223372036854775808, 9223372036854775807] int64
v280 <- LoadIndexed:70([_OneByteString] v2 T{_OneByteString}, v8 T{int}) [0, 255] int64
v47 <- BoxInt64(v280 T{_Smi}) [0, 255] T{_Smi}
v48 <- OneByteStringFromCharCode(v47) T{_OneByteString}
ParallelMove rcx <- rax, rax <- rdi goto:72 B22
B20
ParallelMove rdx <- fp[-1]
v244 <- BoxInt64(v7 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- rax
v246 <- BoxInt64(v8 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v2 T{_OneByteString})
MoveArgument(sp[1] <- v246 T{int})
MoveArgument(sp[0] <- v244 T{int})
v39 <- StaticCall:76( _substringUncheckedNative@0150898<0> v2 T{_OneByteString}, v246 T{int}, v244 T{int}, using unchecked entrypoint, recognized_kind = OneByteString_substringUnchecked, result_type = T{!null}) T{_OneByteString}
ParallelMove rax <- rax
ParallelMove rcx <- rax, rax <- fp[-5] goto:78 B22
B22
ParallelMove fp[-1] <- rcx
v161 <- LoadField(v6 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v166 <- LoadField(v6 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v167 <- LoadField(v166 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v266 <- UnboxInt64([non-speculative], v161 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-2] <- rdx
ParallelMove rsi <- rsi
v267 <- UnboxInt64([non-speculative], v167 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v266 T{_Smi} == v267 T{_Smi}) T{bool} goto (25, 26)
B25
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v6 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B27
B26
B27
ParallelMove rax <- rsi
v78 <- BinaryInt64Op(+ [tr], v266 T{_Smi}, v278 T{_Smi}) [1, 576460752303423488] int64
v268 <- BoxInt64(v78) [1, 576460752303423488] T{_Smi}
StoreField(v6 T{_GrowableList} . GrowableObjectArray.length = v268, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v78 T{_Smi}, v266 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v81 <- LoadField(v6 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-1]
StoreIndexed:40([_List] v81, v266 T{_Smi}, v66)
ParallelMove rax <- rcx
DartReturn:66(v6)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
v10 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase<X0, X1>} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
v15 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase<X0, X1>} . LinkedHashBase.deleted_keys) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v16 <- UnboxInt64([non-speculative], v10 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdx <- rdx
v17 <- UnboxInt64([non-speculative], v15 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rcx <- rcx
v5 <- BinaryInt64Op(+ [tr], v16 T{_Smi}, v17 T{_Smi}) [0, 9223372036854775806] int64
ParallelMove rax <- rcx
DartReturn:16(v5)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-3] <- rdi
v3 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
v13 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin&_UnmodifiableMapMixin&_ImmutableLinkedHashMapMixin<X0, X1>} . ImmutableLinkedHashBase.data {final}) T{_ImmutableList}
ParallelMove fp[-2] <- rax
v18 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin&_UnmodifiableMapMixin&_ImmutableLinkedHashMapMixin<X0, X1>} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx, fp[-1] <- rcx
v4 <- AllocateObject:10(cls=_CompactIterableImmutable, v3, <not-aliased>) T{_CompactIterableImmutable}
ParallelMove rax <- rax, rcx <- fp[-3]
StoreField(v4 T{_CompactIterableImmutable} . _table@3220832 = v2 T{_ConstMap}, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreField(v4 T{_CompactIterableImmutable} . _data@3220832 = v13 T{_ImmutableList}, NoStoreBarrier)
ParallelMove rcx <- fp[-1]
v38 <- UnboxInt64([non-speculative], v18 T{_Smi}) [0, 4611686018427387903] int64
StoreField(v4 T{_CompactIterableImmutable} . _len@3220832 = v38 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v4 T{_CompactIterableImmutable} . _offset@3220832 = v36 <int64>, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v4 T{_CompactIterableImmutable} . _step@3220832 = v39 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:20(v4)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
v3 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx
v4 <- AllocateObject:10(cls=_CompactIterable, v3, <not-aliased>) T{_CompactIterable}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v4 T{_CompactIterable} . _table@3220832 = v2 T{_Map}, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v4 T{_CompactIterable} . _offset@3220832 = v20 <int64>, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v4 T{_CompactIterable} . _step@3220832 = v22 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:16(v4)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rsi, fp[-6] <- rdi, fp[-7] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v59 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . ImmutableLinkedHashBase.data {final}) T{_ImmutableList}
ParallelMove fp[-5] <- rdx
v92 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
v97 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.deleted_keys) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rax
v115 <- UnboxInt64([non-speculative], v92 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove fp[-4] <- rsi
ParallelMove rbx <- rbx
v116 <- UnboxInt64([non-speculative], v97 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove r8 <- rsi
v66 <- BinaryInt64Op(+ [tr], v115 T{_Smi}, v116 T{_Smi}) [0, 9223372036854775806] int64
ParallelMove fp[-3] <- r8
v22 <- LoadField:78(v59 T{_ImmutableList} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove r9 <- rax
v118 <- UnboxInt64:78([non-speculative], v22) [0, 576460752303423487] int64
ParallelMove fp[-2] <- r9
ParallelMove r10 <- C goto:78 B10
B10
  Loop 0
ParallelMove fp[-1] <- r10
CheckStackOverflow:82(stack=0, loop=1)
Branch if RelationalOp(<, v8, v115 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
ParallelMove rax <- r9, rbx <- r10
GenericCheckBound:30(v118 T{_Smi}, v8) [-9223372036854775808, 9223372036854775807] int64
v132 <- LoadIndexed:30([_List] v59 T{_ImmutableList}, v8 T{int}) T{*?}
Branch if StrictCompare:10(===, v132 T{Object??}, v59 T{_ImmutableList}) T{bool} goto (5, 18)
B5
  Loop 0
ParallelMove rax <- rdi, rdx <- r8 goto:44 B6
B18
  Loop 0
ParallelMove r13 <- r10
v15 <- BinaryInt64Op(+ [tr], v8 T{int}, v133 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r9, rbx <- r13
GenericCheckBound:50(v118 T{_Smi}, v15) [-9223372036854775808, 9223372036854775807] int64
v134 <- LoadIndexed:50([_List] v59 T{_ImmutableList}, v15 T{int}) T{*?}
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v132 T{*?})
MoveArgument(sp[0] <- v134 T{*?})
ParallelMove rax <- rcx
v17 <- ClosureCall:54( closure=v3<0>, v3, v132 T{*?}, v134 T{*?}) T{*?}
ParallelMove rax <- fp[-6]
v102 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
v107 <- LoadField(v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.deleted_keys) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v122 <- UnboxInt64([non-speculative], v102 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdx <- rdx
v123 <- UnboxInt64([non-speculative], v107 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rcx <- rcx
v82 <- BinaryInt64Op(+ [tr], v122 T{_Smi}, v123 T{_Smi}) [0, 9223372036854775806] int64
ParallelMove rdx <- fp[-3]
Branch if EqualityCompare(v82 T{int} != v66 T{int}) T{bool} goto (8, 9)
B9
B6
  Loop 0
ParallelMove rcx <- fp[-1]
v21 <- BinaryInt64Op(+ [tr], v8 T{int}, v135 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- rcx, rdi <- rax, rcx <- fp[-7], rdx <- fp[-5], r8 <- rdx, rsi <- fp[-4], r9 <- fp[-2] goto:80 B10
B4
ParallelMove rax <- C
DartReturn:84(v0)
B8
v19 <- AllocateObject:66(cls=ConcurrentModificationError, <not-aliased>) T{ConcurrentModificationError}
ParallelMove rcx <- rax, rax <- fp[-6]
StoreField(v19 T{ConcurrentModificationError} . modifiedObject = v2 T{__ConstMap&_HashVMImmutableBase&MapMixin&_HashBase&_OperatorEqualsAndCanonicalHashCode&_LinkedHashMapMixin<X0, X1>}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:70(v19)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rsi, fp[-6] <- rdi, fp[-7] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v59 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.data) T{_List}
ParallelMove fp[-5] <- rdx
v92 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
v97 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.deleted_keys) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rax
v115 <- UnboxInt64([non-speculative], v92 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove fp[-4] <- rsi
ParallelMove rbx <- rbx
v116 <- UnboxInt64([non-speculative], v97 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove r8 <- rsi
v66 <- BinaryInt64Op(+ [tr], v115 T{_Smi}, v116 T{_Smi}) [0, 9223372036854775806] int64
ParallelMove fp[-3] <- r8
v22 <- LoadField:78(v59 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove r9 <- rax
v118 <- UnboxInt64:78([non-speculative], v22) [0, 576460752303423487] int64
ParallelMove fp[-2] <- r9
ParallelMove r10 <- C goto:78 B10
B10
  Loop 0
ParallelMove fp[-1] <- r10
CheckStackOverflow:82(stack=0, loop=1)
Branch if RelationalOp(<, v8, v115 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 0
ParallelMove rax <- r9, rbx <- r10
GenericCheckBound:30(v118 T{_Smi}, v8) [-9223372036854775808, 9223372036854775807] int64
v132 <- LoadIndexed:30([_List] v59 T{_List}, v8 T{int}) T{*?}
Branch if StrictCompare:10(===, v132 T{Object??}, v59 T{_List}) T{bool} goto (5, 7)
B5
  Loop 0
ParallelMove rax <- rdi, rcx <- r8 goto:44 B6
B7
  Loop 0
ParallelMove r13 <- r10
v15 <- BinaryInt64Op(+ [tr], v8 T{int}, v133 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- r9, rbx <- r13
GenericCheckBound:50(v118 T{_Smi}, v15) [-9223372036854775808, 9223372036854775807] int64
v134 <- LoadIndexed:50([_List] v59 T{_List}, v15 T{int}) T{*?}
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v132 T{*?})
MoveArgument(sp[0] <- v134 T{*?})
ParallelMove rax <- rcx
v17 <- ClosureCall:54( closure=v3<0>, v3, v132 T{*?}, v134 T{*?}) T{*?}
ParallelMove rax <- fp[-6]
v87 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.data) T{_List}
ParallelMove rdx <- fp[-5]
Branch if StrictCompare:14(!==, v87 T{_List}, v59 T{_List}) goto (45, 18)
B18
  Loop 0
ParallelMove rcx <- fp[-3]
v102 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.used_data) [0, 4611686018427387903] T{_Smi}
v107 <- LoadField(v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>} . LinkedHashBase.deleted_keys) [0, 4611686018427387903] T{_Smi}
ParallelMove rbx <- rbx
v122 <- UnboxInt64([non-speculative], v102 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rsi <- rsi
v123 <- UnboxInt64([non-speculative], v107 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rbx <- rbx
v82 <- BinaryInt64Op(+ [tr], v122 T{_Smi}, v123 T{_Smi}) [0, 9223372036854775806] int64
Branch if EqualityCompare(v82 T{int} != v66 T{int}) T{bool} goto (43, 9)
B9
B6
  Loop 0
ParallelMove rbx <- fp[-1]
v21 <- BinaryInt64Op(+ [tr], v8 T{int}, v135 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r10 <- rbx, rdi <- rax, rcx <- fp[-7], r8 <- rcx, rsi <- fp[-4], r9 <- fp[-2] goto:80 B10
B4
ParallelMove rax <- C
DartReturn:84(v0)
B43
B45
B8
v19 <- AllocateObject:66(cls=ConcurrentModificationError, <not-aliased>) T{ConcurrentModificationError}
ParallelMove rcx <- rax, rax <- fp[-6]
StoreField(v19 T{ConcurrentModificationError} . modifiedObject = v2 T{__Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin<X0, X1>}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:70(v19)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
B0
B1
ParallelMove rax <- sp[1]
DartReturn:10(v2)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[1] <- v0)
MoveArgument(sp[0] <- v2)
v3 <- StaticCall:10( _Double@0150898.fromInteger<0> v0, v2, recognized_kind = DoubleFromInteger, result_type = T{_Double}) T{_Double}
ParallelMove rax <- rax
DartReturn:12(v3)
CheckStackOverflowSlowPath
B0
B1
Intrinsic
Enter frame
PrologueOffset = 61
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(Double_doubleFromInteger) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{_Double}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{_Double})
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(Double_equalToInteger) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{bool}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{bool})
B0
B1
Intrinsic
Enter frame
PrologueOffset = 109
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(Integer_equalToInteger) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{bool}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{bool})
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(Mint_bitLength) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v3, v4, 'function result', instantiator_type_args(v0), function_type_args(v0)) [-9223372036854775808, 9223372036854775807] T{int}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v3 T{int})
B0
B1
Intrinsic
PrologueOffset = 0
Check number of STC inputs
Call 7 input STC check
Call 6 input STC check
Call 4 input STC check
Call 3 input STC check
Call 2 input STC check
Call runtime
Done
PrologueOffset = 0
PrologueOffset = 0
PrologueOffset = 0
PrologueOffset = 0
PrologueOffset = 0
Calling initializer function
Checking that initializer did not set late final field
PrologueOffset = 0
Calling initializer function
PrologueOffset = 0
PrologueOffset = 0
PrologueOffset = 0
PrologueOffset = 0
PrologueOffset = 0
EnterCallRuntimeFrame
PrologueOffset = 81
EnterCallRuntimeFrame
EnterCallRuntimeFrame
PrologueOffset = 122
EnterCallRuntimeFrame
PrologueOffset = 47
EnterCallRuntimeFrame
PrologueOffset = 53
EnterCallRuntimeFrame
PrologueOffset = 43
EnterCallRuntimeFrame
PrologueOffset = 49
EnterCallRuntimeFrame
PrologueOffset = 111
EnterCallRuntimeFrame
Inline allocation of GrowableList
PrologueOffset = 117
EnterCallRuntimeFrame
Inline allocation of uninitialized closure
Inline initialization of allocated closure
Closure allocation via runtime
PrologueOffset = 74
EnterCallRuntimeFrame
Inline allocation of uninitialized closure
Inline initialization of allocated closure
Closure allocation via runtime
PrologueOffset = 67
EnterCallRuntimeFrame
Inline allocation of uninitialized closure
Inline initialization of allocated closure
Closure allocation via runtime
PrologueOffset = 74
EnterCallRuntimeFrame
Inline allocation of uninitialized closure
Inline initialization of allocated closure
Closure allocation via runtime
PrologueOffset = 67
EnterCallRuntimeFrame
PrologueOffset = 138
PrologueOffset = 138
PrologueOffset = 138
PrologueOffset = 135
PrologueOffset = 135
PrologueOffset = 135
PrologueOffset = 135
PrologueOffset = 135
PrologueOffset = 135
PrologueOffset = 135
PrologueOffset = 135
PrologueOffset = 135
PrologueOffset = 135
PrologueOffset = 135
PrologueOffset = 31
PrologueOffset = 31
PrologueOffset = 31
PrologueOffset = 31
PrologueOffset = 31
PrologueOffset = 133
EnterCallRuntimeFrame
PrologueOffset = 27
PrologueOffset = 148
PrologueOffset = 58
PrologueOffset = 179
PrologueOffset = 27
PrologueOffset = 148
PrologueOffset = 27
PrologueOffset = 148
PrologueOffset = 27
PrologueOffset = 148
PrologueOffset = 27
PrologueOffset = 148
PrologueOffset = 27
PrologueOffset = 148
PrologueOffset = 27
PrologueOffset = 148
PrologueOffset = 0
B0
B1
ParallelMove rcx <- sp[1]
v3 <- LoadField(v2 . _hash@0150898) T{*?}
ParallelMove rax <- rax
DartReturn:4(v3)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[4]
v29 <- LoadClassId(v2) [44, 616] int64
Branch if EqualityCompare(v29 == v30) T{bool} goto (3, 4)
B3
v39 <- LoadField(v2 T{_SuspendState} . SuspendState.function_data) T{*?}
ParallelMove rcx <- rcx, rax <- C goto:26 B5
B4
ParallelMove rcx <- rax, rax <- C goto:28 B5
B5
ParallelMove fp[-1] <- rcx
v31 <- LoadClassId(v9) [44, 616] int64
Branch if EqualityCompare(v31 == v32) T{bool} goto (6, 10)
B6
Branch if StrictCompare:42(!==, v10 T{bool}, v5) goto (7, 8)
BoolTest
B7
ParallelMove rdi <- rcx, rsi <- fp[3], rdx <- fp[2]
StaticCall:48( _asyncCompleteError@4048458<0> v9 T{_Future}, v3, v4, using unchecked entrypoint)
ParallelMove  goto:56 B9
B8
ParallelMove rdi <- fp[-1], rsi <- fp[3], rdx <- fp[2]
StaticCall:52( _completeError@4048458<0> v9 T{_Future}, v3, v4, using unchecked entrypoint)
ParallelMove  goto:58 B9
B9
B10
Branch if EqualityCompare(v31 T{_Smi} == v34) T{bool} goto (11, 12)
B11
ParallelMove rdi <- fp[-1], rsi <- fp[3], rdx <- fp[2]
StaticCall:72( addError<0> v9 T{_AsyncStarStreamController}, v3, v4, using unchecked entrypoint)
ParallelMove rdi <- fp[-1]
StaticCall:74( close<0> v9 T{_AsyncStarStreamController}, using unchecked entrypoint)
ParallelMove  goto:90 B13
B13
ParallelMove rax <- fp[-1]
DartReturn:92(v9)
B12
ParallelMove rbx <- C, r10 <- C
v16 <- CreateArray:78(v0, v15) T{_List}
ParallelMove rax <- rax
ParallelMove fp[-2] <- rax
StoreIndexed([_List] v16, v17, v18, NoStoreBarrier)
MoveArgument(sp[0] <- v9)
v20 <- StaticCall:80( get:runtimeType<0> v9, recognized_kind = ObjectRuntimeType) T{Type}
ParallelMove rdx <- fp[-2], rax <- rax
StoreIndexed([_List] v16, v19, v20)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v16, v21, v22, NoStoreBarrier)
ParallelMove rdx <- rcx, rax <- fp[-1]
StoreIndexed([_List] v16, v23, v9)
MoveArgument(sp[0] <- v16)
v24 <- StaticCall:82( _interpolate@0150898<0> v16, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
Throw:84(v24)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . cancellationFuture) T{_Future?}
Branch if StrictCompare:12(!==, v3, v0) goto (3, 6)
B3
ParallelMove rcx <- C
v12 <- LoadField(v3 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v35 <- IntConverter(int64->uint32[tr], v12) uint32
ParallelMove rdx <- rdx
v14 <- BinaryUint32Op(& [tr], v35 T{int}, v38 T{_Smi}) [0, 30] uint32
ParallelMove rdx <- rdx
v36 <- IntConverter(uint32->int64, v14) int64
Branch if EqualityCompare(v36 T{_Smi} == v28 T{_Smi}) T{bool} goto (4, 7)
B4
ParallelMove rdi <- rdi, rsi <- C
StaticCall:28( _completeWithValue@4048458<0> v3 T{_Future}, v0, using unchecked entrypoint)
ParallelMove  goto:42 B8
B7
B6
B5
B8
v4 <- LoadField(v2 . controller) T{StreamController<X0>}
v37 <- LoadClassId(<non-smi> v4) int64
ParallelMove rcx <- rcx, rdi <- rdi
DispatchTableCall( cid=v37 StreamController.close<0>, v4)
ParallelMove rax <- C
DartReturn:50(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v6 <- LoadField(v2 . cancellationFuture) T{_Future?}
Branch if StrictCompare:14(!==, v6, v0) goto (3, 6)
B3
ParallelMove rcx <- C
v17 <- LoadField(v6 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v55 <- IntConverter(int64->uint32[tr], v17) uint32
ParallelMove rbx <- rbx
v19 <- BinaryUint32Op(& [tr], v55 T{int}, v59 T{_Smi}) [0, 30] uint32
ParallelMove rbx <- rbx
v56 <- IntConverter(uint32->int64, v19) int64
Branch if EqualityCompare(v56 T{_Smi} == v44 T{_Smi}) T{bool} goto (4, 7)
B4
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx
StaticCall:30( _completeError@4048458<0> v6 T{_Future}, v3, v4, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:32(v0)
B7
B6
B5
v7 <- LoadField(v2 . controller) T{StreamController<X0>}
v57 <- LoadClassId(<non-smi> v7) int64
ParallelMove rcx <- rcx, rdi <- rdi
v8 <- DispatchTableCall( cid=v57 StreamController.hasListener<0>, v7) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:50(!==, v8 T{bool}, v9) goto (8, 9)
BoolTest
B8
ParallelMove rax <- C
DartReturn:56(v0)
B9
ParallelMove rax <- fp[-1]
v10 <- LoadField(v2 . controller) T{StreamController<X0>}
v58 <- LoadClassId(<non-smi> v10) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- fp[-2], rdx <- fp[-3]
DispatchTableCall( cid=v58 StreamController.addError<0>, v10, v3, v4)
ParallelMove rax <- C
DartReturn:64(v0)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- sp[2]
v9 <- LoadField(v2 T{_SuspendState} . SuspendState.function_data) T{*?}
ParallelMove rax <- rax
StoreField(v9 T{_SyncStarIterable} . _stateAtStart@4048458 = v2 T{_SuspendState})
ParallelMove rax <- rcx
DartReturn:14(v9 T{Object})
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . ArgumentsDescriptor.type_args_len {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare:4(===, v3, v4) goto (2, 3)
B2
ParallelMove rdx <- C goto:14 B5
B3
v5 <- LoadField(v2 . ArgumentsDescriptor.size {final}) [0, 4611686018427387903] T{_Smi}
v6 <- LoadIndexedUnsafe(rbp[v5 + 16]) T{TypeArguments?}
ParallelMove rdx <- rcx goto:16 B5
B5
ParallelMove rdx <- rdx
v8 <- AllocateObject:24(cls=_SyncStarIterable, v7) T{_SyncStarIterable}
ParallelMove rax <- rax
DartReturn:28(v8)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[3]
v9 <- LoadField(v2 T{_SuspendState} . SuspendState.function_data) T{*?}
ParallelMove rdi <- rdi
StaticCall:12( close<0> v9 T{Object}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[3]
v13 <- LoadField(v2 T{_SuspendState} . SuspendState.function_data) T{*?}
ParallelMove fp[-1] <- rax
v5 <- LoadField(v13 T{Object} . asyncStarBody) T{((dynamic, Object?) => void)??}
Branch if StrictCompare:14(===, v5, v0) goto (3, 4)
B3
ParallelMove rdi <- rdi, rsi <- rax
StaticCall:20( _createAsyncStarCallback@4048458<0> v2, v13 T{Object}, using unchecked entrypoint)
ParallelMove rdi <- fp[-1]
v6 <- StaticCall:22( get:stream<0> v13 T{Object}, result_type = T{!null}) T{Stream<X0>}
ParallelMove rax <- rax
DartReturn:24(v6)
B4
ParallelMove rax <- C
DartReturn:28(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . controller) T{StreamController<X0>}
v29 <- LoadClassId(<non-smi> v3) int64
ParallelMove rcx <- rcx, rdi <- rdi
v4 <- DispatchTableCall( cid=v29 StreamController.stream<0>, v3) T{*?}
ParallelMove rsi <- rax, rbx <- fp[-1]
ParallelMove fp[-2] <- rsi
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rsi, rdx <- rdx, rcx <- C
v7 <- InstanceOf:14(v4 T{Stream<X0>} IS _StreamImpl@4048458<X0>, instantiator_type_args(v5), function_type_args(v0)) T{bool}
InlineInstanceof
UninstantiatedTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:18(===, v7 T{bool}, v8) goto (3, 4)
BoolTest
B3
ParallelMove rcx <- fp[-1]
v9 <- LoadField(v2 . asyncStarBody) T{((dynamic, Object?) => void)??}
CheckNull:26(v9, CastError) T{((dynamic, Object?) => void)?}
ParallelMove  goto:34 B5
B4
B5
ParallelMove rax <- fp[-2]
DartReturn:38(v4 T{Stream<X0>})
CheckStackOverflowSlowPath
slow path check null (cast) operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi, fp[-2] <- rsi
v4 <- AllocateContext:10(num_variables=1) T{Context}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v4 . suspendState = v2, NoStoreBarrier)
ParallelMove rbx <- C, rdx <- rcx
v6 <- AllocateClosure:12(v5, v4) T{_Closure}
ParallelMove rax <- rax, rcx <- fp[-2]
StoreField(v3 T{_AsyncStarStreamController} . asyncStarBody = v6 T{_Closure})
ParallelMove rax <- C
DartReturn:16(v0)
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[3]
v4 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v5 <- LoadField(v4 . suspendState {final}) T{_SuspendState}
MoveArgument(sp[3] <- v5)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v0)
MoveArgument(sp[0] <- v0)
StaticCall:10( _resume@4048458<0> v5, v3, v0, v0, using unchecked entrypoint, recognized_kind = SuspendState_resume)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . ArgumentsDescriptor.type_args_len {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare:4(===, v3, v4) goto (2, 3)
B2
ParallelMove rdx <- C goto:14 B5
B3
v5 <- LoadField(v2 . ArgumentsDescriptor.size {final}) [0, 4611686018427387903] T{_Smi}
v6 <- LoadIndexedUnsafe(rbp[v5 + 16]) T{TypeArguments?}
ParallelMove rdx <- rcx goto:16 B5
B5
CheckStackOverflow:22(stack=0, loop=0)
ParallelMove rdx <- rdx
v8 <- AllocateObject:24(cls=_AsyncStarStreamController, v7) T{_AsyncStarStreamController}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-1] <- rax
StaticCall:26( _AsyncStarStreamController@4048458.<0> v8)
ParallelMove rax <- fp[-1]
DartReturn:28(v8)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove rcx <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
StoreField(v2 . isAdding = v3, NoStoreBarrier)
StoreField(v2 . onListenReceived = v3, NoStoreBarrier)
StoreField(v2 . isScheduled = v3, NoStoreBarrier)
StoreField(v2 . isSuspendedAtYield = v3, NoStoreBarrier)
v4 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx
v18 <- AllocateObject:18(cls=_SyncStreamController, v4 T{TypeArguments}) T{_SyncStreamController}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-2] <- rcx
StoreField(v18 T{_SyncStreamController} . _state@4048458 = v51 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rcx, rsi <- fp[-1]
StoreField(v2 . controller = v18)
ParallelMove rbx <- C, rdx <- rsi
v24 <- AllocateClosure:6(v25 T{Function}, v2 T{_AsyncStarStreamController}) T{_Closure}
ParallelMove rdi <- fp[-2], rsi <- rax
v52 <- StaticCall:18( set:onListen<0> v18, v24) T{void?}
ParallelMove rax <- fp[-1]
v8 <- LoadField(v2 . controller) T{StreamController<X0>}
ParallelMove rbx <- C, rdx <- rax, fp[-2] <- rdi
v31 <- AllocateClosure:6(v32 T{Function}, v2 T{_AsyncStarStreamController}) T{_Closure}
ParallelMove rax <- rax, rdi <- fp[-2]
v53 <- LoadClassId(<non-smi> v8) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- rax
DispatchTableCall( cid=v53 StreamController.onResume=<0>, v8, v31)
ParallelMove rdx <- fp[-1]
v10 <- LoadField(v2 . controller) T{StreamController<X0>}
ParallelMove rbx <- C, rdx <- rdx, fp[-2] <- rdi
v38 <- AllocateClosure:6(v39 T{Function}, v2 T{_AsyncStarStreamController}) T{_Closure}
ParallelMove rax <- rax, rdi <- fp[-2]
v54 <- LoadClassId(<non-smi> v10) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- rax
DispatchTableCall( cid=v54 StreamController.onCancel=<0>, v10, v38)
ParallelMove rax <- C
DartReturn:32(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi
v5 <- StaticCall:10( onResume<0> v3 T{*}) T{*?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . isSuspendedAtYield) T{bool}
Branch if StrictCompare:14(===, v3 T{bool}, v4) goto (3, 4)
BoolTest
B3
ParallelMove rdi <- rdi
StaticCall:20( scheduleGenerator<0> v2, using unchecked entrypoint)
ParallelMove  goto:26 B5
B4
B5
ParallelMove rax <- C
DartReturn:30(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi
v5 <- StaticCall:10( onListen<0> v3 T{*}) T{*?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
CheckStackOverflow:8(stack=0, loop=0)
StoreField(v2 T{_AsyncStarStreamController} . onListenReceived = v3 T{bool})
ParallelMove rdi <- rdi
StaticCall:12( scheduleGenerator<0> v2, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[3]
v10 <- LoadClassId(v2) [44, 616] int64
Branch if EqualityCompare(v10 == v11) T{bool} goto (3, 4)
B3
v16 <- LoadField(v2 T{_SuspendState} . SuspendState.function_data) T{*?}
ParallelMove rax <- rcx goto:26 B5
B4
B5
ParallelMove rdi <- rax, rsi <- fp[2], fp[-1] <- rax
StaticCall:30( _completeWithValue@4048458<0> v7, v3)
ParallelMove rax <- fp[-1]
DartReturn:32(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[3]
v13 <- LoadClassId(v2) [44, 616] int64
Branch if EqualityCompare(v13 == v14) T{bool} goto (3, 4)
B3
v21 <- LoadField(v2 T{_SuspendState} . SuspendState.function_data) T{*?}
ParallelMove rax <- rcx goto:26 B5
B4
B5
ParallelMove fp[-1] <- rax
v15 <- LoadClassId(v3) [1, 617] int64
Branch if EqualityCompare(v15 == v16) T{bool} goto (6, 7)
B6
ParallelMove rdi <- rax, rsi <- rsi
StaticCall:40( _asyncCompleteUnchecked@4048458<0> v7, v3 T{_Future}, using unchecked entrypoint)
ParallelMove  goto:48 B8
B7
ParallelMove rdi <- fp[-1], rsi <- rsi
StaticCall:44( _completeWithValue@4048458<0> v7, v3)
ParallelMove  goto:50 B8
B8
ParallelMove rax <- fp[-1]
DartReturn:52(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- rbx, rdx <- rdx, rcx <- C
v6 <- InstanceOf:10(v3 IS Future<X0>, instantiator_type_args(v4), function_type_args(v0)) T{bool}
InlineInstanceof
UninstantiatedTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:14(===, v6, v7) goto (3, 4)
BoolTest
B3
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
StaticCall:20( _chainFuture@4048458<0> v2, v3 T{_Future}, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:22(v0)
B4
ParallelMove rdi <- fp[-1], rsi <- fp[-2]
StaticCall:26( _asyncCompleteWithValue@4048458<0> v2, v3, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:28(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v5 <- LoadField(v4 . ArgumentsDescriptor.type_args_len {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare:4(===, v5, v6) goto (2, 3)
B2
ParallelMove rcx <- C goto:14 B5
B3
v7 <- LoadField(v4 . ArgumentsDescriptor.size {final}) [0, 4611686018427387903] T{_Smi}
v8 <- LoadIndexedUnsafe(rbp[v7 + 16]) T{TypeArguments?}
ParallelMove rcx <- rcx goto:16 B5
B5
ParallelMove fp[-1] <- rcx
CheckStackOverflow:22(stack=0, loop=0)
v108 <- LoadField(v2 T{_SuspendState} . SuspendState.then_callback) T{_Closure?}
Branch if StrictCompare:26(===, v108, v0) goto (6, 7)
B6
ParallelMove rdi <- rax
StaticCall:32( _createAsyncCallbacks@4048458<0> v2, using unchecked entrypoint)
ParallelMove  goto:38 B8
B7
B8
ParallelMove rax <- fp[2], rdx <- C, rcx <- fp[-1]
v12 <- InstanceOf:42(v3 IS Future<Y0>, instantiator_type_args(v0), function_type_args(v9)) T{bool}
InlineInstanceof
UninstantiatedTypeTest
BoolTest
ParallelMove rax <- rax
Branch if StrictCompare:46(===, v12 T{bool}, v13) goto (10, 16)
BoolTest
B10
ParallelMove rcx <- fp[2], rax <- C
v94 <- LoadField(v3 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v175 <- IntConverter(int64->uint32[tr], v94) uint32
ParallelMove rdx <- rdx
v98 <- BinaryUint32Op(& [tr], v175 T{int}, v179 T{_Smi}) [0, 24] uint32
ParallelMove rdx <- rdx
v176 <- IntConverter(uint32->int64, v98) int64
Branch if EqualityCompare(v176 T{_Smi} != v153 T{_Smi}) T{bool} goto (11, 12)
B11
ParallelMove rax <- fp[3]
v71 <- AllocateContext:10(num_variables=3) T{Context}
ParallelMove rcx <- rax, rax <- fp[3]
ParallelMove fp[-1] <- rcx
StoreField(v71 . this = v2 T{_SuspendState}, NoStoreBarrier)
ParallelMove rdx <- fp[2]
StoreField(v71 . future = v3 T{_Future}, NoStoreBarrier)
v119 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rax <- rax, rdx <- fp[-1]
StoreField(v71 . zone = v119, NoStoreBarrier)
v73 <- LoadField(v71 . future) T{_Future}
v124 <- LoadField(v73 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v177 <- IntConverter(int64->uint32[tr], v124) uint32
ParallelMove rbx <- C
ParallelMove rcx <- rcx
v126 <- BinaryUint32Op(& [tr], v177 T{int}, v180 T{_Smi}) [0, 16] uint32
ParallelMove rcx <- rcx
v178 <- IntConverter(uint32->int64, v126) int64
Branch if EqualityCompare(v178 T{_Smi} != v153 T{_Smi}) T{bool} goto (30, 31)
B30
v83 <- LoadField(v73 T{_Future} . _zone@4048458 {final}) T{_RootZone}
ParallelMove rbx <- C, rdx <- rdx, fp[-2] <- rdi
v81 <- AllocateClosure:24(v89 T{Function}, v71) T{_Closure}
ParallelMove rdi <- fp[-2], rsi <- rax
StaticCall:28( scheduleMicrotask<0> v83, v81, using unchecked entrypoint)
ParallelMove  goto:40 B32
B31
v79 <- LoadField(v73 T{_Future} . _zone@4048458 {final}) T{_RootZone}
ParallelMove rbx <- C, rdx <- rdx, fp[-2] <- rdi
v77 <- AllocateClosure:32(v88 T{Function}, v71) T{_Closure}
ParallelMove rdi <- fp[-2], rsi <- rax
StaticCall:36( scheduleMicrotask<0> v79, v77, using unchecked entrypoint)
ParallelMove  goto:42 B32
B32
B12
ParallelMove rax <- fp[3], rdx <- rcx
v59 <- LoadField(v2 T{_SuspendState} . SuspendState.then_callback) T{_Closure?}
v64 <- LoadField(v2 T{_SuspendState} . SuspendState.error_callback) T{_Closure?}
MoveArgument(sp[3] <- v0)
MoveArgument(sp[2] <- v3 T{_Future})
MoveArgument(sp[1] <- v59)
MoveArgument(sp[0] <- v64)
StaticCall:80( _thenAwait@4048458<1> v0, v3 T{_Future}, v59, v64, using unchecked entrypoint)
ParallelMove  goto:86 B15
B15
B16
ParallelMove rax <- fp[3], rdx <- fp[2]
v37 <- AllocateContext:10(num_variables=3) T{Context}
ParallelMove rcx <- rax, rax <- fp[3]
ParallelMove fp[-1] <- rcx
StoreField(v37 . this = v2 T{_SuspendState}, NoStoreBarrier)
ParallelMove rdx <- fp[2]
StoreField(v37 . object = v3 T{Object??}, NoStoreBarrier)
v111 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rax <- rax, rdx <- fp[-1]
ParallelMove fp[-2] <- rax
StoreField(v37 . zone = v111, NoStoreBarrier)
ParallelMove rbx <- C, rdx <- rdx
v40 <- AllocateClosure:14(v42 T{Function}, v37) T{_Closure}
ParallelMove rdi <- fp[-2], rsi <- rax
StaticCall:16( scheduleMicrotask<0> v111, v40, using unchecked entrypoint)
ParallelMove  goto:106 B17
B17
v30 <- LoadField(v2 T{_SuspendState} . SuspendState.function_data) T{*?}
ParallelMove rax <- rax
DartReturn:110(v30 T{Object})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v6 <- LoadField(v5 . ArgumentsDescriptor.type_args_len {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare:4(===, v6, v7) goto (2, 3)
B2
ParallelMove rbx <- C goto:14 B5
B3
v8 <- LoadField(v5 . ArgumentsDescriptor.size {final}) [0, 4611686018427387903] T{_Smi}
v9 <- LoadIndexedUnsafe(rbp[v8 + 16]) T{TypeArguments?}
ParallelMove rbx <- rcx goto:16 B5
B5
ParallelMove fp[-1] <- rbx
CheckStackOverflow:22(stack=0, loop=0)
ParallelMove rdx <- rbx
v11 <- AllocateObject:24(cls=_Future, v10) T{_Future}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-2] <- rcx
StoreField(v11 T{_Future} . _state@4048458 = v41 T{_Smi} <int64>, NoStoreBarrier)
v36 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rcx <- rax, rax <- fp[-2]
StoreField(v11 T{_Future} . _zone@4048458 = v36, NoStoreBarrier)
ParallelMove rdi <- fp[4]
v12 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rdx <- rdx, rcx <- fp[-1], rbx <- C
v14 <- InstantiateTypeArguments:28(v13, instantiator_type_args(v12), function_type_args(v10), instantiator_class(Library:'dart:async' Class: _Future@4048458)) T{*?}
ParallelMove rdx <- rax
v15 <- AllocateObject:30(cls=_FutureListener, v14) T{_FutureListener}
ParallelMove rcx <- rax, rax <- fp[-2]
StoreField(v15 T{_FutureListener} . result = v11 T{_Future}, NoStoreBarrier)
ParallelMove rdx <- fp[3]
StoreField(v15 T{_FutureListener} . callback = v3 T{_Closure}, NoStoreBarrier)
ParallelMove rdx <- fp[2]
StoreField(v15 T{_FutureListener} . errorCallback = v4 T{_Closure}, NoStoreBarrier)
ParallelMove rdx <- C
StoreField(v15 T{_FutureListener} . state = v42 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rdi <- fp[4], rsi <- rcx
StaticCall:34( _addListener@4048458<0> v2, v15, using unchecked entrypoint)
ParallelMove rax <- fp[-2]
DartReturn:36(v11)
CheckStackOverflowSlowPath
B0
B14
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- AllocateContext:10(num_variables=1) T{Context}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-2] <- rcx
StoreField(v3 . suspendState = v2, NoStoreBarrier)
v83 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rbx <- C, rdx <- fp[-2]
v5 <- AllocateClosure:12(v4, v3) T{_Closure}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v2 T{_SuspendState} . SuspendState.then_callback = v5 T{_Closure})
ParallelMove rbx <- C, rdx <- fp[-2]
v7 <- AllocateClosure:14(v6, v3) T{_Closure}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v2 T{_SuspendState} . SuspendState.error_callback = v7 T{_Closure})
ParallelMove rax <- C
DartReturn:94(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[4]
v5 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v6 <- LoadField(v5 . suspendState {final}) T{_SuspendState}
MoveArgument(sp[3] <- v6)
MoveArgument(sp[2] <- v0)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v4)
StaticCall:10( _resume@4048458<0> v6, v0, v3, v4, using unchecked entrypoint, recognized_kind = SuspendState_resume)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v5 <- LoadField(v3 . zone {final}) T{_RootZone}
v6 <- LoadField(v3 . this) T{_SuspendState}
v13 <- LoadField(v6 T{_SuspendState} . SuspendState.then_callback) T{_Closure?}
v8 <- LoadField(v3 . object) T{Object??}
MoveArgument(sp[3] <- v4)
MoveArgument(sp[2] <- v5)
MoveArgument(sp[1] <- v13)
MoveArgument(sp[0] <- v8)
StaticCall:12( runUnary<2> v4, v5, v13, v8, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v3 . zone {final}) T{_RootZone}
v5 <- LoadField(v3 . this) T{_SuspendState}
v13 <- LoadField(v5 T{_SuspendState} . SuspendState.then_callback) T{_Closure?}
v7 <- LoadField(v3 . future) T{_Future}
v8 <- LoadField(v7 . _resultOrListeners@4048458) T{*?}
MoveArgument(sp[3] <- v0)
MoveArgument(sp[2] <- v4)
MoveArgument(sp[1] <- v13)
MoveArgument(sp[0] <- v8)
StaticCall:14( runUnary<2> v0, v4, v13, v8, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.context {final}) T{*}
ParallelMove fp[-3] <- rcx
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v3 . future) T{_Future}
v5 <- LoadField(v4 . _resultOrListeners@4048458) T{*?}
ParallelMove fp[-2] <- rdx
v7 <- LoadField(v4 T{_Future} . _zone@4048458 {final}) T{_RootZone}
v8 <- LoadField(v3 . zone {final}) T{_RootZone}
ParallelMove rdi <- rdi, rsi <- rax, fp[-1] <- rax
v9 <- StaticCall:14( inSameErrorZone<0> v7, v8, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:18(!==, v9 T{bool}, v10) goto (3, 4)
BoolTest
B3
ParallelMove rax <- fp[-2]
v19 <- LoadField(v5 . error {final}) T{Object}
v20 <- LoadField(v5 . stackTrace {final}) T{StackTrace}
ParallelMove rdi <- rdi, rsi <- rsi
StaticCall:10( _rootHandleError@4048458<0> v19 T{Object}, v20 T{StackTrace})
ParallelMove  goto:44 B5
B4
ParallelMove rcx <- fp[-3], rax <- fp[-2]
v13 <- LoadField(v3 . this) T{_SuspendState}
v25 <- LoadField(v13 T{_SuspendState} . SuspendState.error_callback) T{_Closure?}
v15 <- LoadField(v5 . error {final}) T{Object}
v16 <- LoadField(v5 . stackTrace {final}) T{StackTrace}
MoveArgument(sp[4] <- v11)
MoveArgument(sp[3] <- v8 T{_RootZone})
MoveArgument(sp[2] <- v25)
MoveArgument(sp[1] <- v15)
MoveArgument(sp[0] <- v16)
StaticCall:40( runBinary<3> v11, v8 T{_RootZone}, v25, v15, v16, using unchecked entrypoint)
ParallelMove  goto:46 B5
B5
ParallelMove rax <- C
DartReturn:48(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[3]
v104 <- LoadField(v2 T{_SuspendState} . SuspendState.then_callback) T{_Closure?}
Branch if StrictCompare:12(===, v104, v0) goto (3, 4)
B3
ParallelMove rdi <- rax
StaticCall:18( _createAsyncCallbacks@4048458<0> v2, using unchecked entrypoint)
ParallelMove  goto:24 B5
B4
B5
v17 <- LoadClassId(v3) [1, 617] int64
Branch if EqualityCompare(v17 == v18) T{bool} goto (6, 10)
B6
ParallelMove rcx <- C
v89 <- LoadField(v3 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v166 <- IntConverter(int64->uint32[tr], v89) uint32
ParallelMove rdx <- rdx
v93 <- BinaryUint32Op(& [tr], v166 T{int}, v170 T{_Smi}) [0, 24] uint32
ParallelMove rdx <- rdx
v167 <- IntConverter(uint32->int64, v93) int64
Branch if EqualityCompare(v167 T{_Smi} != v147 T{_Smi}) T{bool} goto (7, 8)
B7
ParallelMove rcx <- fp[3]
v66 <- AllocateContext:10(num_variables=3) T{Context}
ParallelMove rcx <- rax, rax <- fp[3]
ParallelMove fp[-1] <- rcx
StoreField(v66 . this = v2 T{_SuspendState}, NoStoreBarrier)
ParallelMove rdx <- fp[2]
StoreField(v66 . future = v3 T{_Future}, NoStoreBarrier)
v115 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rax <- rax, rdx <- fp[-1]
StoreField(v66 . zone = v115, NoStoreBarrier)
v68 <- LoadField(v66 . future) T{_Future}
v120 <- LoadField(v68 T{_Future} . _state@4048458) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v168 <- IntConverter(int64->uint32[tr], v120) uint32
ParallelMove rbx <- C
ParallelMove rcx <- rcx
v122 <- BinaryUint32Op(& [tr], v168 T{int}, v171 T{_Smi}) [0, 16] uint32
ParallelMove rcx <- rcx
v169 <- IntConverter(uint32->int64, v122) int64
Branch if EqualityCompare(v169 T{_Smi} != v147 T{_Smi}) T{bool} goto (27, 28)
B27
v78 <- LoadField(v68 T{_Future} . _zone@4048458 {final}) T{_RootZone}
ParallelMove rbx <- C, rdx <- rdx, fp[-2] <- rdi
v76 <- AllocateClosure:24(v84 T{Function}, v66) T{_Closure}
ParallelMove rdi <- fp[-2], rsi <- rax
StaticCall:28( scheduleMicrotask<0> v78, v76, using unchecked entrypoint)
ParallelMove  goto:40 B29
B28
v74 <- LoadField(v68 T{_Future} . _zone@4048458 {final}) T{_RootZone}
ParallelMove rbx <- C, rdx <- rdx, fp[-2] <- rdi
v72 <- AllocateClosure:32(v83 T{Function}, v66) T{_Closure}
ParallelMove rdi <- fp[-2], rsi <- rax
StaticCall:36( scheduleMicrotask<0> v74, v72, using unchecked entrypoint)
ParallelMove  goto:42 B29
B29
B8
ParallelMove rax <- fp[3], rdx <- rax
v54 <- LoadField(v2 T{_SuspendState} . SuspendState.then_callback) T{_Closure?}
v59 <- LoadField(v2 T{_SuspendState} . SuspendState.error_callback) T{_Closure?}
MoveArgument(sp[3] <- v0)
MoveArgument(sp[2] <- v3 T{_Future})
MoveArgument(sp[1] <- v54)
MoveArgument(sp[0] <- v59)
StaticCall:56( _thenAwait@4048458<1> v0, v3 T{_Future}, v54, v59, using unchecked entrypoint)
ParallelMove  goto:62 B9
B9
B10
ParallelMove rdx <- rax
Branch if EqualityCompare(v17 T{_Smi} != v18) T{bool} goto (11, 12)
B11
ParallelMove rax <- fp[3]
v44 <- AllocateContext:10(num_variables=3) T{Context}
ParallelMove rcx <- rax, rax <- fp[3]
ParallelMove fp[-1] <- rcx
StoreField(v44 . this = v2 T{_SuspendState}, NoStoreBarrier)
ParallelMove rdx <- fp[2]
StoreField(v44 . object = v3 T{Object??}, NoStoreBarrier)
v112 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rax <- rax, rdx <- fp[-1]
ParallelMove fp[-2] <- rax
StoreField(v44 . zone = v112, NoStoreBarrier)
ParallelMove rbx <- C, rdx <- rdx
v47 <- AllocateClosure:14(v49 T{Function}, v44) T{_Closure}
ParallelMove rdi <- fp[-2], rsi <- rax
StaticCall:16( scheduleMicrotask<0> v112, v47, using unchecked entrypoint)
ParallelMove  goto:84 B13
B12
ParallelMove rax <- fp[3]
v32 <- AllocateContext:10(num_variables=1) T{Context}
ParallelMove rcx <- rax, rax <- fp[3]
StoreField(v32 . this = v2 T{_SuspendState}, NoStoreBarrier)
ParallelMove rbx <- C, rdx <- rcx
v34 <- AllocateClosure:12(v37 T{Function}, v32) T{_Closure}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v34)
MoveArgument(sp[0] <- v3 T{_Future})
v35 <- StaticCall:14( _instantiateClosureWithFutureTypeArgument@4048458<0> v34, v3 T{_Future}, result_type = T{!null}) T{_Closure}
ParallelMove rcx <- rax, rax <- fp[3]
v109 <- LoadField(v2 T{_SuspendState} . SuspendState.error_callback) T{_Closure?}
MoveArgument(sp[3] <- v0 T{Null?})
MoveArgument(sp[2] <- v3 T{_Future})
MoveArgument(sp[1] <- v35)
MoveArgument(sp[0] <- v109)
StaticCall:18( then<1> v0 T{Null?}, v3 T{_Future}, v35, v109, using unchecked entrypoint)
ParallelMove  goto:86 B13
B13
B14
v25 <- LoadField(v2 T{_SuspendState} . SuspendState.function_data) T{*?}
ParallelMove rax <- rax
DartReturn:96(v25 T{Object})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(SuspendState_instantiateClosureWithFutureTypeArgument) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{_Closure}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{_Closure})
B0
B8
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[3]
v5 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:36(stack=0, loop=0)
v13 <- LoadField(v5 . this) T{_SuspendState}
v21 <- LoadField(v13 T{_SuspendState} . SuspendState.then_callback) T{_Closure?}
CheckNull:40(v21, NoSuchMethodError) T{_Closure}
MoveArgument(sp[1] <- v21 T{_Closure})
MoveArgument(sp[0] <- v3)
ParallelMove rax <- rcx
v15 <- ClosureCall:42( closure=v21 T{_Closure}<0>, v21 T{_Closure}, v3) T{*?}
ParallelMove rax <- rax
DartReturn:44(v15)
CheckStackOverflowSlowPath
slow path check null (nsm) operation
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . ArgumentsDescriptor.type_args_len {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare:4(===, v3, v4) goto (2, 3)
B2
ParallelMove rdx <- C goto:14 B5
B3
v5 <- LoadField(v2 . ArgumentsDescriptor.size {final}) [0, 4611686018427387903] T{_Smi}
v6 <- LoadIndexedUnsafe(rbp[v5 + 16]) T{TypeArguments?}
ParallelMove rdx <- rcx goto:16 B5
B5
CheckStackOverflow:22(stack=0, loop=0)
ParallelMove rdx <- rdx
v8 <- AllocateObject:24(cls=_Future, v7, <not-aliased>) T{_Future}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-1] <- rcx
StoreField(v8 T{_Future} . _state@4048458 = v21 T{_Smi} <int64>, NoStoreBarrier)
v17 <- LoadStaticField:4(_current@4048458, CallsInitializer) T{_RootZone}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v8 T{_Future} . _zone@4048458 = v17, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:28(v8)
CheckStackOverflowSlowPath
B0
B8
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rbx <- fp[3]
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- fp[2], rdx <- rdx, rcx <- C
t0 <- AssertAssignable:10(v3, v4, 'stream', instantiator_type_args(v5), function_type_args(v0)) T{Stream<X0>}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[3]
v8 <- LoadField(v2 . onListenReceived) T{bool}
Branch if StrictCompare:18(!==, v8 T{bool}, v9) goto (3, 4)
BoolTest
B3
MoveArgument(sp[0] <- v18)
StaticCall:24( _fatal@4048458<0> v18)
ParallelMove  goto:30 B5
B4
B5
v10 <- LoadField(v2 . controller) T{StreamController<X0>}
v41 <- LoadClassId(<non-smi> v10) int64
ParallelMove rcx <- rcx, rdi <- rdi
v11 <- DispatchTableCall( cid=v41 StreamController.hasListener<0>, v10) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:40(!==, v11 T{bool}, v9) goto (6, 7)
BoolTest
B6
ParallelMove rax <- C
DartReturn:46(v9)
B7
ParallelMove rax <- fp[3], rcx <- C
StoreField(v2 T{_AsyncStarStreamController} . isAdding = v9 T{bool})
v12 <- LoadField(v2 . controller) T{StreamController<X0>}
v42 <- LoadClassId(<non-smi> v12) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- fp[2], rdx <- C
v14 <- DispatchTableCall( cid=v42 StreamController.addStream<0>, v12, v3 T{Stream<X0>}, v13) T{_Future}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v7 <- AllocateContext:12(num_variables=1) T{Context}
ParallelMove rcx <- rax, rax <- fp[3]
StoreField(v7 . self = v2, NoStoreBarrier)
ParallelMove rbx <- C, rdx <- rcx
v17 <- AllocateClosure:56(v16, v7) T{_Closure}
ParallelMove rax <- rax
MoveArgument(sp[2] <- v15)
MoveArgument(sp[1] <- v14 T{_Future})
MoveArgument(sp[0] <- v17)
StaticCall:58( then<1> v15, v14 T{_Future}, v17, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:60(v13)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(DartAsync_fatal) T{*?}
ParallelMove rax <- rax
DartReturn:8(v3)
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove rcx <- fp[3]
v4 <- LoadField(v2 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v5 <- LoadField(v4 . self {final}) T{_AsyncStarStreamController}
ParallelMove fp[-1] <- rcx
StoreField(v5 T{_AsyncStarStreamController} . isAdding = v6 T{bool})
ParallelMove rdi <- rcx
StaticCall:12( scheduleGenerator<0> v5 T{_AsyncStarStreamController}, using unchecked entrypoint)
ParallelMove rcx <- fp[-1]
v9 <- LoadField(v5 T{_AsyncStarStreamController} . isScheduled) T{bool}
Branch if StrictCompare:18(!==, v9 T{bool}, v10) goto (3, 4)
BoolTest
B3
ParallelMove rdx <- C
StoreField(v5 T{_AsyncStarStreamController} . isSuspendedAtYield = v10 T{bool})
ParallelMove  goto:30 B5
B4
B5
ParallelMove rax <- C
DartReturn:34(v0)
CheckStackOverflowSlowPath
B0
B11
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[3]
v5 <- LoadField(v2 . :type_arguments {final}) T{TypeArguments}
ParallelMove rax <- fp[2], rdx <- rdx, rcx <- C
t0 <- AssertAssignable:10(v3, v4, 'event', instantiator_type_args(v5), function_type_args(v0)) T{X0?}
AssertAssignable for compile-time type
TTSCall
ParallelMove rdi <- fp[3]
v7 <- LoadField(v2 . onListenReceived) T{bool}
Branch if StrictCompare:16(!==, v7 T{bool}, v8) goto (3, 4)
BoolTest
B3
MoveArgument(sp[0] <- v15)
StaticCall:22( _fatal@4048458<0> v15)
ParallelMove  goto:28 B5
B4
B5
v9 <- LoadField(v2 . isSuspendedAtYield) T{bool}
Branch if StrictCompare:36(===, v9 T{bool}, v8) goto (6, 7)
BoolTest
B6
MoveArgument(sp[0] <- v14)
StaticCall:42( _fatal@4048458<0> v14)
ParallelMove  goto:48 B8
B7
B8
v10 <- LoadField(v2 . controller) T{StreamController<X0>}
v46 <- LoadClassId(<non-smi> v10) int64
ParallelMove rcx <- rcx, rdi <- rdi, rsi <- fp[2]
DispatchTableCall( cid=v46 StreamController.add<0>, v10, v3 T{X0?})
ParallelMove rax <- fp[3]
v11 <- LoadField(v2 . controller) T{StreamController<X0>}
v47 <- LoadClassId(<non-smi> v11) int64
ParallelMove rcx <- rcx, rdi <- rdi
v12 <- DispatchTableCall( cid=v47 StreamController.hasListener<0>, v11) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:62(!==, v12 T{bool}, v8) goto (9, 10)
BoolTest
B9
ParallelMove rax <- C
DartReturn:68(v8)
B10
ParallelMove rax <- fp[3]
ParallelMove rdi <- rax
StaticCall:72( scheduleGenerator<0> v2, using unchecked entrypoint)
ParallelMove rcx <- fp[3], rdx <- C
StoreField(v2 T{_AsyncStarStreamController} . isSuspendedAtYield = v8 T{bool})
ParallelMove rax <- C
DartReturn:76(v13)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- C
StoreStaticField(_setupCompleted@16225868, v2)
ParallelMove rax <- C
DartReturn:10(v0)
B0
B4
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v25 <- LoadStaticField:4(_workingDirectory@16225868, CallsInitializer) T{_Uri}
ParallelMove rdi <- fp[2]
v5 <- StaticCall:28( _sanitizeWindowsPath@16225868<0> v2, result_type = T{!null}) T{*}
ParallelMove rdi <- rax
v6 <- StaticCall:30( parse<0> v5, result_type = T{!null}) T{Uri}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v34 <- LoadClassId(<non-smi> v6) int64
ParallelMove rcx <- rcx, rdi <- rax
v7 <- DispatchTableCall( cid=v34 Uri.hasScheme<0>, v6) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:36(!==, v7 T{bool}, v4) goto (5, 6)
BoolTest
B5
v22 <- LoadStaticField:4(_workingDirectory@16225868) T{_Uri}
ParallelMove rdi <- rdi, rsi <- fp[-1]
v17 <- StaticCall:44( resolveUri<0> v22, v6, using unchecked entrypoint, result_type = T{!null}) T{Uri}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:50 B9
B6
ParallelMove rcx <- fp[-1] goto:52 B9
B9
ParallelMove rax <- rcx
StoreStaticField(_rootScript@16225868, v8)
v35 <- LoadClassId(<non-smi> v8) int64
MoveArgument(sp[0] <- v8)
ParallelMove rcx <- rax
v9 <- DispatchTableCall( cid=v35 Uri.toString<0>, v8) T{String}
ParallelMove rax <- rax
DartReturn:74(v9 T{String})
CheckStackOverflowSlowPath
slow path late initialization error operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-3] <- rdi
v5 <- LoadField(v3 . ArgumentsDescriptor.count {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rcx <- rcx
v7 <- BinarySmiOp:4(- [tr], v5, v6) [-1, 4611686018427387902] T{_Smi}
Branch if RelationalOp:6(<=, v6, v7) T{bool} goto (2, 3)
B2
Branch if RelationalOp:20(<=, v20, v7 T{_Smi}) T{bool} goto (5, 6)
B5
B6
B3
B4
B8
CheckStackOverflow:42(stack=0, loop=0)
v526 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove fp[-2] <- rcx
ParallelMove rsi <- rcx
v780 <- UnboxInt64([non-speculative], v526 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-1] <- rsi
Branch if RelationalOp(>=, v780 T{_Smi}, v532) T{bool} goto (9, 20)
B9
ParallelMove rdi <- rax
v369 <- StaticCall:58( _startsWithData@0150898<0> v2, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
Branch if EqualityCompare(v369 == v871 T{_Smi}) T{bool} goto (11, 17)
B11
ParallelMove rsi <- fp[-1]
Branch if RelationalOp(<, v780 T{_Smi}, v780 T{_Smi}) T{bool} goto (12, 15)
B12
MoveArgument(sp[0] <- v526 T{_Smi})
ParallelMove rdi <- fp[-3], rsi <- C
v383 <- StaticCall:100( substring<0> v2, v871 T{_Smi}, v526 T{_Smi}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rdi <- rax goto:106 B16
B15
ParallelMove rdi <- fp[-3] goto:108 B16
B16
ParallelMove rdi <- rdi, rsi <- C, rdx <- C
v381 <- StaticCall:110( _parse@0150898<0> v380, v532 T{_Smi}, v0, result_type = T{UriData}) T{UriData}
ParallelMove rdi <- rax
v382 <- StaticCall:112( get:uri<0> v381, result_type = T{!null}) T{Uri}
ParallelMove rax <- rax
DartReturn:114(v382)
B17
ParallelMove rsi <- fp[-1]
Branch if EqualityCompare(v369 == v872 T{_Smi}) T{bool} goto (18, 19)
B18
MoveArgument(sp[0] <- v526 T{_Smi})
ParallelMove rdi <- fp[-3], rsi <- C
v374 <- StaticCall:130( substring<0> v2, v532, v526 T{_Smi}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdi <- rax, rsi <- C, rdx <- C
v375 <- StaticCall:132( _parse@0150898<0> v374, v871 T{_Smi}, v0, result_type = T{UriData}) T{UriData}
ParallelMove rdi <- rax
v376 <- StaticCall:134( get:uri<0> v375, result_type = T{!null}) T{Uri}
ParallelMove rax <- rax
DartReturn:136(v376)
B19
B20
B21
ParallelMove rbx <- C, r10 <- C
v505 <- CreateArray:10(v16 T{TypeArguments}, v17 T{_Smi}) T{_List}
ParallelMove rax <- rax
ParallelMove fp[-4] <- rax
ParallelMove rcx <- C goto:38 B187
B187
  Loop 0
CheckStackOverflow:42(stack=0, loop=1)
Branch if RelationalOp(<, v499, v873 T{_Smi}) T{bool} goto (185, 189)
B185
  Loop 0
StoreIndexed:34([_List] v505, v499 T{int}, v10, NoStoreBarrier)
ParallelMove rcx <- rcx
v504 <- BinaryInt64Op(+ [tr], v499 T{int}, v536 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx goto:40 B187
B189
ParallelMove rcx <- fp[-2]
StoreIndexed:150([_List] v505 T{_List}, v10 T{_Smi}, v10, NoStoreBarrier)
StoreIndexed:154([_List] v505 T{_List}, v6 T{_Smi}, v875 T{_Smi}, NoStoreBarrier)
StoreIndexed:158([_List] v505 T{_List}, v20 T{_Smi}, v875 T{_Smi}, NoStoreBarrier)
StoreIndexed:162([_List] v505 T{_List}, v22 T{_Smi}, v875 T{_Smi}, NoStoreBarrier)
StoreIndexed:164([_List] v505 T{_List}, v24 T{_Smi}, v10, NoStoreBarrier)
StoreIndexed:166([_List] v505 T{_List}, v25 T{_Smi}, v10, NoStoreBarrier)
StoreIndexed:168([_List] v505 T{_List}, v12 T{_Smi}, v526 T{_Smi}, NoStoreBarrier)
StoreIndexed:170([_List] v505 T{_List}, v26 T{_Smi}, v526 T{_Smi}, NoStoreBarrier)
ParallelMove rdi <- fp[-3], rsi <- fp[-1], rdx <- C, rbx <- rax
v27 <- StaticCall:172( _scan@0150898<0> v2, v780 T{_Smi}, v871 T{_Smi}, v505 T{_List}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
Branch if RelationalOp(>=, v27, v876 T{_Smi}) T{bool} goto (22, 23)
B22
ParallelMove rax <- fp[-4], rcx <- fp[-2]
StoreIndexed:184([_List] v505 T{_List}, v22 T{_Smi}, v526 T{_Smi}, NoStoreBarrier)
ParallelMove  goto:190 B24
B23
ParallelMove rax <- fp[-4], rcx <- fp[-2]
ParallelMove  goto:192 B24
B24
v407 <- LoadIndexed:194([_List] v505 T{_List}, v6 T{_Smi}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove fp[-6] <- r8
ParallelMove r9 <- r8
v801 <- UnboxInt64([non-speculative], v407) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-5] <- r9
Branch if RelationalOp(>=, v801 T{int}, v871 T{_Smi}) T{bool} goto (25, 29)
B25
ParallelMove rdi <- fp[-3], rsi <- r9, rdx <- C, rbx <- rax
v367 <- StaticCall:206( _scan@0150898<0> v2, v801 T{int}, v877 T{_Smi}, v505 T{_List}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
Branch if EqualityCompare(v367 == v877 T{_Smi}) T{bool} goto (26, 27)
B26
ParallelMove rdx <- fp[-4], rax <- fp[-6]
StoreIndexed:218([_List] v505 T{_List}, v22 T{_Smi}, v407)
ParallelMove  goto:224 B28
B27
B28
B29
B30
v412 <- LoadIndexed:236([_List] v505 T{_List}, v20 T{_Smi}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- rcx
v803 <- UnboxInt64([non-speculative], v412) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v33 <- BinaryInt64Op(+ [tr], v803 T{int}, v536 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-12] <- rcx
v415 <- LoadIndexed:240([_List] v505 T{_List}, v24 T{_Smi}) [-9223372036854775808, 9223372036854775807] T{int}
v418 <- LoadIndexed:242([_List] v505 T{_List}, v25 T{_Smi}) [-9223372036854775808, 9223372036854775807] T{int}
v421 <- LoadIndexed:244([_List] v505 T{_List}, v12 T{_Smi}) [-9223372036854775808, 9223372036854775807] T{int}
v424 <- LoadIndexed:246([_List] v505 T{_List}, v26 T{_Smi}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rsi <- rsi
v809 <- UnboxInt64([non-speculative], v421) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- rdi
v818 <- UnboxInt64([non-speculative], v424) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-11] <- r8
Branch if RelationalOp(<, v818 T{int}, v809 T{int}) T{bool} goto (31, 32)
B31
ParallelMove r9 <- r8 goto:262 B33
B32
ParallelMove r9 <- rsi goto:264 B33
B33
ParallelMove fp[-10] <- r9
ParallelMove rbx <- rbx
v807 <- UnboxInt64([non-speculative], v418) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v807 T{int}, v33) T{bool} goto (34, 35)
B34
ParallelMove r12 <- r9, r10 <- fp[-5] goto:300 B39
B35
ParallelMove r10 <- fp[-5]
Branch if RelationalOp(<=, v807 T{int}, v801 T{int}) T{bool} goto (36, 37)
B36
ParallelMove rbx <- r10
v43 <- BinaryInt64Op(+ [tr], v801 T{int}, v536 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx goto:294 B38
B37
B38
ParallelMove r12 <- rbx goto:302 B39
B39
ParallelMove fp[-9] <- r12
ParallelMove rdx <- rdx
v804 <- UnboxInt64([non-speculative], v415) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v804 T{int}, v33) T{bool} goto (40, 41)
B40
ParallelMove rdx <- r12 goto:318 B42
B41
B42
ParallelMove fp[-8] <- rdx
v427 <- LoadIndexed:322([_List] v505 T{_List}, v22 T{_Smi}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rbx <- rbx
v839 <- UnboxInt64([non-speculative], v427) [-9223372036854775808, 9223372036854775807] int64
v48 <- RelationalOp(<, v839 T{int}, v871 T{_Smi}) T{bool}
ParallelMove fp[-7] <- r13
Branch if StrictCompare:328(===, v48, v9) goto (43, 136)
BoolTest
B43
ParallelMove rax <- r10
v81 <- BinaryInt64Op(+ [tr], v801 T{int}, v538 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v33, v81) T{bool} goto (44, 45)
B44
ParallelMove r10 <- fp[-3], r9 <- C, r8 <- fp[-1], rdi <- C, rsi <- rcx, rbx <- rdx, rdx <- r12, rcx <- r9, rax <- r8 goto:1044 B135
B45
v83 <- RelationalOp(>, v46, v871 T{_Smi}) T{bool}
ParallelMove fp[-4] <- rsi
Branch if StrictCompare:352(===, v83, v9) goto (46, 49)
BoolTest
B46
ParallelMove rax <- rdx
v351 <- BinaryInt64Op(+ [tr], v46, v536 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v351 == v44) T{bool} goto (47, 50)
B47
ParallelMove r10 <- fp[-3], r9 <- C, r8 <- fp[-1], rdi <- C, rsi <- rcx, rbx <- rdx, rdx <- r12, rcx <- r9, rax <- r8 goto:1038 B134
B50
B49
B48
v836 <- BoxInt64(v44) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
ParallelMove fp[-6] <- rax
MoveArgument(sp[0] <- v836 T{int})
ParallelMove rdi <- fp[-3], rsi <- C, rbx <- rsi
v85 <- StaticCall:380( startsWith<0> v2, v84, v836 T{int}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:384(===, v85 T{bool}, v9) goto (55, 53)
BoolTest
B55
B53
ParallelMove rcx <- fp[-12]
Branch if RelationalOp(>, v33, v871 T{_Smi}) T{bool} goto (52, 59)
B52
ParallelMove rdx <- rcx
v321 <- BinaryInt64Op(- [tr], v33, v536 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v840 <- BoxInt64(v321) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v840 T{int})
ParallelMove rdi <- fp[-3], rsi <- C
v322 <- StaticCall:398( startsWith<0> v2, v84, v840 T{int}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:402(===, v322 T{bool}, v9) goto (56, 51)
BoolTest
B56
B51
ParallelMove rcx <- fp[-12]
v323 <- BinaryInt64Op(- [tr], v33, v878 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v841 <- BoxInt64(v323) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v841 T{int})
ParallelMove rdi <- fp[-3], rsi <- C
v324 <- StaticCall:408( startsWith<0> v2, v84, v841 T{int}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:412(===, v324 T{bool}, v9) goto (57, 60)
BoolTest
B57
B54
ParallelMove r10 <- fp[-3], r9 <- C, r8 <- fp[-1], rdi <- C, rsi <- fp[-12], rbx <- fp[-8], rdx <- fp[-9], rcx <- fp[-10], rax <- fp[-11] goto:1032 B133
B60
B59
B58
Branch if RelationalOp(<, v39, v780 T{_Smi}) T{bool} goto (62, 65)
B62
ParallelMove rdx <- fp[-9]
v317 <- BinaryInt64Op(+ [tr], v44, v878 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v39 == v317) T{bool} goto (61, 66)
B61
MoveArgument(sp[0] <- v836 T{int})
ParallelMove rdi <- fp[-3], rsi <- C
v320 <- StaticCall:464( startsWith<0> v2, v319, v836 T{int}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:468(===, v320 T{bool}, v9) goto (69, 67)
BoolTest
B69
B67
B66
B65
B64
ParallelMove rax <- fp[-9]
v88 <- BinaryInt64Op(+ [tr], v44, v878 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>, v39, v88) T{bool} goto (63, 72)
B63
ParallelMove rdx <- rcx
v301 <- BinaryInt64Op(- [tr], v39, v538 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v842 <- BoxInt64(v301) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v842 T{int})
ParallelMove rdi <- fp[-3], rsi <- C
v302 <- StaticCall:488( startsWith<0> v2, v300, v842 T{int}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:492(===, v302 T{bool}, v9) goto (70, 73)
BoolTest
B70
B68
ParallelMove r10 <- fp[-3], r9 <- C, r8 <- fp[-1], rdi <- C, rsi <- fp[-12], rbx <- fp[-8], rdx <- fp[-9], rcx <- fp[-10], rax <- fp[-11] goto:1026 B132
B73
B72
B71
Branch if EqualityCompare(v801 T{int} == v534) T{bool} goto (74, 110)
B74
MoveArgument(sp[0] <- v10)
ParallelMove rdi <- fp[-3], rsi <- C
v165 <- StaticCall:544( startsWith<0> v2, v164, v10, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:548(===, v165 T{bool}, v9) goto (75, 91)
BoolTest
B75
ParallelMove rcx <- fp[-12]
Branch if RelationalOp(<=, v33, v871 T{_Smi}) T{bool} goto (76, 80)
B76
MoveArgument(sp[0] <- v836 T{int})
ParallelMove rdi <- fp[-3], rsi <- C
v288 <- StaticCall:564( startsWith<0> v2, v249, v836 T{int}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:568(!==, v288 T{bool}, v9) goto (77, 78)
BoolTest
B77
ParallelMove rcx <- C, rax <- C goto:578 B79
B78
ParallelMove rcx <- C, rax <- C goto:580 B79
B79
ParallelMove fp[-13] <- rcx, fp[-14] <- rax
MoveArgument(sp[0] <- v526 T{_Smi})
ParallelMove rdi <- fp[-3], rsi <- fp[-9]
v291 <- StaticCall:582( substring<0> v2, v44, v526 T{_Smi}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v289)
MoveArgument(sp[0] <- v291)
v292 <- StaticCall:584( +<0> v289, v291, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rcx <- rax, rax <- fp[-14]
ParallelMove rdx <- fp[-10]
v295 <- BinaryInt64Op(+ [tr], v39, v290) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- fp[-11]
v297 <- BinaryInt64Op(+ [tr], v818 T{int}, v290) [-9223372036854775808, 9223372036854775807] int64
v488 <- LoadField(v292 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rax <- rax
v843 <- UnboxInt64([non-speculative], v488 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove r8 <- rcx, rdi <- rbx, rsi <- rax, rbx <- rdx, rdx <- C, rcx <- C, rax <- C goto:692 B90
B80
ParallelMove r8 <- fp[-10], r9 <- fp[-9]
Branch if EqualityCompare(v44 == v39) T{bool} goto (87, 88)
B87
v830 <- BoxInt64(v39) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- fp[-3], rsi <- r9, rdx <- rax, rbx <- C
v272 <- StaticCall:632( replaceRange<0> v2, v44, v830 T{int}, v249, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- fp[-10]
v273 <- BinaryInt64Op(+ [tr], v39, v536 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-11]
v274 <- BinaryInt64Op(+ [tr], v818 T{int}, v536 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- fp[-1]
v275 <- BinaryInt64Op(+ [tr], v780 T{_Smi}, v536 T{_Smi}) [v780+1, v780+1] int64
ParallelMove rbx <- rax, rdx <- rdx, rcx <- rbx, rax <- rcx goto:686 B89
B88
ParallelMove rbx <- fp[-3], rdx <- fp[-11], rcx <- fp[-1], rax <- fp[-10] goto:688 B89
B89
ParallelMove r8 <- rbx, rdi <- rdx, rsi <- rcx, rbx <- rax, rdx <- fp[-12], rcx <- fp[-8], rax <- fp[-9] goto:694 B90
B90
ParallelMove r9 <- r8, r8 <- C, rdi <- rsi, rsi <- rdi, rbx <- rdx, rdx <- rcx, rcx <- rax, rax <- rbx goto:846 B109
B91
MoveArgument(sp[0] <- v10)
ParallelMove rdi <- fp[-3], rsi <- C
v167 <- StaticCall:698( startsWith<0> v2, v166, v10, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:702(===, v167 T{bool}, v9) goto (92, 107)
BoolTest
B92
ParallelMove rax <- fp[-4]
Branch if StrictCompare:712(===, v83 T{bool}, v9) goto (93, 103)
BoolTest
B93
ParallelMove rcx <- fp[-9]
ParallelMove rax <- fp[-8]
v188 <- BinaryInt64Op(+ [tr], v46, v538 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v188 == v44) T{bool} goto (94, 104)
B94
ParallelMove rdx <- fp[-8]
v191 <- BinaryInt64Op(+ [tr], v46, v536 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v846 <- BoxInt64(v191) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v846 T{int})
ParallelMove rdi <- fp[-3], rsi <- C
v192 <- StaticCall:730( startsWith<0> v2, v190, v846 T{int}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:734(===, v192 T{bool}, v9) goto (101, 105)
BoolTest
B101
ParallelMove rdi <- fp[-3], rsi <- fp[-8], rdx <- fp[-6], rbx <- C
v218 <- StaticCall:764( replaceRange<0> v2, v46, v836 T{int}, v146, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- fp[-9]
v219 <- BinaryInt64Op(- [tr], v44, v538 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-10]
v220 <- BinaryInt64Op(- [tr], v39, v538 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- fp[-11]
v221 <- BinaryInt64Op(- [tr], v818 T{int}, v538 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- fp[-1]
v222 <- BinaryInt64Op(- [tr], v780 T{_Smi}, v538 T{_Smi}) [v780-3, v780-3] int64
ParallelMove rsi <- rax, rbx <- rbx, rdx <- rsi, rcx <- rdx, rax <- rcx goto:832 B106
B105
B104
B103
B102
ParallelMove rsi <- fp[-3], rbx <- fp[-11], rdx <- fp[-1], rcx <- fp[-10], rax <- fp[-9] goto:834 B106
B106
ParallelMove rdi <- rsi, rsi <- C, rbx <- rdx, rdx <- rbx, rcx <- rcx, rax <- rax goto:840 B108
B107
ParallelMove rdi <- fp[-3], rsi <- C, rbx <- fp[-1], rdx <- fp[-11], rcx <- fp[-10], rax <- fp[-9] goto:842 B108
B108
ParallelMove r9 <- rdi, r8 <- rsi, rdi <- rbx, rsi <- rdx, rbx <- fp[-12], rdx <- fp[-8], rcx <- rax, rax <- rcx goto:848 B109
B109
B110
ParallelMove rax <- fp[-4]
Branch if EqualityCompare(v801 T{int} == v532) T{bool} goto (111, 128)
B111
MoveArgument(sp[0] <- v10)
ParallelMove rdi <- fp[-3], rsi <- C
v105 <- StaticCall:862( startsWith<0> v2, v104, v10, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:866(===, v105 T{bool}, v9) goto (112, 129)
BoolTest
B112
ParallelMove rax <- fp[-4]
Branch if StrictCompare:878(===, v83 T{bool}, v9) goto (113, 123)
BoolTest
B113
ParallelMove rcx <- fp[-9]
ParallelMove rax <- fp[-8]
v116 <- BinaryInt64Op(+ [tr], v46, v534 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v116 == v44) T{bool} goto (114, 124)
B114
ParallelMove rdx <- fp[-8]
v119 <- BinaryInt64Op(+ [tr], v46, v536 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v849 <- BoxInt64(v119) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v849 T{int})
ParallelMove rdi <- fp[-3], rsi <- C
v120 <- StaticCall:896( startsWith<0> v2, v118, v849 T{int}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:900(===, v120 T{bool}, v9) goto (121, 125)
BoolTest
B121
ParallelMove rdi <- fp[-3], rsi <- fp[-8], rdx <- fp[-6], rbx <- C
v147 <- StaticCall:930( replaceRange<0> v2, v46, v836 T{int}, v146, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- fp[-9]
v148 <- BinaryInt64Op(- [tr], v44, v534 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-10]
v149 <- BinaryInt64Op(- [tr], v39, v534 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- fp[-11]
v150 <- BinaryInt64Op(- [tr], v818 T{int}, v534 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- fp[-1]
v151 <- BinaryInt64Op(- [tr], v780 T{_Smi}, v538 T{_Smi}) [v780-3, v780-3] int64
ParallelMove rsi <- rax, rbx <- rbx, rdx <- rsi, rcx <- rdx, rax <- rcx goto:998 B126
B125
B124
B123
B122
ParallelMove rsi <- fp[-3], rbx <- fp[-11], rdx <- fp[-1], rcx <- fp[-10], rax <- fp[-9] goto:1000 B126
B126
ParallelMove rdi <- rsi, rsi <- C, rbx <- rdx, rdx <- rbx, rcx <- rcx, rax <- rax goto:1014 B130
B129
B128
B127
ParallelMove rdi <- fp[-3], rsi <- C, rbx <- fp[-1], rdx <- fp[-11], rcx <- fp[-10], rax <- fp[-9] goto:1016 B130
B130
ParallelMove r9 <- rdi, r8 <- rsi, rdi <- rbx, rsi <- rdx, rbx <- fp[-12], rdx <- fp[-8], rcx <- rax, rax <- rcx goto:1022 B131
B131
ParallelMove r10 <- r9, r9 <- fp[-7], r8 <- rdi, rdi <- r8, rsi <- rbx, rbx <- rdx, rdx <- rcx, rcx <- rax, rax <- rsi goto:1028 B132
B132
B133
B134
B135
ParallelMove r10 <- r10, rdi <- r9, rsi <- r8, rbx <- rdi, r8 <- rsi, r9 <- rbx, rdx <- rdx, rcx <- rcx, rax <- rax goto:1052 B137
B136
ParallelMove r10 <- fp[-3], rdi <- fp[-7], rsi <- fp[-1], rbx <- C, r8 <- fp[-12], r9 <- fp[-8], rdx <- fp[-9], rcx <- fp[-10], rax <- fp[-11] goto:1054 B137
B137
ParallelMove fp[-2] <- rbx, fp[-1] <- r8, fp[-8] <- r9, fp[-9] <- rdx, fp[-10] <- rcx, fp[-11] <- rax
Branch if StrictCompare:1058(===, v59 T{bool}, v9) goto (139, 145)
BoolTest
B139
v453 <- LoadField(v49 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdi <- rdi
v853 <- UnboxInt64([non-speculative], v453 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(<, v51 T{int?}, v853 T{_Smi}) T{bool} goto (140, 143)
B140
v852 <- BoxInt64(v51) [-3, 2305843009213693952] T{_Smi}
MoveArgument(sp[0] <- v852)
ParallelMove rdi <- r10, rsi <- C
v74 <- StaticCall:1094( substring<0> v49, v871 T{_Smi}, v852, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rdi <- rax goto:1112 B144
B143
ParallelMove rdi <- r10 goto:1114 B144
B144
ParallelMove fp[-3] <- rdi
v73 <- AllocateObject:1116(cls=_SimpleUri, <not-aliased>) T{_SimpleUri}
ParallelMove rcx <- rax, rax <- fp[-3]
StoreField(v73 T{_SimpleUri} . _uri@0150898 = v66 T{String}, NoStoreBarrier)
ParallelMove rbx <- fp[-5]
StoreField(v73 T{_SimpleUri} . _schemeEnd@0150898 = v801 T{int} <int64>, NoStoreBarrier)
ParallelMove r8 <- fp[-1]
StoreField(v73 T{_SimpleUri} . _hostStart@0150898 = v53 T{int} <int64>, NoStoreBarrier)
ParallelMove r9 <- fp[-8]
StoreField(v73 T{_SimpleUri} . _portStart@0150898 = v54 T{int} <int64>, NoStoreBarrier)
ParallelMove rax <- fp[-9]
StoreField(v73 T{_SimpleUri} . _pathStart@0150898 = v55 T{int} <int64>, NoStoreBarrier)
ParallelMove rdx <- fp[-10]
StoreField(v73 T{_SimpleUri} . _queryStart@0150898 = v56 T{int} <int64>, NoStoreBarrier)
ParallelMove rdi <- fp[-11]
StoreField(v73 T{_SimpleUri} . _fragmentStart@0150898 = v57 T{int} <int64>, NoStoreBarrier)
ParallelMove r12 <- fp[-2]
StoreField(v73 T{_SimpleUri} . _schemeCache@0150898 = v58 T{_OneByteString?}, NoStoreBarrier)
ParallelMove rax <- rcx
DartReturn:1120(v73)
B145
ParallelMove rax <- rdx, rdx <- rcx, rdi <- rax, r12 <- rbx, rbx <- fp[-5]
MoveArgument(sp[3] <- v55) int64
MoveArgument(sp[2] <- v56) int64
MoveArgument(sp[1] <- v57) int64
MoveArgument(sp[0] <- v58)
ParallelMove rdi <- C, rsi <- r10, rdx <- rsi, rbx <- rbx, r8 <- r8, r9 <- r9
v62 <- StaticCall:1124( _Uri@0150898.notSimple<0> v0, v49, v51, v801 T{int}, v53, v54, v55, v56, v57, v58, result_type = T{_Uri}) T{_Uri}
ParallelMove rax <- rax
DartReturn:1126(v62)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove r8 <- rsi, rbx <- rdx, rcx <- rbx, rax <- r8, rdx <- r9, fp[-1] <- rsi, fp[-2] <- rdx, fp[-3] <- rbx, fp[-4] <- r8, fp[-5] <- r9
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rsi <- fp[2]
Branch if StrictCompare:10(===, v11, v0) goto (3, 9)
B3
Branch if RelationalOp(>, v5, v131 T{_Smi}) T{bool} goto (4, 5)
B4
ParallelMove rdi <- r8, rsi <- rcx
v61 <- StaticCall:26( _makeScheme@0150898<0> v3, v5, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax, rax <- fp[-3] goto:52 B8
B5
ParallelMove rax <- rcx
Branch if EqualityCompare(v5 == v131 T{_Smi}) T{bool} goto (6, 7)
B7
ParallelMove rcx <- C goto:54 B8
B8
ParallelMove rbx <- rcx goto:60 B10
B9
ParallelMove rax <- rcx
ParallelMove rbx <- rsi goto:62 B10
B10
ParallelMove fp[-6] <- rbx
Branch if RelationalOp(>, v6, v131 T{_Smi}) T{bool} goto (11, 21)
B11
ParallelMove rax <- rax
v37 <- BinaryInt64Op(+ [tr], v5, v132 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(<, v37, v6) T{bool} goto (12, 13)
B12
ParallelMove rdx <- rcx
v53 <- BinaryInt64Op(- [tr], v6, v133 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-1], rsi <- rax, rdx <- rdx
v54 <- StaticCall:88( _makeUserInfo@0150898<0> v3, v37, v53, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:94 B14
B13
ParallelMove rcx <- C goto:96 B14
B14
ParallelMove rdi <- fp[-1], rsi <- fp[-4], rdx <- fp[-5], fp[-7] <- rcx
v40 <- StaticCall:98( _makeHost@0150898<0> v3, v6, v7, result_type = T{!null}) T{String?}
ParallelMove rcx <- rax
ParallelMove rdx <- fp[-5], fp[-8] <- rcx
v41 <- BinaryInt64Op(+ [tr], v7, v133 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- fp[5], fp[-3] <- rdx
Branch if RelationalOp(<, v41, v8) T{bool} goto (15, 19)
B15
v129 <- BoxInt64(v8) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v129 T{int})
ParallelMove rdi <- fp[-1], rsi <- rdx
v47 <- StaticCall:114( substring<0> v3, v41 T{int}, v129 T{int}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdi <- rax
v48 <- StaticCall:116( tryParse<0> v47, result_type = T{int??}) T{int??}
ParallelMove rax <- rax
Branch if StrictCompare:118(===, v48, v0) goto (16, 18)
B18
ParallelMove rdi <- rax, rsi <- fp[-6]
v49 <- StaticCall:140( _makePort@0150898<0> v48 T{int?}, v12, result_type = T{int??}) T{int??}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:146 B20
B19
ParallelMove rax <- C goto:148 B20
B20
ParallelMove r13 <- fp[-7], r12 <- fp[-8], r10 <- rax goto:154 B22
B21
ParallelMove r13 <- C, r12 <- C, r10 <- C goto:156 B22
B22
ParallelMove fp[-7] <- r13, fp[-8] <- r12, fp[-9] <- r10
v23 <- StrictCompare:158(!==, v19, v0) T{bool}
ParallelMove rdi <- fp[-1], rsi <- fp[5], rdx <- rcx, rbx <- C, r8 <- fp[-6], r9 <- r9
v25 <- StaticCall:162( _makePath@0150898<0> v3, v8, v9, v0, v12, v23 T{bool}, result_type = T{!null}) T{String}
ParallelMove rbx <- rax, rcx <- fp[4], rax <- fp[3]
ParallelMove fp[-10] <- rbx
Branch if RelationalOp(<, v9, v10) T{bool} goto (23, 24)
B23
ParallelMove rcx <- rcx
v34 <- BinaryInt64Op(+ [tr], v9, v133 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-1], rsi <- rcx, rdx <- rax
v35 <- StaticCall:176( _makeQuery@0150898<0> v3, v34, v10, result_type = T{!null}) T{String?}
ParallelMove rax <- rax
ParallelMove rcx <- rax goto:182 B25
B24
ParallelMove rcx <- C goto:184 B25
B25
ParallelMove fp[-11] <- rcx
Branch if RelationalOp(<, v10, v4) T{bool} goto (26, 27)
B26
ParallelMove rax <- rax
v32 <- BinaryInt64Op(+ [tr], v10, v133 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-1], rsi <- rax, rdx <- rdx
v33 <- StaticCall:198( _makeFragment@0150898<0> v3, v32, v4, result_type = T{!null}) T{String?}
ParallelMove rax <- rax
ParallelMove r8 <- rax goto:204 B28
B27
ParallelMove r8 <- C goto:206 B28
B28
ParallelMove fp[-12] <- r8
v30 <- AllocateObject:208(cls=_Uri, <not-aliased>) T{_Uri}
ParallelMove rcx <- rax, rax <- C
StoreField(v30 T{_Uri} . _text@0150898 = v83 T{Sentinel~}, NoStoreBarrier)
StoreField(v30 T{_Uri} . pathSegments = v83 T{Sentinel~}, NoStoreBarrier)
StoreField(v30 T{_Uri} . hashCode = v83 T{Sentinel~}, NoStoreBarrier)
ParallelMove rax <- fp[-6]
StoreField(v30 T{_Uri} . scheme = v12 T{String}, NoStoreBarrier)
ParallelMove rax <- fp[-7]
StoreField(v30 T{_Uri} . _userInfo@0150898 = v18 T{String}, NoStoreBarrier)
ParallelMove rax <- fp[-8]
StoreField(v30 T{_Uri} . _host@0150898 = v19 T{String??}, NoStoreBarrier)
ParallelMove rax <- fp[-9]
StoreField(v30 T{_Uri} . _port@0150898 = v20 T{int??}, NoStoreBarrier)
ParallelMove rax <- fp[-10]
StoreField(v30 T{_Uri} . path = v25 T{String}, NoStoreBarrier)
ParallelMove rax <- fp[-11]
StoreField(v30 T{_Uri} . _query@0150898 = v27 T{String??}, NoStoreBarrier)
ParallelMove rax <- fp[-12]
StoreField(v30 T{_Uri} . _fragment@0150898 = v29 T{String??}, NoStoreBarrier)
ParallelMove rax <- rcx
DartReturn:212(v30)
B6
ParallelMove rdi <- fp[-1], rsi <- C, rdx <- C
v58 <- StaticCall:40( _fail@0150898<0> v3, v131 T{_Smi}, v57) T{Never}
v59 <- AllocateObject:42(cls=ReachabilityError) T{ReachabilityError}
ParallelMove rcx <- rax, rax <- C
StoreField(v59 T{ReachabilityError} . _message@9040228 = v97 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:46(v59)
B16
ParallelMove rcx <- fp[-1], rax <- fp[-3]
v50 <- AllocateObject:124(cls=FormatException) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v50 T{FormatException} . message = v51 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v50 T{FormatException} . source = v3 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[-3]
v130 <- BoxInt64(v41 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v50 T{FormatException} . offset = v130 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:130(v50)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
Branch if StrictCompare:10(===, v2, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:16(v0)
B4
MoveArgument(sp[0] <- v6)
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx, rbx <- C
v7 <- StaticCall:20( _normalizeOrSubstring@0150898<0> v2 T{String?}, v3, v4, v5, v6, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:22(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
Branch if StrictCompare:10(!==, v2, v0) goto (3, 4)
B3
MoveArgument(sp[0] <- v6)
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx, rbx <- C
v7 <- StaticCall:16( _normalizeOrSubstring@0150898<0> v2 T{String?}, v3, v4, v5, v6, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:18(v7)
B4
ParallelMove rax <- C
DartReturn:22(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v22 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v22, v5 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:20(v0)
B4
ParallelMove rcx <- rcx
v31 <- UnboxInt64([non-speculative], v22 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rcx <- rcx
v8 <- BinaryInt64Op(- [tr], v31 T{_Smi}, v32 T{_Smi}) [v31-1, v31-1] int64
ParallelMove rdi <- rax, rsi <- C, rdx <- rcx
v9 <- StaticCall:28( _tryParseSmi@0150898<0> v2, v33 T{_Smi}, v8, result_type = T{int??}) T{int??}
ParallelMove rax <- rax
Branch if StrictCompare:30(!==, v9, v0) goto (5, 6)
B5
ParallelMove rax <- rax
DartReturn:36(v9 T{int?})
B6
ParallelMove rdi <- fp[-1], rsi <- C, rdx <- C
v11 <- StaticCall:40( _parse@0150898<0> v2, v0, v10, result_type = T{int??}) T{int??}
ParallelMove rax <- rax
DartReturn:42(v11)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
Branch if StrictCompare:10(===, v2, v0) goto (3, 4)
B3
ParallelMove rax <- C
DartReturn:16(v7)
B4
ParallelMove rdi <- rdi, rsi <- rsi, rdx <- rdx, rbx <- C
v6 <- StaticCall:20( _normalizeOrSubstring@0150898<0> v2 T{String?}, v3, v4, v5, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:22(v6)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdx, rdx <- rbx, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx, fp[-4] <- rbx
CheckStackOverflow:8(stack=0, loop=0)
v53 <- LoadStaticField:4(_scannerTables@0150898, CallsInitializer) T{_GrowableList}
ParallelMove rsi <- rax, rdx <- fp[-1]
ParallelMove fp[-8] <- rsi
v40 <- LoadField:60(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdi <- rax
v74 <- UnboxInt64:60([non-speculative], v40) [0, 2305843009213693951] int64
ParallelMove fp[-7] <- rdi
v42 <- LoadClassId:60(v2 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove r9 <- fp[-4], fp[-6] <- r8
v32 <- LoadField:60(v5 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove r10 <- rax
v78 <- UnboxInt64:60([non-speculative], v32) [0, 576460752303423487] int64
ParallelMove fp[-5] <- r10
ParallelMove rcx <- fp[-3], r13 <- C goto:60 B8
B8
  Loop 0
ParallelMove fp[-3] <- r13
CheckStackOverflow:64(stack=0, loop=1)
Branch if RelationalOp(<, v9, v3) T{bool} goto (3, 4)
B3
  Loop 0
v28 <- LoadField(v53 . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v72 <- UnboxInt64([non-speculative], v28) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:26(v72 T{_Smi}, v8) [-9223372036854775808, 9223372036854775807] int64
v30 <- LoadField(v53 . GrowableObjectArray.data) T{_List}
v81 <- LoadIndexed:26([_List] v30, v8 T{_Smi}) T{*}
ParallelMove rax <- rdi, rbx <- r13, rcx <- rbx
t0 <- GenericCheckBound:28(v74 T{_Smi}, v9 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:28(===, v42, v50 T{_Smi}) goto (14, 15)
B14
  Loop 0
v46 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v9 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:28 B13
B15
  Loop 0
v44 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v9 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:28 B13
B13
  Loop 0
ParallelMove rax <- rax
v17 <- BinaryInt64Op(^ [tr], v45 T{_Smi}, v82 T{_Smi}) [0, 65535] int64
Branch if RelationalOp(>, v17, v83 T{_Smi}) T{bool} goto (5, 6)
B5
  Loop 0
ParallelMove rax <- C goto:46 B7
B6
B7
  Loop 0
v75 <- BoxInt64(v20) [0, 65535] T{_Smi}
v101 <- LoadClassId(<non-smi> v81 T{*}) int64
MoveArgument(sp[1] <- v81 T{*})
MoveArgument(sp[0] <- v75)
ParallelMove rcx <- rax
v21 <- DispatchTableCall( cid=v101 List.[]<0>, v81 T{*}, v75) T{*?}
ParallelMove rax <- rax
ParallelMove rax <- rax
v77 <- UnboxInt64([non-speculative], v21 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rsi <- rax
v99 <- IntConverter(int64->uint32[tr], v77 T{_Smi}) uint32
ParallelMove rdi <- C
ParallelMove rsi <- rsi
v23 <- BinaryUint32Op(& [tr], v99 T{_Smi}, v102 T{_Smi}) [0, 31] uint32
ParallelMove rcx <- rax
v25 <- ShiftInt64Op(>> [tr], v77 T{_Smi}, v85 T{_Smi}) [-144115188075855872, 144115188075855871] int64
ParallelMove rax <- fp[-5], rbx <- rcx
GenericCheckBound:56(v78 T{_Smi}, v25) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- fp[-3]
v71 <- BoxInt64(v9 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdx <- fp[-4], rax <- rax
StoreIndexed:56([_List] v5, v25 T{int}, v71 T{int})
ParallelMove r8 <- r8
v27 <- BinaryInt64Op(+ [tr], v9 T{int}, v86 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi
v100 <- IntConverter(uint32->int64, v23) int64
ParallelMove rcx <- rsi, r13 <- r8, rdx <- fp[-1], r9 <- fp[-4], r8 <- fp[-6], rsi <- fp[-8], rdi <- fp[-7], r10 <- fp[-5] goto:62 B8
B4
ParallelMove rax <- rcx
DartReturn:66(v8)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:4(stack=0, loop=0)
v2 <- StaticCall:6( _createTables@0150898<0> , result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax
DartReturn:8(v2)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- C, rsi <- C
v186 <- StaticCall:10( _GrowableList@0150898.<0> v3 T{TypeArguments}, v6572 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rcx <- rax
ParallelMove fp[-5] <- rcx
v4026 <- LoadField:36(v186 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove fp[-4] <- rdx
ParallelMove rbx <- rdx
v5642 <- UnboxInt64:36([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-3] <- rbx
v197 <- LoadField:36(v186 . GrowableObjectArray.data) T{_List}
ParallelMove fp[-2] <- rsi
ParallelMove rdi <- C goto:36 B7
B7
  Loop 112
ParallelMove fp[-1] <- rdi
CheckStackOverflow:40(stack=0, loop=1)
Branch if RelationalOp(<, v188, v5642 T{_Smi}) T{bool} goto (5, 6)
B5
  Loop 112
ParallelMove rax <- C
v4041 <- AllocateTypedData:10(v87 T{_Smi}) T{_Uint8List}
ParallelMove rdx <- fp[-2], rax <- rax, rcx <- fp[-1]
StoreIndexed:32([_List] v197, v188 T{int}, v4041 T{_Uint8List})
ParallelMove rcx <- rcx
v194 <- BinaryInt64Op(+ [tr], v188 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rcx, rcx <- fp[-5], rsi <- fp[-2], rdx <- fp[-4], rbx <- fp[-3] goto:38 B7
B6
ParallelMove r8 <- rsi
ParallelMove rax <- fp[-3], rbx <- C
GenericCheckBound:12(v5642 T{_Smi}, v6573 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6575 <- LoadIndexed:12([_List] v197 T{_List}, v6573 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7759 <- LoadClassId(<non-smi> v6575 T{Uint8List}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7759 List.fillRange<0>, v6575 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4268 T{_Smi})
ParallelMove rdx <- C, r8 <- C, rcx <- fp[-6] goto:34 B16
B16
  Loop 111
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v236, v6577 T{_Smi}) T{bool} goto (14, 15)
B14
  Loop 111
v6578 <- LoadIndexed:26([_OneByteString] v19 T{_OneByteString}, v236 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v242 <- BinaryInt64Op(^ [tr], v6578, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6575) T{*?}
v4502 <- LoadField(v6575 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5649 <- UnboxInt64([non-speculative], v4502) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5649, v242) [-9223372036854775808, 9223372036854775807] int64
v7781 <- LoadField(v6575 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7781 T{*?}, v242 T{int}, v6574, NoStoreBarrier)
ParallelMove rdx <- rdx
v243 <- BinaryInt64Op(+ [tr], v236 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B16
B15
ParallelMove rdx <- C, r9 <- C goto:34 B22
B22
  Loop 110
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v266, v6574 T{_Smi}) T{bool} goto (20, 21)
B20
  Loop 110
v6579 <- LoadIndexed:26([_OneByteString] v20 T{_OneByteString}, v266 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v272 <- BinaryInt64Op(^ [tr], v6579, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6575) T{*?}
v4506 <- LoadField(v6575 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5653 <- UnboxInt64([non-speculative], v4506) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5653, v272) [-9223372036854775808, 9223372036854775807] int64
v7782 <- LoadField(v6575 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7782 T{*?}, v272 T{int}, v6580, NoStoreBarrier)
ParallelMove rdx <- rdx
v274 <- BinaryInt64Op(+ [tr], v266 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B22
B21
ParallelMove rdx <- C, r10 <- C goto:34 B28
B28
  Loop 109
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v295, v6574 T{_Smi}) T{bool} goto (26, 27)
B26
  Loop 109
v6581 <- LoadIndexed:26([_OneByteString] v22 T{_OneByteString}, v295 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v301 <- BinaryInt64Op(^ [tr], v6581, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6575) T{*?}
v4510 <- LoadField(v6575 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5657 <- UnboxInt64([non-speculative], v4510) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5657, v301) [-9223372036854775808, 9223372036854775807] int64
v7783 <- LoadField(v6575 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7783 T{*?}, v301 T{int}, v4020, NoStoreBarrier)
ParallelMove rdx <- rdx
v303 <- BinaryInt64Op(+ [tr], v295 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B28
B27
ParallelMove rdx <- C, r12 <- C goto:34 B34
B34
  Loop 108
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v324, v6574 T{_Smi}) T{bool} goto (32, 33)
B32
  Loop 108
v6583 <- LoadIndexed:26([_OneByteString] v26 T{_OneByteString}, v324 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v330 <- BinaryInt64Op(^ [tr], v6583, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6575) T{*?}
v4514 <- LoadField(v6575 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5661 <- UnboxInt64([non-speculative], v4514) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5661, v330) [-9223372036854775808, 9223372036854775807] int64
v7784 <- LoadField(v6575 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7784 T{*?}, v330 T{int}, v6584, NoStoreBarrier)
ParallelMove rdx <- rdx
v332 <- BinaryInt64Op(+ [tr], v324 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B34
B33
ParallelMove rdx <- C, r13 <- C goto:34 B40
B40
  Loop 107
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v353, v6574 T{_Smi}) T{bool} goto (38, 39)
B38
  Loop 107
v6585 <- LoadIndexed:26([_OneByteString] v28 T{_OneByteString}, v353 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v359 <- BinaryInt64Op(^ [tr], v6585, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6575) T{*?}
v4518 <- LoadField(v6575 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5665 <- UnboxInt64([non-speculative], v4518) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5665, v359) [-9223372036854775808, 9223372036854775807] int64
v7785 <- LoadField(v6575 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7785 T{*?}, v359 T{int}, v4021, NoStoreBarrier)
ParallelMove rdx <- rdx
v361 <- BinaryInt64Op(+ [tr], v353 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B40
B39
ParallelMove rsi <- C, rdx <- C goto:34 B46
B46
  Loop 106
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v382, v6574 T{_Smi}) T{bool} goto (44, 45)
B44
  Loop 106
v6587 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v382 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v388 <- BinaryInt64Op(^ [tr], v6587, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6575) T{*?}
v4522 <- LoadField(v6575 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5669 <- UnboxInt64([non-speculative], v4522) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5669, v388) [-9223372036854775808, 9223372036854775807] int64
v7786 <- LoadField(v6575 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7786 T{*?}, v388 T{int}, v4010, NoStoreBarrier)
ParallelMove rsi <- rsi
v390 <- BinaryInt64Op(+ [tr], v382 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B46
B45
ParallelMove rdi <- C, rsi <- C goto:34 B52
B52
  Loop 105
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v411, v6574 T{_Smi}) T{bool} goto (50, 51)
B50
  Loop 105
v6589 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v411 T{int}) [0, 255] int64
ParallelMove rax <- rax
v417 <- BinaryInt64Op(^ [tr], v6589, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6575) T{*?}
v4526 <- LoadField(v6575 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rbx <- rbx
v5673 <- UnboxInt64([non-speculative], v4526) [0, 4611686018427387903] int64
ParallelMove rax <- rbx, rbx <- rax, r8 <- rax
GenericCheckBound(v5673, v417) [-9223372036854775808, 9223372036854775807] int64
v7787 <- LoadField(v6575 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7787 T{*?}, v417 T{int}, v4009, NoStoreBarrier)
ParallelMove rdi <- rdi
v419 <- BinaryInt64Op(+ [tr], v411 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi, r8 <- C goto:36 B52
B51
ParallelMove r8 <- fp[-2]
ParallelMove rax <- fp[-4]
v5675 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v5675 T{_Smi}, v6580 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6591 <- LoadIndexed:12([_List] v197 T{_List}, v6580 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7760 <- LoadClassId(<non-smi> v6591 T{Uint8List}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7760 List.fillRange<0>, v6591 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4268 T{_Smi})
ParallelMove rdx <- C, r8 <- C, rcx <- fp[-6] goto:34 B61
B61
  Loop 104
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v461, v6577 T{_Smi}) T{bool} goto (59, 60)
B59
  Loop 104
v6592 <- LoadIndexed:26([_OneByteString] v19 T{_OneByteString}, v461 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v467 <- BinaryInt64Op(^ [tr], v6592, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6591) T{*?}
v4530 <- LoadField(v6591 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5679 <- UnboxInt64([non-speculative], v4530) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5679, v467) [-9223372036854775808, 9223372036854775807] int64
v7788 <- LoadField(v6591 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7788 T{*?}, v467 T{int}, v6574, NoStoreBarrier)
ParallelMove rdx <- rdx
v468 <- BinaryInt64Op(+ [tr], v461 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B61
B60
ParallelMove rdx <- C, r9 <- C goto:34 B67
B67
  Loop 103
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v490, v6574 T{_Smi}) T{bool} goto (65, 66)
B65
  Loop 103
v6593 <- LoadIndexed:26([_OneByteString] v20 T{_OneByteString}, v490 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v496 <- BinaryInt64Op(^ [tr], v6593, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6591) T{*?}
v4534 <- LoadField(v6591 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5683 <- UnboxInt64([non-speculative], v4534) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5683, v496) [-9223372036854775808, 9223372036854775807] int64
v7789 <- LoadField(v6591 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7789 T{*?}, v496 T{int}, v6594, NoStoreBarrier)
ParallelMove rdx <- rdx
v498 <- BinaryInt64Op(+ [tr], v490 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B67
B66
ParallelMove rdx <- C, r10 <- C goto:34 B73
B73
  Loop 102
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v519, v6574 T{_Smi}) T{bool} goto (71, 72)
B71
  Loop 102
v6595 <- LoadIndexed:26([_OneByteString] v22 T{_OneByteString}, v519 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v525 <- BinaryInt64Op(^ [tr], v6595, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6591) T{*?}
v4538 <- LoadField(v6591 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5687 <- UnboxInt64([non-speculative], v4538) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5687, v525) [-9223372036854775808, 9223372036854775807] int64
v7790 <- LoadField(v6591 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7790 T{*?}, v525 T{int}, v4020, NoStoreBarrier)
ParallelMove rdx <- rdx
v527 <- BinaryInt64Op(+ [tr], v519 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B73
B72
ParallelMove rdx <- C, r12 <- C goto:34 B79
B79
  Loop 101
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v548, v6596 T{_Smi}) T{bool} goto (77, 78)
B77
  Loop 101
v6597 <- LoadIndexed:26([_OneByteString] v42 T{_OneByteString}, v548 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v554 <- BinaryInt64Op(^ [tr], v6597, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6591) T{*?}
v4542 <- LoadField(v6591 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5691 <- UnboxInt64([non-speculative], v4542) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5691, v554) [-9223372036854775808, 9223372036854775807] int64
v7791 <- LoadField(v6591 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7791 T{*?}, v554 T{int}, v4011, NoStoreBarrier)
ParallelMove rdx <- rdx
v556 <- BinaryInt64Op(+ [tr], v548 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B79
B78
ParallelMove rdx <- C, r13 <- C goto:34 B85
B85
  Loop 100
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v578, v6574 T{_Smi}) T{bool} goto (83, 84)
B83
  Loop 100
v6599 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v578 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v584 <- BinaryInt64Op(^ [tr], v6599, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6591) T{*?}
v4546 <- LoadField(v6591 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5695 <- UnboxInt64([non-speculative], v4546) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5695, v584) [-9223372036854775808, 9223372036854775807] int64
v7792 <- LoadField(v6591 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7792 T{*?}, v584 T{int}, v4010, NoStoreBarrier)
ParallelMove rdx <- rdx
v586 <- BinaryInt64Op(+ [tr], v578 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B85
B84
ParallelMove rsi <- C, rdx <- C goto:34 B91
B91
  Loop 99
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v607, v6574 T{_Smi}) T{bool} goto (89, 90)
B89
  Loop 99
v6600 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v607 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v613 <- BinaryInt64Op(^ [tr], v6600, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6591) T{*?}
v4550 <- LoadField(v6591 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5699 <- UnboxInt64([non-speculative], v4550) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5699, v613) [-9223372036854775808, 9223372036854775807] int64
v7793 <- LoadField(v6591 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7793 T{*?}, v613 T{int}, v4009, NoStoreBarrier)
ParallelMove rsi <- rsi
v615 <- BinaryInt64Op(+ [tr], v607 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B91
B90
ParallelMove rcx <- fp[-2]
ParallelMove rax <- fp[-4]
v5701 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v5701 T{_Smi}, v6594 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6601 <- LoadIndexed:12([_List] v197 T{_List}, v6594 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7761 <- LoadClassId(<non-smi> v6601 T{Uint8List}) int64
ParallelMove rcx <- rbx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7761 List.fillRange<0>, v6601 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4268 T{_Smi})
ParallelMove rdx <- C, r8 <- C, rcx <- fp[-6] goto:34 B100
B100
  Loop 98
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v657, v6577 T{_Smi}) T{bool} goto (98, 99)
B98
  Loop 98
v6602 <- LoadIndexed:26([_OneByteString] v19 T{_OneByteString}, v657 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v663 <- BinaryInt64Op(^ [tr], v6602, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6601) T{*?}
v4554 <- LoadField(v6601 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5705 <- UnboxInt64([non-speculative], v4554) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5705, v663) [-9223372036854775808, 9223372036854775807] int64
v7794 <- LoadField(v6601 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7794 T{*?}, v663 T{int}, v6574, NoStoreBarrier)
ParallelMove rdx <- rdx
v664 <- BinaryInt64Op(+ [tr], v657 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B100
B99
ParallelMove rsi <- C, rdx <- C goto:34 B106
B106
  Loop 97
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v686, v6574 T{_Smi}) T{bool} goto (104, 105)
B104
  Loop 97
v6603 <- LoadIndexed:26([_OneByteString] v49 T{_OneByteString}, v686 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v692 <- BinaryInt64Op(^ [tr], v6603, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6601) T{*?}
v4558 <- LoadField(v6601 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5709 <- UnboxInt64([non-speculative], v4558) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5709, v692) [-9223372036854775808, 9223372036854775807] int64
v7795 <- LoadField(v6601 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7795 T{*?}, v692 T{int}, v4008, NoStoreBarrier)
ParallelMove rsi <- rsi
v694 <- BinaryInt64Op(+ [tr], v686 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B106
B105
ParallelMove rdx <- C, r9 <- C goto:34 B112
B112
  Loop 96
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v715, v6574 T{_Smi}) T{bool} goto (110, 111)
B110
  Loop 96
v6604 <- LoadIndexed:26([_OneByteString] v22 T{_OneByteString}, v715 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v721 <- BinaryInt64Op(^ [tr], v6604, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6601) T{*?}
v4562 <- LoadField(v6601 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5713 <- UnboxInt64([non-speculative], v4562) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5713, v721) [-9223372036854775808, 9223372036854775807] int64
v7796 <- LoadField(v6601 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7796 T{*?}, v721 T{int}, v4020, NoStoreBarrier)
ParallelMove rdx <- rdx
v723 <- BinaryInt64Op(+ [tr], v715 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B112
B111
ParallelMove rdx <- C, r10 <- C goto:34 B118
B118
  Loop 95
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v744, v6574 T{_Smi}) T{bool} goto (116, 117)
B116
  Loop 95
v6605 <- LoadIndexed:26([_OneByteString] v26 T{_OneByteString}, v744 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v750 <- BinaryInt64Op(^ [tr], v6605, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6601) T{*?}
v4566 <- LoadField(v6601 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5717 <- UnboxInt64([non-speculative], v4566) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5717, v750) [-9223372036854775808, 9223372036854775807] int64
v7797 <- LoadField(v6601 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7797 T{*?}, v750 T{int}, v6606, NoStoreBarrier)
ParallelMove rdx <- rdx
v752 <- BinaryInt64Op(+ [tr], v744 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B118
B117
ParallelMove rdx <- C, r12 <- C goto:34 B124
B124
  Loop 94
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v773, v6574 T{_Smi}) T{bool} goto (122, 123)
B122
  Loop 94
v6607 <- LoadIndexed:26([_OneByteString] v28 T{_OneByteString}, v773 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v779 <- BinaryInt64Op(^ [tr], v6607, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6601) T{*?}
v4570 <- LoadField(v6601 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5721 <- UnboxInt64([non-speculative], v4570) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5721, v779) [-9223372036854775808, 9223372036854775807] int64
v7798 <- LoadField(v6601 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7798 T{*?}, v779 T{int}, v4012, NoStoreBarrier)
ParallelMove rdx <- rdx
v781 <- BinaryInt64Op(+ [tr], v773 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B124
B123
ParallelMove rdx <- C, r13 <- C goto:34 B130
B130
  Loop 93
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v802, v6574 T{_Smi}) T{bool} goto (128, 129)
B128
  Loop 93
v6609 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v802 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v808 <- BinaryInt64Op(^ [tr], v6609, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6601) T{*?}
v4574 <- LoadField(v6601 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5725 <- UnboxInt64([non-speculative], v4574) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5725, v808) [-9223372036854775808, 9223372036854775807] int64
v7799 <- LoadField(v6601 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7799 T{*?}, v808 T{int}, v4010, NoStoreBarrier)
ParallelMove rdx <- rdx
v810 <- BinaryInt64Op(+ [tr], v802 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B130
B129
ParallelMove rsi <- C, rdx <- C goto:34 B136
B136
  Loop 92
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v831, v6574 T{_Smi}) T{bool} goto (134, 135)
B134
  Loop 92
v6610 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v831 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v837 <- BinaryInt64Op(^ [tr], v6610, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6601) T{*?}
v4578 <- LoadField(v6601 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5729 <- UnboxInt64([non-speculative], v4578) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5729, v837) [-9223372036854775808, 9223372036854775807] int64
v7800 <- LoadField(v6601 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7800 T{*?}, v837 T{int}, v4009, NoStoreBarrier)
ParallelMove rsi <- rsi
v839 <- BinaryInt64Op(+ [tr], v831 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B136
B135
ParallelMove rcx <- fp[-2]
ParallelMove rax <- fp[-4]
v5731 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v5731 T{_Smi}, v6574 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6611 <- LoadIndexed:12([_List] v197 T{_List}, v6574 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7762 <- LoadClassId(<non-smi> v6611 T{Uint8List}) int64
ParallelMove rcx <- rbx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7762 List.fillRange<0>, v6611 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4268 T{_Smi})
ParallelMove rdx <- C, r8 <- C, rcx <- fp[-6] goto:34 B145
B145
  Loop 91
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v881, v6577 T{_Smi}) T{bool} goto (143, 144)
B143
  Loop 91
v6612 <- LoadIndexed:26([_OneByteString] v19 T{_OneByteString}, v881 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v887 <- BinaryInt64Op(^ [tr], v6612, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6611) T{*?}
v4582 <- LoadField(v6611 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5735 <- UnboxInt64([non-speculative], v4582) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5735, v887) [-9223372036854775808, 9223372036854775807] int64
v7801 <- LoadField(v6611 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7801 T{*?}, v887 T{int}, v6574 T{_Smi}, NoStoreBarrier)
ParallelMove rdx <- rdx
v888 <- BinaryInt64Op(+ [tr], v881 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B145
B144
ParallelMove rdx <- C, r9 <- C goto:34 B151
B151
  Loop 90
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v910, v6574 T{_Smi}) T{bool} goto (149, 150)
B149
  Loop 90
v6613 <- LoadIndexed:26([_OneByteString] v22 T{_OneByteString}, v910 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v916 <- BinaryInt64Op(^ [tr], v6613, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6611) T{*?}
v4586 <- LoadField(v6611 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5739 <- UnboxInt64([non-speculative], v4586) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5739, v916) [-9223372036854775808, 9223372036854775807] int64
v7802 <- LoadField(v6611 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7802 T{*?}, v916 T{int}, v4020, NoStoreBarrier)
ParallelMove rdx <- rdx
v918 <- BinaryInt64Op(+ [tr], v910 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B151
B150
ParallelMove rdx <- C, r10 <- C goto:34 B157
B157
  Loop 89
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v939, v6574 T{_Smi}) T{bool} goto (155, 156)
B155
  Loop 89
v6614 <- LoadIndexed:26([_OneByteString] v26 T{_OneByteString}, v939 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v945 <- BinaryInt64Op(^ [tr], v6614, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6611) T{*?}
v4590 <- LoadField(v6611 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5743 <- UnboxInt64([non-speculative], v4590) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5743, v945) [-9223372036854775808, 9223372036854775807] int64
v7803 <- LoadField(v6611 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7803 T{*?}, v945 T{int}, v6615, NoStoreBarrier)
ParallelMove rdx <- rdx
v947 <- BinaryInt64Op(+ [tr], v939 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B157
B156
ParallelMove rdx <- C, r12 <- C goto:34 B163
B163
  Loop 88
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v968, v6574 T{_Smi}) T{bool} goto (161, 162)
B161
  Loop 88
v6616 <- LoadIndexed:26([_OneByteString] v28 T{_OneByteString}, v968 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v974 <- BinaryInt64Op(^ [tr], v6616, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6611) T{*?}
v4594 <- LoadField(v6611 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5747 <- UnboxInt64([non-speculative], v4594) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5747, v974) [-9223372036854775808, 9223372036854775807] int64
v7804 <- LoadField(v6611 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7804 T{*?}, v974 T{int}, v4011, NoStoreBarrier)
ParallelMove rdx <- rdx
v976 <- BinaryInt64Op(+ [tr], v968 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B163
B162
ParallelMove rdx <- C, r13 <- C goto:34 B169
B169
  Loop 87
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v997, v6574 T{_Smi}) T{bool} goto (167, 168)
B167
  Loop 87
v6617 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v997 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v1003 <- BinaryInt64Op(^ [tr], v6617, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6611) T{*?}
v4598 <- LoadField(v6611 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5751 <- UnboxInt64([non-speculative], v4598) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5751, v1003) [-9223372036854775808, 9223372036854775807] int64
v7805 <- LoadField(v6611 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7805 T{*?}, v1003 T{int}, v4010, NoStoreBarrier)
ParallelMove rdx <- rdx
v1005 <- BinaryInt64Op(+ [tr], v997 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B169
B168
ParallelMove rsi <- C, rdx <- C goto:34 B175
B175
  Loop 86
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1026, v6574 T{_Smi}) T{bool} goto (173, 174)
B173
  Loop 86
v6618 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v1026 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v1032 <- BinaryInt64Op(^ [tr], v6618, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6611) T{*?}
v4602 <- LoadField(v6611 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5755 <- UnboxInt64([non-speculative], v4602) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5755, v1032) [-9223372036854775808, 9223372036854775807] int64
v7806 <- LoadField(v6611 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7806 T{*?}, v1032 T{int}, v4009, NoStoreBarrier)
ParallelMove rsi <- rsi
v1034 <- BinaryInt64Op(+ [tr], v1026 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B175
B174
ParallelMove rcx <- fp[-2]
ParallelMove rax <- fp[-4]
v5757 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v5757 T{_Smi}, v6596 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6619 <- LoadIndexed:12([_List] v197 T{_List}, v6596 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7763 <- LoadClassId(<non-smi> v6619 T{Uint8List}) int64
ParallelMove rcx <- rbx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7763 List.fillRange<0>, v6619 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4269 T{_Smi})
ParallelMove rdx <- C, r8 <- C, rcx <- fp[-6] goto:34 B184
B184
  Loop 85
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1076, v6577 T{_Smi}) T{bool} goto (182, 183)
B182
  Loop 85
v6620 <- LoadIndexed:26([_OneByteString] v19 T{_OneByteString}, v1076 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v1082 <- BinaryInt64Op(^ [tr], v6620, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6619) T{*?}
v4606 <- LoadField(v6619 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5761 <- UnboxInt64([non-speculative], v4606) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5761, v1082) [-9223372036854775808, 9223372036854775807] int64
v7807 <- LoadField(v6619 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7807 T{*?}, v1082 T{int}, v4019, NoStoreBarrier)
ParallelMove rdx <- rdx
v1084 <- BinaryInt64Op(+ [tr], v1076 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B184
B183
ParallelMove rdx <- C, r9 <- C goto:34 B190
B190
  Loop 84
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1106, v6574 T{_Smi}) T{bool} goto (188, 189)
B188
  Loop 84
v6622 <- LoadIndexed:26([_OneByteString] v26 T{_OneByteString}, v1106 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v1112 <- BinaryInt64Op(^ [tr], v6622, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6619) T{*?}
v4610 <- LoadField(v6619 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5765 <- UnboxInt64([non-speculative], v4610) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5765, v1112) [-9223372036854775808, 9223372036854775807] int64
v7808 <- LoadField(v6619 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7808 T{*?}, v1112 T{int}, v4018, NoStoreBarrier)
ParallelMove rdx <- rdx
v1114 <- BinaryInt64Op(+ [tr], v1106 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B190
B189
ParallelMove rdx <- C, r10 <- C goto:34 B196
B196
  Loop 83
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1135, v6574 T{_Smi}) T{bool} goto (194, 195)
B194
  Loop 83
v6624 <- LoadIndexed:26([_OneByteString] v28 T{_OneByteString}, v1135 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v1141 <- BinaryInt64Op(^ [tr], v6624, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6619) T{*?}
v4614 <- LoadField(v6619 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5769 <- UnboxInt64([non-speculative], v4614) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5769, v1141) [-9223372036854775808, 9223372036854775807] int64
v7809 <- LoadField(v6619 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7809 T{*?}, v1141 T{int}, v4018, NoStoreBarrier)
ParallelMove rdx <- rdx
v1143 <- BinaryInt64Op(+ [tr], v1135 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B196
B195
ParallelMove rdx <- C, r12 <- C goto:34 B202
B202
  Loop 82
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1164, v6574 T{_Smi}) T{bool} goto (200, 201)
B200
  Loop 82
v6625 <- LoadIndexed:26([_OneByteString] v20 T{_OneByteString}, v1164 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v1170 <- BinaryInt64Op(^ [tr], v6625, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6619) T{*?}
v4618 <- LoadField(v6619 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5773 <- UnboxInt64([non-speculative], v4618) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5773, v1170) [-9223372036854775808, 9223372036854775807] int64
v7810 <- LoadField(v6619 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7810 T{*?}, v1170 T{int}, v4017, NoStoreBarrier)
ParallelMove rdx <- rdx
v1172 <- BinaryInt64Op(+ [tr], v1164 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B202
B201
ParallelMove rdx <- C, r13 <- C goto:34 B208
B208
  Loop 81
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1193, v6574 T{_Smi}) T{bool} goto (206, 207)
B206
  Loop 81
v6627 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v1193 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v1199 <- BinaryInt64Op(^ [tr], v6627, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6619) T{*?}
v4622 <- LoadField(v6619 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5777 <- UnboxInt64([non-speculative], v4622) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5777, v1199) [-9223372036854775808, 9223372036854775807] int64
v7811 <- LoadField(v6619 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7811 T{*?}, v1199 T{int}, v4010, NoStoreBarrier)
ParallelMove rdx <- rdx
v1201 <- BinaryInt64Op(+ [tr], v1193 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B208
B207
ParallelMove rsi <- C, rdx <- C goto:34 B214
B214
  Loop 80
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1222, v6574 T{_Smi}) T{bool} goto (212, 213)
B212
  Loop 80
v6628 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v1222 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v1228 <- BinaryInt64Op(^ [tr], v6628, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6619) T{*?}
v4626 <- LoadField(v6619 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5781 <- UnboxInt64([non-speculative], v4626) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5781, v1228) [-9223372036854775808, 9223372036854775807] int64
v7812 <- LoadField(v6619 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7812 T{*?}, v1228 T{int}, v4009, NoStoreBarrier)
ParallelMove rsi <- rsi
v1230 <- BinaryInt64Op(+ [tr], v1222 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B214
B213
ParallelMove rcx <- fp[-2]
ParallelMove rax <- fp[-4]
v5783 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v5783 T{_Smi}, v6584 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6629 <- LoadIndexed:12([_List] v197 T{_List}, v6584 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7764 <- LoadClassId(<non-smi> v6629 T{Uint8List}) int64
ParallelMove rcx <- rbx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7764 List.fillRange<0>, v6629 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4269 T{_Smi})
ParallelMove rdx <- C, r8 <- C, rcx <- fp[-6] goto:34 B223
B223
  Loop 79
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1272, v6577 T{_Smi}) T{bool} goto (221, 222)
B221
  Loop 79
v6630 <- LoadIndexed:26([_OneByteString] v19 T{_OneByteString}, v1272 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v1278 <- BinaryInt64Op(^ [tr], v6630, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6629) T{*?}
v4630 <- LoadField(v6629 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5787 <- UnboxInt64([non-speculative], v4630) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5787, v1278) [-9223372036854775808, 9223372036854775807] int64
v7813 <- LoadField(v6629 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7813 T{*?}, v1278 T{int}, v6631, NoStoreBarrier)
ParallelMove rdx <- rdx
v1280 <- BinaryInt64Op(+ [tr], v1272 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B223
B222
ParallelMove rdx <- C, r9 <- C goto:34 B229
B229
  Loop 78
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1302, v6574 T{_Smi}) T{bool} goto (227, 228)
B227
  Loop 78
v6632 <- LoadIndexed:26([_OneByteString] v26 T{_OneByteString}, v1302 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v1308 <- BinaryInt64Op(^ [tr], v6632, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6629) T{*?}
v4634 <- LoadField(v6629 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5791 <- UnboxInt64([non-speculative], v4634) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5791, v1308) [-9223372036854775808, 9223372036854775807] int64
v7814 <- LoadField(v6629 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7814 T{*?}, v1308 T{int}, v4014, NoStoreBarrier)
ParallelMove rdx <- rdx
v1310 <- BinaryInt64Op(+ [tr], v1302 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B229
B228
ParallelMove rdx <- C, r10 <- C goto:34 B235
B235
  Loop 77
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1331, v6574 T{_Smi}) T{bool} goto (233, 234)
B233
  Loop 77
v6634 <- LoadIndexed:26([_OneByteString] v28 T{_OneByteString}, v1331 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v1337 <- BinaryInt64Op(^ [tr], v6634, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6629) T{*?}
v4638 <- LoadField(v6629 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5795 <- UnboxInt64([non-speculative], v4638) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5795, v1337) [-9223372036854775808, 9223372036854775807] int64
v7815 <- LoadField(v6629 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7815 T{*?}, v1337 T{int}, v4014, NoStoreBarrier)
ParallelMove rdx <- rdx
v1339 <- BinaryInt64Op(+ [tr], v1331 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B235
B234
ParallelMove rdx <- C, r12 <- C goto:34 B241
B241
  Loop 76
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1360, v6574 T{_Smi}) T{bool} goto (239, 240)
B239
  Loop 76
v6635 <- LoadIndexed:26([_OneByteString] v20 T{_OneByteString}, v1360 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v1366 <- BinaryInt64Op(^ [tr], v6635, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6629) T{*?}
v4642 <- LoadField(v6629 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5799 <- UnboxInt64([non-speculative], v4642) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5799, v1366) [-9223372036854775808, 9223372036854775807] int64
v7816 <- LoadField(v6629 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7816 T{*?}, v1366 T{int}, v6636, NoStoreBarrier)
ParallelMove rdx <- rdx
v1368 <- BinaryInt64Op(+ [tr], v1360 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B241
B240
ParallelMove rdx <- C, r13 <- C goto:34 B247
B247
  Loop 75
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1389, v6574 T{_Smi}) T{bool} goto (245, 246)
B245
  Loop 75
v6637 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v1389 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v1395 <- BinaryInt64Op(^ [tr], v6637, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6629) T{*?}
v4646 <- LoadField(v6629 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5803 <- UnboxInt64([non-speculative], v4646) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5803, v1395) [-9223372036854775808, 9223372036854775807] int64
v7817 <- LoadField(v6629 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7817 T{*?}, v1395 T{int}, v4010, NoStoreBarrier)
ParallelMove rdx <- rdx
v1397 <- BinaryInt64Op(+ [tr], v1389 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B247
B246
ParallelMove rsi <- C, rdx <- C goto:34 B253
B253
  Loop 74
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1418, v6574 T{_Smi}) T{bool} goto (251, 252)
B251
  Loop 74
v6638 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v1418 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v1424 <- BinaryInt64Op(^ [tr], v6638, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6629) T{*?}
v4650 <- LoadField(v6629 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5807 <- UnboxInt64([non-speculative], v4650) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5807, v1424) [-9223372036854775808, 9223372036854775807] int64
v7818 <- LoadField(v6629 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7818 T{*?}, v1424 T{int}, v4009, NoStoreBarrier)
ParallelMove rsi <- rsi
v1426 <- BinaryInt64Op(+ [tr], v1418 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B253
B252
ParallelMove rcx <- fp[-2]
ParallelMove rax <- fp[-4]
v5809 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v5809 T{_Smi}, v6639 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6640 <- LoadIndexed:12([_List] v197 T{_List}, v6639 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7765 <- LoadClassId(<non-smi> v6640 T{Uint8List}) int64
ParallelMove rcx <- rbx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7765 List.fillRange<0>, v6640 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4270 T{_Smi})
ParallelMove rdx <- C, r8 <- C, rcx <- fp[-6] goto:34 B262
B262
  Loop 73
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1468, v6577 T{_Smi}) T{bool} goto (260, 261)
B260
  Loop 73
v6641 <- LoadIndexed:26([_OneByteString] v19 T{_OneByteString}, v1468 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v1474 <- BinaryInt64Op(^ [tr], v6641, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6640) T{*?}
v4654 <- LoadField(v6640 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5813 <- UnboxInt64([non-speculative], v4654) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5813, v1474) [-9223372036854775808, 9223372036854775807] int64
v7819 <- LoadField(v6640 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7819 T{*?}, v1474 T{int}, v6642, NoStoreBarrier)
ParallelMove rdx <- rdx
v1476 <- BinaryInt64Op(+ [tr], v1468 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B262
B261
CheckWritable:34(v6640) T{*?}
v4658 <- LoadField:34(v6640 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rdx
v5815 <- UnboxInt64:34([non-speculative], v4658) [0, 4611686018427387903] int64
ParallelMove rdi <- C goto:34 B268
B268
  Loop 72
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<=, v1501, v6644 T{_Smi}) T{bool} goto (266, 267)
B266
  Loop 72
ParallelMove r9 <- rdi
v1505 <- BinaryInt64Op(^ [tr], v1501, v6576 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rsi, rbx <- r9
GenericCheckBound(v5815, v1505) [-9223372036854775808, 9223372036854775807] int64
v7820 <- LoadField(v6640 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7820 T{*?}, v1505 T{int}, v4007, NoStoreBarrier)
ParallelMove rdi <- rdi
v1506 <- BinaryInt64Op(+ [tr], v1501, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:36 B268
B267
ParallelMove rsi <- C, r9 <- C goto:34 B275
B275
  Loop 71
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1538, v6574 T{_Smi}) T{bool} goto (273, 274)
B273
  Loop 71
v6645 <- LoadIndexed:26([_OneByteString] v22 T{_OneByteString}, v1538 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v1544 <- BinaryInt64Op(^ [tr], v6645, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6640) T{*?}
ParallelMove rax <- rdx
v5819 <- UnboxInt64([non-speculative], v4658 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5819, v1544) [-9223372036854775808, 9223372036854775807] int64
v7821 <- LoadField(v6640 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7821 T{*?}, v1544 T{int}, v4015, NoStoreBarrier)
ParallelMove rsi <- rsi
v1546 <- BinaryInt64Op(+ [tr], v1538 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B275
B274
ParallelMove rsi <- C, r10 <- C goto:34 B281
B281
  Loop 70
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1567, v6574 T{_Smi}) T{bool} goto (279, 280)
B279
  Loop 70
v6647 <- LoadIndexed:26([_OneByteString] v89 T{_OneByteString}, v1567 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v1573 <- BinaryInt64Op(^ [tr], v6647, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6640) T{*?}
ParallelMove rax <- rdx
v5823 <- UnboxInt64([non-speculative], v4658 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5823, v1573) [-9223372036854775808, 9223372036854775807] int64
v7822 <- LoadField(v6640 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7822 T{*?}, v1573 T{int}, v4014, NoStoreBarrier)
ParallelMove rsi <- rsi
v1575 <- BinaryInt64Op(+ [tr], v1567 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B281
B280
ParallelMove rdi <- C, rsi <- C goto:34 B287
B287
  Loop 69
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1596, v6574 T{_Smi}) T{bool} goto (285, 286)
B285
  Loop 69
v6648 <- LoadIndexed:26([_OneByteString] v91 T{_OneByteString}, v1596 T{int}) [0, 255] int64
ParallelMove r12 <- rax
v1602 <- BinaryInt64Op(^ [tr], v6648, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6640) T{*?}
ParallelMove rax <- rdx
v5827 <- UnboxInt64([non-speculative], v4658 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- r12
GenericCheckBound(v5827, v1602) [-9223372036854775808, 9223372036854775807] int64
v7823 <- LoadField(v6640 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7823 T{*?}, v1602 T{int}, v4016, NoStoreBarrier)
ParallelMove rdi <- rdi
v1604 <- BinaryInt64Op(+ [tr], v1596 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:36 B287
B286
ParallelMove rsi <- C, r12 <- C goto:34 B293
B293
  Loop 68
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1625, v6574 T{_Smi}) T{bool} goto (291, 292)
B291
  Loop 68
v6650 <- LoadIndexed:26([_OneByteString] v26 T{_OneByteString}, v1625 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v1631 <- BinaryInt64Op(^ [tr], v6650, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6640) T{*?}
ParallelMove rax <- rdx
v5831 <- UnboxInt64([non-speculative], v4658 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5831, v1631) [-9223372036854775808, 9223372036854775807] int64
v7824 <- LoadField(v6640 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7824 T{*?}, v1631 T{int}, v4013, NoStoreBarrier)
ParallelMove rsi <- rsi
v1633 <- BinaryInt64Op(+ [tr], v1625 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B293
B292
ParallelMove rsi <- C, r13 <- C goto:34 B299
B299
  Loop 67
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1654, v6574 T{_Smi}) T{bool} goto (297, 298)
B297
  Loop 67
v6652 <- LoadIndexed:26([_OneByteString] v28 T{_OneByteString}, v1654 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v1660 <- BinaryInt64Op(^ [tr], v6652, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6640) T{*?}
ParallelMove rax <- rdx
v5835 <- UnboxInt64([non-speculative], v4658 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5835, v1660) [-9223372036854775808, 9223372036854775807] int64
v7825 <- LoadField(v6640 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7825 T{*?}, v1660 T{int}, v4013, NoStoreBarrier)
ParallelMove rsi <- rsi
v1662 <- BinaryInt64Op(+ [tr], v1654 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B299
B298
ParallelMove rdi <- C, rsi <- C goto:34 B305
B305
  Loop 66
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1683, v6574 T{_Smi}) T{bool} goto (303, 304)
B303
  Loop 66
v6653 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v1683 T{int}) [0, 255] int64
ParallelMove rax <- rax
v1689 <- BinaryInt64Op(^ [tr], v6653, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6640) T{*?}
ParallelMove rbx <- rdx
v5839 <- UnboxInt64([non-speculative], v4658 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rbx, rbx <- rax, r8 <- rax
GenericCheckBound(v5839, v1689) [-9223372036854775808, 9223372036854775807] int64
v7826 <- LoadField(v6640 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7826 T{*?}, v1689 T{int}, v4010, NoStoreBarrier)
ParallelMove rdi <- rdi
v1691 <- BinaryInt64Op(+ [tr], v1683 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi, r8 <- C goto:36 B305
B304
ParallelMove rdi <- C goto:34 B311
B311
  Loop 65
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1712, v6574 T{_Smi}) T{bool} goto (309, 310)
B309
  Loop 65
v6654 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v1712 T{int}) [0, 255] int64
ParallelMove rax <- rax
v1718 <- BinaryInt64Op(^ [tr], v6654, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6640) T{*?}
ParallelMove rbx <- rdx
v5843 <- UnboxInt64([non-speculative], v4658 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rbx, rbx <- rax, r8 <- rax
GenericCheckBound(v5843, v1718) [-9223372036854775808, 9223372036854775807] int64
v7827 <- LoadField(v6640 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7827 T{*?}, v1718 T{int}, v4009, NoStoreBarrier)
ParallelMove rdi <- rdi
v1720 <- BinaryInt64Op(+ [tr], v1712 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:36 B311
B310
ParallelMove r8 <- fp[-2]
ParallelMove rax <- fp[-4]
v5845 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v5845 T{_Smi}, v6642 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6655 <- LoadIndexed:12([_List] v197 T{_List}, v6642 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7766 <- LoadClassId(<non-smi> v6655 T{Uint8List}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7766 List.fillRange<0>, v6655 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4270 T{_Smi})
ParallelMove rdx <- C, r8 <- C, rcx <- fp[-6] goto:34 B320
B320
  Loop 64
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1762, v6577 T{_Smi}) T{bool} goto (318, 319)
B318
  Loop 64
v6656 <- LoadIndexed:26([_OneByteString] v19 T{_OneByteString}, v1762 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v1768 <- BinaryInt64Op(^ [tr], v6656, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6655) T{*?}
v4690 <- LoadField(v6655 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5849 <- UnboxInt64([non-speculative], v4690) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5849, v1768) [-9223372036854775808, 9223372036854775807] int64
v7828 <- LoadField(v6655 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7828 T{*?}, v1768 T{int}, v6642 T{_Smi}, NoStoreBarrier)
ParallelMove rdx <- rdx
v1770 <- BinaryInt64Op(+ [tr], v1762 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B320
B319
CheckWritable:34(v6655) T{*?}
v4694 <- LoadField:34(v6655 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rdx
v5851 <- UnboxInt64:34([non-speculative], v4694) [0, 4611686018427387903] int64
ParallelMove rdi <- C goto:34 B326
B326
  Loop 63
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<=, v1795, v6644 T{_Smi}) T{bool} goto (324, 325)
B324
  Loop 63
ParallelMove r9 <- rdi
v1799 <- BinaryInt64Op(^ [tr], v1795, v6576 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rsi, rbx <- r9
GenericCheckBound(v5851, v1799) [-9223372036854775808, 9223372036854775807] int64
v7829 <- LoadField(v6655 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7829 T{*?}, v1799 T{int}, v4007, NoStoreBarrier)
ParallelMove rdi <- rdi
v1800 <- BinaryInt64Op(+ [tr], v1795, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:36 B326
B325
ParallelMove rdi <- C, rsi <- C goto:34 B333
B333
  Loop 62
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1830, v6574 T{_Smi}) T{bool} goto (331, 332)
B331
  Loop 62
v6657 <- LoadIndexed:26([_OneByteString] v22 T{_OneByteString}, v1830 T{int}) [0, 255] int64
ParallelMove r9 <- rax
v1836 <- BinaryInt64Op(^ [tr], v6657, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6655) T{*?}
ParallelMove rax <- rdx
v5855 <- UnboxInt64([non-speculative], v4694 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- r9
GenericCheckBound(v5855, v1836) [-9223372036854775808, 9223372036854775807] int64
v7830 <- LoadField(v6655 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7830 T{*?}, v1836 T{int}, v4015, NoStoreBarrier)
ParallelMove rdi <- rdi
v1838 <- BinaryInt64Op(+ [tr], v1830 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:36 B333
B332
ParallelMove rsi <- C, r9 <- C goto:34 B339
B339
  Loop 61
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1859, v6574 T{_Smi}) T{bool} goto (337, 338)
B337
  Loop 61
v6658 <- LoadIndexed:26([_OneByteString] v89 T{_OneByteString}, v1859 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v1865 <- BinaryInt64Op(^ [tr], v6658, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6655) T{*?}
ParallelMove rax <- rdx
v5859 <- UnboxInt64([non-speculative], v4694 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5859, v1865) [-9223372036854775808, 9223372036854775807] int64
v7831 <- LoadField(v6655 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7831 T{*?}, v1865 T{int}, v4014, NoStoreBarrier)
ParallelMove rsi <- rsi
v1867 <- BinaryInt64Op(+ [tr], v1859 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B339
B338
ParallelMove rsi <- C, r10 <- C goto:34 B345
B345
  Loop 60
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1888, v6574 T{_Smi}) T{bool} goto (343, 344)
B343
  Loop 60
v6659 <- LoadIndexed:26([_OneByteString] v26 T{_OneByteString}, v1888 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v1894 <- BinaryInt64Op(^ [tr], v6659, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6655) T{*?}
ParallelMove rax <- rdx
v5863 <- UnboxInt64([non-speculative], v4694 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5863, v1894) [-9223372036854775808, 9223372036854775807] int64
v7832 <- LoadField(v6655 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7832 T{*?}, v1894 T{int}, v4013, NoStoreBarrier)
ParallelMove rsi <- rsi
v1896 <- BinaryInt64Op(+ [tr], v1888 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B345
B344
ParallelMove rsi <- C, r12 <- C goto:34 B351
B351
  Loop 59
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1917, v6574 T{_Smi}) T{bool} goto (349, 350)
B349
  Loop 59
v6660 <- LoadIndexed:26([_OneByteString] v28 T{_OneByteString}, v1917 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v1923 <- BinaryInt64Op(^ [tr], v6660, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6655) T{*?}
ParallelMove rax <- rdx
v5867 <- UnboxInt64([non-speculative], v4694 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5867, v1923) [-9223372036854775808, 9223372036854775807] int64
v7833 <- LoadField(v6655 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7833 T{*?}, v1923 T{int}, v4013, NoStoreBarrier)
ParallelMove rsi <- rsi
v1925 <- BinaryInt64Op(+ [tr], v1917 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B351
B350
ParallelMove rsi <- C, r13 <- C goto:34 B357
B357
  Loop 58
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1946, v6574 T{_Smi}) T{bool} goto (355, 356)
B355
  Loop 58
v6661 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v1946 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v1952 <- BinaryInt64Op(^ [tr], v6661, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6655) T{*?}
ParallelMove rax <- rdx
v5871 <- UnboxInt64([non-speculative], v4694 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5871, v1952) [-9223372036854775808, 9223372036854775807] int64
v7834 <- LoadField(v6655 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7834 T{*?}, v1952 T{int}, v4010, NoStoreBarrier)
ParallelMove rsi <- rsi
v1954 <- BinaryInt64Op(+ [tr], v1946 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B357
B356
ParallelMove rdi <- C, rsi <- C goto:34 B363
B363
  Loop 57
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v1975, v6574 T{_Smi}) T{bool} goto (361, 362)
B361
  Loop 57
v6662 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v1975 T{int}) [0, 255] int64
ParallelMove rax <- rax
v1981 <- BinaryInt64Op(^ [tr], v6662, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6655) T{*?}
ParallelMove rbx <- rdx
v5875 <- UnboxInt64([non-speculative], v4694 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rbx, rbx <- rax, r8 <- rax
GenericCheckBound(v5875, v1981) [-9223372036854775808, 9223372036854775807] int64
v7835 <- LoadField(v6655 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7835 T{*?}, v1981 T{int}, v4009, NoStoreBarrier)
ParallelMove rdi <- rdi
v1983 <- BinaryInt64Op(+ [tr], v1975 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:36 B363
B362
ParallelMove r8 <- fp[-2]
ParallelMove rax <- fp[-4]
v5877 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v5877 T{_Smi}, v6663 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6664 <- LoadIndexed:12([_List] v197 T{_List}, v6663 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7767 <- LoadClassId(<non-smi> v6664 T{Uint8List}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7767 List.fillRange<0>, v6664 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4271 T{_Smi})
ParallelMove rcx <- fp[-6]
CheckWritable:34(v6664) T{*?}
v4722 <- LoadField:34(v6664 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rdx
v5879 <- UnboxInt64:34([non-speculative], v4722) [0, 4611686018427387903] int64
ParallelMove rdi <- C goto:34 B372
B372
  Loop 56
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<=, v2028, v6666 T{_Smi}) T{bool} goto (370, 371)
B370
  Loop 56
ParallelMove r8 <- rdi
v2032 <- BinaryInt64Op(^ [tr], v2028, v6576 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rsi, rbx <- r8
GenericCheckBound(v5879, v2032) [-9223372036854775808, 9223372036854775807] int64
v7836 <- LoadField(v6664 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7836 T{*?}, v2032 T{int}, v6667, NoStoreBarrier)
ParallelMove rdi <- rdi
v2033 <- BinaryInt64Op(+ [tr], v2028, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:36 B372
B371
ParallelMove rsi <- C, r8 <- C goto:34 B379
B379
  Loop 55
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2065, v6574 T{_Smi}) T{bool} goto (377, 378)
B377
  Loop 55
v6668 <- LoadIndexed:26([_OneByteString] v89 T{_OneByteString}, v2065 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v2071 <- BinaryInt64Op(^ [tr], v6668, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6664) T{*?}
ParallelMove rax <- rdx
v5883 <- UnboxInt64([non-speculative], v4722 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5883, v2071) [-9223372036854775808, 9223372036854775807] int64
v7837 <- LoadField(v6664 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7837 T{*?}, v2071 T{int}, v4014, NoStoreBarrier)
ParallelMove rsi <- rsi
v2073 <- BinaryInt64Op(+ [tr], v2065 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B379
B378
ParallelMove rsi <- C, r9 <- C goto:34 B385
B385
  Loop 54
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2094, v6574 T{_Smi}) T{bool} goto (383, 384)
B383
  Loop 54
v6669 <- LoadIndexed:26([_OneByteString] v26 T{_OneByteString}, v2094 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v2100 <- BinaryInt64Op(^ [tr], v6669, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6664) T{*?}
ParallelMove rax <- rdx
v5887 <- UnboxInt64([non-speculative], v4722 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5887, v2100) [-9223372036854775808, 9223372036854775807] int64
v7838 <- LoadField(v6664 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7838 T{*?}, v2100 T{int}, v4013, NoStoreBarrier)
ParallelMove rsi <- rsi
v2102 <- BinaryInt64Op(+ [tr], v2094 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B385
B384
ParallelMove rsi <- C, r10 <- C goto:34 B391
B391
  Loop 53
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2123, v6574 T{_Smi}) T{bool} goto (389, 390)
B389
  Loop 53
v6670 <- LoadIndexed:26([_OneByteString] v28 T{_OneByteString}, v2123 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v2129 <- BinaryInt64Op(^ [tr], v6670, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6664) T{*?}
ParallelMove rax <- rdx
v5891 <- UnboxInt64([non-speculative], v4722 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5891, v2129) [-9223372036854775808, 9223372036854775807] int64
v7839 <- LoadField(v6664 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7839 T{*?}, v2129 T{int}, v4013, NoStoreBarrier)
ParallelMove rsi <- rsi
v2131 <- BinaryInt64Op(+ [tr], v2123 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B391
B390
ParallelMove rsi <- C, r12 <- C goto:34 B397
B397
  Loop 52
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2152, v6574 T{_Smi}) T{bool} goto (395, 396)
B395
  Loop 52
v6671 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v2152 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v2158 <- BinaryInt64Op(^ [tr], v6671, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6664) T{*?}
ParallelMove rax <- rdx
v5895 <- UnboxInt64([non-speculative], v4722 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5895, v2158) [-9223372036854775808, 9223372036854775807] int64
v7840 <- LoadField(v6664 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7840 T{*?}, v2158 T{int}, v4010, NoStoreBarrier)
ParallelMove rsi <- rsi
v2160 <- BinaryInt64Op(+ [tr], v2152 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B397
B396
ParallelMove rsi <- C, r13 <- C goto:34 B403
B403
  Loop 51
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2181, v6574 T{_Smi}) T{bool} goto (401, 402)
B401
  Loop 51
v6672 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v2181 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v2187 <- BinaryInt64Op(^ [tr], v6672, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6664) T{*?}
ParallelMove rax <- rdx
v5899 <- UnboxInt64([non-speculative], v4722 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5899, v2187) [-9223372036854775808, 9223372036854775807] int64
v7841 <- LoadField(v6664 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7841 T{*?}, v2187 T{int}, v4009, NoStoreBarrier)
ParallelMove rsi <- rsi
v2189 <- BinaryInt64Op(+ [tr], v2181 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B403
B402
ParallelMove rcx <- fp[-2]
ParallelMove rax <- fp[-4]
v5901 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v5901 T{_Smi}, v6667 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6673 <- LoadIndexed:12([_List] v197 T{_List}, v6667 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7768 <- LoadClassId(<non-smi> v6673 T{Uint8List}) int64
ParallelMove rcx <- rdx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7768 List.fillRange<0>, v6673 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4271 T{_Smi})
ParallelMove rcx <- fp[-6]
CheckWritable:34(v6673) T{*?}
v4746 <- LoadField:34(v6673 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rdx
v5903 <- UnboxInt64:34([non-speculative], v4746) [0, 4611686018427387903] int64
ParallelMove rdi <- C goto:34 B412
B412
  Loop 50
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<=, v2234, v6666 T{_Smi}) T{bool} goto (410, 411)
B410
  Loop 50
ParallelMove r8 <- rdi
v2238 <- BinaryInt64Op(^ [tr], v2234, v6576 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rsi, rbx <- r8
GenericCheckBound(v5903, v2238) [-9223372036854775808, 9223372036854775807] int64
v7842 <- LoadField(v6673 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7842 T{*?}, v2238 T{int}, v6667 T{_Smi}, NoStoreBarrier)
ParallelMove rdi <- rdi
v2239 <- BinaryInt64Op(+ [tr], v2234, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:36 B412
B411
ParallelMove rdi <- C, rsi <- C goto:34 B419
B419
  Loop 49
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2270, v6574 T{_Smi}) T{bool} goto (417, 418)
B417
  Loop 49
v6675 <- LoadIndexed:26([_OneByteString] v89 T{_OneByteString}, v2270 T{int}) [0, 255] int64
ParallelMove r8 <- rax
v2276 <- BinaryInt64Op(^ [tr], v6675, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6673) T{*?}
ParallelMove rax <- rdx
v5907 <- UnboxInt64([non-speculative], v4746 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- r8
GenericCheckBound(v5907, v2276) [-9223372036854775808, 9223372036854775807] int64
v7843 <- LoadField(v6673 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7843 T{*?}, v2276 T{int}, v4014, NoStoreBarrier)
ParallelMove rdi <- rdi
v2278 <- BinaryInt64Op(+ [tr], v2270 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:36 B419
B418
ParallelMove rsi <- C, r8 <- C goto:34 B425
B425
  Loop 48
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2299, v6574 T{_Smi}) T{bool} goto (423, 424)
B423
  Loop 48
v6676 <- LoadIndexed:26([_OneByteString] v26 T{_OneByteString}, v2299 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v2305 <- BinaryInt64Op(^ [tr], v6676, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6673) T{*?}
ParallelMove rax <- rdx
v5911 <- UnboxInt64([non-speculative], v4746 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5911, v2305) [-9223372036854775808, 9223372036854775807] int64
v7844 <- LoadField(v6673 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7844 T{*?}, v2305 T{int}, v4013, NoStoreBarrier)
ParallelMove rsi <- rsi
v2307 <- BinaryInt64Op(+ [tr], v2299 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B425
B424
ParallelMove rsi <- C, r9 <- C goto:34 B431
B431
  Loop 47
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2328, v6574 T{_Smi}) T{bool} goto (429, 430)
B429
  Loop 47
v6677 <- LoadIndexed:26([_OneByteString] v28 T{_OneByteString}, v2328 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v2334 <- BinaryInt64Op(^ [tr], v6677, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6673) T{*?}
ParallelMove rax <- rdx
v5915 <- UnboxInt64([non-speculative], v4746 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5915, v2334) [-9223372036854775808, 9223372036854775807] int64
v7845 <- LoadField(v6673 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7845 T{*?}, v2334 T{int}, v4013, NoStoreBarrier)
ParallelMove rsi <- rsi
v2336 <- BinaryInt64Op(+ [tr], v2328 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B431
B430
ParallelMove rsi <- C, r10 <- C goto:34 B437
B437
  Loop 46
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2357, v6574 T{_Smi}) T{bool} goto (435, 436)
B435
  Loop 46
v6678 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v2357 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v2363 <- BinaryInt64Op(^ [tr], v6678, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6673) T{*?}
ParallelMove rax <- rdx
v5919 <- UnboxInt64([non-speculative], v4746 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5919, v2363) [-9223372036854775808, 9223372036854775807] int64
v7846 <- LoadField(v6673 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7846 T{*?}, v2363 T{int}, v4010, NoStoreBarrier)
ParallelMove rsi <- rsi
v2365 <- BinaryInt64Op(+ [tr], v2357 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B437
B436
ParallelMove rsi <- C, r12 <- C goto:34 B443
B443
  Loop 45
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2386, v6574 T{_Smi}) T{bool} goto (441, 442)
B441
  Loop 45
v6679 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v2386 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v2392 <- BinaryInt64Op(^ [tr], v6679, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6673) T{*?}
ParallelMove rax <- rdx
v5923 <- UnboxInt64([non-speculative], v4746 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5923, v2392) [-9223372036854775808, 9223372036854775807] int64
v7847 <- LoadField(v6673 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7847 T{*?}, v2392 T{int}, v4009, NoStoreBarrier)
ParallelMove rsi <- rsi
v2394 <- BinaryInt64Op(+ [tr], v2386 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B443
B442
ParallelMove r13 <- fp[-2]
ParallelMove rax <- fp[-4]
v5925 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v5925 T{_Smi}, v6680 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6681 <- LoadIndexed:12([_List] v197 T{_List}, v6680 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7769 <- LoadClassId(<non-smi> v6681 T{Uint8List}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7769 List.fillRange<0>, v6681 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v92 T{_Smi})
ParallelMove rsi <- C, rdx <- C, rcx <- fp[-6] goto:34 B452
B452
  Loop 44
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2435, v6574 T{_Smi}) T{bool} goto (450, 451)
B450
  Loop 44
v6682 <- LoadIndexed:26([_OneByteString] v125 T{_OneByteString}, v2435 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v2441 <- BinaryInt64Op(^ [tr], v6682, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6681) T{*?}
v4770 <- LoadField(v6681 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5929 <- UnboxInt64([non-speculative], v4770) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v5929, v2441) [-9223372036854775808, 9223372036854775807] int64
v7848 <- LoadField(v6681 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7848 T{*?}, v2441 T{int}, v6642 T{_Smi}, NoStoreBarrier)
ParallelMove rsi <- rsi
v2443 <- BinaryInt64Op(+ [tr], v2435 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B452
B451
ParallelMove r8 <- fp[-2]
ParallelMove rax <- fp[-4]
v5931 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v5931 T{_Smi}, v6606 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6683 <- LoadIndexed:12([_List] v197 T{_List}, v6606 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7770 <- LoadClassId(<non-smi> v6683 T{Uint8List}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7770 List.fillRange<0>, v6683 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4269 T{_Smi})
ParallelMove rdx <- C, r8 <- C, rcx <- fp[-6] goto:34 B461
B461
  Loop 43
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2485, v6577 T{_Smi}) T{bool} goto (459, 460)
B459
  Loop 43
v6684 <- LoadIndexed:26([_OneByteString] v19 T{_OneByteString}, v2485 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v2491 <- BinaryInt64Op(^ [tr], v6684, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6683) T{*?}
v4774 <- LoadField(v6683 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5935 <- UnboxInt64([non-speculative], v4774) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5935, v2491) [-9223372036854775808, 9223372036854775807] int64
v7849 <- LoadField(v6683 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7849 T{*?}, v2491 T{int}, v6631, NoStoreBarrier)
ParallelMove rdx <- rdx
v2493 <- BinaryInt64Op(+ [tr], v2485 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B461
B460
ParallelMove rdx <- C, r9 <- C goto:34 B467
B467
  Loop 42
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2515, v6574 T{_Smi}) T{bool} goto (465, 466)
B465
  Loop 42
v6685 <- LoadIndexed:26([_OneByteString] v20 T{_OneByteString}, v2515 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v2521 <- BinaryInt64Op(^ [tr], v6685, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6683) T{*?}
v4778 <- LoadField(v6683 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5939 <- UnboxInt64([non-speculative], v4778) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5939, v2521) [-9223372036854775808, 9223372036854775807] int64
v7850 <- LoadField(v6683 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7850 T{*?}, v2521 T{int}, v6686, NoStoreBarrier)
ParallelMove rdx <- rdx
v2523 <- BinaryInt64Op(+ [tr], v2515 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B467
B466
ParallelMove rdx <- C, r10 <- C goto:34 B473
B473
  Loop 41
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2544, v6596 T{_Smi}) T{bool} goto (471, 472)
B471
  Loop 41
v6687 <- LoadIndexed:26([_OneByteString] v42 T{_OneByteString}, v2544 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v2550 <- BinaryInt64Op(^ [tr], v6687, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6683) T{*?}
v4782 <- LoadField(v6683 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5943 <- UnboxInt64([non-speculative], v4782) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5943, v2550) [-9223372036854775808, 9223372036854775807] int64
v7851 <- LoadField(v6683 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7851 T{*?}, v2550 T{int}, v4011, NoStoreBarrier)
ParallelMove rdx <- rdx
v2552 <- BinaryInt64Op(+ [tr], v2544 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B473
B472
ParallelMove rdx <- C, r12 <- C goto:34 B479
B479
  Loop 40
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2574, v6574 T{_Smi}) T{bool} goto (477, 478)
B477
  Loop 40
v6688 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v2574 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v2580 <- BinaryInt64Op(^ [tr], v6688, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6683) T{*?}
v4786 <- LoadField(v6683 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5947 <- UnboxInt64([non-speculative], v4786) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5947, v2580) [-9223372036854775808, 9223372036854775807] int64
v7852 <- LoadField(v6683 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7852 T{*?}, v2580 T{int}, v4010, NoStoreBarrier)
ParallelMove rdx <- rdx
v2582 <- BinaryInt64Op(+ [tr], v2574 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B479
B478
ParallelMove rdx <- C, r13 <- C goto:34 B485
B485
  Loop 39
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2603, v6574 T{_Smi}) T{bool} goto (483, 484)
B483
  Loop 39
v6689 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v2603 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v2609 <- BinaryInt64Op(^ [tr], v6689, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6683) T{*?}
v4790 <- LoadField(v6683 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5951 <- UnboxInt64([non-speculative], v4790) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5951, v2609) [-9223372036854775808, 9223372036854775807] int64
v7853 <- LoadField(v6683 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7853 T{*?}, v2609 T{int}, v4009, NoStoreBarrier)
ParallelMove rdx <- rdx
v2611 <- BinaryInt64Op(+ [tr], v2603 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B485
B484
ParallelMove rcx <- fp[-2]
ParallelMove rax <- fp[-4]
v5953 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v5953 T{_Smi}, v6686 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6690 <- LoadIndexed:12([_List] v197 T{_List}, v6686 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7771 <- LoadClassId(<non-smi> v6690 T{Uint8List}) int64
ParallelMove rcx <- rdx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7771 List.fillRange<0>, v6690 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4269 T{_Smi})
ParallelMove rdx <- C, r8 <- C, rcx <- fp[-6] goto:34 B494
B494
  Loop 38
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2653, v6577 T{_Smi}) T{bool} goto (492, 493)
B492
  Loop 38
v6691 <- LoadIndexed:26([_OneByteString] v19 T{_OneByteString}, v2653 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v2659 <- BinaryInt64Op(^ [tr], v6691, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6690) T{*?}
v4794 <- LoadField(v6690 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5957 <- UnboxInt64([non-speculative], v4794) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5957, v2659) [-9223372036854775808, 9223372036854775807] int64
v7854 <- LoadField(v6690 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7854 T{*?}, v2659 T{int}, v6631, NoStoreBarrier)
ParallelMove rdx <- rdx
v2661 <- BinaryInt64Op(+ [tr], v2653 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B494
B493
ParallelMove rdx <- C, r9 <- C goto:34 B500
B500
  Loop 37
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2683, v6574 T{_Smi}) T{bool} goto (498, 499)
B498
  Loop 37
v6692 <- LoadIndexed:26([_OneByteString] v20 T{_OneByteString}, v2683 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v2689 <- BinaryInt64Op(^ [tr], v6692, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6690) T{*?}
v4798 <- LoadField(v6690 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5961 <- UnboxInt64([non-speculative], v4798) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5961, v2689) [-9223372036854775808, 9223372036854775807] int64
v7855 <- LoadField(v6690 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7855 T{*?}, v2689 T{int}, v6693, NoStoreBarrier)
ParallelMove rdx <- rdx
v2691 <- BinaryInt64Op(+ [tr], v2683 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B500
B499
ParallelMove rdx <- C, r10 <- C goto:34 B506
B506
  Loop 36
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2712, v6596 T{_Smi}) T{bool} goto (504, 505)
B504
  Loop 36
v6694 <- LoadIndexed:26([_OneByteString] v42 T{_OneByteString}, v2712 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v2718 <- BinaryInt64Op(^ [tr], v6694, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6690) T{*?}
v4802 <- LoadField(v6690 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5965 <- UnboxInt64([non-speculative], v4802) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5965, v2718) [-9223372036854775808, 9223372036854775807] int64
v7856 <- LoadField(v6690 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7856 T{*?}, v2718 T{int}, v4011, NoStoreBarrier)
ParallelMove rdx <- rdx
v2720 <- BinaryInt64Op(+ [tr], v2712 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B506
B505
ParallelMove rdx <- C, r12 <- C goto:34 B512
B512
  Loop 35
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2742, v6574 T{_Smi}) T{bool} goto (510, 511)
B510
  Loop 35
v6695 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v2742 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v2748 <- BinaryInt64Op(^ [tr], v6695, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6690) T{*?}
v4806 <- LoadField(v6690 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5969 <- UnboxInt64([non-speculative], v4806) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5969, v2748) [-9223372036854775808, 9223372036854775807] int64
v7857 <- LoadField(v6690 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7857 T{*?}, v2748 T{int}, v4010, NoStoreBarrier)
ParallelMove rdx <- rdx
v2750 <- BinaryInt64Op(+ [tr], v2742 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B512
B511
ParallelMove rdx <- C, r13 <- C goto:34 B518
B518
  Loop 34
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2771, v6574 T{_Smi}) T{bool} goto (516, 517)
B516
  Loop 34
v6696 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v2771 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v2777 <- BinaryInt64Op(^ [tr], v6696, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6690) T{*?}
v4810 <- LoadField(v6690 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5973 <- UnboxInt64([non-speculative], v4810) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5973, v2777) [-9223372036854775808, 9223372036854775807] int64
v7858 <- LoadField(v6690 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7858 T{*?}, v2777 T{int}, v4009, NoStoreBarrier)
ParallelMove rdx <- rdx
v2779 <- BinaryInt64Op(+ [tr], v2771 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B518
B517
ParallelMove rcx <- fp[-2]
ParallelMove rax <- fp[-4]
v5975 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v5975 T{_Smi}, v6693 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6697 <- LoadIndexed:12([_List] v197 T{_List}, v6693 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7772 <- LoadClassId(<non-smi> v6697 T{Uint8List}) int64
ParallelMove rcx <- rdx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7772 List.fillRange<0>, v6697 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4269 T{_Smi})
ParallelMove rdx <- C, r8 <- C, rcx <- fp[-6] goto:34 B527
B527
  Loop 33
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2821, v6577 T{_Smi}) T{bool} goto (525, 526)
B525
  Loop 33
v6698 <- LoadIndexed:26([_OneByteString] v19 T{_OneByteString}, v2821 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v2827 <- BinaryInt64Op(^ [tr], v6698, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6697) T{*?}
v4814 <- LoadField(v6697 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5979 <- UnboxInt64([non-speculative], v4814) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5979, v2827) [-9223372036854775808, 9223372036854775807] int64
v7859 <- LoadField(v6697 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7859 T{*?}, v2827 T{int}, v6631, NoStoreBarrier)
ParallelMove rdx <- rdx
v2829 <- BinaryInt64Op(+ [tr], v2821 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B527
B526
ParallelMove rdx <- C, r9 <- C goto:34 B533
B533
  Loop 32
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2851, v6574 T{_Smi}) T{bool} goto (531, 532)
B531
  Loop 32
v6699 <- LoadIndexed:26([_OneByteString] v26 T{_OneByteString}, v2851 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v2857 <- BinaryInt64Op(^ [tr], v6699, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6697) T{*?}
v4818 <- LoadField(v6697 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5983 <- UnboxInt64([non-speculative], v4818) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5983, v2857) [-9223372036854775808, 9223372036854775807] int64
v7860 <- LoadField(v6697 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7860 T{*?}, v2857 T{int}, v6606 T{_Smi}, NoStoreBarrier)
ParallelMove rdx <- rdx
v2859 <- BinaryInt64Op(+ [tr], v2851 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B533
B532
ParallelMove rdx <- C, r10 <- C goto:34 B539
B539
  Loop 31
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2880, v6574 T{_Smi}) T{bool} goto (537, 538)
B537
  Loop 31
v6700 <- LoadIndexed:26([_OneByteString] v28 T{_OneByteString}, v2880 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v2886 <- BinaryInt64Op(^ [tr], v6700, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6697) T{*?}
v4822 <- LoadField(v6697 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5987 <- UnboxInt64([non-speculative], v4822) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5987, v2886) [-9223372036854775808, 9223372036854775807] int64
v7861 <- LoadField(v6697 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7861 T{*?}, v2886 T{int}, v4012, NoStoreBarrier)
ParallelMove rdx <- rdx
v2888 <- BinaryInt64Op(+ [tr], v2880 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B539
B538
ParallelMove rdx <- C, r12 <- C goto:34 B545
B545
  Loop 30
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2909, v6574 T{_Smi}) T{bool} goto (543, 544)
B543
  Loop 30
v6701 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v2909 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v2915 <- BinaryInt64Op(^ [tr], v6701, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6697) T{*?}
v4826 <- LoadField(v6697 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5991 <- UnboxInt64([non-speculative], v4826) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5991, v2915) [-9223372036854775808, 9223372036854775807] int64
v7862 <- LoadField(v6697 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7862 T{*?}, v2915 T{int}, v4010, NoStoreBarrier)
ParallelMove rdx <- rdx
v2917 <- BinaryInt64Op(+ [tr], v2909 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B545
B544
ParallelMove rdx <- C, r13 <- C goto:34 B551
B551
  Loop 29
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2938, v6574 T{_Smi}) T{bool} goto (549, 550)
B549
  Loop 29
v6702 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v2938 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v2944 <- BinaryInt64Op(^ [tr], v6702, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6697) T{*?}
v4830 <- LoadField(v6697 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v5995 <- UnboxInt64([non-speculative], v4830) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v5995, v2944) [-9223372036854775808, 9223372036854775807] int64
v7863 <- LoadField(v6697 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7863 T{*?}, v2944 T{int}, v4009, NoStoreBarrier)
ParallelMove rdx <- rdx
v2946 <- BinaryInt64Op(+ [tr], v2938 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B551
B550
ParallelMove rcx <- fp[-2]
ParallelMove rax <- fp[-4]
v5997 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v5997 T{_Smi}, v6615 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6703 <- LoadIndexed:12([_List] v197 T{_List}, v6615 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7773 <- LoadClassId(<non-smi> v6703 T{Uint8List}) int64
ParallelMove rcx <- rdx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7773 List.fillRange<0>, v6703 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4269 T{_Smi})
ParallelMove rdx <- C, r8 <- C, rcx <- fp[-6] goto:34 B560
B560
  Loop 28
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v2988, v6577 T{_Smi}) T{bool} goto (558, 559)
B558
  Loop 28
v6704 <- LoadIndexed:26([_OneByteString] v19 T{_OneByteString}, v2988 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v2994 <- BinaryInt64Op(^ [tr], v6704, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6703) T{*?}
v4834 <- LoadField(v6703 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6001 <- UnboxInt64([non-speculative], v4834) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v6001, v2994) [-9223372036854775808, 9223372036854775807] int64
v7864 <- LoadField(v6703 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7864 T{*?}, v2994 T{int}, v6631, NoStoreBarrier)
ParallelMove rdx <- rdx
v2996 <- BinaryInt64Op(+ [tr], v2988 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B560
B559
ParallelMove rdx <- C, r9 <- C goto:34 B566
B566
  Loop 27
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3018, v6574 T{_Smi}) T{bool} goto (564, 565)
B564
  Loop 27
v6705 <- LoadIndexed:26([_OneByteString] v20 T{_OneByteString}, v3018 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v3024 <- BinaryInt64Op(^ [tr], v6705, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6703) T{*?}
v4838 <- LoadField(v6703 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6005 <- UnboxInt64([non-speculative], v4838) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v6005, v3024) [-9223372036854775808, 9223372036854775807] int64
v7865 <- LoadField(v6703 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7865 T{*?}, v3024 T{int}, v6636, NoStoreBarrier)
ParallelMove rdx <- rdx
v3026 <- BinaryInt64Op(+ [tr], v3018 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B566
B565
ParallelMove rdx <- C, r10 <- C goto:34 B572
B572
  Loop 26
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3047, v6574 T{_Smi}) T{bool} goto (570, 571)
B570
  Loop 26
v6706 <- LoadIndexed:26([_OneByteString] v26 T{_OneByteString}, v3047 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v3053 <- BinaryInt64Op(^ [tr], v6706, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6703) T{*?}
v4842 <- LoadField(v6703 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6009 <- UnboxInt64([non-speculative], v4842) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v6009, v3053) [-9223372036854775808, 9223372036854775807] int64
v7866 <- LoadField(v6703 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7866 T{*?}, v3053 T{int}, v6615 T{_Smi}, NoStoreBarrier)
ParallelMove rdx <- rdx
v3055 <- BinaryInt64Op(+ [tr], v3047 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B572
B571
ParallelMove rdx <- C, r12 <- C goto:34 B578
B578
  Loop 25
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3076, v6574 T{_Smi}) T{bool} goto (576, 577)
B576
  Loop 25
v6707 <- LoadIndexed:26([_OneByteString] v28 T{_OneByteString}, v3076 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v3082 <- BinaryInt64Op(^ [tr], v6707, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6703) T{*?}
v4846 <- LoadField(v6703 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6013 <- UnboxInt64([non-speculative], v4846) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v6013, v3082) [-9223372036854775808, 9223372036854775807] int64
v7867 <- LoadField(v6703 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7867 T{*?}, v3082 T{int}, v4011, NoStoreBarrier)
ParallelMove rdx <- rdx
v3084 <- BinaryInt64Op(+ [tr], v3076 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B578
B577
ParallelMove rdx <- C, r13 <- C goto:34 B584
B584
  Loop 24
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3105, v6574 T{_Smi}) T{bool} goto (582, 583)
B582
  Loop 24
v6708 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v3105 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v3111 <- BinaryInt64Op(^ [tr], v6708, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6703) T{*?}
v4850 <- LoadField(v6703 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6017 <- UnboxInt64([non-speculative], v4850) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v6017, v3111) [-9223372036854775808, 9223372036854775807] int64
v7868 <- LoadField(v6703 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7868 T{*?}, v3111 T{int}, v4010, NoStoreBarrier)
ParallelMove rdx <- rdx
v3113 <- BinaryInt64Op(+ [tr], v3105 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B584
B583
ParallelMove rsi <- C, rdx <- C goto:34 B590
B590
  Loop 23
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3134, v6574 T{_Smi}) T{bool} goto (588, 589)
B588
  Loop 23
v6709 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v3134 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v3140 <- BinaryInt64Op(^ [tr], v6709, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6703) T{*?}
v4854 <- LoadField(v6703 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6021 <- UnboxInt64([non-speculative], v4854) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v6021, v3140) [-9223372036854775808, 9223372036854775807] int64
v7869 <- LoadField(v6703 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7869 T{*?}, v3140 T{int}, v4009, NoStoreBarrier)
ParallelMove rsi <- rsi
v3142 <- BinaryInt64Op(+ [tr], v3134 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B590
B589
ParallelMove rcx <- fp[-2]
ParallelMove rax <- fp[-4]
v6023 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v6023 T{_Smi}, v6636 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6710 <- LoadIndexed:12([_List] v197 T{_List}, v6636 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7774 <- LoadClassId(<non-smi> v6710 T{Uint8List}) int64
ParallelMove rcx <- rbx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7774 List.fillRange<0>, v6710 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4269 T{_Smi})
ParallelMove rdx <- C, r8 <- C, rcx <- fp[-6] goto:34 B599
B599
  Loop 22
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3184, v6577 T{_Smi}) T{bool} goto (597, 598)
B597
  Loop 22
v6711 <- LoadIndexed:26([_OneByteString] v19 T{_OneByteString}, v3184 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v3190 <- BinaryInt64Op(^ [tr], v6711, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6710) T{*?}
v4858 <- LoadField(v6710 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6027 <- UnboxInt64([non-speculative], v4858) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v6027, v3190) [-9223372036854775808, 9223372036854775807] int64
v7870 <- LoadField(v6710 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7870 T{*?}, v3190 T{int}, v6631, NoStoreBarrier)
ParallelMove rdx <- rdx
v3192 <- BinaryInt64Op(+ [tr], v3184 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B599
B598
ParallelMove rsi <- C, rdx <- C goto:34 B605
B605
  Loop 21
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3214, v6574 T{_Smi}) T{bool} goto (603, 604)
B603
  Loop 21
v6712 <- LoadIndexed:26([_OneByteString] v20 T{_OneByteString}, v3214 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v3220 <- BinaryInt64Op(^ [tr], v6712, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6710) T{*?}
v4862 <- LoadField(v6710 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6031 <- UnboxInt64([non-speculative], v4862) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v6031, v3220) [-9223372036854775808, 9223372036854775807] int64
v7871 <- LoadField(v6710 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7871 T{*?}, v3220 T{int}, v6713, NoStoreBarrier)
ParallelMove rsi <- rsi
v3222 <- BinaryInt64Op(+ [tr], v3214 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B605
B604
ParallelMove rdx <- C, r9 <- C goto:34 B611
B611
  Loop 20
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3243, v6596 T{_Smi}) T{bool} goto (609, 610)
B609
  Loop 20
v6714 <- LoadIndexed:26([_OneByteString] v42 T{_OneByteString}, v3243 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v3249 <- BinaryInt64Op(^ [tr], v6714, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6710) T{*?}
v4866 <- LoadField(v6710 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6035 <- UnboxInt64([non-speculative], v4866) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v6035, v3249) [-9223372036854775808, 9223372036854775807] int64
v7872 <- LoadField(v6710 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7872 T{*?}, v3249 T{int}, v4011, NoStoreBarrier)
ParallelMove rdx <- rdx
v3251 <- BinaryInt64Op(+ [tr], v3243 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B611
B610
ParallelMove rdx <- C, r10 <- C goto:34 B617
B617
  Loop 19
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3273, v6574 T{_Smi}) T{bool} goto (615, 616)
B615
  Loop 19
v6715 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v3273 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v3279 <- BinaryInt64Op(^ [tr], v6715, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6710) T{*?}
v4870 <- LoadField(v6710 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6039 <- UnboxInt64([non-speculative], v4870) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v6039, v3279) [-9223372036854775808, 9223372036854775807] int64
v7873 <- LoadField(v6710 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7873 T{*?}, v3279 T{int}, v4010, NoStoreBarrier)
ParallelMove rdx <- rdx
v3281 <- BinaryInt64Op(+ [tr], v3273 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B617
B616
ParallelMove rdx <- C, r12 <- C goto:34 B623
B623
  Loop 18
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3302, v6574 T{_Smi}) T{bool} goto (621, 622)
B621
  Loop 18
v6716 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v3302 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v3308 <- BinaryInt64Op(^ [tr], v6716, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6710) T{*?}
v4874 <- LoadField(v6710 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6043 <- UnboxInt64([non-speculative], v4874) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v6043, v3308) [-9223372036854775808, 9223372036854775807] int64
v7874 <- LoadField(v6710 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7874 T{*?}, v3308 T{int}, v4009, NoStoreBarrier)
ParallelMove rdx <- rdx
v3310 <- BinaryInt64Op(+ [tr], v3302 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B623
B622
ParallelMove r13 <- fp[-2]
ParallelMove rax <- fp[-4]
v6045 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v6045 T{_Smi}, v6713 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6717 <- LoadIndexed:12([_List] v197 T{_List}, v6713 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7775 <- LoadClassId(<non-smi> v6717 T{Uint8List}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7775 List.fillRange<0>, v6717 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4269 T{_Smi})
ParallelMove rdx <- C, r8 <- C, rcx <- fp[-6] goto:34 B632
B632
  Loop 17
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3352, v6577 T{_Smi}) T{bool} goto (630, 631)
B630
  Loop 17
v6718 <- LoadIndexed:26([_OneByteString] v19 T{_OneByteString}, v3352 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v3358 <- BinaryInt64Op(^ [tr], v6718, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6717) T{*?}
v4878 <- LoadField(v6717 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6049 <- UnboxInt64([non-speculative], v4878) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v6049, v3358) [-9223372036854775808, 9223372036854775807] int64
v7875 <- LoadField(v6717 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7875 T{*?}, v3358 T{int}, v6631, NoStoreBarrier)
ParallelMove rdx <- rdx
v3360 <- BinaryInt64Op(+ [tr], v3352 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B632
B631
ParallelMove rsi <- C, rdx <- C goto:34 B638
B638
  Loop 16
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3382, v6596 T{_Smi}) T{bool} goto (636, 637)
B636
  Loop 16
v6719 <- LoadIndexed:26([_OneByteString] v42 T{_OneByteString}, v3382 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v3388 <- BinaryInt64Op(^ [tr], v6719, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6717) T{*?}
v4882 <- LoadField(v6717 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6053 <- UnboxInt64([non-speculative], v4882) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v6053, v3388) [-9223372036854775808, 9223372036854775807] int64
v7876 <- LoadField(v6717 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7876 T{*?}, v3388 T{int}, v4011, NoStoreBarrier)
ParallelMove rsi <- rsi
v3390 <- BinaryInt64Op(+ [tr], v3382 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B638
B637
ParallelMove rdx <- C, r9 <- C goto:34 B644
B644
  Loop 15
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3412, v6574 T{_Smi}) T{bool} goto (642, 643)
B642
  Loop 15
v6720 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v3412 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v3418 <- BinaryInt64Op(^ [tr], v6720, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6717) T{*?}
v4886 <- LoadField(v6717 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6057 <- UnboxInt64([non-speculative], v4886) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v6057, v3418) [-9223372036854775808, 9223372036854775807] int64
v7877 <- LoadField(v6717 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7877 T{*?}, v3418 T{int}, v4010, NoStoreBarrier)
ParallelMove rdx <- rdx
v3420 <- BinaryInt64Op(+ [tr], v3412 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B644
B643
ParallelMove rdx <- C, r10 <- C goto:34 B650
B650
  Loop 14
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3441, v6574 T{_Smi}) T{bool} goto (648, 649)
B648
  Loop 14
v6721 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v3441 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v3447 <- BinaryInt64Op(^ [tr], v6721, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6717) T{*?}
v4890 <- LoadField(v6717 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6061 <- UnboxInt64([non-speculative], v4890) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v6061, v3447) [-9223372036854775808, 9223372036854775807] int64
v7878 <- LoadField(v6717 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7878 T{*?}, v3447 T{int}, v4009, NoStoreBarrier)
ParallelMove rdx <- rdx
v3449 <- BinaryInt64Op(+ [tr], v3441 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B650
B649
ParallelMove r12 <- fp[-2]
ParallelMove rax <- fp[-4]
v6063 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v6063 T{_Smi}, v6631 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6722 <- LoadIndexed:12([_List] v197 T{_List}, v6631 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7776 <- LoadClassId(<non-smi> v6722 T{Uint8List}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7776 List.fillRange<0>, v6722 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4269 T{_Smi})
ParallelMove rdx <- C, r8 <- C, rcx <- fp[-6] goto:34 B659
B659
  Loop 13
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3491, v6577 T{_Smi}) T{bool} goto (657, 658)
B657
  Loop 13
v6723 <- LoadIndexed:26([_OneByteString] v19 T{_OneByteString}, v3491 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v3497 <- BinaryInt64Op(^ [tr], v6723, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6722) T{*?}
v4894 <- LoadField(v6722 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6067 <- UnboxInt64([non-speculative], v4894) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v6067, v3497) [-9223372036854775808, 9223372036854775807] int64
v7879 <- LoadField(v6722 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7879 T{*?}, v3497 T{int}, v6631 T{_Smi}, NoStoreBarrier)
ParallelMove rdx <- rdx
v3499 <- BinaryInt64Op(+ [tr], v3491 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B659
B658
ParallelMove rsi <- C, rdx <- C goto:34 B665
B665
  Loop 12
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3521, v6574 T{_Smi}) T{bool} goto (663, 664)
B663
  Loop 12
v6724 <- LoadIndexed:26([_OneByteString] v26 T{_OneByteString}, v3521 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v3527 <- BinaryInt64Op(^ [tr], v6724, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6722) T{*?}
v4898 <- LoadField(v6722 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6071 <- UnboxInt64([non-speculative], v4898) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v6071, v3527) [-9223372036854775808, 9223372036854775807] int64
v7880 <- LoadField(v6722 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7880 T{*?}, v3527 T{int}, v6615 T{_Smi}, NoStoreBarrier)
ParallelMove rsi <- rsi
v3529 <- BinaryInt64Op(+ [tr], v3521 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B665
B664
ParallelMove rsi <- C, rdx <- C goto:34 B671
B671
  Loop 11
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3550, v6574 T{_Smi}) T{bool} goto (669, 670)
B669
  Loop 11
v6725 <- LoadIndexed:26([_OneByteString] v28 T{_OneByteString}, v3550 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v3556 <- BinaryInt64Op(^ [tr], v6725, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6722) T{*?}
v4902 <- LoadField(v6722 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6075 <- UnboxInt64([non-speculative], v4902) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v6075, v3556) [-9223372036854775808, 9223372036854775807] int64
v7881 <- LoadField(v6722 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7881 T{*?}, v3556 T{int}, v4011, NoStoreBarrier)
ParallelMove rsi <- rsi
v3558 <- BinaryInt64Op(+ [tr], v3550 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B671
B670
ParallelMove rdx <- C, r9 <- C goto:34 B677
B677
  Loop 10
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3579, v6574 T{_Smi}) T{bool} goto (675, 676)
B675
  Loop 10
v6726 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v3579 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v3585 <- BinaryInt64Op(^ [tr], v6726, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6722) T{*?}
v4906 <- LoadField(v6722 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6079 <- UnboxInt64([non-speculative], v4906) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v6079, v3585) [-9223372036854775808, 9223372036854775807] int64
v7882 <- LoadField(v6722 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7882 T{*?}, v3585 T{int}, v4010, NoStoreBarrier)
ParallelMove rdx <- rdx
v3587 <- BinaryInt64Op(+ [tr], v3579 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B677
B676
ParallelMove rdx <- C, r10 <- C goto:34 B683
B683
  Loop 9
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3608, v6574 T{_Smi}) T{bool} goto (681, 682)
B681
  Loop 9
v6727 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v3608 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v3614 <- BinaryInt64Op(^ [tr], v6727, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6722) T{*?}
v4910 <- LoadField(v6722 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6083 <- UnboxInt64([non-speculative], v4910) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v6083, v3614) [-9223372036854775808, 9223372036854775807] int64
v7883 <- LoadField(v6722 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7883 T{*?}, v3614 T{int}, v4009, NoStoreBarrier)
ParallelMove rdx <- rdx
v3616 <- BinaryInt64Op(+ [tr], v3608 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B683
B682
ParallelMove r12 <- fp[-2]
ParallelMove rax <- fp[-4]
v6085 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v6085 T{_Smi}, v6728 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6729 <- LoadIndexed:12([_List] v197 T{_List}, v6728 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7777 <- LoadClassId(<non-smi> v6729 T{Uint8List}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7777 List.fillRange<0>, v6729 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4272 T{_Smi})
ParallelMove rdx <- C, r8 <- C, rcx <- fp[-6] goto:34 B692
B692
  Loop 8
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3658, v6577 T{_Smi}) T{bool} goto (690, 691)
B690
  Loop 8
v6730 <- LoadIndexed:26([_OneByteString] v19 T{_OneByteString}, v3658 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v3664 <- BinaryInt64Op(^ [tr], v6730, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6729) T{*?}
v4914 <- LoadField(v6729 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6089 <- UnboxInt64([non-speculative], v4914) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v6089, v3664) [-9223372036854775808, 9223372036854775807] int64
v7884 <- LoadField(v6729 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7884 T{*?}, v3664 T{int}, v6728 T{_Smi}, NoStoreBarrier)
ParallelMove rdx <- rdx
v3666 <- BinaryInt64Op(+ [tr], v3658 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B692
B691
ParallelMove rdx <- C, r9 <- C goto:34 B698
B698
  Loop 7
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3688, v6574 T{_Smi}) T{bool} goto (696, 697)
B696
  Loop 7
v6731 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v3688 T{int}) [0, 255] int64
ParallelMove rsi <- rax
v3694 <- BinaryInt64Op(^ [tr], v6731, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6729) T{*?}
v4918 <- LoadField(v6729 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6093 <- UnboxInt64([non-speculative], v4918) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound(v6093, v3694) [-9223372036854775808, 9223372036854775807] int64
v7885 <- LoadField(v6729 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7885 T{*?}, v3694 T{int}, v6728 T{_Smi}, NoStoreBarrier)
ParallelMove rdx <- rdx
v3696 <- BinaryInt64Op(+ [tr], v3688 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:36 B698
B697
ParallelMove rsi <- C, rdx <- C goto:34 B704
B704
  Loop 6
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3717, v6574 T{_Smi}) T{bool} goto (702, 703)
B702
  Loop 6
v6732 <- LoadIndexed:26([_OneByteString] v34 T{_OneByteString}, v3717 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v3723 <- BinaryInt64Op(^ [tr], v6732, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6729) T{*?}
v4922 <- LoadField(v6729 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6097 <- UnboxInt64([non-speculative], v4922) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v6097, v3723) [-9223372036854775808, 9223372036854775807] int64
v7886 <- LoadField(v6729 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7886 T{*?}, v3723 T{int}, v4009, NoStoreBarrier)
ParallelMove rsi <- rsi
v3725 <- BinaryInt64Op(+ [tr], v3717 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B704
B703
ParallelMove r10 <- fp[-2]
ParallelMove rax <- fp[-4]
v6099 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v6099 T{_Smi}, v6733 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6734 <- LoadIndexed:12([_List] v197 T{_List}, v6733 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7778 <- LoadClassId(<non-smi> v6734 T{Uint8List}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7778 List.fillRange<0>, v6734 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4273 T{_Smi})
ParallelMove rsi <- C, rcx <- C, rdx <- fp[-6] goto:34 B713
B713
  Loop 5
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3767, v6577 T{_Smi}) T{bool} goto (711, 712)
B711
  Loop 5
v6735 <- LoadIndexed:26([_OneByteString] v19 T{_OneByteString}, v3767 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v3773 <- BinaryInt64Op(^ [tr], v6735, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6734) T{*?}
v4926 <- LoadField(v6734 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6103 <- UnboxInt64([non-speculative], v4926) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v6103, v3773) [-9223372036854775808, 9223372036854775807] int64
v7887 <- LoadField(v6734 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7887 T{*?}, v3773 T{int}, v6733 T{_Smi}, NoStoreBarrier)
ParallelMove rsi <- rsi
v3775 <- BinaryInt64Op(+ [tr], v3767 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B713
B712
ParallelMove rsi <- C, rcx <- C goto:34 B719
B719
  Loop 4
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3797, v6574 T{_Smi}) T{bool} goto (717, 718)
B717
  Loop 4
v6736 <- LoadIndexed:26([_OneByteString] v30 T{_OneByteString}, v3797 T{int}) [0, 255] int64
ParallelMove rdi <- rax
v3803 <- BinaryInt64Op(^ [tr], v6736, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6734) T{*?}
v4930 <- LoadField(v6734 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rax <- rax
v6107 <- UnboxInt64([non-speculative], v4930) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound(v6107, v3803) [-9223372036854775808, 9223372036854775807] int64
v7888 <- LoadField(v6734 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7888 T{*?}, v3803 T{int}, v6733 T{_Smi}, NoStoreBarrier)
ParallelMove rsi <- rsi
v3805 <- BinaryInt64Op(+ [tr], v3797 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B719
B718
ParallelMove r8 <- fp[-2]
ParallelMove rax <- fp[-4]
v6109 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v6109 T{_Smi}, v6737 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6738 <- LoadIndexed:12([_List] v197 T{_List}, v6737 T{_Smi}) T{Uint8List}
ParallelMove fp[-6] <- rax
v7779 <- LoadClassId(<non-smi> v6738 T{Uint8List}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7779 List.fillRange<0>, v6738 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4274 T{_Smi})
ParallelMove rcx <- fp[-6]
CheckWritable:34(v6738) T{*?}
v4934 <- LoadField:34(v6738 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rax
v6111 <- UnboxInt64:34([non-speculative], v4934) [0, 4611686018427387903] int64
ParallelMove rsi <- C goto:34 B728
B728
  Loop 3
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<=, v3850, v6740 T{_Smi}) T{bool} goto (726, 727)
B726
  Loop 3
ParallelMove rdi <- rsi
v3854 <- BinaryInt64Op(^ [tr], v3850, v6576 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rdx, rbx <- rdi
GenericCheckBound(v6111, v3854) [-9223372036854775808, 9223372036854775807] int64
v7889 <- LoadField(v6738 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7889 T{*?}, v3854 T{int}, v6741, NoStoreBarrier)
ParallelMove rsi <- rsi
v3855 <- BinaryInt64Op(+ [tr], v3850, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- rsi goto:36 B728
B727
ParallelMove rcx <- fp[-2]
ParallelMove rax <- fp[-4]
v6113 <- UnboxInt64([non-speculative], v4026 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:12(v6113 T{_Smi}, v6741 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v6742 <- LoadIndexed:12([_List] v197 T{_List}, v6741 T{_Smi}) T{Uint8List}
ParallelMove fp[-4] <- rax
v7780 <- LoadClassId(<non-smi> v6742 T{Uint8List}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- C, rdx <- C, rbx <- C
DispatchTableCall( cid=v7780 List.fillRange<0>, v6742 T{Uint8List}, v6573 T{_Smi}, v6576 T{_Smi}, v4274 T{_Smi})
ParallelMove rcx <- fp[-4]
CheckWritable:34(v6742) T{*?}
v4938 <- LoadField:34(v6742 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rdx
v6115 <- UnboxInt64:34([non-speculative], v4938) [0, 4611686018427387903] int64
ParallelMove rdi <- C goto:34 B738
B738
  Loop 2
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<=, v3911, v6740 T{_Smi}) T{bool} goto (736, 737)
B736
  Loop 2
ParallelMove r8 <- rdi
v3915 <- BinaryInt64Op(^ [tr], v3911, v6576 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rsi, rbx <- r8
GenericCheckBound(v6115, v3915) [-9223372036854775808, 9223372036854775807] int64
v7890 <- LoadField(v6742 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7890 T{*?}, v3915 T{int}, v6741 T{_Smi}, NoStoreBarrier)
ParallelMove rdi <- rdi
v3916 <- BinaryInt64Op(+ [tr], v3911, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:36 B738
B737
CheckWritable:34(v6742) T{*?}
ParallelMove rsi <- rdx
v6117 <- UnboxInt64:34([non-speculative], v4938 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rdi <- C goto:34 B745
B745
  Loop 1
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<=, v3949, v6666 T{_Smi}) T{bool} goto (743, 744)
B743
  Loop 1
ParallelMove r8 <- rdi
v3953 <- BinaryInt64Op(^ [tr], v3949, v6576 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rsi, rbx <- r8
GenericCheckBound(v6117, v3953) [-9223372036854775808, 9223372036854775807] int64
v7891 <- LoadField(v6742 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7891 T{*?}, v3953 T{int}, v6741 T{_Smi}, NoStoreBarrier)
ParallelMove rdi <- rdi
v3954 <- BinaryInt64Op(+ [tr], v3949, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:36 B745
B744
ParallelMove rdi <- C, rsi <- C goto:34 B752
B752
  Loop 0
CheckStackOverflow:38(stack=0, loop=1)
Branch if RelationalOp(<, v3984, v6584 T{_Smi}) T{bool} goto (750, 751)
B750
  Loop 0
v6743 <- LoadIndexed:26([_OneByteString] v176 T{_OneByteString}, v3984 T{int}) [0, 255] int64
ParallelMove r8 <- r8
v3990 <- BinaryInt64Op(^ [tr], v6743, v6576 T{_Smi}) [0, 255] int64
CheckWritable:30(v6742) T{*?}
ParallelMove rax <- rdx
v6121 <- UnboxInt64([non-speculative], v4938 T{_Smi}) [0, 4611686018427387903] int64
ParallelMove rax <- rax, rbx <- r8
GenericCheckBound(v6121, v3990) [-9223372036854775808, 9223372036854775807] int64
v7892 <- LoadField(v6742 . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Uint8List] v7892 T{*?}, v3990 T{int}, v6741 T{_Smi}, NoStoreBarrier)
ParallelMove rdi <- rdi
v3992 <- BinaryInt64Op(+ [tr], v3984 T{int}, v6574 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rdi goto:36 B752
B751
ParallelMove rax <- fp[-5]
DartReturn:480(v186)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check writable operation
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check writable operation
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
slow path check writable operation
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
slow path check writable operation
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
slow path check bound operation
slow path check writable operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check writable operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check writable operation
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check writable operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadField(v2 . _uriCache@0150898) T{Uri??}
Branch if StrictCompare:12(===, v3, v0) goto (3, 4)
B3
ParallelMove rdi <- rax
v5 <- StaticCall:18( _computeUri@0150898<0> v2, using unchecked entrypoint, result_type = T{_DataUri}) T{_DataUri}
ParallelMove rax <- rax, rcx <- rax, rdx <- fp[-1]
StoreField(v2 T{UriData} . _uriCache@0150898 = v5 T{_DataUri})
ParallelMove rax <- rcx goto:26 B5
B4
ParallelMove rax <- rcx goto:28 B5
B5
ParallelMove rax <- rax
DartReturn:30(v4)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- rdi, fp[-3] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadField(v2 . _separatorIndices@0150898 {final}) T{_GrowableList}
v27 <- LoadField(v4 . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- rax
v76 <- UnboxInt64([non-speculative], v27) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- C
GenericCheckBound:14(v76 T{_Smi}, v84 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v29 <- LoadField(v4 . GrowableObjectArray.data) T{_List}
v85 <- LoadIndexed:14([_List] v29, v84 T{_Smi}) [-9223372036854775808, 9223372036854775807] T{int}
v7 <- LoadField(v2 . _text@0150898 {final}) T{String}
ParallelMove fp[-2] <- r8
ParallelMove rcx <- rcx
v79 <- UnboxInt64([non-speculative], v85 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- rcx
v10 <- BinaryInt64Op(+ [tr], v79 T{int}, v86 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-1] <- r9
v80 <- BoxInt64(v10) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
v88 <- LoadClassId(<non-smi> v7) int64
MoveArgument(sp[0] <- v80 T{int})
ParallelMove rcx <- rcx, rdi <- r8, rsi <- C
v11 <- DispatchTableCall( cid=v88 String.indexOf<0>, v7, v8, v80 T{int}) int64
ParallelMove rcx <- rax, rax <- fp[-2]
ParallelMove fp[-4] <- rcx
v49 <- LoadField(v7 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if RelationalOp(>=, v11 T{int}, v84 T{_Smi}) T{bool} goto (3, 4)
B3
ParallelMove rsi <- rcx
v24 <- BinaryInt64Op(+ [tr], v11 T{int}, v86 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx
v82 <- UnboxInt64([non-speculative], v49 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdi <- rax, rsi <- rsi, rdx <- rdx, rbx <- C
v26 <- StaticCall:40( _normalizeOrSubstring@0150898<0> v7 T{String}, v24, v82 T{_Smi}, v25, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rcx <- rax, rdx <- fp[-4] goto:46 B5
B4
ParallelMove rdx <- rdx
v81 <- UnboxInt64([non-speculative], v49 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rcx <- C, rdx <- rdx goto:48 B5
B5
ParallelMove rdi <- fp[-2], rsi <- fp[-1], rdx <- rdx, rbx <- C, fp[-5] <- rcx
v21 <- StaticCall:54( _normalizeOrSubstring@0150898<0> v7 T{String}, v10 T{int}, v17, v20, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-2] <- rax
v22 <- AllocateObject:56(cls=_DataUri, <not-aliased>) T{_DataUri}
ParallelMove rax <- rax, rcx <- fp[-3]
StoreField(v22 T{_DataUri} . _data@0150898 = v2 T{UriData}, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v22 T{_DataUri} . _text@0150898 = v66 T{Sentinel~}, NoStoreBarrier)
StoreField(v22 T{_DataUri} . pathSegments = v66 T{Sentinel~}, NoStoreBarrier)
StoreField(v22 T{_DataUri} . hashCode = v66 T{Sentinel~}, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v22 T{_DataUri} . scheme = v43 T{_OneByteString}, NoStoreBarrier)
ParallelMove rcx <- C
StoreField(v22 T{_DataUri} . _userInfo@0150898 = v44 T{_OneByteString}, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreField(v22 T{_DataUri} . path = v21 T{String}, NoStoreBarrier)
ParallelMove rcx <- fp[-5]
StoreField(v22 T{_DataUri} . _query@0150898 = v16 T{String?}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:60(v22)
CheckStackOverflowSlowPath
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove r8 <- rdi, rcx <- rsi, fp[-1] <- rdi, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rsi <- rcx
v7 <- BinaryInt64Op(- [tr], v3, v435 T{_Smi}) [-4611686018427387905, 4611686018427387902] int64
v383 <- BoxInt64(v7) [-4611686018427387905, 4611686018427387902] T{int}
ParallelMove rdi <- C, rsi <- rax
v8 <- StaticCall:12( _GrowableList@0150898._literal1@0150898<0> v5, v383 T{int}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rdx <- rax, rcx <- fp[-1]
ParallelMove fp[-9] <- rdx
v238 <- LoadField:106(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove fp[-8] <- rsi
ParallelMove r8 <- rsi
v386 <- UnboxInt64:106([non-speculative], v238 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove fp[-7] <- r8
v226 <- LoadClassId:106(v2 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove r10 <- C, rax <- C, r9 <- fp[-2] goto:106 B16
B16
  Loop 2
ParallelMove fp[-12] <- r9
CheckStackOverflow:110(stack=0, loop=1)
Branch if RelationalOp(<, v12, v386 T{_Smi}) T{bool} goto (3, 4)
B3
  Loop 2
ParallelMove rax <- r8, rbx <- r9
t0 <- GenericCheckBound:32(v386 T{_Smi}, v12 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:32(===, v226, v179 T{_Smi}) goto (140, 141)
B140
  Loop 2
v230 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v12 T{int}) [0, 255] int64
ParallelMove rax <- rbx goto:32 B139
B141
  Loop 2
v228 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v12 T{int}) [0, 65535] int64
ParallelMove rax <- rbx goto:32 B139
B139
  Loop 2
Branch if EqualityCompare(v229 T{_Smi} == v436 T{_Smi}) T{bool} goto (7, 5)
B5
  Loop 2
Branch if EqualityCompare(v229 T{_Smi} == v437 T{_Smi}) T{bool} goto (8, 10)
B10
  Loop 2
Branch if EqualityCompare(v229 T{_Smi} == v438 T{_Smi}) T{bool} goto (11, 15)
B11
  Loop 2
Branch if RelationalOp(<, v10, v439 T{_Smi}) T{bool} goto (12, 14)
B12
  Loop 2
ParallelMove r10 <- r9 goto:90 B13
B15
B13
  Loop 2
ParallelMove r9 <- r9
v83 <- BinaryInt64Op(+ [tr], v12 T{int}, v435 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v388 <- BoxInt64(v229 T{_Smi}) [0, 65535] T{_Smi}
ParallelMove r10 <- r10, rax <- rbx, r9 <- r9 goto:108 B16
B8
B7
B6
v389 <- BoxInt64(v229 T{_Smi}) [0, 65535] T{_Smi}
ParallelMove rax <- rbx goto:64 B9
B4
B9
Branch if RelationalOp(<, v10, v439 T{_Smi}) T{bool} goto (17, 20)
B17
ParallelMove rbx <- fp[-2]
Branch if RelationalOp(>, v12, v3) T{bool} goto (18, 21)
B21
B20
B19
v171 <- LoadClassId:344(v2 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove fp[-6] <- rbx
ParallelMove r9 <- rax, rax <- r9 goto:344 B48
B48
  Loop 1
ParallelMove fp[-4] <- r9, fp[-5] <- rax
CheckStackOverflow:342(stack=0, loop=1)
Branch if StrictCompare(!==, v19, v22) T{bool} goto (47, 49)
B47
  Loop 1
v265 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v270 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v271 <- LoadField(v270 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove r10 <- rdi
v393 <- UnboxInt64([non-speculative], v265 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-2] <- r10
ParallelMove r12 <- r12
v394 <- UnboxInt64([non-speculative], v271 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v393 T{_Smi} == v394 T{_Smi}) T{bool} goto (106, 107)
B106
  Loop 1
ParallelMove rdi <- rdx
StaticCall:26( _growToNextCapacity@0150898<0> v8 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B108
B107
B108
  Loop 1
ParallelMove r8 <- rdi
v196 <- BinaryInt64Op(+ [tr], v393 T{_Smi}, v435 T{_Smi}) [1, 576460752303423488] int64
ParallelMove fp[-11] <- r8
v395 <- BoxInt64(v196) [1, 576460752303423488] T{_Smi}
StoreField(v8 T{_GrowableList} . GrowableObjectArray.length = v395, NoStoreBarrier)
ParallelMove rax <- r8, rbx <- rdi
GenericCheckBound:40(v196 T{_Smi}, v393 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v199 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v390 <- BoxInt64(v20 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdx <- r9, rax <- rax
StoreIndexed:40([_List] v199, v393 T{_Smi}, v390 T{int})
ParallelMove rax <- rsi
v45 <- BinaryInt64Op(+ [tr], v20, v435 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-4], r13 <- rax, r12 <- C, rdx <- fp[-1], r10 <- fp[-6], rsi <- fp[-7] goto:254 B36
B36
  Loop 0
  Loop 1
ParallelMove fp[-2] <- r13, fp[-10] <- r12
CheckStackOverflow:258(stack=0, loop=2)
Branch if RelationalOp(<, v48, v386 T{_Smi}) T{bool} goto (22, 23)
B22
  Loop 0
  Loop 1
ParallelMove rax <- rsi, rbx <- r13
t0 <- GenericCheckBound:180(v386 T{_Smi}, v48 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:180(===, v171, v179 T{_Smi}) goto (100, 101)
B100
  Loop 0
  Loop 1
v175 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v48 T{int}) [0, 255] int64
ParallelMove rax <- rbx goto:180 B99
B101
  Loop 0
  Loop 1
v173 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v48 T{int}) [0, 65535] int64
ParallelMove rax <- rbx goto:180 B99
B99
  Loop 0
  Loop 1
Branch if EqualityCompare(v174 T{_Smi} == v440 T{_Smi}) T{bool} goto (24, 28)
B24
  Loop 0
  Loop 1
Branch if RelationalOp(<, v49, v439 T{_Smi}) T{bool} goto (25, 26)
B25
  Loop 0
  Loop 1
ParallelMove rbx <- r13 goto:206 B27
B26
  Loop 0
  Loop 1
ParallelMove rbx <- r12 goto:208 B27
B27
  Loop 0
  Loop 1
ParallelMove r12 <- rbx goto:248 B35
B28
  Loop 0
  Loop 1
Branch if EqualityCompare(v174 T{_Smi} == v437 T{_Smi}) T{bool} goto (31, 29)
B29
  Loop 0
  Loop 1
Branch if EqualityCompare(v174 T{_Smi} == v436 T{_Smi}) T{bool} goto (32, 34)
B34
B35
  Loop 0
  Loop 1
ParallelMove r13 <- r13
v71 <- BinaryInt64Op(+ [tr], v48 T{int}, v435 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v402 <- BoxInt64(v174 T{_Smi}) [0, 65535] T{_Smi}
ParallelMove rax <- rbx, r13 <- r13, r12 <- r12 goto:256 B36
B32
B31
B30
  Loop 1
v403 <- BoxInt64(v174 T{_Smi}) [0, 65535] T{_Smi}
ParallelMove rax <- rbx goto:242 B33
B23
B33
  Loop 1
ParallelMove fp[-4] <- rax
Branch if RelationalOp(>=, v49, v439 T{_Smi}) T{bool} goto (37, 38)
B37
  Loop 1
v260 <- LoadField(v199 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rbx <- rbx
v407 <- UnboxInt64([non-speculative], v260 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v196 T{_Smi} == v407 T{_Smi}) T{bool} goto (90, 91)
B90
  Loop 1
ParallelMove rdi <- rcx
StaticCall:26( _growToNextCapacity@0150898<0> v8 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B92
B91
B92
  Loop 1
ParallelMove rax <- rsi
v155 <- BinaryInt64Op(+ [tr], v196 T{_Smi}, v435 T{_Smi}) [2, 576460752303423489] int64
v408 <- BoxInt64(v155) [2, 576460752303423489] T{_Smi}
StoreField(v8 T{_GrowableList} . GrowableObjectArray.length = v408, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v155 T{_Smi}, v196 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v158 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v399 <- BoxInt64(v49 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdx <- rdi, rax <- rax
StoreIndexed:40([_List] v158, v196 T{_Smi}, v399 T{int})
ParallelMove r9 <- fp[-4], rax <- fp[-2], rcx <- fp[-1], rdx <- rcx, rbx <- fp[-6], rsi <- fp[-8], r8 <- fp[-7] goto:340 B48
B38
ParallelMove rdi <- rcx
v54 <- StaticCall:276( get:last<0> v8, result_type = T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- rax, rax <- fp[-4]
Branch if StrictCompare(!==, v52, v22) T{bool} goto (42, 39)
B39
ParallelMove rdx <- fp[-2]
ParallelMove rcx <- rcx
v412 <- UnboxInt64([non-speculative], v54) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx
v57 <- BinaryInt64Op(+ [tr], v412 T{int}, v441 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v48 != v57) T{bool} goto (43, 40)
B40
ParallelMove rcx <- rcx
v60 <- BinaryInt64Op(+ [tr], v412 T{int}, v435 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v413 <- BoxInt64(v60) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v413 T{int})
ParallelMove rdi <- fp[-1], rsi <- C
v61 <- StaticCall:300( startsWith<0> v2, v59, v413 T{int}, using unchecked entrypoint, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:304(!==, v61 T{bool}, v15) goto (44, 45)
BoolTest
B45
ParallelMove rcx <- fp[-2] goto:334 B46
B49
ParallelMove rsi <- rax
ParallelMove rcx <- rsi goto:348 B46
B46
ParallelMove fp[-10] <- rcx
v243 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v248 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v249 <- LoadField(v248 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v417 <- UnboxInt64([non-speculative], v243 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-5] <- rdx
ParallelMove rsi <- rsi
v418 <- UnboxInt64([non-speculative], v249 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v417 T{_Smi} == v418 T{_Smi}) T{bool} goto (67, 68)
B67
ParallelMove rdi <- rax
StaticCall:26( _growToNextCapacity@0150898<0> v8 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B69
B68
B69
ParallelMove rax <- rdi
v123 <- BinaryInt64Op(+ [tr], v417 T{_Smi}, v435 T{_Smi}) [1, 576460752303423488] int64
v419 <- BoxInt64(v123) [1, 576460752303423488] T{_Smi}
StoreField(v8 T{_GrowableList} . GrowableObjectArray.length = v419, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rdi
GenericCheckBound:40(v123 T{_Smi}, v417 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v126 <- LoadField(v8 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v414 <- BoxInt64(v25 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdx <- rdx, rax <- rax
StoreIndexed:40([_List] v126, v417 T{_Smi}, v414 T{int})
ParallelMove rdi <- r8
v29 <- StaticCall:354( get:isOdd<0> v419 T{_Smi}, result_type = T{bool}) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:358(===, v29 T{bool}, v15) goto (50, 51)
BoolTest
B50
ParallelMove rax <- fp[-10]
v42 <- BinaryInt64Op(+ [tr], v25, v435 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- C, rsi <- fp[-1], rdx <- rax, rbx <- fp[-7]
v44 <- StaticCall:368( normalize<0> v41, v2, v42, v386 T{_Smi}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rdx <- rax goto:400 B55
B51
ParallelMove rax <- fp[-10]
v30 <- BinaryInt64Op(+ [tr], v25, v435 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-1], rsi <- rax, rdx <- fp[-7], rbx <- C, r8 <- C, fp[-5] <- rax
v33 <- StaticCall:376( _normalize@0150898<0> v2, v30, v386 T{_Smi}, v32, v15) T{String??}
ParallelMove rax <- rax
Branch if StrictCompare:378(!==, v33, v0) goto (52, 53)
B52
ParallelMove rdi <- fp[-1], rsi <- fp[-5], rdx <- fp[-8], rbx <- rax
v37 <- StaticCall:388( replaceRange<0> v2, v30 T{int}, v238 T{_Smi}, v33 T{String?}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:394 B54
B53
ParallelMove rax <- fp[-1] goto:396 B54
B54
ParallelMove rdx <- rax goto:402 B55
B55
ParallelMove fp[-4] <- rdx
v40 <- AllocateObject:404(cls=UriData, <not-aliased>) T{UriData}
ParallelMove rcx <- rax, rax <- fp[-4]
StoreField(v40 T{UriData} . _text@0150898 = v38 T{String}, NoStoreBarrier)
ParallelMove rax <- fp[-9]
StoreField(v40 T{UriData} . _separatorIndices@0150898 = v8 T{_GrowableList}, NoStoreBarrier)
ParallelMove rax <- fp[-3]
StoreField(v40 T{UriData} . _uriCache@0150898 = v4 T{_Uri?}, NoStoreBarrier)
ParallelMove rax <- rcx
DartReturn:408(v40)
B14
ParallelMove rax <- rcx
v85 <- AllocateObject:94(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v85 T{FormatException} . message = v76 T{_OneByteString}, NoStoreBarrier)
ParallelMove rdx <- fp[-1]
StoreField(v85 T{FormatException} . source = v2 T{String}, NoStoreBarrier)
ParallelMove rsi <- fp[-12]
v384 <- BoxInt64(v12 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v85 T{FormatException} . offset = v384 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:98(v85)
B18
ParallelMove rdx <- rcx, rsi <- r9, rax <- C
v75 <- AllocateObject:134(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v75 T{FormatException} . message = v76 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v75 T{FormatException} . source = v2 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[-12]
v385 <- BoxInt64(v12 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v75 T{FormatException} . offset = v385 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:138(v75)
B42
ParallelMove rax <- fp[-1]
ParallelMove  goto:314 B41
B43
ParallelMove rax <- fp[-1]
ParallelMove  goto:318 B41
B44
ParallelMove rax <- fp[-1]
ParallelMove  goto:322 B41
B41
v62 <- AllocateObject:324(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v62 T{FormatException} . message = v63 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v62 T{FormatException} . source = v2 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[-2]
v398 <- BoxInt64(v48 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v62 T{FormatException} . offset = v398 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:328(v62)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rsi, rax <- rdx, fp[-2] <- rsi, fp[-3] <- rdx
CheckStackOverflow:8(stack=0, loop=0)
v293 <- LoadField(v3 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
v593 <- BoxInt64(v5) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rbx <- rdx
v594 <- UnboxInt64([non-speculative], v293 T{_Smi}) [0, 2305843009213693951] int64
ParallelMove rdi <- rax, rsi <- rsi, rdx <- rbx, fp[-1] <- rbx
v7 <- StaticCall:12( checkValidRange<0> v4, v593 T{_Smi}, v594 T{_Smi}, result_type = T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rax <- rax
ParallelMove fp[-4] <- rax
v296 <- LoadStaticField:4(_inverseAlphabet@10003594, CallsInitializer) T{_Int8List}
ParallelMove rcx <- rax, rdi <- fp[-2]
ParallelMove fp[-12] <- rcx
v280 <- LoadClassId:306(v3 T{_StringBase}) [93, 94] T{_Smi}
ParallelMove fp[-13] <- rdx
v140 <- LoadField:306(v296 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rsi <- rax
v605 <- UnboxInt64:306([non-speculative], v140) [0, 4611686018427387903] int64
ParallelMove fp[-5] <- rsi
ParallelMove r13 <- C, rsi <- fp[-3], rbx <- C, rax <- C, fp[-6] <- C, r12 <- fp[-3] goto:306 B45
B45
  Loop 1
ParallelMove fp[-7] <- rsi, fp[-8] <- r13, fp[-9] <- rax, fp[-17] <- r12, fp[-21] <- rbx
CheckStackOverflow:310(stack=0, loop=1)
Branch if RelationalOp(<, v20, v7) T{bool} goto (3, 4)
B3
  Loop 1
ParallelMove rsi <- r12
v63 <- BinaryInt64Op(+ [tr], v20, v623 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-1], rbx <- r12, r13 <- rbx
t0 <- GenericCheckBound:34(v594 T{_Smi}, v20 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:34(===, v280, v288 T{_Smi}) goto (137, 138)
B137
  Loop 1
v284 <- LoadIndexed([_OneByteString] v3 T{_OneByteString}, v20 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:34 B136
B138
  Loop 1
v282 <- LoadIndexed([_TwoByteString] v3 T{_StringBase}, v20 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:34 B136
B136
  Loop 1
Branch if EqualityCompare(v283 T{_Smi} == v624 T{_Smi}) T{bool} goto (5, 12)
B5
  Loop 1
ParallelMove rbx <- rsi
v130 <- BinaryInt64Op(+ [tr], v63, v625 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove fp[-10] <- rbx
Branch if RelationalOp(<=, v130, v7) T{bool} goto (6, 10)
B6
  Loop 1
ParallelMove rax <- fp[-1], rbx <- rsi, r8 <- rax
t0 <- GenericCheckBound:10(v594 T{_Smi}, v63 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:10(===, v280 T{_Smi}, v288 T{_Smi}) goto (155, 156)
B155
  Loop 1
v340 <- LoadIndexed([_OneByteString] v3 T{_OneByteString}, v63 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:10 B154
B156
  Loop 1
v338 <- LoadIndexed([_TwoByteString] v3 T{_StringBase}, v63 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:10 B154
B154
  Loop 1
ParallelMove rbx <- rax
v349 <- BinaryInt64Op(^ [tr], v339 T{_Smi}, v626 T{_Smi}) [0, 65535] int64
Branch if RelationalOp(<=, v349, v627 T{_Smi}) T{bool} goto (159, 160)
B159
  Loop 1
ParallelMove rax <- rbx goto:22 B166
B160
  Loop 1
ParallelMove rax <- rax
v354 <- BinaryInt64Op(| [tr], v339 T{_Smi}, v628 T{_Smi}) [0, 65535] int64
Branch if RelationalOp(<=, v629 T{_Smi}, v354) T{bool} goto (161, 164)
B161
  Loop 1
Branch if RelationalOp(<=, v354, v630 T{_Smi}) T{bool} goto (162, 165)
B162
  Loop 1
ParallelMove rax <- rax
v363 <- BinaryInt64Op(- [tr], v354, v383 T{_Smi}) [-87, 65448] int64
ParallelMove rax <- rax goto:52 B166
B165
B164
B163
  Loop 1
ParallelMove rax <- C goto:66 B166
B166
  Loop 1
ParallelMove fp[-11] <- rax
ParallelMove rsi <- rsi
v258 <- BinaryInt64Op(+ [tr], v63 T{int}, v623 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- fp[-1], rbx <- rsi
t0 <- GenericCheckBound:16(v594 T{_Smi}, v258 T{int}) [-9223372036854775808, 9223372036854775807] int64
Branch if StrictCompare:16(===, v280 T{_Smi}, v288 T{_Smi}) goto (170, 171)
B170
  Loop 1
v398 <- LoadIndexed([_OneByteString] v3 T{_OneByteString}, v258 T{int}) [0, 255] int64
ParallelMove rax <- rax goto:16 B169
B171
  Loop 1
v396 <- LoadIndexed([_TwoByteString] v3 T{_StringBase}, v258 T{int}) [0, 65535] int64
ParallelMove rax <- rax goto:16 B169
B169
  Loop 1
ParallelMove rbx <- rax
v407 <- BinaryInt64Op(^ [tr], v397 T{_Smi}, v626 T{_Smi}) [0, 65535] int64
Branch if RelationalOp(<=, v407, v627 T{_Smi}) T{bool} goto (174, 175)
B174
  Loop 1
ParallelMove rax <- rbx goto:22 B181
B175
  Loop 1
ParallelMove rax <- rax
v412 <- BinaryInt64Op(| [tr], v397 T{_Smi}, v628 T{_Smi}) [0, 65535] int64
Branch if RelationalOp(<=, v629 T{_Smi}, v412) T{bool} goto (176, 179)
B176
  Loop 1
Branch if RelationalOp(<=, v412, v630 T{_Smi}) T{bool} goto (177, 180)
B177
  Loop 1
ParallelMove rax <- rax
v421 <- BinaryInt64Op(- [tr], v412, v383 T{_Smi}) [-87, 65448] int64
ParallelMove rax <- rax goto:52 B181
B180
B179
B178
  Loop 1
ParallelMove rax <- C goto:66 B181
B181
  Loop 1
ParallelMove rbx <- fp[-11]
v268 <- ShiftInt64Op(<< [tr], v385 T{int}, v271) [-1392, 1048560] int64
ParallelMove rbx <- rbx
v263 <- BinaryInt64Op(+ [tr], v268 T{int}, v436 T{int}) [-1479, 1114095] int64
ParallelMove rax <- rax
v697 <- IntConverter(int64->uint32[tr], v436 T{int}) uint32
ParallelMove rax <- rax
v265 <- BinaryUint32Op(& [tr], v697 T{int}, v708 T{_Smi}) [0, 256] uint32
ParallelMove rax <- rax
v698 <- IntConverter(uint32->int64, v265) int64
ParallelMove rbx <- rbx
v266 <- BinaryInt64Op(- [tr], v263, v698 T{_Smi}) [-1735, 1114095] int64
Branch if EqualityCompare(v266 T{int} == v624 T{_Smi}) T{bool} goto (7, 8)
B7
  Loop 1
ParallelMove rax <- C goto:78 B9
B8
  Loop 1
ParallelMove rax <- rbx goto:80 B9
B9
  Loop 1
ParallelMove rsi <- fp[-10], rax <- rax goto:88 B11
B10
  Loop 1
ParallelMove r8 <- rax
ParallelMove rsi <- rsi, rax <- C goto:90 B11
B11
  Loop 1
ParallelMove rax <- rsi, rsi <- rax goto:96 B13
B12
  Loop 1
ParallelMove r8 <- rax
ParallelMove rax <- rsi, rsi <- r8 goto:98 B13
B13
  Loop 1
ParallelMove fp[-10] <- rax
Branch if RelationalOp(<=, v622 T{_Smi}, v68) T{bool} goto (14, 42)
B14
  Loop 1
Branch if RelationalOp(<=, v68, v632 T{_Smi}) T{bool} goto (15, 43)
B15
  Loop 1
ParallelMove rax <- fp[-5], rbx <- rsi
GenericCheckBound:120(v605 T{_Smi}, v68) [-9223372036854775808, 9223372036854775807] int64
v633 <- LoadIndexed:120([_Int8List] v296, v68 T{int}) [-128, 127] int64
Branch if RelationalOp(>=, v633 T{_Smi}, v622 T{_Smi}) T{bool} goto (16, 20)
B16
  Loop 1
ParallelMove rax <- C, rbx <- rbx, rsi <- rbx
GenericCheckBound:132(v634 T{_Smi}, v633 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v635 <- LoadIndexed:132([_OneByteString] v8, v633 T{_Smi}) [0, 255] int64
Branch if EqualityCompare(v635 == v283 T{_Smi}) T{bool} goto (17, 19)
B17
  Loop 1
ParallelMove r13 <- fp[-8], rsi <- fp[-7], rbx <- r13, rax <- fp[-9], rcx <- fp[-6] goto:146 B18
B19
  Loop 1
ParallelMove r8 <- r13, rdi <- fp[-9], rbx <- fp[-6], rsi <- rax, rax <- fp[-8], rcx <- fp[-7], rdx <- rsi goto:240 B35
B20
  Loop 1
ParallelMove rax <- rbx
Branch if EqualityCompare(v633 T{_Smi} == v384 T{_Smi}) T{bool} goto (21, 33)
B21
  Loop 1
Branch if RelationalOp(<, v17, v622 T{_Smi}) T{bool} goto (22, 29)
B22
  Loop 1
ParallelMove r13 <- fp[-8]
Branch if StrictCompare:172(===, v15, v0) goto (23, 24)
B23
  Loop 1
ParallelMove rcx <- C, rdx <- rax goto:184 B25
B24
  Loop 1
v246 <- LoadField(v15 T{StringBuffer} . _partsCodeUnits@0150898) [-9223372036854775808, 9223372036854775807] int64
v247 <- LoadField(v15 T{StringBuffer} . _bufferPosition@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v248 <- BinaryInt64Op(+ [tr], v246, v247) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rbx, rdx <- rax
v611 <- BoxInt64(v248 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rcx <- rax
ParallelMove rcx <- rcx goto:186 B25
B25
  Loop 1
Branch if StrictCompare:188(===, v102, v0) goto (26, 27)
B26
  Loop 1
ParallelMove rax <- C goto:198 B28
B27
  Loop 1
ParallelMove rcx <- rcx
v612 <- UnboxInt64([non-speculative], v102 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rcx goto:200 B28
B28
  Loop 1
ParallelMove rbx <- r12
v104 <- BinaryInt64Op(- [tr], v20 T{int}, v16) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
v105 <- BinaryInt64Op(+ [tr], v103 T{int?}, v104) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r13 <- rax, rbx <- r12, rax <- r13 goto:210 B30
B29
  Loop 1
ParallelMove rax <- fp[-8], rcx <- fp[-7], rdx <- rax
ParallelMove r13 <- r13, rbx <- fp[-9] goto:212 B30
B30
  Loop 1
ParallelMove rdi <- fp[-6]
v98 <- BinaryInt64Op(+ [tr], v19, v623 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v283 T{_Smi} == v636 T{_Smi}) T{bool} goto (31, 32)
B31
  Loop 1
ParallelMove r13 <- rax, rsi <- rcx, rbx <- r13, rax <- rbx, rcx <- rdi goto:226 B18
B32
  Loop 1
ParallelMove rbx <- r13, r8 <- rbx, rdi <- rdi goto:234 B34
B33
  Loop 1
ParallelMove rax <- fp[-8], rcx <- fp[-7], rdx <- rax
ParallelMove rbx <- r13, r8 <- fp[-9], rdi <- fp[-6] goto:236 B34
B34
  Loop 1
ParallelMove r8 <- rbx, rdi <- r8, rbx <- rdi, rsi <- rsi goto:242 B35
B35
  Loop 1
ParallelMove fp[-11] <- r8, fp[-14] <- rdi, fp[-15] <- rbx, fp[-16] <- rsi
Branch if EqualityCompare(v633 T{_Smi} != v637 T{_Smi}) T{bool} goto (36, 40)
B36
  Loop 1
Branch if StrictCompare:254(===, v15, v0) goto (37, 38)
B37
  Loop 1
ParallelMove rax <- rcx
v118 <- AllocateObject:260(cls=StringBuffer) T{StringBuffer}
ParallelMove rcx <- rax, rax <- C
ParallelMove fp[-18] <- rcx
StoreField(v118 T{StringBuffer} . _partsCodeUnits@0150898 = v622 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v118 T{StringBuffer} . _partsCompactionIndex@0150898 = v622 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v118 T{StringBuffer} . _partsCodeUnitsSinceCompaction@0150898 = v622 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v118 T{StringBuffer} . _bufferPosition@0150898 = v622 T{_Smi} <int64>, NoStoreBarrier)
StoreField(v118 T{StringBuffer} . _bufferCodeUnitMagnitude@0150898 = v622 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rdi <- rcx, rsi <- C
StaticCall:30( write<0> v118 T{StringBuffer}, v240 T{_OneByteString}, using unchecked entrypoint)
ParallelMove r9 <- fp[-18], r8 <- fp[-18] goto:268 B39
B38
  Loop 1
ParallelMove r9 <- rax, r8 <- rax goto:270 B39
B39
  Loop 1
ParallelMove fp[-18] <- r9, fp[-19] <- r8
v600 <- BoxInt64(v20 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rdi <- fp[-7], rsi <- rax, rdx <- fp[-1]
v217 <- StaticCall:30( checkValidRange<0> v16 T{int}, v600 T{int?}, v594 T{_Smi}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-2], rsi <- fp[-7], rdx <- rax
v218 <- StaticCall:32( _substringUnchecked@0150898<0> v3 T{_StringBase}, v16 T{int}, v217, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove fp[-20] <- rax
v325 <- LoadField(v218 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
Branch if StrictCompare:10(===, v325, v13 T{_Smi}) T{bool} goto (121, 122)
B121
B122
  Loop 1
ParallelMove rdi <- fp[-18]
StaticCall:26( _consumeBuffer@0150898<0> v115 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-18], rsi <- fp[-20]
StaticCall:28( _addPart@0150898<0> v115 T{StringBuffer}, v218 T{String}, using unchecked entrypoint)
ParallelMove  goto:30 B123
B123
  Loop 1
ParallelMove rdi <- fp[-18], rsi <- fp[-16]
StaticCall:276( writeCharCode<0> v115, v110, using unchecked entrypoint)
ParallelMove r13 <- fp[-19], rsi <- fp[-10], rbx <- fp[-11], rax <- fp[-14], rcx <- fp[-15] goto:278 B18
B18
  Loop 1
ParallelMove r13 <- r13, rsi <- rsi, rbx <- rbx, rax <- rax, fp[-6] <- rcx, r12 <- fp[-10], rdi <- fp[-2], rdx <- fp[-13], rcx <- fp[-12] goto:308 B45
B4
ParallelMove rax <- r13, r13 <- rbx
Branch if StrictCompare:312(!==, v15, v0) goto (46, 55)
B46
ParallelMove rdx <- fp[-4], rbx <- r13
v598 <- BoxInt64(v7) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove fp[-12] <- rcx
MoveArgument(sp[0] <- v598 T{_Smi})
ParallelMove rdi <- fp[-2], rsi <- fp[-7]
v48 <- StaticCall:318( substring<0> v3, v16, v598 T{_Smi}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdi <- fp[-8], rsi <- rax
StaticCall:320( write<0> v15 T{StringBuffer}, v48, using unchecked entrypoint)
ParallelMove rbx <- fp[-21]
Branch if RelationalOp(>=, v17, v622 T{_Smi}) T{bool} goto (47, 48)
B47
ParallelMove rax <- fp[-8]
v198 <- LoadField(v15 T{StringBuffer} . _partsCodeUnits@0150898) [-9223372036854775808, 9223372036854775807] int64
v199 <- LoadField(v15 T{StringBuffer} . _bufferPosition@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v200 <- BinaryInt64Op(+ [tr], v198, v199) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- fp[-2], rsi <- fp[-9], rdx <- fp[-4], rbx <- rbx, r8 <- fp[-6], r9 <- rcx
StaticCall:334( _checkPadding@10003594<0> v3, v18, v7, v17, v19, v200 T{int})
ParallelMove  goto:390 B54
B48
ParallelMove rax <- fp[-8], rdx <- C, rcx <- C
v191 <- LoadField(v15 T{StringBuffer} . _partsCodeUnits@0150898) [-9223372036854775808, 9223372036854775807] int64
v192 <- LoadField(v15 T{StringBuffer} . _bufferPosition@0150898) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v699 <- IntConverter(int64->uint32[tr], v191) uint32
ParallelMove rsi <- rsi
v700 <- IntConverter(int64->uint32[tr], v192) uint32
ParallelMove rbx <- rbx
v193 <- BinaryUint32Op(+ [tr], v699 T{int}, v700 T{int}) [0, 4294967295] uint32
ParallelMove rbx <- rbx
v51 <- BinaryUint32Op(- [tr], v193, v709 T{_Smi}) [0, 4294967295] uint32
ParallelMove rbx <- rbx
v52 <- BinaryUint32Op(& [tr], v51, v710 T{_Smi}) [0, 3] uint32
ParallelMove rbx <- rbx
v702 <- IntConverter(uint32->int64, v52) int64
ParallelMove rbx <- rbx
v53 <- BinaryInt64Op(+ [tr], v702 T{_Smi}, v623 T{_Smi}) [1, 4] int64
Branch if EqualityCompare(v53 == v623 T{_Smi}) T{bool} goto (49, 50)
B50
ParallelMove rcx <- rbx goto:384 B52
B52
  Loop 0
ParallelMove fp[-1] <- rcx
CheckStackOverflow:382(stack=0, loop=1)
Branch if RelationalOp(<, v55, v271 T{_Smi}) T{bool} goto (85, 53)
B85
  Loop 0
ParallelMove rdi <- rax
StaticCall:26( _consumeBuffer@0150898<0> v15 T{StringBuffer}, using unchecked entrypoint)
ParallelMove rdi <- fp[-8], rsi <- C
StaticCall:28( _addPart@0150898<0> v15 T{StringBuffer}, v39 T{_OneByteString}, using unchecked entrypoint)
ParallelMove rax <- fp[-1]
v57 <- BinaryInt64Op(+ [tr], v55, v623 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax, rax <- fp[-8] goto:380 B52
B53
B54
MoveArgument(sp[0] <- v15 T{StringBuffer})
v60 <- StaticCall:394( toString<0> v15 T{StringBuffer}, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rdi <- fp[-2], rsi <- fp[-3], rdx <- fp[-12], rbx <- rax
v61 <- StaticCall:396( replaceRange<0> v3, v4, v598 T{_Smi}, v60, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
DartReturn:398(v61)
B55
ParallelMove rax <- fp[-3], rbx <- r13, rcx <- C
ParallelMove rdx <- fp[-4]
v29 <- BinaryInt64Op(- [tr], v7, v4) [-9223372036854775808, 9223372036854775807] int64
Branch if RelationalOp(>=, v17, v622 T{_Smi}) T{bool} goto (56, 57)
B56
ParallelMove rdi <- fp[-2], rsi <- fp[-9], rdx <- fp[-4], rbx <- rbx, r8 <- fp[-6], r9 <- rdx
StaticCall:414( _checkPadding@10003594<0> v3, v18, v7, v17, v19, v29)
ParallelMove rax <- fp[-2] goto:478 B66
B57
ParallelMove rdx <- rdx
v703 <- IntConverter(int64->uint32[tr], v29) uint32
ParallelMove rdx <- rdx
v32 <- BinaryUint32Op(& [tr], v703 T{int}, v710 T{_Smi}) [0, 3] uint32
ParallelMove rax <- rdx
v707 <- IntConverter(uint32->int64, v32) int64
Branch if EqualityCompare(v707 T{_Smi} == v623 T{_Smi}) T{bool} goto (58, 59)
B59
ParallelMove rax <- rdx
v706 <- IntConverter(uint32->int64, v32) int64
Branch if RelationalOp(>, v706 T{_Smi}, v623 T{_Smi}) T{bool} goto (60, 64)
B60
ParallelMove rdx <- rdx
v705 <- IntConverter(uint32->int64, v32) int64
Branch if EqualityCompare(v705 T{_Smi} == v625 T{_Smi}) T{bool} goto (61, 62)
B61
ParallelMove rbx <- C goto:462 B63
B62
ParallelMove rbx <- C goto:464 B63
B63
v599 <- BoxInt64(v7) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rdi <- fp[-2], rsi <- rsi, rdx <- rdx, rbx <- rbx
v41 <- StaticCall:466( replaceRange<0> v3, v7, v599 T{_Smi}, v40, using unchecked entrypoint, result_type = T{!null}) T{String}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:472 B65
B64
ParallelMove rax <- fp[-2] goto:474 B65
B65
B66
ParallelMove rax <- rax
DartReturn:482(v45)
B40
ParallelMove rcx <- r12
ParallelMove  goto:294 B44
B43
ParallelMove rcx <- r12
ParallelMove  goto:290 B41
B42
ParallelMove rcx <- r12
ParallelMove  goto:286 B41
B41
B44
v78 <- AllocateObject:298(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v78 T{FormatException} . message = v79 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreField(v78 T{FormatException} . source = v3 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[-17]
v601 <- BoxInt64(v20 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v78 T{FormatException} . offset = v601 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:302(v78)
B49
ParallelMove rax <- fp[-2], rcx <- fp[-12]
v58 <- AllocateObject:356(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v58 T{FormatException} . message = v44 T{_OneByteString}, NoStoreBarrier)
ParallelMove rdx <- fp[-2]
StoreField(v58 T{FormatException} . source = v3 T{String}, NoStoreBarrier)
ParallelMove rax <- fp[-12]
StoreField(v58 T{FormatException} . offset = v598 T{_Smi}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:360(v58)
B58
ParallelMove rdx <- fp[-2], rsi <- fp[-4], rax <- C
v43 <- AllocateObject:430(cls=FormatException, <not-aliased>) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v43 T{FormatException} . message = v44 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-2]
StoreField(v43 T{FormatException} . source = v3 T{String}, NoStoreBarrier)
ParallelMove rax <- fp[-4]
v596 <- BoxInt64(v7 T{_Smi}) [-4611686018427387904, 4611686018427387903] T{_Smi}
StoreField(v43 T{FormatException} . offset = v596 T{_Smi}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:434(v43)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
slow path check bound operation
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove fp[-1] <- rdi, fp[-2] <- rdx, fp[-3] <- r9, fp[-5] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rcx <- r9
v67 <- IntConverter(int64->uint32[tr], v7) uint32
ParallelMove rcx <- rcx
v9 <- BinaryUint32Op(& [tr], v67 T{int}, v70 T{_Smi}) [0, 3] uint32
ParallelMove rcx <- rcx
v69 <- IntConverter(uint32->int64, v9) int64
Branch if EqualityCompare(v69 T{_Smi} != v63 T{_Smi}) T{bool} goto (3, 4)
B4
ParallelMove rbx <- rbx
v13 <- BinaryInt64Op(+ [tr], v5, v6) [-9223372036854775808, 9223372036854775807] int64
Branch if EqualityCompare(v13 != v7) T{bool} goto (5, 6)
B6
Branch if RelationalOp(>, v6, v64 T{_Smi}) T{bool} goto (7, 8)
B8
ParallelMove rax <- C
DartReturn:72(v0)
B3
ParallelMove rbx <- C, r10 <- C
v22 <- CreateArray:24(v0, v15) T{_List}
ParallelMove rcx <- rax
StoreIndexed([_List] v22, v10, v23, NoStoreBarrier)
ParallelMove rdx <- fp[-3]
v62 <- BoxInt64(v7) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreIndexed([_List] v22, v24, v62 T{int}, NoStoreBarrier)
MoveArgument(sp[0] <- v22)
v25 <- StaticCall:26( _interpolate@0150898<0> v22, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove fp[-4] <- rax
v21 <- AllocateObject:22(cls=FormatException) T{FormatException}
ParallelMove rcx <- rax, rax <- fp[-4]
StoreField(v21 T{FormatException} . message = v25 T{String}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v21 T{FormatException} . source = v2 T{String}, NoStoreBarrier)
ParallelMove rax <- fp[-2]
v61 <- BoxInt64(v4 T{_Smi}) [-4611686018427387904, 4611686018427387903] T{_Smi}
StoreField(v21 T{FormatException} . offset = v61 T{_Smi}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:30(v21)
B5
ParallelMove rax <- rdi
v19 <- AllocateObject:46(cls=FormatException) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v19 T{FormatException} . message = v20 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v19 T{FormatException} . source = v2 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[-5]
v59 <- BoxInt64(v3 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v19 T{FormatException} . offset = v59 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:50(v19)
B7
ParallelMove rax <- rdi, rdx <- rsi
v17 <- AllocateObject:64(cls=FormatException) T{FormatException}
ParallelMove rcx <- rax, rax <- C
StoreField(v17 T{FormatException} . message = v18 T{_OneByteString}, NoStoreBarrier)
ParallelMove rax <- fp[-1]
StoreField(v17 T{FormatException} . source = v2 T{String}, NoStoreBarrier)
ParallelMove rdx <- fp[-5]
v60 <- BoxInt64(v3 T{int?}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
StoreField(v17 T{FormatException} . offset = v60 T{int?}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:68(v17)
CheckStackOverflowSlowPath
B0
B42
Enter frame
PrologueOffset = 0
CheckStackOverflow:4(stack=0, loop=0)
ParallelMove rbx <- C, r10 <- C
v4 <- CreateArray:6(v2, v3) T{_List}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
StoreIndexed([_List] v4, v5, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v7, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v8, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v9, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v10, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v11, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v12, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v13, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v14, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v15, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v16, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v17, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v18, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v19, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v20, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v21, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v22, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v23, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v24, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v25, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v26, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v27, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v28, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v29, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v30, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v31, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v32, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v33, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v34, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v35, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v36, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v37, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v38, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v39, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v40, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v41, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v42, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v43, v44, NoStoreBarrier)
StoreIndexed([_List] v4, v45, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v46, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v47, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v48, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v49, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v50, v51, NoStoreBarrier)
StoreIndexed([_List] v4, v52, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v53, v51, NoStoreBarrier)
StoreIndexed([_List] v4, v54, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v55, v56, NoStoreBarrier)
StoreIndexed([_List] v4, v57, v58, NoStoreBarrier)
StoreIndexed([_List] v4, v59, v60, NoStoreBarrier)
StoreIndexed([_List] v4, v61, v62, NoStoreBarrier)
StoreIndexed([_List] v4, v63, v64, NoStoreBarrier)
StoreIndexed([_List] v4, v58, v65, NoStoreBarrier)
StoreIndexed([_List] v4, v60, v66, NoStoreBarrier)
StoreIndexed([_List] v4, v62, v67, NoStoreBarrier)
StoreIndexed([_List] v4, v64, v68, NoStoreBarrier)
StoreIndexed([_List] v4, v65, v69, NoStoreBarrier)
StoreIndexed([_List] v4, v66, v70, NoStoreBarrier)
StoreIndexed([_List] v4, v67, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v68, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v69, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v70, v44, NoStoreBarrier)
StoreIndexed([_List] v4, v51, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v56, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v71, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v72, v5, NoStoreBarrier)
StoreIndexed([_List] v4, v73, v7, NoStoreBarrier)
StoreIndexed([_List] v4, v74, v8, NoStoreBarrier)
StoreIndexed([_List] v4, v75, v9, NoStoreBarrier)
StoreIndexed([_List] v4, v76, v10, NoStoreBarrier)
StoreIndexed([_List] v4, v77, v11, NoStoreBarrier)
StoreIndexed([_List] v4, v78, v12, NoStoreBarrier)
StoreIndexed([_List] v4, v79, v13, NoStoreBarrier)
StoreIndexed([_List] v4, v80, v14, NoStoreBarrier)
StoreIndexed([_List] v4, v81, v15, NoStoreBarrier)
StoreIndexed([_List] v4, v82, v16, NoStoreBarrier)
StoreIndexed([_List] v4, v83, v17, NoStoreBarrier)
StoreIndexed([_List] v4, v84, v18, NoStoreBarrier)
StoreIndexed([_List] v4, v85, v19, NoStoreBarrier)
StoreIndexed([_List] v4, v86, v20, NoStoreBarrier)
StoreIndexed([_List] v4, v87, v21, NoStoreBarrier)
StoreIndexed([_List] v4, v88, v22, NoStoreBarrier)
StoreIndexed([_List] v4, v89, v23, NoStoreBarrier)
StoreIndexed([_List] v4, v90, v24, NoStoreBarrier)
StoreIndexed([_List] v4, v91, v25, NoStoreBarrier)
StoreIndexed([_List] v4, v92, v26, NoStoreBarrier)
StoreIndexed([_List] v4, v93, v27, NoStoreBarrier)
StoreIndexed([_List] v4, v94, v28, NoStoreBarrier)
StoreIndexed([_List] v4, v95, v29, NoStoreBarrier)
StoreIndexed([_List] v4, v96, v30, NoStoreBarrier)
StoreIndexed([_List] v4, v97, v31, NoStoreBarrier)
StoreIndexed([_List] v4, v98, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v99, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v100, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v101, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v102, v56, NoStoreBarrier)
StoreIndexed([_List] v4, v103, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v104, v32, NoStoreBarrier)
StoreIndexed([_List] v4, v105, v33, NoStoreBarrier)
StoreIndexed([_List] v4, v106, v34, NoStoreBarrier)
StoreIndexed([_List] v4, v107, v35, NoStoreBarrier)
StoreIndexed([_List] v4, v108, v36, NoStoreBarrier)
StoreIndexed([_List] v4, v109, v37, NoStoreBarrier)
StoreIndexed([_List] v4, v110, v38, NoStoreBarrier)
StoreIndexed([_List] v4, v111, v39, NoStoreBarrier)
StoreIndexed([_List] v4, v112, v40, NoStoreBarrier)
StoreIndexed([_List] v4, v113, v41, NoStoreBarrier)
StoreIndexed([_List] v4, v114, v42, NoStoreBarrier)
StoreIndexed([_List] v4, v115, v43, NoStoreBarrier)
StoreIndexed([_List] v4, v116, v45, NoStoreBarrier)
StoreIndexed([_List] v4, v117, v46, NoStoreBarrier)
StoreIndexed([_List] v4, v118, v47, NoStoreBarrier)
StoreIndexed([_List] v4, v119, v48, NoStoreBarrier)
StoreIndexed([_List] v4, v120, v49, NoStoreBarrier)
StoreIndexed([_List] v4, v121, v50, NoStoreBarrier)
StoreIndexed([_List] v4, v122, v52, NoStoreBarrier)
StoreIndexed([_List] v4, v123, v53, NoStoreBarrier)
StoreIndexed([_List] v4, v124, v54, NoStoreBarrier)
StoreIndexed([_List] v4, v125, v55, NoStoreBarrier)
StoreIndexed([_List] v4, v126, v57, NoStoreBarrier)
StoreIndexed([_List] v4, v127, v59, NoStoreBarrier)
StoreIndexed([_List] v4, v128, v61, NoStoreBarrier)
StoreIndexed([_List] v4, v129, v63, NoStoreBarrier)
StoreIndexed([_List] v4, v130, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v131, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v132, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v133, v6, NoStoreBarrier)
StoreIndexed([_List] v4, v134, v6, NoStoreBarrier)
ParallelMove rdx <- C
v160 <- AllocateObject:10(cls=_GrowableList, v2 T{TypeArguments}) T{_GrowableList}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-2] <- rcx
StoreField(v160 . GrowableObjectArray.data = v4 T{_List}, NoStoreBarrier)
StoreField(v160 T{_GrowableList} . GrowableObjectArray.length = v3 T{_Smi}, NoStoreBarrier)
ParallelMove rax <- C
v177 <- AllocateTypedData:10(v3 T{_Smi}) T{_Int8List}
ParallelMove rdi <- rax, rsi <- C, rdx <- C, rbx <- fp[-2], r8 <- C, rax <- rax
ParallelMove fp[-1] <- rax
StaticCall:158( _slowSetRange@7027147<0> v177 T{_Int8List}, v276 T{_Smi}, v277 T{_Smi}, v160 T{_GrowableList}, v276 T{_Smi}, using unchecked entrypoint, result_type = T{Null?})
ParallelMove rax <- fp[-1]
DartReturn:12(v177 T{_Int8List})
CheckStackOverflowSlowPath
B0
B1
ParallelMove rcx <- C
ParallelMove rdi <- rdi
v17 <- UnboxUint32([tr], [non-speculative], v2 T{_IntegerImplementation}) [0, 4294967295] uint32
ParallelMove rdi <- rdi
v10 <- BinaryUint32Op(& [tr], v17, v22 T{_Smi}) [0, 1] uint32
ParallelMove rdi <- rdi
v21 <- IntConverter(uint32->int64, v10) int64
v12 <- EqualityCompare(v21 T{_Smi} != v19 T{_Smi}) T{bool}
ParallelMove rax <- rax
DartReturn:14(v12 T{bool})
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rbx <- C, r10 <- C, rdx <- rdi, fp[-1] <- rdi, fp[-2] <- rsi
v8 <- CreateArray:10(v0, v4) T{_List}
ParallelMove rcx <- rax, rax <- fp[-2]
ParallelMove fp[-3] <- rcx
StoreIndexed:12([_List] v8, v6 T{_Smi}, v3, NoStoreBarrier)
ParallelMove rdx <- fp[-1]
v17 <- AllocateObject:10(cls=_GrowableList, v2 T{*?}, <not-aliased>) T{_GrowableList}
ParallelMove rax <- rax, rcx <- fp[-3]
StoreField(v17 . GrowableObjectArray.data = v8 T{_List}, NoStoreBarrier)
StoreField(v17 T{_GrowableList} . GrowableObjectArray.length = v4, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:18(v17 T{_GrowableList})
B0
B1
v37 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rcx <- rcx
v133 <- UnboxInt64([non-speculative], v37) [0, 2305843009213693951] int64
ParallelMove rax <- rcx, rbx <- C
t0 <- GenericCheckBound:12(v133 T{_Smi}, v112) [-4611686018427387904, 4611686018427387903] int64
v39 <- LoadClassId(v2 T{_StringBase}) [93, 94] T{_Smi}
Branch if StrictCompare:12(===, v39, v47 T{_Smi}) goto (6, 7)
B6
v43 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v112 T{_Smi}) [0, 255] int64
ParallelMove rdx <- rdx goto:12 B5
B7
v41 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v112 T{_Smi}) [0, 65535] int64
ParallelMove rdx <- rdx goto:12 B5
B5
ParallelMove rdx <- rdx
v8 <- BinaryInt64Op(^ [tr], v42 T{_Smi}, v138 T{_Smi}) [0, 65535] int64
ParallelMove rdx <- rdx
v10 <- BinaryInt64Op(* [tr], v8, v115 T{_Smi}) [0, 196605] int64
Branch if StrictCompare:18(===, v39 T{_Smi}, v47 T{_Smi}) goto (11, 12)
B11
v60 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v139 T{_Smi}) [0, 255] int64
ParallelMove rbx <- rbx goto:18 B10
B12
v58 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v139 T{_Smi}) [0, 65535] int64
ParallelMove rbx <- rbx goto:18 B10
B10
ParallelMove rbx <- rbx
v13 <- BinaryInt64Op(^ [tr], v59 T{_Smi}, v140 T{_Smi}) [0, 65535] int64
ParallelMove rdx <- rdx
v14 <- BinaryInt64Op(| [tr], v10, v13) [0, 262143] int64
Branch if StrictCompare:26(===, v39 T{_Smi}, v47 T{_Smi}) goto (16, 17)
B16
v76 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v113 T{_Smi}) [0, 255] int64
ParallelMove rbx <- rbx goto:26 B15
B17
v74 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v113 T{_Smi}) [0, 65535] int64
ParallelMove rbx <- rbx goto:26 B15
B15
ParallelMove rbx <- rbx
v19 <- BinaryInt64Op(^ [tr], v75 T{_Smi}, v141 T{_Smi}) [0, 65535] int64
ParallelMove rdx <- rdx
v20 <- BinaryInt64Op(| [tr], v14, v19) [0, 262143] int64
Branch if StrictCompare:34(===, v39 T{_Smi}, v47 T{_Smi}) goto (21, 22)
B21
v92 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v114 T{_Smi}) [0, 255] int64
ParallelMove rbx <- rbx goto:34 B20
B22
v90 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v114 T{_Smi}) [0, 65535] int64
ParallelMove rbx <- rbx goto:34 B20
B20
ParallelMove rbx <- rbx
v25 <- BinaryInt64Op(^ [tr], v91 T{_Smi}, v142 T{_Smi}) [0, 65535] int64
ParallelMove rdx <- rdx
v26 <- BinaryInt64Op(| [tr], v20, v25) [0, 262143] int64
Branch if StrictCompare:42(===, v39 T{_Smi}, v47 T{_Smi}) goto (26, 27)
B26
v108 <- LoadIndexed([_OneByteString] v2 T{_OneByteString}, v115 T{_Smi}) [0, 255] int64
ParallelMove rcx <- rcx goto:42 B25
B27
v106 <- LoadIndexed([_TwoByteString] v2 T{_StringBase}, v115 T{_Smi}) [0, 65535] int64
ParallelMove rcx <- rcx goto:42 B25
B25
ParallelMove rcx <- rcx
v29 <- BinaryInt64Op(^ [tr], v107 T{_Smi}, v141 T{_Smi}) [0, 65535] int64
ParallelMove rdx <- rdx
v30 <- BinaryInt64Op(| [tr], v26, v29) [0, 262143] int64
ParallelMove rax <- rdx
DartReturn:48(v30)
slow path check bound operation
PrologueOffset = 216
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadStaticField(_isWindows@16225868) T{bool}
Branch if StrictCompare:10(===, v3 T{bool}, v4 T{bool}) T{bool} goto (3, 4)
BoolTest
B3
ParallelMove rax <- rax
DartReturn:20(v2)
B4
ParallelMove rdi <- rax, rsi <- C, rdx <- C
v33 <- StaticCall:14( replaceAll<0> v2 T{_StringBase}, v7 T{_OneByteString}, v8 T{_OneByteString}) T{String}
ParallelMove rcx <- rax, rax <- fp[-1]
ParallelMove fp[-2] <- rcx
v47 <- LoadField(v2 T{_StringBase} . String.length {final}) [0, 2305843009213693951] T{_Smi}
ParallelMove rdx <- rdx
v68 <- UnboxInt64([non-speculative], v47 T{_Smi}) [0, 2305843009213693951] int64
Branch if RelationalOp(>, v68 T{_Smi}, v69 T{_Smi}) T{bool} goto (5, 8)
B5
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v14)
v15 <- StaticCall:38( dyn:[]<0> v2, v14, recognized_kind = StringBaseCharAt, result_type = T{!null}) T{String}
ParallelMove rax <- rax
v78 <- LoadClassId(v15) int64
MoveArgument(sp[1] <- v15)
MoveArgument(sp[0] <- v16)
ParallelMove rcx <- rcx
v17 <- DispatchTableCall( cid=v78 Object.==<0>, v15, v16) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:44(===, v17 T{bool}, v6) goto (6, 9)
BoolTest
B6
ParallelMove rax <- fp[-2]
ParallelMove rbx <- C, r10 <- C
v18 <- CreateArray:52(v0, v12) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v18, v19, v8, NoStoreBarrier)
ParallelMove rcx <- fp[-2]
StoreIndexed([_List] v18, v14, v33 T{String}, NoStoreBarrier)
MoveArgument(sp[0] <- v18)
v20 <- StaticCall:54( _interpolate@0150898<0> v18, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
DartReturn:56(v20)
B9
ParallelMove rcx <- fp[-2]
ParallelMove  goto:66 B7
B8
B7
ParallelMove rax <- rcx
DartReturn:68(v33 T{String})
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v3)
v5 <- StaticCall:10( _resolveScriptUri@16225868<0> v3) T{String}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadStaticField(_setupCompleted@16225868) T{bool}
Branch if StrictCompare:12(!==, v3 T{bool}, v4) goto (3, 4)
BoolTest
B3
ParallelMove rax <- C
StoreStaticField(_setupCompleted@16225868, v4 T{bool})
ParallelMove  goto:24 B7
B4
B7
v26 <- LoadStaticField:4(_workingDirectory@16225868, CallsInitializer) T{_Uri}
ParallelMove rdi <- fp[2]
v6 <- StaticCall:46( _sanitizeWindowsPath@16225868<0> v2, result_type = T{!null}) T{*}
ParallelMove rdi <- rax
v7 <- StaticCall:48( parse<0> v6, result_type = T{!null}) T{Uri}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v46 <- LoadClassId(<non-smi> v7) int64
ParallelMove rcx <- rcx, rdi <- rax
v8 <- DispatchTableCall( cid=v46 Uri.hasScheme<0>, v7) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:54(!==, v8 T{bool}, v4) goto (8, 9)
BoolTest
B8
v23 <- LoadStaticField:4(_workingDirectory@16225868) T{_Uri}
ParallelMove rdi <- rdi, rsi <- fp[-1]
v18 <- StaticCall:62( resolveUri<0> v23, v7, using unchecked entrypoint, result_type = T{!null}) T{Uri}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:68 B12
B9
ParallelMove rax <- fp[-1] goto:70 B12
B12
v47 <- LoadClassId(<non-smi> v9) int64
MoveArgument(sp[0] <- v9)
ParallelMove rcx <- rcx
v10 <- DispatchTableCall( cid=v47 Uri.toString<0>, v9) T{String}
ParallelMove rax <- rax
DartReturn:90(v10 T{String})
CheckStackOverflowSlowPath
slow path late initialization error operation
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v3)
v5 <- StaticCall:10( _setPackagesMap@16225868<0> v3) T{String}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v3 <- LoadStaticField(_setupCompleted@16225868) T{bool}
Branch if StrictCompare:12(!==, v3 T{bool}, v4) goto (3, 4)
BoolTest
B3
ParallelMove rax <- C
StoreStaticField(_setupCompleted@16225868, v4 T{bool})
ParallelMove  goto:24 B9
B4
B9
ParallelMove rdi <- C, rsi <- fp[2]
v6 <- StaticCall:44( _Uri@0150898.directory<0> v0, v2, result_type = T{_Uri}) T{_Uri}
ParallelMove rax <- rax
StoreStaticField(_workingDirectory@16225868, v6)
ParallelMove rax <- C
DartReturn:64(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[0] <- v3)
v5 <- StaticCall:10( _setWorkingDirectory@16225868<0> v3) T{void?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- C
StoreStaticField(_setupCompleted@16225868, v12 T{bool})
ParallelMove rdi <- C, rsi <- fp[3]
v5 <- StaticCall:12( _Uri@0150898.directory<0> v0, v3, result_type = T{_Uri}) T{_Uri}
ParallelMove rax <- rax
StoreStaticField(_workingDirectory@16225868, v5)
ParallelMove rdi <- fp[2]
Branch if StrictCompare:14(!==, v4, v0) goto (3, 4)
B3
ParallelMove rdi <- rdi
v6 <- StaticCall:20( parse<0> v4 T{String?}, result_type = T{!null}) T{Uri}
ParallelMove rax <- rax
StoreStaticField(_rootScript@16225868, v6)
ParallelMove  goto:26 B5
B4
B5
Branch if StrictCompare:30(!==, v2, v0) goto (6, 7)
B6
ParallelMove rax <- C
StoreStaticField(_packageMap@16225868, v0)
ParallelMove rdi <- rdi
StaticCall:36( _setPackagesConfig@16225868<0> v2 T{String?})
ParallelMove  goto:42 B8
B7
B8
ParallelMove rax <- C
DartReturn:46(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rdi
v3 <- StaticCall:10( _sanitizeWindowsPath@16225868<0> v2, result_type = T{!null}) T{*}
ParallelMove rdi <- rax
v4 <- StaticCall:12( parse<0> v3, result_type = T{!null}) T{Uri}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v21 <- LoadClassId(<non-smi> v4) int64
ParallelMove rcx <- rcx, rdi <- rax
v5 <- DispatchTableCall( cid=v21 Uri.hasScheme<0>, v4) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:18(!==, v5 T{bool}, v6) goto (3, 4)
BoolTest
B3
v12 <- LoadStaticField:4(_workingDirectory@16225868, CallsInitializer) T{_Uri}
ParallelMove rdi <- rax, rsi <- fp[-1]
v9 <- StaticCall:26( resolveUri<0> v12, v4, using unchecked entrypoint, result_type = T{!null}) T{Uri}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:32 B5
B4
ParallelMove rax <- fp[-1] goto:34 B5
B5
ParallelMove rax <- rax
StoreStaticField(_packagesConfigUri@16225868, v7)
ParallelMove rax <- C
DartReturn:36(v0)
CheckStackOverflowSlowPath
slow path late initialization error operation
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v5)
v7 <- StaticCall:10( _Init@16225868<0> v3, v4, v5) T{void?}
ParallelMove rax <- rax
DartReturn:12(v7)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rax <- C
DartReturn:10(v2)
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v5 <- StaticCall:10( _print@16225868<0> v3) T{void?}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v4 <- LoadClassId(v2) int64
MoveArgument(sp[0] <- v2)
ParallelMove rcx <- rcx
v3 <- DispatchTableCall( cid=v4 Object.toString<0>, v2) T{String}
ParallelMove rax <- rax
MoveArgument(sp[0] <- v3 T{String})
StaticCall:12( _printString@16225868<0> v3 T{String})
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v0)
v3 <- NativeCall(Builtin_PrintString) T{*?}
ParallelMove rax <- rax
DartReturn:8(v3)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v13 <- AllocateTypedData:10(v3 T{int}) T{_Uint8List}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-1] <- rax
v5 <- StaticCall:12( get:lengthInBytes<0> v13 T{_Uint8List}, result_type = T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax
ParallelMove rcx <- fp[2]
v30 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rax, rsi <- C, rdx <- rcx
StaticCall:14( _rangeCheck@7027147<0> v5, v31 T{_Smi}, v30 T{int})
v23 <- AllocateObject:16(cls=_ByteDataView) T{_ByteDataView}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v23 . TypedDataView.typed_data = v13 T{_Uint8List}, NoStoreBarrier)
StoreField(v23 . TypedDataView.offset_in_bytes = v6 T{_Smi}, NoStoreBarrier)
ParallelMove rdx <- fp[2]
StoreField(v23 . TypedDataBase.length = v3 T{int}, NoStoreBarrier)
v25 <- LoadField(v13 T{_Uint8List} . PointerBase.data, MayLoadInnerPointer) untagged
StoreField(v23 . PointerBase.data = v25 T{Object} <untagged>, NoStoreBarrier, MayStoreInnerPointer)
ParallelMove rax <- rax
DartReturn:18(v23 T{_ByteDataView})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- C
Call1ArgStub:10(InitAsync(v3))
ParallelMove rax <- fp[-2]
v33 <- LoadClassId(<non-smi> v2) int64
ParallelMove rcx <- rcx, rdi <- rax
v4 <- DispatchTableCall( cid=v33 Iterable.isNotEmpty<0>, v2) T{bool}
ParallelMove rax <- rax
Branch if StrictCompare:16(===, v4 T{bool}, v5) goto (3, 7)
BoolTest
B3
ParallelMove rax <- fp[-2]
v34 <- LoadClassId(<non-smi> v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v11)
ParallelMove rcx <- rcx
v12 <- DispatchTableCall( cid=v34 List.[]<0>, v2, v11) T{*?}
ParallelMove rdi <- rax
v13 <- StaticCall:24( tryParse<0> v12 T{X0}, result_type = T{int??}) T{int??}
ParallelMove rax <- rax
Branch if StrictCompare:26(===, v13, v0) goto (4, 5)
B4
ParallelMove rax <- C goto:36 B6
B5
ParallelMove rax <- rax
v24 <- UnboxInt64([non-speculative], v13 T{int?}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax goto:38 B6
B6
ParallelMove rsi <- rax goto:44 B8
B7
ParallelMove rsi <- C goto:46 B8
B8
ParallelMove fp[-3] <- rsi
v9 <- AllocateObject:48(cls=SpectralNorm) T{SpectralNorm}
ParallelMove rdi <- rax, rax <- rax
ParallelMove fp[-2] <- rax
StaticCall:50( SpectralNorm.<0> v9)
ParallelMove rdi <- fp[-2], rsi <- fp[-3]
v10 <- StaticCall:52( approximate<0> v9, v7, using unchecked entrypoint, result_type = T{_Double}) double
ParallelMove xmm1 <- xmm0
StaticCall:54( print<0> v10)
ParallelMove rax <- C
DartReturn:56(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v15 <- Box(v2 T{_Double}) T{_Double}
MoveArgument(sp[0] <- v15)
v11 <- StaticCall:24( toString<0> v15, result_type = T{!null}) T{String}
ParallelMove rdi <- rax
StaticCall:12( printToConsole<0> v11 T{String})
ParallelMove rax <- C
DartReturn:14(v0)
CheckStackOverflowSlowPath
Box slow path allocation of _Double
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v7 <- LoadStaticField:4(_printClosure@9040228, CallsInitializer) T{_Closure}
ParallelMove rax <- rax
MoveArgument(sp[1] <- v7 T{_Closure})
MoveArgument(sp[0] <- v2)
ParallelMove rax <- rax
v4 <- ClosureCall:14( closure=v7 T{_Closure}<0>, v7 T{_Closure}, v2) T{*?}
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove fp[-2] <- rdi, fp[-3] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
v341 <- BoxInt64(v3 T{int}) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax, rcx <- rax
ParallelMove fp[-1] <- rcx
v178 <- AllocateTypedData:10(v341 T{int}) T{_Float64List}
ParallelMove rcx <- rax
ParallelMove fp[-4] <- rcx
ParallelMove rax <- C, rsi <- fp[-3], xmm0 <- C goto:30 B5
B5
  Loop 7
CheckStackOverflow:34(stack=0, loop=1)
Branch if RelationalOp(<, v6, v3) T{bool} goto (3, 4)
B3
  Loop 7
StoreIndexed:26([_Float64List] v178 T{_Float64List}, v6 T{int}, v375 T{_Double}, NoStoreBarrier)
ParallelMove rax <- rax
v60 <- BinaryInt64Op(+ [tr], v6 T{int}, v376 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax goto:32 B5
B4
ParallelMove rax <- fp[-1]
v172 <- AllocateTypedData:10(v341 T{int}) T{_Float64List}
ParallelMove rcx <- rax
ParallelMove fp[-7] <- rcx
ParallelMove rax <- C, rsi <- fp[-3], xmm0 <- C goto:56 B8
B8
  Loop 6
CheckStackOverflow:60(stack=0, loop=1)
Branch if RelationalOp(<, v10, v3) T{bool} goto (6, 7)
B6
  Loop 6
StoreIndexed:52([_Float64List] v172 T{_Float64List}, v10 T{int}, v377 T{_Double}, NoStoreBarrier)
ParallelMove rax <- rax
v58 <- BinaryInt64Op(+ [tr], v10 T{int}, v376 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rax <- rax goto:58 B8
B7
ParallelMove rdi <- fp[-2]
v54 <- LoadField:112(v2 . columns {final}) T{_GrowableList}
ParallelMove fp[-6] <- rdx
ParallelMove rbx <- C goto:112 B14
B14
  Loop 5
ParallelMove fp[-5] <- rbx
CheckStackOverflow:116(stack=0, loop=1)
Branch if RelationalOp(<, v14, v3) T{bool} goto (9, 10)
B9
  Loop 5
ParallelMove rax <- fp[-1]
v166 <- AllocateTypedData:10(v341 T{int}) T{_Float64List}
ParallelMove rax <- rax
ParallelMove fp[-9] <- rax
ParallelMove rdx <- C, rsi <- fp[-3], rcx <- fp[-5] goto:100 B13
B13
  Loop 4
  Loop 5
CheckStackOverflow:104(stack=0, loop=2)
Branch if RelationalOp(<, v52, v3) T{bool} goto (11, 12)
B11
  Loop 4
  Loop 5
ParallelMove rbx <- rcx
v208 <- BinaryInt64Op(+ [tr], v14 T{int}, v52 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rbx
v211 <- BinaryInt64Op(+ [tr], v208 T{int}, v376 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v212 <- BinaryInt64Op(* [tr], v208, v211) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v213 <- ShiftInt64Op(>> [tr], v212, v376 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rbx <- rbx
v214 <- BinaryInt64Op(+ [tr], v213, v14 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v215 <- BinaryInt64Op(+ [tr], v214, v376 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v218 <- Int64ToDouble(v215) double
ParallelMove xmm1 <- C
v217 <- BinaryDoubleOp(/, v375 T{_Double}, v218) double
StoreIndexed:96([_Float64List] v166 T{_Float64List}, v52 T{int}, v217, NoStoreBarrier)
ParallelMove rdx <- rdx
v57 <- BinaryInt64Op(+ [tr], v52 T{int}, v376 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:102 B13
B12
  Loop 5
ParallelMove rdx <- fp[-6]
v263 <- LoadField(v54 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v268 <- LoadField(v54 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v269 <- LoadField(v268 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rbx <- rbx
v351 <- UnboxInt64([non-speculative], v263 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-8] <- rbx
ParallelMove r8 <- r8
v352 <- UnboxInt64([non-speculative], v269 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v351 T{_Smi} == v352 T{_Smi}) T{bool} goto (56, 57)
B56
  Loop 5
ParallelMove rdi <- rdx
StaticCall:26( _growToNextCapacity@0150898<0> v54 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B58
B57
B58
  Loop 5
ParallelMove rax <- rsi
v153 <- BinaryInt64Op(+ [tr], v351 T{_Smi}, v376 T{_Smi}) [1, 576460752303423488] int64
v353 <- BoxInt64(v153) [1, 576460752303423488] T{_Smi}
StoreField(v54 T{_GrowableList} . GrowableObjectArray.length = v353, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v153 T{_Smi}, v351 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v156 <- LoadField(v54 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-9]
StoreIndexed:40([_List] v156, v351 T{_Smi}, v166 T{_Float64List})
ParallelMove rax <- fp[-5]
v55 <- BinaryInt64Op(+ [tr], v14, v376 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rax, rdi <- fp[-2], rsi <- fp[-3], rdx <- rcx, rcx <- fp[-7] goto:114 B14
B10
v47 <- LoadField:166(v2 . rows {final}) T{_GrowableList}
ParallelMove fp[-6] <- rcx
ParallelMove rdx <- C goto:166 B20
B20
  Loop 3
ParallelMove fp[-5] <- rdx
CheckStackOverflow:170(stack=0, loop=1)
Branch if RelationalOp(<, v18, v3) T{bool} goto (15, 16)
B15
  Loop 3
ParallelMove rax <- fp[-1]
v141 <- AllocateTypedData:10(v341 T{int}) T{_Float64List}
ParallelMove rax <- rax
ParallelMove fp[-9] <- rax
ParallelMove rdx <- C, rsi <- fp[-3], rcx <- fp[-5] goto:154 B19
B19
  Loop 2
  Loop 3
CheckStackOverflow:158(stack=0, loop=2)
Branch if RelationalOp(<, v45, v3) T{bool} goto (17, 18)
B17
  Loop 2
  Loop 3
ParallelMove rbx <- rdx
v188 <- BinaryInt64Op(+ [tr], v45 T{int}, v18 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdi <- rbx
v191 <- BinaryInt64Op(+ [tr], v188 T{int}, v376 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v192 <- BinaryInt64Op(* [tr], v188, v191) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v193 <- ShiftInt64Op(>> [tr], v192, v376 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
ParallelMove rbx <- rbx
v194 <- BinaryInt64Op(+ [tr], v193, v45 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- rbx
v195 <- BinaryInt64Op(+ [tr], v194, v376 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
v198 <- Int64ToDouble(v195) double
ParallelMove xmm1 <- C
v197 <- BinaryDoubleOp(/, v375 T{_Double}, v198) double
StoreIndexed:150([_Float64List] v141 T{_Float64List}, v45 T{int}, v197, NoStoreBarrier)
ParallelMove rdx <- rdx
v50 <- BinaryInt64Op(+ [tr], v45 T{int}, v376 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rdx goto:156 B19
B18
  Loop 3
ParallelMove rdx <- fp[-6]
v252 <- LoadField(v47 T{_GrowableList} . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
v257 <- LoadField(v47 T{_GrowableList} . GrowableObjectArray.data) T{_List}
v258 <- LoadField(v257 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rbx <- rbx
v359 <- UnboxInt64([non-speculative], v252 T{_Smi}) [0, 576460752303423487] int64
ParallelMove fp[-8] <- rbx
ParallelMove r8 <- r8
v360 <- UnboxInt64([non-speculative], v258 T{_Smi}) [0, 576460752303423487] int64
Branch if EqualityCompare(v359 T{_Smi} == v360 T{_Smi}) T{bool} goto (45, 46)
B45
  Loop 3
ParallelMove rdi <- rdx
StaticCall:26( _growToNextCapacity@0150898<0> v47 T{_GrowableList}, using unchecked entrypoint)
ParallelMove  goto:32 B47
B46
B47
  Loop 3
ParallelMove rax <- rsi
v128 <- BinaryInt64Op(+ [tr], v359 T{_Smi}, v376 T{_Smi}) [1, 576460752303423488] int64
v361 <- BoxInt64(v128) [1, 576460752303423488] T{_Smi}
StoreField(v47 T{_GrowableList} . GrowableObjectArray.length = v361, NoStoreBarrier)
ParallelMove rax <- rax, rbx <- rsi
GenericCheckBound:40(v128 T{_Smi}, v359 T{_Smi}) [-4611686018427387904, 4611686018427387903] int64
v131 <- LoadField(v47 T{_GrowableList} . GrowableObjectArray.data) T{_List}
ParallelMove rdx <- rdx, rax <- fp[-9]
StoreIndexed:40([_List] v131, v359 T{_Smi}, v141 T{_Float64List})
ParallelMove rax <- fp[-5]
v48 <- BinaryInt64Op(+ [tr], v18, v376 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rax, rdi <- fp[-2] goto:168 B20
B16
ParallelMove rax <- fp[-1]
v116 <- AllocateTypedData:10(v341 T{int}) T{_Float64List}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
ParallelMove rcx <- C goto:194 B23
B23
  Loop 1
ParallelMove fp[-5] <- rcx
CheckStackOverflow:198(stack=0, loop=1)
Branch if RelationalOp(<, v23, v378 T{_Smi}) T{bool} goto (21, 22)
B21
  Loop 1
ParallelMove rdi <- fp[-2], rsi <- fp[-3], rdx <- fp[-4], rbx <- rax
StaticCall:12( multiplyAv<0> v2 T{SpectralNorm}, v3 T{_Smi}, v178 T{_Float64List}, v116 T{_Float64List}, using unchecked entrypoint)
ParallelMove rdi <- fp[-2], rsi <- fp[-3], rdx <- fp[-1], rbx <- fp[-7]
StaticCall:16( multiplyAtv<0> v2 T{SpectralNorm}, v3 T{_Smi}, v116 T{_Float64List}, v172 T{_Float64List}, using unchecked entrypoint)
ParallelMove rdi <- fp[-2], rsi <- fp[-3], rdx <- fp[-7], rbx <- fp[-1]
StaticCall:12( multiplyAv<0> v2 T{SpectralNorm}, v3 T{_Smi}, v172 T{_Float64List}, v116 T{_Float64List}, using unchecked entrypoint)
ParallelMove rdi <- fp[-2], rsi <- fp[-3], rdx <- fp[-1], rbx <- fp[-4]
StaticCall:16( multiplyAtv<0> v2 T{SpectralNorm}, v3 T{_Smi}, v116 T{_Float64List}, v178 T{_Float64List}, using unchecked entrypoint)
ParallelMove rax <- fp[-5]
v43 <- BinaryInt64Op(+ [tr], v23, v376 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rax, rax <- fp[-1] goto:196 B23
B22
ParallelMove xmm2 <- C, xmm1 <- C, rbx <- C, rax <- fp[-3], rcx <- fp[-7], rdx <- fp[-4] goto:232 B26
B26
  Loop 0
CheckStackOverflow:236(stack=0, loop=1)
Branch if RelationalOp(<, v29, v3) T{bool} goto (24, 25)
B24
  Loop 0
v379 <- LoadIndexed:214([_Float64List] v178 T{_Float64List}, v29 T{int}) double
v380 <- LoadIndexed:216([_Float64List] v172 T{_Float64List}, v29 T{int}) double
ParallelMove xmm3 <- xmm3
v35 <- BinaryDoubleOp(*, v379 T{_Double}, v380 T{_Double}) double
ParallelMove xmm2 <- xmm2
v36 <- BinaryDoubleOp(+, v27, v35) double
ParallelMove xmm4 <- xmm4
v383 <- UnaryDoubleOp(square, v380) double
ParallelMove xmm1 <- xmm1
v40 <- BinaryDoubleOp(+, v28, v383 T{_Double}) double
ParallelMove rbx <- rbx
v42 <- BinaryInt64Op(+ [tr], v29 T{int}, v376 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove xmm2 <- xmm2, xmm1 <- xmm1, rbx <- rbx goto:234 B26
B25
ParallelMove xmm2 <- xmm2
v31 <- BinaryDoubleOp(/, v27, v28) double
v227 <- UnaryDoubleOp:10(sqrt, v31 T{_Double}) double
ParallelMove xmm0 <- xmm0
DartReturn:242(v227 T{_Double})
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rbx, fp[-1] <- rsi
v24 <- LoadField:66(v5 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r8 <- r8
v54 <- UnboxInt64:66([non-speculative], v24) [0, 4611686018427387903] int64
v17 <- LoadField:66(v2 . rows {final}) T{_GrowableList}
v29 <- LoadField:66(v17 . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rdi <- rdi
v58 <- UnboxInt64:66([non-speculative], v29) [0, 576460752303423487] int64
v31 <- LoadField:66(v17 . GrowableObjectArray.data) T{_List}
v33 <- LoadField:66(v4 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r9 <- r9
v62 <- UnboxInt64:66([non-speculative], v33) [0, 4611686018427387903] int64
ParallelMove r12 <- C, xmm0 <- C goto:66 B8
B8
  Loop 1
CheckStackOverflow:70(stack=0, loop=1)
Branch if RelationalOp(<, v7, v3) T{bool} goto (3, 4)
B3
  Loop 1
ParallelMove rax <- r8, rbx <- r12
GenericCheckBound:24(v54 T{_Smi}, v7) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:24([_Float64List] v5, v7 T{int}, v68 T{_Double}, NoStoreBarrier)
ParallelMove r13 <- C, xmm1 <- C goto:58 B7
B7
  Loop 0
  Loop 1
CheckStackOverflow:62(stack=0, loop=2)
Branch if RelationalOp(<, v12, v3) T{bool} goto (5, 6)
B5
  Loop 0
  Loop 1
ParallelMove rax <- rdi, rbx <- r12
GenericCheckBound:44(v58 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v70 <- LoadIndexed:44([_List] v31, v7 T{int}) T{Float64List}
v46 <- LoadField(v70 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rbx <- rbx
v60 <- UnboxInt64([non-speculative], v46) [0, 4611686018427387903] int64
ParallelMove rax <- rbx, rbx <- r13, rsi <- rax
GenericCheckBound(v60, v12) [-9223372036854775808, 9223372036854775807] int64
v95 <- LoadField(v70 . PointerBase.data, MayLoadInnerPointer) untagged
v71 <- LoadIndexed:46([_Float64List] v95 T{Float64List}, v12 T{int}) double
ParallelMove rax <- r9, rbx <- r13
GenericCheckBound:48(v62 T{_Smi}, v12 T{int}) [-9223372036854775808, 9223372036854775807] int64
v72 <- LoadIndexed:48([_Float64List] v4, v12 T{int}) double
ParallelMove xmm2 <- xmm2
v21 <- BinaryDoubleOp(*, v71 T{_Double}, v72 T{_Double}) double
ParallelMove xmm1 <- xmm1
v22 <- BinaryDoubleOp(+, v75 T{_Double}, v21) double
StoreIndexed:54([_Float64List] v5, v7 T{int}, v22, NoStoreBarrier)
ParallelMove r13 <- r13
v23 <- BinaryInt64Op(+ [tr], v12 T{int}, v73 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r13 <- r13, xmm1 <- xmm1, rsi <- fp[-1] goto:60 B7
B6
  Loop 1
ParallelMove r12 <- r12
v15 <- BinaryInt64Op(+ [tr], v7 T{int}, v73 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- r12, rsi <- fp[-1] goto:68 B8
B4
ParallelMove rax <- C
DartReturn:72(v0)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rbx, fp[-1] <- rsi
v24 <- LoadField:66(v5 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r8 <- r8
v54 <- UnboxInt64:66([non-speculative], v24) [0, 4611686018427387903] int64
v17 <- LoadField:66(v2 . columns {final}) T{_GrowableList}
v29 <- LoadField:66(v17 . GrowableObjectArray.length) [0, 576460752303423487] T{_Smi}
ParallelMove rdi <- rdi
v58 <- UnboxInt64:66([non-speculative], v29) [0, 576460752303423487] int64
v31 <- LoadField:66(v17 . GrowableObjectArray.data) T{_List}
v33 <- LoadField:66(v4 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove r9 <- r9
v62 <- UnboxInt64:66([non-speculative], v33) [0, 4611686018427387903] int64
ParallelMove r12 <- C, xmm0 <- C goto:66 B8
B8
  Loop 1
CheckStackOverflow:70(stack=0, loop=1)
Branch if RelationalOp(<, v7, v3) T{bool} goto (3, 4)
B3
  Loop 1
ParallelMove rax <- r8, rbx <- r12
GenericCheckBound:24(v54 T{_Smi}, v7) [-9223372036854775808, 9223372036854775807] int64
StoreIndexed:24([_Float64List] v5, v7 T{int}, v68 T{_Double}, NoStoreBarrier)
ParallelMove r13 <- C, xmm1 <- C goto:58 B7
B7
  Loop 0
  Loop 1
CheckStackOverflow:62(stack=0, loop=2)
Branch if RelationalOp(<, v12, v3) T{bool} goto (5, 6)
B5
  Loop 0
  Loop 1
ParallelMove rax <- rdi, rbx <- r12
GenericCheckBound:44(v58 T{_Smi}, v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
v70 <- LoadIndexed:44([_List] v31, v7 T{int}) T{Float64List}
v46 <- LoadField(v70 . TypedDataBase.length {final}) [0, 4611686018427387903] T{_Smi}
ParallelMove rbx <- rbx
v60 <- UnboxInt64([non-speculative], v46) [0, 4611686018427387903] int64
ParallelMove rax <- rbx, rbx <- r13, rsi <- rax
GenericCheckBound(v60, v12) [-9223372036854775808, 9223372036854775807] int64
v95 <- LoadField(v70 . PointerBase.data, MayLoadInnerPointer) untagged
v71 <- LoadIndexed:46([_Float64List] v95 T{Float64List}, v12 T{int}) double
ParallelMove rax <- r9, rbx <- r13
GenericCheckBound:48(v62 T{_Smi}, v12 T{int}) [-9223372036854775808, 9223372036854775807] int64
v72 <- LoadIndexed:48([_Float64List] v4, v12 T{int}) double
ParallelMove xmm2 <- xmm2
v21 <- BinaryDoubleOp(*, v71 T{_Double}, v72 T{_Double}) double
ParallelMove xmm1 <- xmm1
v22 <- BinaryDoubleOp(+, v75 T{_Double}, v21) double
StoreIndexed:54([_Float64List] v5, v7 T{int}, v22, NoStoreBarrier)
ParallelMove r13 <- r13
v23 <- BinaryInt64Op(+ [tr], v12 T{int}, v73 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r13 <- r13, xmm1 <- xmm1, rsi <- fp[-1] goto:60 B7
B6
  Loop 1
ParallelMove r12 <- r12
v15 <- BinaryInt64Op(+ [tr], v7 T{int}, v73 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r12 <- r12, rsi <- fp[-1] goto:68 B8
B4
ParallelMove rax <- C
DartReturn:72(v0)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
slow path check bound operation
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- rdi, fp[-1] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- C, rsi <- C
v5 <- StaticCall:10( _GrowableList@0150898.<0> v3, v9 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v2 . columns = v5)
ParallelMove rdi <- C, rsi <- C
v6 <- StaticCall:12( _GrowableList@0150898.<0> v3, v9 T{_Smi}, result_type = T{_GrowableList}) T{_GrowableList}
ParallelMove rax <- rax, rcx <- fp[-1]
StoreField(v2 . rows = v6)
ParallelMove rax <- C
DartReturn:16(v0)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
v5 <- StaticCall:10( main<0> v3) T{_Future}
ParallelMove rax <- rax
DartReturn:12(v5)
CheckStackOverflowSlowPath
B0
B1
ParallelMove rcx <- sp[2]
v7 <- UnboxInt64([non-speculative], v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[1]
v9 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- sp[3]
v10 <- LoadField(v2 T{Object} . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Int16List] v10 T{Object}, v7, v9, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:16(v0)
B0
B1
ParallelMove rcx <- sp[2]
v7 <- UnboxInt64([non-speculative], v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[1]
v9 <- UnboxInt32([tr], [non-speculative], v4 T{int}) [-2147483648, 2147483647] int32
ParallelMove rbx <- sp[3]
v10 <- LoadField(v2 T{Object} . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Int32List] v10 T{Object}, v7, v9, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:16(v0)
B0
B1
ParallelMove rcx <- sp[2]
v7 <- UnboxInt64([non-speculative], v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[1]
v9 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- sp[3]
v10 <- LoadField(v2 T{Object} . PointerBase.data, MayLoadInnerPointer) untagged
StoreIndexed([_Int64List] v10 T{Object}, v7, v9, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:16(v0)
B0
B1
ParallelMove rcx <- sp[2]
v7 <- UnboxInt64([non-speculative], v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[1]
v9 <- UnboxInt64([non-speculative], v4 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- sp[3]
v10 <- LoadField(v2 T{Object} . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rax <- rdx
StoreIndexed([_Int8List] v10 T{Object}, v7, v9, NoStoreBarrier)
ParallelMove rax <- C
DartReturn:16(v0)
B0
B1
ParallelMove rcx <- sp[1]
v6 <- UnboxInt64([non-speculative], v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[2]
v9 <- LoadField(v2 T{Object} . PointerBase.data, MayLoadInnerPointer) untagged
v7 <- LoadIndexed([_Int8List] v9 T{Object}, v6) [-128, 127] int64
v8 <- BoxInt64(v7) [-128, 127] T{_Smi}
ParallelMove rax <- rax
DartReturn:14(v8)
B0
B1
ParallelMove rcx <- sp[1]
v6 <- UnboxInt64([non-speculative], v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[2]
v9 <- LoadField(v2 T{Object} . PointerBase.data, MayLoadInnerPointer) untagged
v7 <- LoadIndexed([_Uint32List] v9 T{Object}, v6) [0, 4294967295] uint32
v8 <- BoxSmallInt(v7) [0, 4294967295] T{_Smi}
ParallelMove rax <- rax
DartReturn:14(v8)
B0
B1
ParallelMove rcx <- sp[1]
v6 <- UnboxInt64([non-speculative], v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[2]
v9 <- LoadField(v2 T{Object} . PointerBase.data, MayLoadInnerPointer) untagged
v7 <- LoadIndexed([_Uint8List] v9 T{Object}, v6) [0, 255] int64
v8 <- BoxInt64(v7) [0, 255] T{_Smi}
ParallelMove rax <- rax
DartReturn:14(v8)
B0
B1
ParallelMove rcx <- sp[1]
v6 <- UnboxInt64([non-speculative], v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[2]
v9 <- LoadField(v2 T{Object} . PointerBase.data, MayLoadInnerPointer) untagged
v7 <- LoadIndexed([_Int16List] v9 T{Object}, v6) [-32768, 32767] int64
v8 <- BoxInt64(v7) [-32768, 32767] T{_Smi}
ParallelMove rax <- rax
DartReturn:14(v8)
B0
B1
ParallelMove rcx <- sp[1]
v6 <- UnboxInt64([non-speculative], v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[2]
v9 <- LoadField(v2 T{Object} . PointerBase.data, MayLoadInnerPointer) untagged
v7 <- LoadIndexed([_Int64List] v9 T{Object}, v6) [-9223372036854775808, 9223372036854775807] int64
v8 <- BoxInt64(v7) [-9223372036854775808, 9223372036854775807] T{int}
PrologueOffset = 40
ParallelMove rax <- rax
DartReturn:14(v8)
B0
B1
ParallelMove rcx <- sp[1]
v6 <- UnboxInt64([non-speculative], v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[2]
v9 <- LoadField(v2 T{Object} . PointerBase.data, MayLoadInnerPointer) untagged
v7 <- LoadIndexed([_Uint16List] v9 T{Object}, v6) [0, 65535] int64
v8 <- BoxInt64(v7) [0, 65535] T{_Smi}
ParallelMove rax <- rax
DartReturn:14(v8)
B0
B5
Enter frame
PrologueOffset = 0
CheckStackOverflow:22(stack=0, loop=0)
ParallelMove rax <- fp[2]
Branch if StrictCompare:24(===, v2, v0) goto (6, 7)
B7
ParallelMove rax <- rax
DartReturn:44(v2 T{Y0?})
B6
ParallelMove rbx <- C, r10 <- C
v10 <- CreateArray:32(v0, v9) T{_List}
ParallelMove rax <- rax
StoreIndexed([_List] v10, v5, v11, NoStoreBarrier)
StoreIndexed([_List] v10, v12, v48 T{Abi}, NoStoreBarrier)
StoreIndexed([_List] v10, v14, v15, NoStoreBarrier)
MoveArgument(sp[0] <- v10)
v16 <- StaticCall:36( _interpolate@0150898<0> v10, recognized_kind = StringBaseInterpolate) T{String}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v8 <- AllocateObject:30(cls=ArgumentError, <not-aliased>) T{ArgumentError}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v8 T{ArgumentError} . message = v16 T{String}, NoStoreBarrier)
ParallelMove rax <- C
StoreField(v8 T{ArgumentError} . _hasValue@0150898 = v36 T{bool}, NoStoreBarrier)
ParallelMove rax <- rcx
Throw:40(v8)
CheckStackOverflowSlowPath
B0
B1
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdx <- sp[2]
v7 <- UnboxInt64([non-speculative], v5) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rbx <- sp[4]
v8 <- UnboxInt64([non-speculative], v3) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r8 <- sp[1]
v9 <- UnboxInt64([non-speculative], v6) [-9223372036854775808, 9223372036854775807] int64
ParallelMove r9 <- sp[3]
v10 <- LoadField(v4 . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove r9 <- sp[5]
v11 <- LoadField(v2 . PointerBase.data, MayLoadInnerPointer) untagged
ParallelMove rcx <- r8
MemoryCopy(v10 T{Object}, v11 T{Object}, v7, v8, v9, dest_cid=_Uint8List (115) [untagged], src_cid=_Uint8List (115) [untagged], unboxed_inputs, can_overlap)
Copying backwards
Copying forwards
ParallelMove rax <- C
DartReturn:10(v0)
CheckStackOverflowSlowPath
PrologueOffset = 130
B0
B1
ParallelMove rcx <- sp[1]
v6 <- UnboxInt64([non-speculative], v3 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[2]
v9 <- LoadField(v2 T{Object} . PointerBase.data, MayLoadInnerPointer) untagged
v7 <- LoadIndexed([_Int32List] v9 T{Object}, v6) [-2147483648, 2147483647] int32
v8 <- BoxSmallInt(v7) [-2147483648, 2147483647] T{_Smi}
ParallelMove rax <- rax
DartReturn:14(v8)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:4(stack=0, loop=0)
MoveArgument(sp[0] <- v3)
v4 <- StaticCall:8( _get_ffi_native_resolver@8050071<1> v3, result_type = T{Pointer}) T{Pointer}
ParallelMove rax <- rax
ParallelMove fp[-1] <- rax
v2 <- AllocateContext:6(num_variables=1) T{Context}
ParallelMove rcx <- rax, rax <- fp[-1]
StoreField(v2 . #ffiTarget0 = v4, NoStoreBarrier)
ParallelMove rbx <- C, rdx <- rcx
v6 <- AllocateClosure:10(v5, v2, <not-aliased>) T{_Closure}
ParallelMove rax <- rax
DartReturn:12(v6)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v3 <- LoadField(v2 . ArgumentsDescriptor.type_args_len {final}) [0, 4611686018427387903] T{_Smi}
Branch if StrictCompare:4(===, v3, v4) goto (2, 3)
B2
ParallelMove rcx <- C goto:14 B5
B3
v5 <- LoadField(v2 . ArgumentsDescriptor.size {final}) [0, 4611686018427387903] T{_Smi}
v6 <- LoadIndexedUnsafe(rbp[v5 + 16]) T{TypeArguments?}
ParallelMove rcx <- rdx goto:16 B5
B5
Branch if StrictCompare:22(===, v3 T{_Smi}, v4) goto (6, 7)
B6
ParallelMove rcx <- C goto:32 B8
B7
B8
ParallelMove fp[-1] <- rcx
MoveArgument(sp[1] <- v9)
MoveArgument(sp[0] <- v0)
v10 <- NativeCall(Ffi_GetFfiNativeResolver) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- fp[-1], rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:36(v10, v11, 'function result', instantiator_type_args(v0), function_type_args(v9)) T{Pointer}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:38(v10 T{Pointer})
B0
B2
Enter frame
PrologueOffset = 0
ParallelMove rax <- fp[5]
v18 <- LoadField(v14 . Closure.context {final}) T{*}
CheckStackOverflow:8(stack=0, loop=0)
v19 <- LoadField(v18 . #ffiTarget0) T{Pointer}
v20 <- LoadField(v19 . PointerBase.data {final}) untagged
ParallelMove fp[-9] <- r12
ParallelMove  goto:14 B3
B3
v22 <- LoadThread() untagged
ParallelMove fp[-8] <- r13
v24 <- LoadUntagged(v22 T{Object}, 1440) untagged
ParallelMove rdi <- r13, rax <- rax
v25 <- CCall(target_address=v24, v22) untagged
ParallelMove rcx <- rax
ParallelMove rbx <- fp[2], fp[-7] <- rcx
v26 <- UnboxInt64([non-speculative], v17 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- rbx, rax <- r12, fp[-6] <- rbx
v27 <- FfiCall:16( pointer=v20, v15 (@rdi int64), v16 (@rsi int64), v26 (@rdx int64)) [-9223372036854775808, 9223372036854775807] int64
EmitParamMoves
arg_index 0 arg_target rdi int64
  def_index 0
marshaller_.IsHandle(arg_index)
arg_index 1 arg_target rsi int64
  def_index 1
marshaller_.IsHandle(arg_index)
arg_index 2 arg_target rdx int64
  def_index 2
def_target rdx int64 <- origin rdx int64
EmitParamMovesEnd
Call
EmitReturnMoves
EmitReturnMovesEnd
ParallelMove rcx <- rax
v28 <- BoxInt64(v27) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove r12 <- rax, rdi <- fp[-8]
v31 <- LoadUntagged(v22 T{Object}, 1448) untagged
ParallelMove rdi <- rdi, rax <- rax
CCall(target_address=v31, v22 T{Object}) untagged
ParallelMove rax <- r12
DartReturn:18(v28)
B4
ParallelMove r13 <- rax, r12 <- rdx
v11 <- LoadThread() untagged
v13 <- LoadUntagged(v11 T{Object}, 1448) untagged
ParallelMove rdi <- rdi, rax <- rax
CCall(target_address=v13, v11) untagged
ParallelMove rax <- r13, rbx <- r12
ReThrow:22(v8, v9)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
v2 <- LoadStaticField:4(_ffi_resolver@8050071, CallsInitializer) T{_Closure}
ParallelMove rax <- rax
DartReturn:6(v2)
B0
B1
ParallelMove rcx <- sp[2]
v15 <- UnboxInt64([non-speculative], v5) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- sp[5]
StoreField(v2 . _size@8050071 = v15 T{int} <int64>)
ParallelMove rax <- sp[1]
StoreField(v2 . _nestedDimensions@8050071 = v6)
ParallelMove rax <- sp[4]
StoreField(v2 T{Array} . _typedDataBase@8050071 = v3 T{Object})
ParallelMove rax <- sp[3]
StoreField(v2 T{Array} . _offsetInBytes@8050071 = v4 T{int})
ParallelMove rax <- C
DartReturn:12(v0)
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[4] <- v2)
MoveArgument(sp[3] <- v3)
MoveArgument(sp[2] <- v4)
MoveArgument(sp[1] <- v5)
MoveArgument(sp[0] <- v0)
v6 <- NativeCall(TypeError_throwNew) T{*?}
ParallelMove rax <- rax
DartReturn:8(v6)
B0
B1
ParallelMove rax <- sp[1], rcx <- sp[5]
StoreField(v2 . _message@0150898 = v6)
ParallelMove rax <- C
DartReturn:12(v0)
B0
B1
StoreField(v2 . _hasValue@4048458 = v3)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
ParallelMove rax <- rsi
StoreField(v2 . _stateData@4048458 = v3)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rdx <- fp[3]
v12 <- AllocateObject:10(cls=_GrowableList, v2 T{*?}, <not-aliased>) T{_GrowableList}
ParallelMove rax <- rax, rcx <- fp[2]
StoreField(v12 . GrowableObjectArray.data = v3 T{_List}, NoStoreBarrier)
v19 <- LoadField(v3 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
StoreField(v12 T{_GrowableList} . GrowableObjectArray.length = v19 T{_Smi}, NoStoreBarrier)
ParallelMove rax <- rax
DartReturn:16(v12 T{_GrowableList})
Checking for concrete finalized classes:
 * 93 (_OneByteString)
 * 94 (_TwoByteString)
Checking for cid 65 (_Float64x2)
Checking for cid 64 (_Int32x4)
Checking for cid 63 (_Float32x4)
Checking for cid 61 (_Double)
Checking for concrete finalized classes:
 * 59 (_Smi)
 * 60 (_Mint)
B0
B1
MonomorphicCheckedEntry
Enter frame
PrologueOffset = 22
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[4]
v5 <- LoadField(v2 . Closure.function {final}) T{Function}
v6 <- LoadField(v5 . Function.signature {final}) T{_FunctionType?}
v7 <- LoadField(v6 . FunctionType.packed_parameter_counts {final}) [0, 4294967295] uint32
v8 <- BoxSmallInt(v7) [0, 4294967295] T{_Smi}
ParallelMove rbx <- rsi
v10 <- BinarySmiOp:12(& [-o], v8, v9) [0, 65532] T{_Smi}
ParallelMove rbx <- rbx
v12 <- BinarySmiOp:14(>> [-o], v10, v11) [0, 16383] T{_Smi}
ParallelMove rdi <- rsi
v16 <- BinarySmiOp:16(& [-o], v8 T{_Smi}, v15) [0, 1073676288] T{_Smi}
ParallelMove rdi <- rdi
v18 <- BinarySmiOp:18(>> [-o], v16, v17) [0, 16383] T{_Smi}
ParallelMove r8 <- rbx
v19 <- BinarySmiOp:20(+ [-o], v12, v18) [0, 32766] T{_Smi}
ParallelMove rsi <- rsi
v22 <- BinarySmiOp:22(& [-o], v8 T{_Smi}, v11) [0, 2] T{_Smi}
ParallelMove rsi <- rsi
v24 <- BinarySmiOp:24(>> [-o], v22, v23) [0, 1] T{_Smi}
v27 <- LoadField(v6 . FunctionType.named_parameter_names {final}) T{_List}
v28 <- LoadField(v6 . FunctionType.parameter_types {final}) T{_List}
ParallelMove fp[-1] <- r10
v29 <- LoadField(v6 . FunctionType.type_parameters {final}) T{TypeParameters?}
ParallelMove fp[-8] <- r12
v30 <- LoadField(v2 . Closure.instantiator_type_arguments {final}) T{TypeArguments?}
ParallelMove fp[-7] <- r13
v31 <- LoadField(v2 . Closure.function_type_arguments {final}) T{TypeArguments?}
ParallelMove fp[-2] <- r10
Branch if StrictCompare:26(!==, v24, v25) T{bool} goto (4, 5)
B4
Branch if StrictCompare:64(===, v12, v33) goto (11, 12)
B11
v97 <- LoadField(v27 . Array.length {final}) [0, 576460752303423487] T{_Smi}
Branch if StrictCompare:74(===, v18, v97) goto (13, 14)
B13
B14
B12
B5
Branch if RelationalOp:38(<=, v12, v33) T{bool} goto (7, 8)
B7
Branch if RelationalOp:50(<=, v33, v19) T{bool} goto (9, 10)
B9
B6
Branch if StrictCompare:254(===, v29, v0) goto (45, 46)
B45
ParallelMove rdi <- r10 goto:264 B44
B46
v37 <- LoadField(v6 . FunctionType.packed_type_parameter_counts {final}) [0, 65535] uint16
v38 <- BoxSmallInt(v37) [0, 65535] T{_Smi}
ParallelMove rsi <- rdx
v40 <- BinarySmiOp:86(& [-o], v38, v39) [0, 255] T{_Smi}
ParallelMove fp[-6] <- rsi
ParallelMove rdx <- rdx
v44 <- BinarySmiOp:88(& [-o], v38 T{_Smi}, v43) [0, 65280] T{_Smi}
ParallelMove rdi <- rdx
v46 <- BinarySmiOp:90(>> [-o], v44, v45) [0, 255] T{_Smi}
ParallelMove fp[-5] <- rdi
v47 <- LoadField(v29 T{TypeParameters} . TypeParameters.flags {final}) T{_List?}
ParallelMove fp[-4] <- r8
v48 <- LoadField(v2 . Closure.delayed_type_arguments {final}) T{TypeArguments?}
ParallelMove fp[-3] <- r9
Branch if StrictCompare:130(===, v48, v49) goto (22, 23)
B22
v81 <- LoadField(v5 T{Function} . Function.data {final}) T{*}
v82 <- LoadField(v81 . ClosureData.packed_fields {final}) [0, 4294967295] uint32
v83 <- BoxSmallInt(v82) [0, 4294967295] T{_Smi}
ParallelMove rdx <- rdx
v84 <- BinarySmiOp:92(& [-o], v83, v39) [0, 255] T{_Smi}
Branch if StrictCompare:96(===, v84, v23) goto (16, 17)
B16
v88 <- LoadField(v29 T{TypeParameters} . TypeParameters.defaults {final}) T{TypeArguments?}
ParallelMove rax <- rcx goto:120 B15
B17
Branch if StrictCompare:104(===, v84, v25) goto (18, 19)
B18
v85 <- LoadField(v29 T{TypeParameters} . TypeParameters.defaults {final}) T{TypeArguments?}
ParallelMove rdx <- r13, rcx <- r10, rbx <- rbx
v86 <- InstantiateTypeArguments:122(v85, instantiator_type_args(v30), function_type_args(v31)) T{*?}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:124 B15
B19
Branch if StrictCompare:112(===, v84, v11) goto (20, 21)
B20
ParallelMove rax <- fp[-7] goto:126 B15
B21
ParallelMove rax <- fp[-2] goto:128 B15
B15
ParallelMove rcx <- rax goto:140 B24
B23
ParallelMove rcx <- fp[-3] goto:142 B24
B24
ParallelMove rdx <- fp[-6]
v52 <- BinarySmiOp:144(+ [tr], v40, v46) [0, 510] T{_Smi}
MoveArgument(sp[3] <- v51)
MoveArgument(sp[2] <- v31)
MoveArgument(sp[1] <- v40)
MoveArgument(sp[0] <- v52)
v53 <- StaticCall:146( _prependTypeArguments@9040228<0> v51, v31, v40, v52) T{*?}
ParallelMove rsi <- rax, rax <- fp[-3]
ParallelMove fp[-10] <- rsi
Branch if StrictCompare:238(===, v48 T{TypeArguments?}, v49) goto (41, 42)
B41
ParallelMove rax <- fp[-8]
v57 <- LoadField(v29 T{TypeParameters} . TypeParameters.bounds {final}) T{TypeArguments?}
ParallelMove fp[-9] <- rdi
Branch if StrictCompare:152(===, v57, v0) goto (27, 28)
B27
B28
v75 <- LoadField:162(v29 T{TypeParameters} . TypeParameters.names {final}) T{_List}
ParallelMove fp[-3] <- r8
ParallelMove rax <- C goto:162 B26
B26
  Loop 0
v133 <- BoxInt64(v58) [-4611686018427387903, v46] T{_Smi}
ParallelMove fp[-2] <- r13
Branch if RelationalOp:164(<, v133 T{_Smi}, v46) T{bool} goto (29, 30)
B29
  Loop 0
Branch if StrictCompare:180(===, v47, v0) goto (33, 34)
B33
B34
  Loop 0
ParallelMove rcx <- r13
v62 <- BinarySmiOp:190(>> [-o], v133 T{_Smi}, v61) [-144115188075855872, 7] T{_Smi}
v63 <- LoadIndexed([_List] v47 T{_List}, v62) T{*?}
ParallelMove rcx <- r13
v65 <- BinarySmiOp:192(& [-o], v133 T{_Smi}, v64) [0, 31] T{_Smi}
ParallelMove rcx <- rcx
ParallelMove rdx <- rdx
v66 <- BinarySmiOp:194(>> [-o], v63, v65) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v67 <- BinarySmiOp:196(& [-o], v66, v23) [0, 1] T{_Smi}
Branch if StrictCompare:198(===, v67, v25) goto (35, 36)
B35
B32
  Loop 0
Branch if StrictCompare:214(===, v53, v0) goto (37, 40)
B37
  Loop 0
ParallelMove rcx <- C goto:228 B38
B40
  Loop 0
ParallelMove rcx <- r13
v70 <- BinarySmiOp:224(+ [tr], v133 T{_Smi}, v40) [-4611686018427387903, v46+254] T{_Smi}
v71 <- LoadIndexed([TypeArguments] v53 T{*}, v70) T{*}
ParallelMove rcx <- rdx goto:226 B38
B38
  Loop 0
v188 <- LoadIndexed([TypeArguments] v57 T{TypeArguments}, v58) T{*}
v189 <- LoadIndexed([_List] v75, v58) T{*?}
ParallelMove rdx <- fp[-7], rcx <- rsi, rax <- rcx, rbx <- rbx, r9 <- r9
AssertSubtype:230(v72, v188 T{*}, v189 T{*?}, instantiator_type_args(v30), function_type_args(v53))
ParallelMove  goto:232 B31
B36
B31
  Loop 0
ParallelMove rcx <- fp[-2]
v69 <- BinarySmiOp:234(+ [tr], v133 T{_Smi}, v23) [-4611686018427387902, v46] T{_Smi}
ParallelMove rcx <- rcx
v140 <- UnboxInt64([non-speculative], v69) [-4611686018427387902, v46] int64
ParallelMove rax <- rcx, rsi <- fp[-10], rdi <- fp[-9], r8 <- fp[-3] goto:236 B26
B30
B25
B42
B43
ParallelMove rdi <- fp[-10] goto:262 B44
B44
ParallelMove fp[-2] <- rdi
v92 <- LoadIndexed([_List] v28, v23) T{*?}
ParallelMove rax <- fp[3], rbx <- rbx, rdx <- fp[-7], rcx <- rdi
t11 <- AssertAssignable:266(v3, v92, ':dynamic_assert_assignable_stc_check', instantiator_type_args(v30), function_type_args(v91)) T{*?}
AssertAssignable for runtime type
TTSCall
ParallelMove rax <- fp[-1]
v94 <- LoadIndexed([_List] v28, v11) T{*?}
ParallelMove rax <- fp[2], rbx <- rbx, rdx <- fp[-7], rcx <- fp[-2]
t11 <- AssertAssignable:268(v4, v94, ':dynamic_assert_assignable_stc_check', instantiator_type_args(v30), function_type_args(v91)) T{*?}
AssertAssignable for runtime type
TTSCall
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3 T{*?})
MoveArgument(sp[0] <- v4 T{*?})
ParallelMove rax <- fp[4]
v96 <- ClosureCall:270( closure=v2<0>, v2, v3 T{*?}, v4 T{*?}) T{*?}
ParallelMove rax <- rax
DartReturn:272(v96)
B10
B8
B3
ParallelMove r10 <- C
TailCall(_iso_stub_CallClosureNoSuchMethodStub(v36))
CheckStackOverflowSlowPath
B0
B1
MonomorphicCheckedEntry
Enter frame
PrologueOffset = 22
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v3 <- LoadField(v2 . Closure.function {final}) T{Function}
v4 <- LoadField(v3 . Function.signature {final}) T{_FunctionType?}
v5 <- LoadField(v4 . FunctionType.packed_parameter_counts {final}) [0, 4294967295] uint32
v6 <- BoxSmallInt(v5) [0, 4294967295] T{_Smi}
ParallelMove rbx <- rsi
v8 <- BinarySmiOp:12(& [-o], v6, v7) [0, 65532] T{_Smi}
ParallelMove rbx <- rbx
v10 <- BinarySmiOp:14(>> [-o], v8, v9) [0, 16383] T{_Smi}
ParallelMove rdi <- rsi
v14 <- BinarySmiOp:16(& [-o], v6 T{_Smi}, v13) [0, 1073676288] T{_Smi}
ParallelMove rdi <- rdi
v16 <- BinarySmiOp:18(>> [-o], v14, v15) [0, 16383] T{_Smi}
ParallelMove r8 <- rbx
v17 <- BinarySmiOp:20(+ [-o], v10, v16) [0, 32766] T{_Smi}
ParallelMove rsi <- rsi
v20 <- BinarySmiOp:22(& [-o], v6 T{_Smi}, v9) [0, 2] T{_Smi}
ParallelMove rsi <- rsi
v22 <- BinarySmiOp:24(>> [-o], v20, v21) [0, 1] T{_Smi}
v25 <- LoadField(v4 . FunctionType.named_parameter_names {final}) T{_List}
v27 <- LoadField(v4 . FunctionType.type_parameters {final}) T{TypeParameters?}
ParallelMove fp[-7] <- r10
v28 <- LoadField(v2 . Closure.instantiator_type_arguments {final}) T{TypeArguments?}
ParallelMove fp[-6] <- r12
v29 <- LoadField(v2 . Closure.function_type_arguments {final}) T{TypeArguments?}
ParallelMove fp[-5] <- r13
Branch if StrictCompare:26(!==, v22, v23) T{bool} goto (4, 5)
B4
Branch if StrictCompare:64(===, v10, v21) goto (11, 12)
B11
v90 <- LoadField(v25 . Array.length {final}) [0, 576460752303423487] T{_Smi}
Branch if StrictCompare:74(===, v16, v90) goto (13, 14)
B13
B14
B12
B5
Branch if RelationalOp:38(<=, v10, v21) T{bool} goto (7, 8)
B7
Branch if RelationalOp:50(<=, v21, v17) T{bool} goto (9, 10)
B9
B6
Branch if StrictCompare:254(===, v27, v0) goto (45, 46)
B45
B46
v34 <- LoadField(v4 . FunctionType.packed_type_parameter_counts {final}) [0, 65535] uint16
v35 <- BoxSmallInt(v34) [0, 65535] T{_Smi}
ParallelMove rsi <- rdx
v37 <- BinarySmiOp:86(& [-o], v35, v36) [0, 255] T{_Smi}
ParallelMove fp[-4] <- rsi
ParallelMove rdx <- rdx
v41 <- BinarySmiOp:88(& [-o], v35 T{_Smi}, v40) [0, 65280] T{_Smi}
ParallelMove rdi <- rdx
v43 <- BinarySmiOp:90(>> [-o], v41, v42) [0, 255] T{_Smi}
ParallelMove fp[-3] <- rdi
v44 <- LoadField(v27 T{TypeParameters} . TypeParameters.flags {final}) T{_List?}
ParallelMove fp[-2] <- r8
v45 <- LoadField(v2 . Closure.delayed_type_arguments {final}) T{TypeArguments?}
ParallelMove fp[-1] <- r9
Branch if StrictCompare:130(===, v45, v46) goto (22, 23)
B22
v78 <- LoadField(v3 T{Function} . Function.data {final}) T{*}
v79 <- LoadField(v78 . ClosureData.packed_fields {final}) [0, 4294967295] uint32
v80 <- BoxSmallInt(v79) [0, 4294967295] T{_Smi}
ParallelMove rdx <- rdx
v81 <- BinarySmiOp:92(& [-o], v80, v36) [0, 255] T{_Smi}
Branch if StrictCompare:96(===, v81, v21) goto (16, 17)
B16
v85 <- LoadField(v27 T{TypeParameters} . TypeParameters.defaults {final}) T{TypeArguments?}
ParallelMove rax <- rcx goto:120 B15
B17
Branch if StrictCompare:104(===, v81, v23) goto (18, 19)
B18
v82 <- LoadField(v27 T{TypeParameters} . TypeParameters.defaults {final}) T{TypeArguments?}
ParallelMove rdx <- r12, rcx <- r13, rbx <- rbx
v83 <- InstantiateTypeArguments:122(v82, instantiator_type_args(v28), function_type_args(v29)) T{*?}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:124 B15
B19
Branch if StrictCompare:112(===, v81, v9) goto (20, 21)
B20
ParallelMove rax <- fp[-6] goto:126 B15
B21
ParallelMove rax <- fp[-5] goto:128 B15
B15
ParallelMove rcx <- rax goto:140 B24
B23
ParallelMove rcx <- fp[-1] goto:142 B24
B24
ParallelMove rdx <- fp[-4]
v49 <- BinarySmiOp:144(+ [tr], v37, v43) [0, 510] T{_Smi}
MoveArgument(sp[3] <- v48)
MoveArgument(sp[2] <- v29)
MoveArgument(sp[1] <- v37)
MoveArgument(sp[0] <- v49)
v50 <- StaticCall:146( _prependTypeArguments@9040228<0> v48, v29, v37, v49) T{*?}
ParallelMove rsi <- rax, rax <- fp[-1]
ParallelMove fp[-9] <- rsi
Branch if StrictCompare:238(===, v45 T{TypeArguments?}, v46) goto (41, 42)
B41
ParallelMove rax <- fp[-7]
v54 <- LoadField(v27 T{TypeParameters} . TypeParameters.bounds {final}) T{TypeArguments?}
ParallelMove fp[-8] <- rdi
Branch if StrictCompare:152(===, v54, v0) goto (27, 28)
B27
B28
v72 <- LoadField:162(v27 T{TypeParameters} . TypeParameters.names {final}) T{_List}
ParallelMove fp[-5] <- r8
ParallelMove rax <- C goto:162 B26
B26
  Loop 0
v126 <- BoxInt64(v55) [-4611686018427387903, v43] T{_Smi}
ParallelMove fp[-1] <- r13
Branch if RelationalOp:164(<, v126 T{_Smi}, v43) T{bool} goto (29, 30)
B29
  Loop 0
Branch if StrictCompare:180(===, v44, v0) goto (33, 34)
B33
B34
  Loop 0
ParallelMove rcx <- r13
v59 <- BinarySmiOp:190(>> [-o], v126 T{_Smi}, v58) [-144115188075855872, 7] T{_Smi}
v60 <- LoadIndexed([_List] v44 T{_List}, v59) T{*?}
ParallelMove rcx <- r13
v62 <- BinarySmiOp:192(& [-o], v126 T{_Smi}, v61) [0, 31] T{_Smi}
ParallelMove rcx <- rcx
ParallelMove rdx <- rdx
v63 <- BinarySmiOp:194(>> [-o], v60, v62) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v64 <- BinarySmiOp:196(& [-o], v63, v21) [0, 1] T{_Smi}
Branch if StrictCompare:198(===, v64, v23) goto (35, 36)
B35
B32
  Loop 0
Branch if StrictCompare:214(===, v50, v0) goto (37, 40)
B37
  Loop 0
ParallelMove rcx <- C goto:228 B38
B40
  Loop 0
ParallelMove rcx <- r13
v67 <- BinarySmiOp:224(+ [tr], v126 T{_Smi}, v37) [-4611686018427387903, v43+254] T{_Smi}
v68 <- LoadIndexed([TypeArguments] v50 T{*}, v67) T{*}
ParallelMove rcx <- rdx goto:226 B38
B38
  Loop 0
v181 <- LoadIndexed([TypeArguments] v54 T{TypeArguments}, v55) T{*}
v182 <- LoadIndexed([_List] v72, v55) T{*?}
ParallelMove rdx <- fp[-6], rcx <- rsi, rax <- rcx, rbx <- rbx, r9 <- r9
AssertSubtype:230(v69, v181 T{*}, v182 T{*?}, instantiator_type_args(v28), function_type_args(v50))
ParallelMove  goto:232 B31
B36
B31
  Loop 0
ParallelMove rcx <- fp[-1]
v66 <- BinarySmiOp:234(+ [tr], v126 T{_Smi}, v21) [-4611686018427387902, v43] T{_Smi}
ParallelMove rcx <- rcx
v133 <- UnboxInt64([non-speculative], v66) [-4611686018427387902, v43] int64
ParallelMove rax <- rcx, rsi <- fp[-9], rdi <- fp[-8], r8 <- fp[-5] goto:236 B26
B30
B25
B42
B43
B44
MoveArgument(sp[0] <- v2)
ParallelMove rax <- fp[2]
v89 <- ClosureCall:266( closure=v2<0>, v2) T{*?}
ParallelMove rax <- rax
DartReturn:268(v89)
B10
B8
B3
ParallelMove r10 <- C
TailCall(_iso_stub_CallClosureNoSuchMethodStub(v33))
CheckStackOverflowSlowPath
B0
B1
MonomorphicCheckedEntry
Enter frame
PrologueOffset = 22
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[3]
v4 <- LoadField(v2 . Closure.function {final}) T{Function}
v5 <- LoadField(v4 . Function.signature {final}) T{_FunctionType?}
v6 <- LoadField(v5 . FunctionType.packed_parameter_counts {final}) [0, 4294967295] uint32
v7 <- BoxSmallInt(v6) [0, 4294967295] T{_Smi}
ParallelMove rbx <- rsi
v9 <- BinarySmiOp:12(& [-o], v7, v8) [0, 65532] T{_Smi}
ParallelMove rbx <- rbx
v11 <- BinarySmiOp:14(>> [-o], v9, v10) [0, 16383] T{_Smi}
ParallelMove rdi <- rsi
v15 <- BinarySmiOp:16(& [-o], v7 T{_Smi}, v14) [0, 1073676288] T{_Smi}
ParallelMove rdi <- rdi
v17 <- BinarySmiOp:18(>> [-o], v15, v16) [0, 16383] T{_Smi}
ParallelMove r8 <- rbx
v18 <- BinarySmiOp:20(+ [-o], v11, v17) [0, 32766] T{_Smi}
ParallelMove rsi <- rsi
v21 <- BinarySmiOp:22(& [-o], v7 T{_Smi}, v10) [0, 2] T{_Smi}
ParallelMove rsi <- rsi
v23 <- BinarySmiOp:24(>> [-o], v21, v22) [0, 1] T{_Smi}
v26 <- LoadField(v5 . FunctionType.named_parameter_names {final}) T{_List}
v27 <- LoadField(v5 . FunctionType.parameter_types {final}) T{_List}
ParallelMove fp[-1] <- r10
v28 <- LoadField(v5 . FunctionType.type_parameters {final}) T{TypeParameters?}
ParallelMove fp[-8] <- r12
v29 <- LoadField(v2 . Closure.instantiator_type_arguments {final}) T{TypeArguments?}
ParallelMove fp[-7] <- r13
v30 <- LoadField(v2 . Closure.function_type_arguments {final}) T{TypeArguments?}
ParallelMove fp[-2] <- r10
Branch if StrictCompare:26(!==, v23, v24) T{bool} goto (4, 5)
B4
Branch if StrictCompare:64(===, v11, v10) goto (11, 12)
B11
v93 <- LoadField(v26 . Array.length {final}) [0, 576460752303423487] T{_Smi}
Branch if StrictCompare:74(===, v17, v93) goto (13, 14)
B13
B14
B12
B5
Branch if RelationalOp:38(<=, v11, v10) T{bool} goto (7, 8)
B7
Branch if RelationalOp:50(<=, v10, v18) T{bool} goto (9, 10)
B9
B6
Branch if StrictCompare:254(===, v28, v0) goto (45, 46)
B45
ParallelMove rcx <- r10 goto:264 B44
B46
v35 <- LoadField(v5 . FunctionType.packed_type_parameter_counts {final}) [0, 65535] uint16
v36 <- BoxSmallInt(v35) [0, 65535] T{_Smi}
ParallelMove rsi <- rdx
v38 <- BinarySmiOp:86(& [-o], v36, v37) [0, 255] T{_Smi}
ParallelMove fp[-6] <- rsi
ParallelMove rdx <- rdx
v42 <- BinarySmiOp:88(& [-o], v36 T{_Smi}, v41) [0, 65280] T{_Smi}
ParallelMove rdi <- rdx
v44 <- BinarySmiOp:90(>> [-o], v42, v43) [0, 255] T{_Smi}
ParallelMove fp[-5] <- rdi
v45 <- LoadField(v28 T{TypeParameters} . TypeParameters.flags {final}) T{_List?}
ParallelMove fp[-4] <- r8
v46 <- LoadField(v2 . Closure.delayed_type_arguments {final}) T{TypeArguments?}
ParallelMove fp[-3] <- r9
Branch if StrictCompare:130(===, v46, v47) goto (22, 23)
B22
v79 <- LoadField(v4 T{Function} . Function.data {final}) T{*}
v80 <- LoadField(v79 . ClosureData.packed_fields {final}) [0, 4294967295] uint32
v81 <- BoxSmallInt(v80) [0, 4294967295] T{_Smi}
ParallelMove rdx <- rdx
v82 <- BinarySmiOp:92(& [-o], v81, v37) [0, 255] T{_Smi}
Branch if StrictCompare:96(===, v82, v22) goto (16, 17)
B16
v86 <- LoadField(v28 T{TypeParameters} . TypeParameters.defaults {final}) T{TypeArguments?}
ParallelMove rax <- rcx goto:120 B15
B17
Branch if StrictCompare:104(===, v82, v24) goto (18, 19)
B18
v83 <- LoadField(v28 T{TypeParameters} . TypeParameters.defaults {final}) T{TypeArguments?}
ParallelMove rdx <- r13, rcx <- r10, rbx <- rbx
v84 <- InstantiateTypeArguments:122(v83, instantiator_type_args(v29), function_type_args(v30)) T{*?}
ParallelMove rax <- rax
ParallelMove rax <- rax goto:124 B15
B19
Branch if StrictCompare:112(===, v82, v10) goto (20, 21)
B20
ParallelMove rax <- fp[-7] goto:126 B15
B21
ParallelMove rax <- fp[-2] goto:128 B15
B15
ParallelMove rcx <- rax goto:140 B24
B23
ParallelMove rcx <- fp[-3] goto:142 B24
B24
ParallelMove rdx <- fp[-6]
v50 <- BinarySmiOp:144(+ [tr], v38, v44) [0, 510] T{_Smi}
MoveArgument(sp[3] <- v49)
MoveArgument(sp[2] <- v30)
MoveArgument(sp[1] <- v38)
MoveArgument(sp[0] <- v50)
v51 <- StaticCall:146( _prependTypeArguments@9040228<0> v49, v30, v38, v50) T{*?}
ParallelMove rsi <- rax, rax <- fp[-3]
ParallelMove fp[-10] <- rsi
Branch if StrictCompare:238(===, v46 T{TypeArguments?}, v47) goto (41, 42)
B41
ParallelMove rax <- fp[-8]
v55 <- LoadField(v28 T{TypeParameters} . TypeParameters.bounds {final}) T{TypeArguments?}
ParallelMove fp[-9] <- rdi
Branch if StrictCompare:152(===, v55, v0) goto (27, 28)
B27
B28
v73 <- LoadField:162(v28 T{TypeParameters} . TypeParameters.names {final}) T{_List}
ParallelMove fp[-3] <- r8
ParallelMove rax <- C goto:162 B26
B26
  Loop 0
v129 <- BoxInt64(v56) [-4611686018427387903, v44] T{_Smi}
ParallelMove fp[-2] <- r13
Branch if RelationalOp:164(<, v129 T{_Smi}, v44) T{bool} goto (29, 30)
B29
  Loop 0
Branch if StrictCompare:180(===, v45, v0) goto (33, 34)
B33
B34
  Loop 0
ParallelMove rcx <- r13
v60 <- BinarySmiOp:190(>> [-o], v129 T{_Smi}, v59) [-144115188075855872, 7] T{_Smi}
v61 <- LoadIndexed([_List] v45 T{_List}, v60) T{*?}
ParallelMove rcx <- r13
v63 <- BinarySmiOp:192(& [-o], v129 T{_Smi}, v62) [0, 31] T{_Smi}
ParallelMove rcx <- rcx
ParallelMove rdx <- rdx
v64 <- BinarySmiOp:194(>> [-o], v61, v63) [-4611686018427387904, 4611686018427387903] T{_Smi}
ParallelMove rdx <- rdx
v65 <- BinarySmiOp:196(& [-o], v64, v22) [0, 1] T{_Smi}
Branch if StrictCompare:198(===, v65, v24) goto (35, 36)
B35
B32
  Loop 0
Branch if StrictCompare:214(===, v51, v0) goto (37, 40)
B37
  Loop 0
ParallelMove rcx <- C goto:228 B38
B40
  Loop 0
ParallelMove rcx <- r13
v68 <- BinarySmiOp:224(+ [tr], v129 T{_Smi}, v38) [-4611686018427387903, v44+254] T{_Smi}
v69 <- LoadIndexed([TypeArguments] v51 T{*}, v68) T{*}
ParallelMove rcx <- rdx goto:226 B38
B38
  Loop 0
v184 <- LoadIndexed([TypeArguments] v55 T{TypeArguments}, v56) T{*}
v185 <- LoadIndexed([_List] v73, v56) T{*?}
ParallelMove rdx <- fp[-7], rcx <- rsi, rax <- rcx, rbx <- rbx, r9 <- r9
AssertSubtype:230(v70, v184 T{*}, v185 T{*?}, instantiator_type_args(v29), function_type_args(v51))
ParallelMove  goto:232 B31
B36
B31
  Loop 0
ParallelMove rcx <- fp[-2]
v67 <- BinarySmiOp:234(+ [tr], v129 T{_Smi}, v22) [-4611686018427387902, v44] T{_Smi}
ParallelMove rcx <- rcx
v136 <- UnboxInt64([non-speculative], v67) [-4611686018427387902, v44] int64
ParallelMove rax <- rcx, rsi <- fp[-10], rdi <- fp[-9], r8 <- fp[-3] goto:236 B26
B30
B25
B42
B43
ParallelMove rcx <- fp[-10] goto:262 B44
B44
v90 <- LoadIndexed([_List] v27, v22) T{*?}
ParallelMove rax <- fp[2], rbx <- rbx, rdx <- fp[-7], rcx <- rcx
t11 <- AssertAssignable:266(v3, v90, ':dynamic_assert_assignable_stc_check', instantiator_type_args(v29), function_type_args(v89)) T{*?}
AssertAssignable for runtime type
TTSCall
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v3 T{*?})
ParallelMove rax <- fp[3]
v92 <- ClosureCall:268( closure=v2<0>, v2, v3 T{*?}) T{*?}
ParallelMove rax <- rax
DartReturn:270(v92)
B10
B8
B3
ParallelMove r10 <- C
TailCall(_iso_stub_CallClosureNoSuchMethodStub(v34))
CheckStackOverflowSlowPath
B0
B1
MonomorphicCheckedEntry
ParallelMove rax <- sp[1]
DartReturn:10(v2)
B0
B1
ParallelMove rax <- sp[1], rcx <- sp[2]
StoreField(v2 . _hash@0150898 = v3)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
ParallelMove rax <- sp[1], rcx <- sp[2]
StoreField(v2 . _context@0150898 = v3)
ParallelMove rax <- C
DartReturn:4(v0)
B0
B1
ParallelMove rax <- sp[1], rcx <- sp[2]
StoreField(v2 . _delayed_type_arguments@0150898 = v3)
ParallelMove rax <- C
DartReturn:4(v0)
No valid cids to check
B0
B1
ParallelMove rax <- C
DartReturn:10(v4)
B0
B1
ParallelMove rax <- C
DartReturn:10(v4)
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(Object_simpleInstanceOf) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{bool}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{bool})
B0
B1
Enter frame
PrologueOffset = 0
MoveArgument(sp[4] <- v2)
MoveArgument(sp[3] <- v3)
MoveArgument(sp[2] <- v4)
MoveArgument(sp[1] <- v5)
MoveArgument(sp[0] <- v0)
v6 <- NativeCall(Object_instanceOf) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v6, v7, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{bool}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v6 T{bool})
B0
B1
Intrinsic
Enter frame
PrologueOffset = 303
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v0)
v4 <- NativeCall(Object_haveSameRuntimeType) T{*?}
ParallelMove rax <- rax, rdx <- C, rcx <- C, rbx <- rax
ParallelMove fp[-1] <- rbx
AssertAssignable:8(v4, v5, 'function result', instantiator_type_args(v0), function_type_args(v0)) T{bool}
AssertAssignable for compile-time type
TTSCall
ParallelMove rax <- fp[-1]
DartReturn:10(v4 T{bool})
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
StaticCall:10( _removeEntries@8050071<0> v2, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rax <- C
ParallelMove rcx <- rdi, fp[-2] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v90 <- LoadField(v2 T{_NativeFinalizer} . FinalizerBase.entries_collected) T{FinalizerEntry?}
StoreField(v2 T{_NativeFinalizer} . FinalizerBase.entries_collected = v0 T{Null?}, NoStoreBarrier)
ParallelMove rdx <- rdx goto:66 B10
B10
  Loop 0
ParallelMove fp[-1] <- rdx
CheckStackOverflow:64(stack=0, loop=1)
Branch if StrictCompare:12(!==, v5, v0) goto (9, 11)
B9
  Loop 0
v85 <- LoadField(v2 T{_NativeFinalizer} . FinalizerBase.all_entries) T{_Set?}
ParallelMove rdi <- rdi, rsi <- rdx
v91 <- StaticCall:18( remove<0> v85 T{_Set}, v5 T{FinalizerEntry}) T{bool}
ParallelMove rsi <- fp[-1]
v47 <- LoadField(v5 T{FinalizerEntry} . FinalizerEntry.detach) T{*?}
ParallelMove fp[-3] <- rax
Branch if StrictCompare:22(!==, v47 T{Object??}, v0) goto (3, 7)
B3
  Loop 0
ParallelMove rcx <- fp[-2]
v80 <- LoadField(v2 T{_NativeFinalizer} . FinalizerBase.detachments) T{*?}
Branch if StrictCompare:12(===, v80 T{Expando?}, v0 T{Null?}) goto (16, 17)
B16
  Loop 0
ParallelMove rdx <- C
v33 <- AllocateObject:18(cls=Expando, v37 T{TypeArguments}) T{Expando}
ParallelMove rbx <- C, r10 <- C, rax <- rax
ParallelMove fp[-4] <- rax
v66 <- CreateArray:10(v67 T{TypeArguments}, v68 T{_Smi}) T{_List}
ParallelMove rax <- rax, rcx <- fp[-4]
StoreField(v33 T{Expando} . _data@0150898 = v66, NoStoreBarrier)
ParallelMove rdx <- C
StoreField(v33 T{Expando} . _used@0150898 = v106 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rcx, r8 <- fp[-2]
StoreField(v2 T{_NativeFinalizer} . FinalizerBase.detachments = v33 T{Expando})
ParallelMove rdi <- rcx goto:28 B18
B17
  Loop 0
ParallelMove r8 <- rcx, rdx <- C
ParallelMove rdi <- rbx goto:30 B18
B18
  Loop 0
ParallelMove rdi <- rdi, rsi <- fp[-3]
v14 <- StaticCall:30( []<0> v105 T{Expando}, v47 T{Object?}, using unchecked entrypoint) T{X0??}
ParallelMove rax <- rax
Branch if StrictCompare:32(===, v14, v0) goto (4, 5)
B4
B5
  Loop 0
v119 <- LoadClassId(<non-smi> v14 T{X0?}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- fp[-1]
v15 <- DispatchTableCall( cid=v119 Set.remove<0>, v14 T{X0?}, v5 T{FinalizerEntry})
ParallelMove  goto:46 B6
B6
B7
B8
  Loop 0
v24 <- LoadField(v5 T{FinalizerEntry} . FinalizerEntry.next) T{FinalizerEntry?}
ParallelMove rdx <- rdx, rax <- C, rcx <- fp[-2] goto:62 B10
B11
ParallelMove rax <- C
DartReturn:70(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- rdi, rax <- rsi, fp[-1] <- rdi, fp[-2] <- rsi
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- rax
StaticCall:10( checkValidWeakTarget<0> v3)
ParallelMove rax <- fp[-1]
v56 <- LoadField(v2 T{Expando} . _data@0150898) T{_List}
v62 <- LoadField(v56 T{_List} . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rdx <- rdx
v72 <- UnboxInt64([non-speculative], v62 T{_Smi}) [0, 576460752303423487] int64
ParallelMove rdx <- rdx
v6 <- BinaryInt64Op(- [tr], v72 T{_Smi}, v83 T{_Smi}) [v72-1, v72-1] int64
ParallelMove rbx <- fp[-2], fp[-3] <- rdx
v111 <- LoadClassId(v3) int64
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v7 <- DispatchTableCall( cid=v111 Object._identityHashCode<0>, v3) T{int}
ParallelMove rax <- rax
ParallelMove rax <- rax
v73 <- UnboxInt64([non-speculative], v7 T{int}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-3]
ParallelMove rcx <- rax
v8 <- BinaryInt64Op(& [tr], v73 T{int}, v6) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rsi <- fp[-1]
v9 <- LoadField(v2 . _data@0150898) T{_List}
v22 <- LoadField(v9 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- r8
v74 <- UnboxInt64([non-speculative], v22) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:22(v74 T{_Smi}, v8) [-9223372036854775808, 9223372036854775807] int64
v84 <- LoadIndexed:22([_List] v9, v8 T{int}) T{_WeakProperty?}
ParallelMove r8 <- r8
v108 <- UnboxInt64([non-speculative], v22) int64
ParallelMove r9 <- rcx, r8 <- rax, rdi <- rdi, rbx <- r8 goto:80 B9
B9
  Loop 0
ParallelMove fp[-5] <- r9, fp[-6] <- r8, fp[-7] <- rdi, fp[-8] <- rbx
CheckStackOverflow:78(stack=0, loop=1)
Branch if StrictCompare:24(!==, v12, v0) goto (8, 10)
B8
  Loop 0
v51 <- LoadField(v12 T{_WeakProperty} . WeakProperty.key) T{*?}
ParallelMove rax <- r10, rcx <- fp[-2], fp[-4] <- r10
Branch if StrictCompare:30(===, v51 T{*?}, v3, with number check) goto (3, 4)
B4
  Loop 0
ParallelMove rax <- fp[-4]
Branch if StrictCompare:44(===, v51 T{*?}, v0) goto (5, 6)
B5
  Loop 0
ParallelMove rbx <- fp[-5]
v36 <- LoadStaticField:4(_deletedEntry@0150898, CallsInitializer) T{_WeakProperty}
ParallelMove rax <- fp[-8], rbx <- fp[-5], rcx <- rax
GenericCheckBound:54(v90 T{_Smi}, v11) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rdx <- fp[-7], rax <- rcx, rcx <- fp[-5]
StoreIndexed:54([_List] v80 T{_List}, v11 T{int}, v36 T{_WeakProperty})
ParallelMove  goto:60 B7
B6
  Loop 0
ParallelMove rcx <- fp[-5]
ParallelMove  goto:62 B7
B7
  Loop 0
ParallelMove rcx <- rcx
v15 <- BinaryInt64Op(+ [tr], v11, v83 T{_Smi}) [-9223372036854775808, 9223372036854775807] int64
ParallelMove rcx <- rcx
v16 <- BinaryInt64Op(& [tr], v15, v6) [-9223372036854775808, 9223372036854775807] int64
v17 <- LoadField(v2 . _data@0150898) T{_List}
v27 <- LoadField(v17 . Array.length {final}) [0, 576460752303423487] T{_Smi}
ParallelMove rax <- r10
v78 <- UnboxInt64([non-speculative], v27) [0, 576460752303423487] int64
ParallelMove rax <- rax, rbx <- rcx
GenericCheckBound:70(v78 T{_Smi}, v16) [-9223372036854775808, 9223372036854775807] int64
v85 <- LoadIndexed:70([_List] v17, v16 T{int}) T{_WeakProperty?}
ParallelMove r10 <- r10
v110 <- UnboxInt64([non-speculative], v27) int64
ParallelMove r9 <- rcx, r8 <- r8, rdi <- rdi, rbx <- r10 goto:76 B9
B3
ParallelMove rcx <- fp[-6]
v46 <- LoadField(v12 T{_WeakProperty} . WeakProperty.value) T{*?}
ParallelMove rax <- rax
DartReturn:38(v46 T{*?})
B10
ParallelMove rax <- C
DartReturn:84(v0)
CheckStackOverflowSlowPath
slow path check bound operation
CheckStackOverflowSlowPath
slow path check bound operation
slow path check bound operation
Checking for concrete finalized classes:
 * 87 (_Set)
 * 88 (_ConstSet)
Generating check for type argument 0: FinalizerEntry
Checks for Type
Checking for cid 55 (FinalizerEntry)
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rdi <- fp[2]
StaticCall:10( _runFinalizers@0150898<0> v2, using unchecked entrypoint)
ParallelMove rax <- C
DartReturn:12(v0)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
ParallelMove rcx <- C
ParallelMove fp[-3] <- rdi
CheckStackOverflow:8(stack=0, loop=0)
v104 <- LoadField(v2 T{_FinalizerImpl} . FinalizerBase.entries_collected) T{FinalizerEntry?}
StoreField(v2 T{_FinalizerImpl} . FinalizerBase.entries_collected = v0 T{Null?}, NoStoreBarrier)
v56 <- LoadField:88(v2 T{_FinalizerImpl} . Finalizer.callback {final}) T{_Closure}
ParallelMove fp[-2] <- rdx
ParallelMove rsi <- rax goto:88 B13
B13
  Loop 0
ParallelMove fp[-1] <- rsi
CheckStackOverflow:86(stack=0, loop=1)
Branch if StrictCompare:12(!==, v5, v0) goto (12, 14)
B12
  Loop 0
v61 <- LoadField(v5 T{FinalizerEntry} . FinalizerEntry.token) T{*?}
Branch if StrictCompare:18(!==, v61 T{Object??}, v5 T{FinalizerEntry}) goto (3, 4)
B3
  Loop 0
MoveArgument(sp[1] <- v56)
MoveArgument(sp[0] <- v61 T{Object??})
ParallelMove rax <- rdx
v20 <- ClosureCall:28( closure=v56<0>, v56, v61 T{Object??}) T{*?}
ParallelMove  goto:34 B5
B4
B5
  Loop 0
v99 <- LoadField(v2 T{_FinalizerImpl} . FinalizerBase.all_entries) T{_Set?}
ParallelMove rdi <- rdi, rsi <- rcx
v105 <- StaticCall:40( remove<0> v99 T{_Set}, v5 T{FinalizerEntry}) T{bool}
ParallelMove rsi <- fp[-1]
v51 <- LoadField(v5 T{FinalizerEntry} . FinalizerEntry.detach) T{*?}
ParallelMove fp[-4] <- rax
Branch if StrictCompare:44(!==, v51 T{Object??}, v0) goto (6, 10)
B6
  Loop 0
ParallelMove rcx <- fp[-3]
v94 <- LoadField(v2 T{_FinalizerImpl} . FinalizerBase.detachments) T{*?}
Branch if StrictCompare:12(===, v94 T{Expando?}, v0 T{Null?}) goto (19, 20)
B19
  Loop 0
ParallelMove rdx <- C
v37 <- AllocateObject:18(cls=Expando, v41 T{TypeArguments}) T{Expando}
ParallelMove rbx <- C, r10 <- C, rax <- rax
ParallelMove fp[-5] <- rax
v80 <- CreateArray:10(v81 T{TypeArguments}, v82 T{_Smi}) T{_List}
ParallelMove rax <- rax, rcx <- fp[-5]
StoreField(v37 T{Expando} . _data@0150898 = v80, NoStoreBarrier)
ParallelMove rbx <- C
StoreField(v37 T{Expando} . _used@0150898 = v120 T{_Smi} <int64>, NoStoreBarrier)
ParallelMove rax <- rcx, r8 <- fp[-3]
StoreField(v2 T{_FinalizerImpl} . FinalizerBase.detachments = v37 T{Expando})
ParallelMove rdi <- rcx goto:28 B21
B20
  Loop 0
ParallelMove r8 <- rcx, rbx <- C
ParallelMove rdi <- rdx goto:30 B21
B21
  Loop 0
ParallelMove rdi <- rdi, rsi <- fp[-4]
v16 <- StaticCall:52( []<0> v119 T{Expando}, v51 T{Object?}, using unchecked entrypoint) T{X0??}
ParallelMove rax <- rax
Branch if StrictCompare:54(===, v16, v0) goto (7, 8)
B7
B8
  Loop 0
v134 <- LoadClassId(<non-smi> v16 T{X0?}) int64
ParallelMove rcx <- rcx, rdi <- rax, rsi <- fp[-1]
v17 <- DispatchTableCall( cid=v134 Set.remove<0>, v16 T{X0?}, v5 T{FinalizerEntry})
ParallelMove  goto:68 B9
B9
B10
B11
  Loop 0
v28 <- LoadField(v5 T{FinalizerEntry} . FinalizerEntry.next) T{FinalizerEntry?}
ParallelMove rsi <- rsi, rcx <- C, rdi <- fp[-3], rdx <- fp[-2] goto:84 B13
B14
ParallelMove rax <- C
DartReturn:92(v0)
CheckStackOverflowSlowPath
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
v9 <- LoadStaticField:4(_ffi_resolver@8050071, CallsInitializer) T{_Closure}
ParallelMove rax <- rax
MoveArgument(sp[3] <- v9 T{_Closure})
MoveArgument(sp[2] <- v2)
MoveArgument(sp[1] <- v3)
MoveArgument(sp[0] <- v4)
ParallelMove rax <- rax
v6 <- ClosureCall:14( closure=v9 T{_Closure}<0>, v9 T{_Closure}, v2, v3, v4) T{*?}
ParallelMove rax <- rax
DartReturn:16(v6)
CheckStackOverflowSlowPath
B0
B2
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
MoveArgument(sp[2] <- v3)
MoveArgument(sp[1] <- v4)
MoveArgument(sp[0] <- v5)
v7 <- StaticCall:10( _ffi_resolver_function@8050071<0> v3, v4, v5) [-9223372036854775808, 9223372036854775807] T{int}
ParallelMove rax <- rax
DartReturn:12(v7)
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v4 <- LoadClassId(v2) int64
MoveArgument(sp[0] <- v2)
ParallelMove rcx <- rcx
v3 <- DispatchTableCall( cid=v4 Object.toString<0>, v2) T{String}
ParallelMove rax <- rax
DartReturn:12(v3 T{String})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[2]
v4 <- LoadClassId(v2) int64
MoveArgument(sp[0] <- v2)
ParallelMove rcx <- rcx
v3 <- DispatchTableCall( cid=v4 Object.hashCode<0>, v2) T{int}
ParallelMove rax <- rax
DartReturn:12(v3 T{int})
CheckStackOverflowSlowPath
B0
B1
Enter frame
PrologueOffset = 0
CheckStackOverflow:8(stack=0, loop=0)
ParallelMove rax <- fp[3]
v5 <- LoadClassId(v2) int64
MoveArgument(sp[1] <- v2)
MoveArgument(sp[0] <- v3)
ParallelMove rcx <- rcx
v4 <- DispatchTableCall( cid=v5 Object.==<0>, v2, v3) T{bool}
ParallelMove rax <- rax
DartReturn:12(v4 T{bool})
CheckStackOverflowSlowPath
